
Robot_Car_Hardware_Side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bdcc  0800bdcc  0000cdcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be0c  0800be0c  0000d38c  2**0
                  CONTENTS
  4 .ARM          00000008  0800be0c  0800be0c  0000ce0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be14  0800be14  0000d38c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be14  0800be14  0000ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be18  0800be18  0000ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000038c  20000000  0800be1c  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000038c  0800c1a8  0000d38c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000878  0800c1a8  0000d878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d38c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000257f0  00000000  00000000  0000d3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d9  00000000  00000000  00032bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  00037588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163a  00000000  00000000  00039260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c439  00000000  00000000  0003a89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002360c  00000000  00000000  00066cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e18d  00000000  00000000  0008a2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a846c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b40  00000000  00000000  001a84b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001afff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000038c 	.word	0x2000038c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bdb4 	.word	0x0800bdb4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000390 	.word	0x20000390
 8000214:	0800bdb4 	.word	0x0800bdb4

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000236:	f000 b9b5 	b.w	80005a4 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f84d 	bl	80002e8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f840 	bl	80002e8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f82f 	bl	80002e8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f821 	bl	80002e8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_uldivmod>:
 80002b8:	b953      	cbnz	r3, 80002d0 <__aeabi_uldivmod+0x18>
 80002ba:	b94a      	cbnz	r2, 80002d0 <__aeabi_uldivmod+0x18>
 80002bc:	2900      	cmp	r1, #0
 80002be:	bf08      	it	eq
 80002c0:	2800      	cmpeq	r0, #0
 80002c2:	bf1c      	itt	ne
 80002c4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002cc:	f000 b96a 	b.w	80005a4 <__aeabi_idiv0>
 80002d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d8:	f000 f806 	bl	80002e8 <__udivmoddi4>
 80002dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e4:	b004      	add	sp, #16
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Coms_IncIdx>:
#ifdef HAS_USB_COMMS
#include "usbd_cdc_if.h"
#endif
#include "usart.h"

static void Coms_IncIdx(uint8_t *idx) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	(*idx)++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
	if(*idx >= FIFO_SIZE) (*idx) = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d902      	bls.n	80005ca <Coms_IncIdx+0x22>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <ComsHandler_PacketToBuf>:

static void ComsHandler_PacketToBuf(DecodedPacket_t *packet, StringBuffer_t *buffer) {
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]

	if(packet->invalid) return;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7adb      	ldrb	r3, [r3, #11]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14c      	bne.n	8000682 <ComsHandler_PacketToBuf+0xac>
	buffer->length = 5 + packet->length;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7a9b      	ldrb	r3, [r3, #10]
 80005ec:	3305      	adds	r3, #5
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	701a      	strb	r2, [r3, #0]

	buffer->data[0] = START_BYTE;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	22aa      	movs	r2, #170	@ 0xaa
 80005f8:	705a      	strb	r2, [r3, #1]
	buffer->data[1] = packet->length;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a9a      	ldrb	r2, [r3, #10]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	709a      	strb	r2, [r3, #2]
	buffer->data[2] = (packet->command & 0xFF00) >> 8;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	70da      	strb	r2, [r3, #3]
	buffer->data[3] = packet->command & 0x00FF;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 800061a:	2304      	movs	r3, #4
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e00c      	b.n	800063a <ComsHandler_PacketToBuf+0x64>
		buffer->data[i] = packet->data[i-4];
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	1f1a      	subs	r2, r3, #4
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	440a      	add	r2, r1
 800062a:	7891      	ldrb	r1, [r2, #2]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3301      	adds	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	429a      	cmp	r2, r3
 8000644:	dbec      	blt.n	8000620 <ComsHandler_PacketToBuf+0x4a>
	}

	uint8_t checksum = buffer->data[0];
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 800064c:	2301      	movs	r3, #1
 800064e:	737b      	strb	r3, [r7, #13]
 8000650:	e009      	b.n	8000666 <ComsHandler_PacketToBuf+0x90>
		checksum ^= buffer->data[i];
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	785a      	ldrb	r2, [r3, #1]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	4053      	eors	r3, r2
 800065e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 8000660:	7b7b      	ldrb	r3, [r7, #13]
 8000662:	3301      	adds	r3, #1
 8000664:	737b      	strb	r3, [r7, #13]
 8000666:	7b7a      	ldrb	r2, [r7, #13]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	429a      	cmp	r2, r3
 8000670:	dbef      	blt.n	8000652 <ComsHandler_PacketToBuf+0x7c>
	}

	buffer->data[buffer->length - 1] = checksum;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	4413      	add	r3, r2
 800067c:	7bba      	ldrb	r2, [r7, #14]
 800067e:	705a      	strb	r2, [r3, #1]
 8000680:	e000      	b.n	8000684 <ComsHandler_PacketToBuf+0xae>
	if(packet->invalid) return;
 8000682:	bf00      	nop
}
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <ComsHandler_BufToPacket>:

static void ComsHandler_BufToPacket(DecodedPacket_t *packet, void *buf) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]

	StringBuffer_t *buffer = (StringBuffer_t *)buf;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	60fb      	str	r3, [r7, #12]

	uint8_t length = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]

	memset(packet->data, 0, MAX_DATA_SIZE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3302      	adds	r3, #2
 80006a4:	2208      	movs	r2, #8
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00b fb49 	bl	800bd40 <memset>

	packet->invalid = false;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	72da      	strb	r2, [r3, #11]

    if (buffer->data[0] != START_BYTE) {
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	2baa      	cmp	r3, #170	@ 0xaa
 80006ba:	d002      	beq.n	80006c2 <ComsHandler_BufToPacket+0x34>
    	packet->invalid = true; // Invalid start byte, discard packet
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2201      	movs	r2, #1
 80006c0:	72da      	strb	r2, [r3, #11]
    }

    packet->length = buffer->data[1];
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	789a      	ldrb	r2, [r3, #2]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	729a      	strb	r2, [r3, #10]
    if (buffer->data[1] > MAX_DATA_SIZE) {
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	d905      	bls.n	80006de <ComsHandler_BufToPacket+0x50>
		packet->invalid = true;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	72da      	strb	r2, [r3, #11]
		packet->length = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	729a      	strb	r2, [r3, #10]
	}

    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006de:	230c      	movs	r3, #12
 80006e0:	75bb      	strb	r3, [r7, #22]
 80006e2:	e00b      	b.n	80006fc <ComsHandler_BufToPacket+0x6e>
    	if(buffer->data[i] != 0) {
 80006e4:	7dbb      	ldrb	r3, [r7, #22]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <ComsHandler_BufToPacket+0x68>
    		length = i;
 80006f0:	7dbb      	ldrb	r3, [r7, #22]
 80006f2:	75fb      	strb	r3, [r7, #23]
    		break;
 80006f4:	e005      	b.n	8000702 <ComsHandler_BufToPacket+0x74>
    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006f6:	7dbb      	ldrb	r3, [r7, #22]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	75bb      	strb	r3, [r7, #22]
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d8f0      	bhi.n	80006e4 <ComsHandler_BufToPacket+0x56>
    	}
    }

    uint8_t checksum = buffer->data[0];
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 8000708:	2301      	movs	r3, #1
 800070a:	753b      	strb	r3, [r7, #20]
 800070c:	e009      	b.n	8000722 <ComsHandler_BufToPacket+0x94>
		checksum ^= buffer->data[i];
 800070e:	7d3b      	ldrb	r3, [r7, #20]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	785a      	ldrb	r2, [r3, #1]
 8000716:	7d7b      	ldrb	r3, [r7, #21]
 8000718:	4053      	eors	r3, r2
 800071a:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 800071c:	7d3b      	ldrb	r3, [r7, #20]
 800071e:	3301      	adds	r3, #1
 8000720:	753b      	strb	r3, [r7, #20]
 8000722:	7d3a      	ldrb	r2, [r7, #20]
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	429a      	cmp	r2, r3
 8000728:	d3f1      	bcc.n	800070e <ComsHandler_BufToPacket+0x80>
	}

	if(checksum != buffer->data[length]) {
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	785b      	ldrb	r3, [r3, #1]
 8000732:	7d7a      	ldrb	r2, [r7, #21]
 8000734:	429a      	cmp	r2, r3
 8000736:	d002      	beq.n	800073e <ComsHandler_BufToPacket+0xb0>
		packet->invalid = true;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	72da      	strb	r2, [r3, #11]
	}

    // Populate the command structure
    packet->command = (buffer->data[2] << 8) | buffer->data[3];
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	78db      	ldrb	r3, [r3, #3]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	b21b      	sxth	r3, r3
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	801a      	strh	r2, [r3, #0]

    if(packet->length != 0) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7a9b      	ldrb	r3, [r3, #10]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d014      	beq.n	8000788 <ComsHandler_BufToPacket+0xfa>
    	for(uint8_t i = 0; i < packet->length; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	74fb      	strb	r3, [r7, #19]
 8000762:	e00c      	b.n	800077e <ComsHandler_BufToPacket+0xf0>
    		packet->data[i] = buffer->data[4+i];
 8000764:	7cfb      	ldrb	r3, [r7, #19]
 8000766:	1d1a      	adds	r2, r3, #4
 8000768:	7cfb      	ldrb	r3, [r7, #19]
 800076a:	68f9      	ldr	r1, [r7, #12]
 800076c:	440a      	add	r2, r1
 800076e:	7851      	ldrb	r1, [r2, #1]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	460a      	mov	r2, r1
 8000776:	709a      	strb	r2, [r3, #2]
    	for(uint8_t i = 0; i < packet->length; i++) {
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	3301      	adds	r3, #1
 800077c:	74fb      	strb	r3, [r7, #19]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7a9b      	ldrb	r3, [r3, #10]
 8000782:	7cfa      	ldrb	r2, [r7, #19]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ed      	bcc.n	8000764 <ComsHandler_BufToPacket+0xd6>
    	}
    }
}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <UART_Send>:

// UART Send Function
static HAL_StatusTypeDef UART_Send(void *config, DecodedPacket_t *packet)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)config;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	61fb      	str	r3, [r7, #28]

    StringBuffer_t buf;
    memset(buf.data, 0, MAX_BUF_SIZE);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	3301      	adds	r3, #1
 80007a4:	220d      	movs	r2, #13
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f00b fac9 	bl	800bd40 <memset>
    ComsHandler_PacketToBuf(packet, &buf);
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	6838      	ldr	r0, [r7, #0]
 80007b6:	f7ff ff0e 	bl	80005d6 <ComsHandler_PacketToBuf>

    return HAL_UART_Transmit(huart, buf.data, buf.length, HAL_MAX_DELAY);
 80007ba:	7b3b      	ldrb	r3, [r7, #12]
 80007bc:	461a      	mov	r2, r3
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	1c59      	adds	r1, r3, #1
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007c8:	69f8      	ldr	r0, [r7, #28]
 80007ca:	f009 fe16 	bl	800a3fa <HAL_UART_Transmit>
 80007ce:	4603      	mov	r3, r0
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <UART_SetupReceive>:

// UART Receive Function
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer

static HAL_StatusTypeDef UART_SetupReceive(void *inst)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80007ea:	60bb      	str	r3, [r7, #8]

    memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4613      	mov	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	3360      	adds	r3, #96	@ 0x60
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	3305      	adds	r3, #5
 8000802:	220d      	movs	r2, #13
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00b fa9a 	bl	800bd40 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->rxBuf[instance->rxIdx].data, MAX_BUF_SIZE);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	3360      	adds	r3, #96	@ 0x60
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	3305      	adds	r3, #5
 8000822:	220d      	movs	r2, #13
 8000824:	4619      	mov	r1, r3
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f00b f9e8 	bl	800bbfc <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(DMA_UART_HANDLE, DMA_IT_HT);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <UART_SetupReceive+0x70>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <UART_SetupReceive+0x70>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 0204 	bic.w	r2, r2, #4
 800083a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000814 	.word	0x20000814

0800084c <UART_Receive>:

static HAL_StatusTypeDef UART_Receive(void *inst, uint8_t *data, uint16_t length)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	4613      	mov	r3, r2
 8000858:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	617b      	str	r3, [r7, #20]
    //UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;

    instance->rxBuf[instance->rxIdx].length = length;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	b2d8      	uxtb	r0, r3
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	460b      	mov	r3, r1
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	3364      	adds	r3, #100	@ 0x64
 8000876:	4602      	mov	r2, r0
 8000878:	701a      	strb	r2, [r3, #0]

    Coms_IncIdx(&instance->rxIdx);
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe93 	bl	80005a8 <Coms_IncIdx>

    UART_SetupReceive(inst);
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ffa8 	bl	80007d8 <UART_SetupReceive>
    //__HAL_DMA_DISABLE_IT(hdma_usart1_rx, DMA_IT_HT);

    return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <CAN_Send>:
}
#endif

// CAN Send Function
static HAL_StatusTypeDef CAN_Send(void *config, DecodedPacket_t *packet)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]

    // Only include data bytes 5 to N-1
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, &data[4]);
#endif

	return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <CAN_Receive>:

// CAN Receive Function
//going to be handled in an interrupt as with the all receive functions
static HAL_StatusTypeDef CAN_Receive(void *config, uint8_t *data, uint16_t length)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	4613      	mov	r3, r2
 80008b6:	80fb      	strh	r3, [r7, #6]
    data[3] = rxHeader.Identifier & 0xFF;       // Header byte 2
    for (uint8_t i = 0; i < dlc; i++) {
        data[4 + i] = canData[i];
    }
#endif
    return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <Comm_Init>:

// Initialize Communication Instance
void Comm_Init(ComsInterface_t *instance, CommType type, void *config)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	460b      	mov	r3, r1
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	72fb      	strb	r3, [r7, #11]
    instance->type = type;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	7afa      	ldrb	r2, [r7, #11]
 80008da:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    instance->config = config;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    instance->decodeIdx = 0;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2200      	movs	r2, #0
 80008ea:	705a      	strb	r2, [r3, #1]
    instance->rxIdx = 0;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
    instance->processIdx = 0;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2200      	movs	r2, #0
 80008f6:	709a      	strb	r2, [r3, #2]

    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 80008f8:	2300      	movs	r3, #0
 80008fa:	75fb      	strb	r3, [r7, #23]
 80008fc:	e00c      	b.n	8000918 <Comm_Init+0x50>
    	instance->rxPacket[i].invalid = true;
 80008fe:	7dfa      	ldrb	r2, [r7, #23]
 8000900:	68f9      	ldr	r1, [r7, #12]
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	440b      	add	r3, r1
 800090c:	330f      	adds	r3, #15
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	3301      	adds	r3, #1
 8000916:	75fb      	strb	r3, [r7, #23]
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	2b07      	cmp	r3, #7
 800091c:	d9ef      	bls.n	80008fe <Comm_Init+0x36>
    }

    if (type == COMM_UART) {
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10f      	bne.n	8000944 <Comm_Init+0x7c>
        instance->interface.Send = UART_Send;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <Comm_Init+0x9c>)
 8000928:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->interface.Receive = UART_Receive;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <Comm_Init+0xa0>)
 8000930:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <Comm_Init+0xa4>)
 8000938:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        UART_SetupReceive(instance);
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff ff4b 	bl	80007d8 <UART_SetupReceive>
#endif
    else if (type == COMM_CAN) {
        instance->interface.Send = CAN_Send;
        instance->interface.Receive = CAN_Receive;
    }
}
 8000942:	e00a      	b.n	800095a <Comm_Init+0x92>
    else if (type == COMM_CAN) {
 8000944:	7afb      	ldrb	r3, [r7, #11]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d107      	bne.n	800095a <Comm_Init+0x92>
        instance->interface.Send = CAN_Send;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <Comm_Init+0xa8>)
 800094e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->interface.Receive = CAN_Receive;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <Comm_Init+0xac>)
 8000956:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08000791 	.word	0x08000791
 8000968:	0800084d 	.word	0x0800084d
 800096c:	0800068f 	.word	0x0800068f
 8000970:	08000893 	.word	0x08000893
 8000974:	080008ab 	.word	0x080008ab

08000978 <Comm_Send>:

// Wrapper for Sending Data
HAL_StatusTypeDef Comm_Send(ComsInterface_t *instance, DecodedPacket_t *packet)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	if(packet->invalid) return HAL_ERROR;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	7adb      	ldrb	r3, [r3, #11]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <Comm_Send+0x16>
 800098a:	2301      	movs	r3, #1
 800098c:	e009      	b.n	80009a2 <Comm_Send+0x2a>

    return instance->interface.Send(instance->config, packet);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 800099a:	6839      	ldr	r1, [r7, #0]
 800099c:	4610      	mov	r0, r2
 800099e:	4798      	blx	r3
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <Comm_Receive>:

// Wrapper for Receiving Data
HAL_StatusTypeDef Comm_Receive(ComsInterface_t *instance, uint8_t *data, uint16_t length)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	4613      	mov	r3, r2
 80009b6:	80fb      	strh	r3, [r7, #6]
    return instance->interface.Receive(instance, data, length);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80009be:	88fa      	ldrh	r2, [r7, #6]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	4798      	blx	r3
 80009c6:	4603      	mov	r3, r0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <Comm_Process>:

void Comm_Process(ComsInterface_t *instance) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

	while (instance->decodeIdx != instance->rxIdx) {
 80009d8:	e01e      	b.n	8000a18 <Comm_Process+0x48>
		instance->interface.ConvertToPacket(&instance->rxPacket[instance->decodeIdx], &instance->rxBuf[instance->decodeIdx]);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	4619      	mov	r1, r3
 80009e6:	460b      	mov	r3, r1
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	440b      	add	r3, r1
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	440b      	add	r3, r1
 80009f2:	1d18      	adds	r0, r3, #4
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	4619      	mov	r1, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	1a5b      	subs	r3, r3, r1
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	3360      	adds	r3, #96	@ 0x60
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	440b      	add	r3, r1
 8000a08:	3304      	adds	r3, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4790      	blx	r2
		Coms_IncIdx(&instance->decodeIdx);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fdc8 	bl	80005a8 <Coms_IncIdx>
	while (instance->decodeIdx != instance->rxIdx) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	785a      	ldrb	r2, [r3, #1]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d1da      	bne.n	80009da <Comm_Process+0xa>
	}
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <Comm_GetPacket>:

DecodedPacket_t Comm_GetPacket(ComsInterface_t *instance) {
 8000a2e:	b590      	push	{r4, r7, lr}
 8000a30:	b087      	sub	sp, #28
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	DecodedPacket_t invalidPacket = {
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	2301      	movs	r3, #1
 8000a46:	74fb      	strb	r3, [r7, #19]
			.invalid = true
	};
	if(instance->decodeIdx == instance->processIdx) {
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	785a      	ldrb	r2, [r3, #1]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d108      	bne.n	8000a66 <Comm_GetPacket+0x38>
		return invalidPacket;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	461c      	mov	r4, r3
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a5e:	6020      	str	r0, [r4, #0]
 8000a60:	6061      	str	r1, [r4, #4]
 8000a62:	60a2      	str	r2, [r4, #8]
 8000a64:	e015      	b.n	8000a92 <Comm_GetPacket+0x64>
	}
	uint8_t idx = instance->processIdx;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	789b      	ldrb	r3, [r3, #2]
 8000a6a:	75fb      	strb	r3, [r7, #23]

	Coms_IncIdx(&instance->processIdx);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd99 	bl	80005a8 <Coms_IncIdx>

	return instance->rxPacket[idx];
 8000a76:	7dfa      	ldrb	r2, [r7, #23]
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	6839      	ldr	r1, [r7, #0]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	440b      	add	r3, r1
 8000a86:	4604      	mov	r4, r0
 8000a88:	3304      	adds	r3, #4
 8000a8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a8c:	6020      	str	r0, [r4, #0]
 8000a8e:	6061      	str	r1, [r4, #4]
 8000a90:	60a2      	str	r2, [r4, #8]
}
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}

08000a9a <IMU_WriteRegister>:

#include "IMU.h"
#include <stdio.h> // For debugging with printf

// Internal helper function: Write a register
static HAL_StatusTypeDef IMU_WriteRegister(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t value) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	70fb      	strb	r3, [r7, #3]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = { reg, value };
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	733b      	strb	r3, [r7, #12]
 8000aae:	78bb      	ldrb	r3, [r7, #2]
 8000ab0:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6858      	ldr	r0, [r3, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	891b      	ldrh	r3, [r3, #8]
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	f005 fd33 	bl	8006528 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(imu->hspi, data, 2, HAL_MAX_DELAY);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ace:	2202      	movs	r2, #2
 8000ad0:	f006 fe31 	bl	8007736 <HAL_SPI_Transmit>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6858      	ldr	r0, [r3, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	891b      	ldrh	r3, [r3, #8]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f005 fd20 	bl	8006528 <HAL_GPIO_WritePin>

    return status;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <IMU_BurstRead>:

// Internal helper function: Burst read
static HAL_StatusTypeDef IMU_BurstRead(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t *buffer, uint8_t length) {
 8000af2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af6:	b08f      	sub	sp, #60	@ 0x3c
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	6178      	str	r0, [r7, #20]
 8000afc:	60fa      	str	r2, [r7, #12]
 8000afe:	461a      	mov	r2, r3
 8000b00:	460b      	mov	r3, r1
 8000b02:	74fb      	strb	r3, [r7, #19]
 8000b04:	4613      	mov	r3, r2
 8000b06:	74bb      	strb	r3, [r7, #18]
 8000b08:	466b      	mov	r3, sp
 8000b0a:	461e      	mov	r6, r3

    uint8_t tx_data[length+1];
 8000b0c:	7cbb      	ldrb	r3, [r7, #18]
 8000b0e:	1c59      	adds	r1, r3, #1
 8000b10:	1e4b      	subs	r3, r1, #1
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b14:	460a      	mov	r2, r1
 8000b16:	2300      	movs	r3, #0
 8000b18:	603a      	str	r2, [r7, #0]
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	00c3      	lsls	r3, r0, #3
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b2e:	6838      	ldr	r0, [r7, #0]
 8000b30:	00c2      	lsls	r2, r0, #3
 8000b32:	460a      	mov	r2, r1
 8000b34:	2300      	movs	r3, #0
 8000b36:	4692      	mov	sl, r2
 8000b38:	469b      	mov	fp, r3
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000b46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000b4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b4e:	460b      	mov	r3, r1
 8000b50:	3307      	adds	r3, #7
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	ebad 0d03 	sub.w	sp, sp, r3
 8000b5a:	ab02      	add	r3, sp, #8
 8000b5c:	3300      	adds	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_data[length+1];
 8000b60:	7cbb      	ldrb	r3, [r7, #18]
 8000b62:	1c59      	adds	r1, r3, #1
 8000b64:	1e4b      	subs	r3, r1, #1
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	460a      	mov	r2, r1
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	4699      	mov	r9, r3
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b84:	460a      	mov	r2, r1
 8000b86:	2300      	movs	r3, #0
 8000b88:	4614      	mov	r4, r2
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	00eb      	lsls	r3, r5, #3
 8000b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b9a:	00e2      	lsls	r2, r4, #3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	08db      	lsrs	r3, r3, #3
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ba8:	ab02      	add	r3, sp, #8
 8000baa:	3300      	adds	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    tx_data[0] = reg | IMU_READ_BIT;
 8000bae:	7cfb      	ldrb	r3, [r7, #19]
 8000bb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= length; i++) {
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000bc0:	e00f      	b.n	8000be2 <IMU_BurstRead+0xf0>
    	tx_data[i] = (tx_data[i-1]+1);
 8000bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bca:	5cd2      	ldrb	r2, [r2, r3]
 8000bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd0:	3201      	adds	r2, #1
 8000bd2:	b2d1      	uxtb	r1, r2
 8000bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bd6:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 1; i <= length; i++) {
 8000bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bdc:	3301      	adds	r3, #1
 8000bde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000be2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000be6:	7cbb      	ldrb	r3, [r7, #18]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d9ea      	bls.n	8000bc2 <IMU_BurstRead+0xd0>
    }

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	6858      	ldr	r0, [r3, #4]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	891b      	ldrh	r3, [r3, #8]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f005 fc96 	bl	8006528 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx_data, rx_data, length + 1, HAL_MAX_DELAY);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	7cbb      	ldrb	r3, [r7, #18]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3301      	adds	r3, #1
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c0c:	9200      	str	r2, [sp, #0]
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c12:	f006 ff06 	bl	8007a22 <HAL_SPI_TransmitReceive>
 8000c16:	4603      	mov	r3, r0
 8000c18:	76fb      	strb	r3, [r7, #27]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	6858      	ldr	r0, [r3, #4]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	891b      	ldrh	r3, [r3, #8]
 8000c22:	2201      	movs	r2, #1
 8000c24:	4619      	mov	r1, r3
 8000c26:	f005 fc7f 	bl	8006528 <HAL_GPIO_WritePin>

    for(uint8_t i = 1; i <= length; i++) {
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000c30:	e00e      	b.n	8000c50 <IMU_BurstRead+0x15e>
    	*(buffer+(i-1)) = rx_data[i];
 8000c32:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000c36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	68f9      	ldr	r1, [r7, #12]
 8000c3e:	440b      	add	r3, r1
 8000c40:	69f9      	ldr	r1, [r7, #28]
 8000c42:	5c8a      	ldrb	r2, [r1, r2]
 8000c44:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= length; i++) {
 8000c46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000c50:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000c54:	7cbb      	ldrb	r3, [r7, #18]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d9eb      	bls.n	8000c32 <IMU_BurstRead+0x140>
	}


    return status;
 8000c5a:	7efb      	ldrb	r3, [r7, #27]
 8000c5c:	46b5      	mov	sp, r6
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3734      	adds	r7, #52	@ 0x34
 8000c62:	46bd      	mov	sp, r7
 8000c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c68 <IMU_Init>:

// Initialize the IMU
HAL_StatusTypeDef IMU_Init(IMU_HandleTypeDef *imu) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
//
//    for(uint8_t i = 0; i < 14; i++) {
//    	data_buffer[i] = 0;
//    }

    if (IMU_WriteRegister(imu, 0x76, 0x00) != HAL_OK) { //userbank 0 select
 8000c74:	2200      	movs	r2, #0
 8000c76:	2176      	movs	r1, #118	@ 0x76
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff0e 	bl	8000a9a <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
	HAL_Delay(1);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f002 ff8a 	bl	8003b98 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_DEVICE_CONFIG_REG, IMU_DEVICE_CONFIG_RESET) != HAL_OK) {
 8000c84:	2201      	movs	r2, #1
 8000c86:	2111      	movs	r1, #17
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff06 	bl	8000a9a <IMU_WriteRegister>
    	//   return HAL_ERROR;
	}

    HAL_Delay(5);
 8000c8e:	2005      	movs	r0, #5
 8000c90:	f002 ff82 	bl	8003b98 <HAL_Delay>

    if (IMU_BurstRead(imu, IMU_WHO_AM_I_REG, &who_am_i, 1) != HAL_OK || who_am_i != IMU_WHO_AM_I_EXPECTED) {
 8000c94:	f107 020f 	add.w	r2, r7, #15
 8000c98:	2301      	movs	r3, #1
 8000c9a:	2175      	movs	r1, #117	@ 0x75
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff28 	bl	8000af2 <IMU_BurstRead>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f002 ff76 	bl	8003b98 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_PWR_MGMT_0, IMU_ENABLE_ACCEL_GYRO) != HAL_OK) {
 8000cac:	220f      	movs	r2, #15
 8000cae:	214e      	movs	r1, #78	@ 0x4e
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fef2 	bl	8000a9a <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f002 ff6e 	bl	8003b98 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_GYRO_CONFIG_REG, IMU_GYRO_CONFIG_DATA) != HAL_OK) {
 8000cbc:	2248      	movs	r2, #72	@ 0x48
 8000cbe:	214f      	movs	r1, #79	@ 0x4f
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff feea 	bl	8000a9a <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f002 ff66 	bl	8003b98 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_ACCEL_CONFIG_REG, IMU_ACCEL_CONFIG_DATA) != HAL_OK) {
 8000ccc:	2248      	movs	r2, #72	@ 0x48
 8000cce:	2150      	movs	r1, #80	@ 0x50
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fee2 	bl	8000a9a <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f002 ff5e 	bl	8003b98 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG0_REG, IMU_INT_CONFIG0_DATA) != HAL_OK) {
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2163      	movs	r1, #99	@ 0x63
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff feda 	bl	8000a9a <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
    HAL_Delay(1);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f002 ff56 	bl	8003b98 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_SOURCE_REG, IMU_INT_ENABLE_DATA_RDY) != HAL_OK) {
 8000cec:	2208      	movs	r2, #8
 8000cee:	2165      	movs	r1, #101	@ 0x65
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fed2 	bl	8000a9a <IMU_WriteRegister>
       // return HAL_ERROR;
    }
    HAL_Delay(1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f002 ff4e 	bl	8003b98 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG_REG, IMU_INT_ACTIVE_HIGH) != HAL_OK) {
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	2114      	movs	r1, #20
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff feca 	bl	8000a9a <IMU_WriteRegister>
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f002 ff46 	bl	8003b98 <HAL_Delay>


    return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <IMU_ReadAll>:

    return HAL_OK;
}

// Read all data (accelerometer, gyroscope, and temperature)
HAL_StatusTypeDef IMU_ReadAll(IMU_HandleTypeDef *imu) {
 8000d16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	466b      	mov	r3, sp
 8000d22:	461e      	mov	r6, r3
	uint8_t length = 14;
 8000d24:	230e      	movs	r3, #14
 8000d26:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[length];
 8000d28:	7df9      	ldrb	r1, [r7, #23]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	b2cb      	uxtb	r3, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	4698      	mov	r8, r3
 8000d36:	4691      	mov	r9, r2
 8000d38:	f04f 0200 	mov.w	r2, #0
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d4c:	b2cb      	uxtb	r3, r1
 8000d4e:	2200      	movs	r2, #0
 8000d50:	461c      	mov	r4, r3
 8000d52:	4615      	mov	r5, r2
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	f04f 0300 	mov.w	r3, #0
 8000d5c:	00eb      	lsls	r3, r5, #3
 8000d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d62:	00e2      	lsls	r2, r4, #3
 8000d64:	460b      	mov	r3, r1
 8000d66:	3307      	adds	r3, #7
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d70:	466b      	mov	r3, sp
 8000d72:	3300      	adds	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
    uint8_t intStatus = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	72fb      	strb	r3, [r7, #11]
    if (IMU_BurstRead(imu, IMU_TEMP_OUT_H, raw_data, length) != HAL_OK) {
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	211d      	movs	r1, #29
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff feb6 	bl	8000af2 <IMU_BurstRead>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <IMU_ReadAll+0x7a>
        return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e059      	b.n	8000e44 <IMU_ReadAll+0x12e>
    }

    imu->accel[0] = (raw_data[2] << 8) | raw_data[3];
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	789b      	ldrb	r3, [r3, #2]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	78db      	ldrb	r3, [r3, #3]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	825a      	strh	r2, [r3, #18]
    imu->accel[1] = (raw_data[4] << 8) | raw_data[5];
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	795b      	ldrb	r3, [r3, #5]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	829a      	strh	r2, [r3, #20]
    imu->accel[2] = (raw_data[6] << 8) | raw_data[7];
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	799b      	ldrb	r3, [r3, #6]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	79db      	ldrb	r3, [r3, #7]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	82da      	strh	r2, [r3, #22]

    imu->temperature = (raw_data[0] << 8) | raw_data[1];
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	83da      	strh	r2, [r3, #30]

    imu->gyro[0] = (raw_data[8] << 8) | raw_data[9];
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	7a1b      	ldrb	r3, [r3, #8]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	7a5b      	ldrb	r3, [r3, #9]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	831a      	strh	r2, [r3, #24]
    imu->gyro[1] = (raw_data[10] << 8) | raw_data[11];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	7a9b      	ldrb	r3, [r3, #10]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	7adb      	ldrb	r3, [r3, #11]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	835a      	strh	r2, [r3, #26]
    imu->gyro[2] = (raw_data[12] << 8) | raw_data[13];
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	7b1b      	ldrb	r3, [r3, #12]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	7b5b      	ldrb	r3, [r3, #13]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	839a      	strh	r2, [r3, #28]

    if (IMU_BurstRead(imu, IMU_INT_STATUS_REG, &intStatus, 1) != HAL_OK) {
 8000e2a:	f107 020b 	add.w	r2, r7, #11
 8000e2e:	2301      	movs	r3, #1
 8000e30:	212d      	movs	r1, #45	@ 0x2d
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fe5d 	bl	8000af2 <IMU_BurstRead>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <IMU_ReadAll+0x12c>
		return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <IMU_ReadAll+0x12e>
	}

    return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	46b5      	mov	sp, r6
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e50 <IMU_InterruptHandler>:

// Interrupt handler
void IMU_InterruptHandler(IMU_HandleTypeDef *imu, uint16_t GPIO_pin) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
    if (GPIO_pin != imu->int_pin) return;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	8a1b      	ldrh	r3, [r3, #16]
 8000e60:	887a      	ldrh	r2, [r7, #2]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d103      	bne.n	8000e6e <IMU_InterruptHandler+0x1e>

    if (IMU_ReadAll(imu) == HAL_OK) {
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff55 	bl	8000d16 <IMU_ReadAll>
 8000e6c:	e000      	b.n	8000e70 <IMU_InterruptHandler+0x20>
    if (GPIO_pin != imu->int_pin) return;
 8000e6e:	bf00      	nop
        // Data successfully read
    } else {
        // Handle read error
    }
}
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f00a ff55 	bl	800bd40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e96:	4b32      	ldr	r3, [pc, #200]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000e98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e9e:	4b30      	ldr	r3, [pc, #192]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ea0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ea4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eac:	4b2c      	ldr	r3, [pc, #176]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb8:	4b29      	ldr	r3, [pc, #164]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec4:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eca:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ed0:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed6:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ede:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eea:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f00:	4817      	ldr	r0, [pc, #92]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000f02:	f003 f841 	bl	8003f88 <HAL_ADC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f0c:	f000 fe3b 	bl	8001b86 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4811      	ldr	r0, [pc, #68]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000f1c:	f003 fe56 	bl	8004bcc <HAL_ADCEx_MultiModeConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f26:	f000 fe2e 	bl	8001b86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_ADC1_Init+0xec>)
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2e:	2306      	movs	r3, #6
 8000f30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f36:	237f      	movs	r3, #127	@ 0x7f
 8000f38:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	@ (8000f60 <MX_ADC1_Init+0xe8>)
 8000f48:	f003 f9da 	bl	8004300 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f52:	f000 fe18 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3730      	adds	r7, #48	@ 0x30
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200003a8 	.word	0x200003a8
 8000f64:	10c00010 	.word	0x10c00010

08000f68 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	@ 0x30
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00a fedd 	bl	800bd40 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f86:	4b31      	ldr	r3, [pc, #196]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000f88:	4a31      	ldr	r2, [pc, #196]	@ (8001050 <MX_ADC3_Init+0xe8>)
 8000f8a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000f8e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f92:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa6:	4b29      	ldr	r3, [pc, #164]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fac:	4b27      	ldr	r3, [pc, #156]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fae:	2204      	movs	r2, #4
 8000fb0:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fb2:	4b26      	ldr	r3, [pc, #152]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000fbe:	4b23      	ldr	r3, [pc, #140]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fee:	4817      	ldr	r0, [pc, #92]	@ (800104c <MX_ADC3_Init+0xe4>)
 8000ff0:	f002 ffca 	bl	8003f88 <HAL_ADC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000ffa:	f000 fdc4 	bl	8001b86 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001006:	4619      	mov	r1, r3
 8001008:	4810      	ldr	r0, [pc, #64]	@ (800104c <MX_ADC3_Init+0xe4>)
 800100a:	f003 fddf 	bl	8004bcc <HAL_ADCEx_MultiModeConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001014:	f000 fdb7 	bl	8001b86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_ADC3_Init+0xec>)
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101c:	2306      	movs	r3, #6
 800101e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001024:	237f      	movs	r3, #127	@ 0x7f
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001028:	2304      	movs	r3, #4
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_ADC3_Init+0xe4>)
 8001036:	f003 f963 	bl	8004300 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001040:	f000 fda1 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3730      	adds	r7, #48	@ 0x30
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000414 	.word	0x20000414
 8001050:	50000400 	.word	0x50000400
 8001054:	1d500080 	.word	0x1d500080

08001058 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0a2      	sub	sp, #136	@ 0x88
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	2254      	movs	r2, #84	@ 0x54
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00a fe61 	bl	800bd40 <memset>
  if(adcHandle->Instance==ADC1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001086:	d14e      	bne.n	8001126 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001088:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800108c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800108e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001092:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4618      	mov	r0, r3
 800109a:	f006 f853 	bl	8007144 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010a4:	f000 fd6f 	bl	8001b86 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010a8:	4b4a      	ldr	r3, [pc, #296]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	4a49      	ldr	r2, [pc, #292]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b4:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b44      	ldr	r3, [pc, #272]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c4:	4a43      	ldr	r2, [pc, #268]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010cc:	4b41      	ldr	r3, [pc, #260]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b3e      	ldr	r3, [pc, #248]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	4a3d      	ldr	r2, [pc, #244]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e4:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOARD_TEMP_Pin;
 80010f0:	2308      	movs	r3, #8
 80010f2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(BOARD_TEMP_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001106:	f005 f875 	bl	80061f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMC_CURRSENSE_Pin;
 800110a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800110e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001110:	2303      	movs	r3, #3
 8001112:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800111c:	4619      	mov	r1, r3
 800111e:	482e      	ldr	r0, [pc, #184]	@ (80011d8 <HAL_ADC_MspInit+0x180>)
 8001120:	f005 f868 	bl	80061f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001124:	e051      	b.n	80011ca <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a2c      	ldr	r2, [pc, #176]	@ (80011dc <HAL_ADC_MspInit+0x184>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d14c      	bne.n	80011ca <HAL_ADC_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001130:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001134:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001136:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800113a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	4618      	mov	r0, r3
 8001142:	f005 ffff 	bl	8007144 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 800114c:	f000 fd1b 	bl	8001b86 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	4a1f      	ldr	r2, [pc, #124]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_ADC_MspInit+0x17c>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LMC_CURRSENSE_Pin;
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011a8:	4619      	mov	r1, r3
 80011aa:	480d      	ldr	r0, [pc, #52]	@ (80011e0 <HAL_ADC_MspInit+0x188>)
 80011ac:	f005 f822 	bl	80061f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBAT_SW_DIAG_Pin;
 80011b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b6:	2303      	movs	r3, #3
 80011b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VBAT_SW_DIAG_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <HAL_ADC_MspInit+0x18c>)
 80011c6:	f005 f815 	bl	80061f4 <HAL_GPIO_Init>
}
 80011ca:	bf00      	nop
 80011cc:	3788      	adds	r7, #136	@ 0x88
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	50000400 	.word	0x50000400
 80011e0:	48001000 	.word	0x48001000
 80011e4:	48000c00 	.word	0x48000c00

080011e8 <SendResponse>:
		COMMAND_0x0181
};

// Function to initialize the Command Handler

static void SendResponse(ComsInterface_t *interface) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	Comm_Send(interface, &response);
 80011f0:	4903      	ldr	r1, [pc, #12]	@ (8001200 <SendResponse+0x18>)
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fbc0 	bl	8000978 <Comm_Send>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000480 	.word	0x20000480

08001204 <SetResponse>:

static void SetResponse(uint16_t command, uint8_t length, uint8_t *data) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	603a      	str	r2, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
 8001210:	460b      	mov	r3, r1
 8001212:	717b      	strb	r3, [r7, #5]
	response.invalid = false;
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <SetResponse+0x3c>)
 8001216:	2200      	movs	r2, #0
 8001218:	72da      	strb	r2, [r3, #11]
	response.command = command;
 800121a:	4a09      	ldr	r2, [pc, #36]	@ (8001240 <SetResponse+0x3c>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	8013      	strh	r3, [r2, #0]
	response.length = sizeof(*data);
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <SetResponse+0x3c>)
 8001222:	2201      	movs	r2, #1
 8001224:	729a      	strb	r2, [r3, #10]
	memset(response.data, 0, MAX_DATA_SIZE);
 8001226:	2208      	movs	r2, #8
 8001228:	2100      	movs	r1, #0
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <SetResponse+0x40>)
 800122c:	f00a fd88 	bl	800bd40 <memset>
	memcpy(response.data, data, sizeof(*data));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <SetResponse+0x3c>)
 8001236:	709a      	strb	r2, [r3, #2]
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000480 	.word	0x20000480
 8001244:	20000482 	.word	0x20000482

08001248 <Response_OK>:

static void Response_OK() {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_OK, 0, NULL);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	20ff      	movs	r0, #255	@ 0xff
 8001252:	f7ff ffd7 	bl	8001204 <SetResponse>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}

0800125a <Response_Invalid>:

static void Response_Invalid() {
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_INVALID, 0, NULL);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	20fe      	movs	r0, #254	@ 0xfe
 8001264:	f7ff ffce 	bl	8001204 <SetResponse>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <makeInt16_t>:

static int16_t makeInt16_t(uint8_t *val1, uint8_t *val2) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	return (*val1 << 8) | *val2;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <CommandHandler_ProcessCommand>:
void CommandHandler_Init(void) {
    // Initialize any peripherals or variables related to command handling
    // Example: GPIO, Timers, etc.
}
// Function to process a received command
void CommandHandler_ProcessCommand(ComsInterface_t *interface, RobotSystem *robot) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
    // Check for NULL pointer
	DecodedPacket_t packet = Comm_GetPacket(interface);
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fbc2 	bl	8000a2e <Comm_GetPacket>

	if(packet.invalid) {
 80012aa:	7cfb      	ldrb	r3, [r7, #19]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <CommandHandler_ProcessCommand+0x28>
		Response_Invalid();
 80012b0:	f7ff ffd3 	bl	800125a <Response_Invalid>
		SendResponse(interface);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff97 	bl	80011e8 <SendResponse>
		return;
 80012ba:	e01d      	b.n	80012f8 <CommandHandler_ProcessCommand+0x64>
	}

	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e017      	b.n	80012f2 <CommandHandler_ProcessCommand+0x5e>
		if (commandTable[i].commandID == packet.command) {
 80012c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001300 <CommandHandler_ProcessCommand+0x6c>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80012ca:	893b      	ldrh	r3, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d10d      	bne.n	80012ec <CommandHandler_ProcessCommand+0x58>
			commandTable[i].handler(&packet, robot);
 80012d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <CommandHandler_ProcessCommand+0x6c>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4413      	add	r3, r2
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f107 0208 	add.w	r2, r7, #8
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	4610      	mov	r0, r2
 80012e2:	4798      	blx	r3
			SendResponse(interface);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff7f 	bl	80011e8 <SendResponse>
			return;
 80012ea:	e005      	b.n	80012f8 <CommandHandler_ProcessCommand+0x64>
	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	d9e4      	bls.n	80012c2 <CommandHandler_ProcessCommand+0x2e>
		}
	}
}
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000

08001304 <Handle_SetMotorEnable>:

void Handle_SetMotorEnable(DecodedPacket_t *packet, RobotSystem *robot) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	if(packet->length != 1) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7a9b      	ldrb	r3, [r3, #10]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d002      	beq.n	800131c <Handle_SetMotorEnable+0x18>
		Response_Invalid();
 8001316:	f7ff ffa0 	bl	800125a <Response_Invalid>
		return;
 800131a:	e011      	b.n	8001340 <Handle_SetMotorEnable+0x3c>
	}

	uint8_t data = packet->data[0] > 0 ? 1 : 0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	73fb      	strb	r3, [r7, #15]
	RobotSystem_SetEnablePin(robot, data);
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf14      	ite	ne
 8001332:	2301      	movne	r3, #1
 8001334:	2300      	moveq	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	6838      	ldr	r0, [r7, #0]
 800133c:	f001 fd0c 	bl	8002d58 <RobotSystem_SetEnablePin>
}
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <Handle_SetMotorSpeed>:

void Handle_SetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]

	if(packet->length != 4) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7a9b      	ldrb	r3, [r3, #10]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d002      	beq.n	800135e <Handle_SetMotorSpeed+0x18>
		Response_Invalid();
 8001358:	f7ff ff7f 	bl	800125a <Response_Invalid>
		return;
 800135c:	e01d      	b.n	800139a <Handle_SetMotorSpeed+0x54>
	}

	int16_t leftSpeed = makeInt16_t(&packet->data[0], &packet->data[1]);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1c9a      	adds	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3303      	adds	r3, #3
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff ff7f 	bl	800126c <makeInt16_t>
 800136e:	4603      	mov	r3, r0
 8001370:	81fb      	strh	r3, [r7, #14]
	int16_t rightSpeed = makeInt16_t(&packet->data[2], &packet->data[3]);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	1d1a      	adds	r2, r3, #4
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3305      	adds	r3, #5
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff ff75 	bl	800126c <makeInt16_t>
 8001382:	4603      	mov	r3, r0
 8001384:	81bb      	strh	r3, [r7, #12]
	RobotSystem_SetSpeed(robot, leftSpeed, rightSpeed);
 8001386:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800138a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800138e:	4619      	mov	r1, r3
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f001 fc2b 	bl	8002bec <RobotSystem_SetSpeed>

	Response_OK();
 8001396:	f7ff ff57 	bl	8001248 <Response_OK>
}
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Handle_SetMotorStop>:

void Handle_SetMotorStop(DecodedPacket_t *packet, RobotSystem *robot) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	RobotSystem_SetSpeed(robot, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f001 fc1c 	bl	8002bec <RobotSystem_SetSpeed>

	Response_OK();
 80013b4:	f7ff ff48 	bl	8001248 <Response_OK>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <Handle_SetOneMotorSpeed>:

void Handle_SetOneMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]

	if(packet->length != 2) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7a9b      	ldrb	r3, [r3, #10]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d002      	beq.n	80013d8 <Handle_SetOneMotorSpeed+0x18>
		Response_Invalid();
 80013d2:	f7ff ff42 	bl	800125a <Response_Invalid>
		return;
 80013d6:	e021      	b.n	800141c <Handle_SetOneMotorSpeed+0x5c>
	}

	int16_t speed = makeInt16_t(&packet->data[0], &packet->data[1]);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1c9a      	adds	r2, r3, #2
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3303      	adds	r3, #3
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f7ff ff42 	bl	800126c <makeInt16_t>
 80013e8:	4603      	mov	r3, r0
 80013ea:	81fb      	strh	r3, [r7, #14]

	if(packet->command == 0x0103) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	f240 1203 	movw	r2, #259	@ 0x103
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d106      	bne.n	8001406 <Handle_SetOneMotorSpeed+0x46>
		RobotSystem_SetLeftSpeed(robot, speed);
 80013f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013fc:	4619      	mov	r1, r3
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f001 fc1a 	bl	8002c38 <RobotSystem_SetLeftSpeed>
 8001404:	e00a      	b.n	800141c <Handle_SetOneMotorSpeed+0x5c>
	} else if(packet->command == 0x0104) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800140e:	d105      	bne.n	800141c <Handle_SetOneMotorSpeed+0x5c>
		RobotSystem_SetRightSpeed(robot, speed);
 8001410:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001414:	4619      	mov	r1, r3
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f001 fc23 	bl	8002c62 <RobotSystem_SetRightSpeed>
	}
}
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <Handle_GetMotorPosition>:

void Handle_GetMotorPosition(DecodedPacket_t *packet, RobotSystem *robot) {
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
	int16_t leftPos;
	int16_t rightPos;
	RobotSystem_GetMotorPosition(robot, &leftPos, &rightPos);
 800142c:	f107 020c 	add.w	r2, r7, #12
 8001430:	f107 030e 	add.w	r3, r7, #14
 8001434:	4619      	mov	r1, r3
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f001 fc2a 	bl	8002c90 <RobotSystem_GetMotorPosition>

	uint8_t data[4];

	data[0] = leftPos >> 8;
 800143c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001440:	121b      	asrs	r3, r3, #8
 8001442:	b21b      	sxth	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	723b      	strb	r3, [r7, #8]
	data[1] = leftPos & 0xFF;
 8001448:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	727b      	strb	r3, [r7, #9]
	data[2] = rightPos >> 8;
 8001450:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001454:	121b      	asrs	r3, r3, #8
 8001456:	b21b      	sxth	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	72bb      	strb	r3, [r7, #10]
	data[3] = rightPos & 0xFF;
 800145c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	72fb      	strb	r3, [r7, #11]

	SetResponse(0x0180, sizeof(data), data);
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	461a      	mov	r2, r3
 800146a:	2104      	movs	r1, #4
 800146c:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8001470:	f7ff fec8 	bl	8001204 <SetResponse>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <Handle_GetMotorSpeed>:

void Handle_GetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	int16_t leftSpeed;
	int16_t rightSpeed;
	RobotSystem_GetMotorSpeed(robot, &leftSpeed, &rightSpeed);
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	f107 030e 	add.w	r3, r7, #14
 800148e:	4619      	mov	r1, r3
 8001490:	6838      	ldr	r0, [r7, #0]
 8001492:	f001 fc12 	bl	8002cba <RobotSystem_GetMotorSpeed>

	uint8_t data[4];
	data[0] = leftSpeed >> 8;
 8001496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800149a:	121b      	asrs	r3, r3, #8
 800149c:	b21b      	sxth	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	723b      	strb	r3, [r7, #8]
	data[1] = leftSpeed & 0xFF;
 80014a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	727b      	strb	r3, [r7, #9]
	data[2] = rightSpeed >> 8;
 80014aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ae:	121b      	asrs	r3, r3, #8
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	72bb      	strb	r3, [r7, #10]
	data[3] = rightSpeed & 0xFF;
 80014b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	72fb      	strb	r3, [r7, #11]

	SetResponse(0x0180, sizeof(data), data);
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	461a      	mov	r2, r3
 80014c4:	2104      	movs	r1, #4
 80014c6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80014ca:	f7ff fe9b 	bl	8001204 <SetResponse>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <Handle_WakeUp>:

void Handle_WakeUp(DecodedPacket_t *packet, RobotSystem *robot) {
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fe8d 	bl	8001204 <SetResponse>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <Handle_Ready>:

void Handle_Ready(DecodedPacket_t *packet, RobotSystem *robot) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fe7f 	bl	8001204 <SetResponse>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <Handle_Shutdown>:

void Handle_Shutdown(DecodedPacket_t *packet, RobotSystem *robot) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
	Response_OK();
 8001518:	f7ff fe96 	bl	8001248 <Response_OK>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <MX_DAC2_Init>:

DAC_HandleTypeDef hdac2;

/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	@ 0x30
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2230      	movs	r2, #48	@ 0x30
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00a fc05 	bl	800bd40 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_DAC2_Init+0x6c>)
 8001538:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <MX_DAC2_Init+0x70>)
 800153a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800153c:	4814      	ldr	r0, [pc, #80]	@ (8001590 <MX_DAC2_Init+0x6c>)
 800153e:	f003 fd5c 	bl	8004ffa <HAL_DAC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001548:	f000 fb1d 	bl	8001b86 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800154c:	2302      	movs	r3, #2
 800154e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	@ (8001590 <MX_DAC2_Init+0x6c>)
 8001578:	f003 fdfc 	bl	8005174 <HAL_DAC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001582:	f000 fb00 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3730      	adds	r7, #48	@ 0x30
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000048c 	.word	0x2000048c
 8001594:	50000c00 	.word	0x50000c00

08001598 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a15      	ldr	r2, [pc, #84]	@ (800160c <HAL_DAC_MspInit+0x74>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d124      	bne.n	8001604 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* DAC2 clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <HAL_DAC_MspInit+0x78>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <HAL_DAC_MspInit+0x78>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c6:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_DAC_MspInit+0x78>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <HAL_DAC_MspInit+0x78>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001610 <HAL_DAC_MspInit+0x78>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <HAL_DAC_MspInit+0x78>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = WHEEL_MOTOR_CURRENT_LIMIT_Pin;
 80015ea:	2340      	movs	r3, #64	@ 0x40
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WHEEL_MOTOR_CURRENT_LIMIT_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001600:	f004 fdf8 	bl	80061f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	@ 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	50000c00 	.word	0x50000c00
 8001610:	40021000 	.word	0x40021000

08001614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <MX_DMA_Init+0x50>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <MX_DMA_Init+0x50>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6493      	str	r3, [r2, #72]	@ 0x48
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <MX_DMA_Init+0x50>)
 8001628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_DMA_Init+0x50>)
 8001634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001636:	4a0b      	ldr	r2, [pc, #44]	@ (8001664 <MX_DMA_Init+0x50>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6493      	str	r3, [r2, #72]	@ 0x48
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_DMA_Init+0x50>)
 8001640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	200b      	movs	r0, #11
 8001650:	f003 fc9f 	bl	8004f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001654:	200b      	movs	r0, #11
 8001656:	f003 fcb6 	bl	8004fc6 <HAL_NVIC_EnableIRQ>

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000

08001668 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 800166e:	4a20      	ldr	r2, [pc, #128]	@ (80016f0 <MX_FDCAN1_Init+0x88>)
 8001670:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001678:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 8001686:	2200      	movs	r2, #0
 8001688:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 800168c:	2200      	movs	r2, #0
 800168e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001690:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 8001692:	2200      	movs	r2, #0
 8001694:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 8001698:	2201      	movs	r2, #1
 800169a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 800169e:	2201      	movs	r2, #1
 80016a0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016a4:	2208      	movs	r2, #8
 80016a6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016aa:	2208      	movs	r2, #8
 80016ac:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016bc:	2201      	movs	r2, #1
 80016be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_FDCAN1_Init+0x84>)
 80016da:	f004 fa37 	bl	8005b4c <HAL_FDCAN_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80016e4:	f000 fa4f 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200004a0 	.word	0x200004a0
 80016f0:	40006400 	.word	0x40006400

080016f4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09e      	sub	sp, #120	@ 0x78
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	2254      	movs	r2, #84	@ 0x54
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f00a fb13 	bl	800bd40 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a23      	ldr	r2, [pc, #140]	@ (80017ac <HAL_FDCAN_MspInit+0xb8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d13f      	bne.n	80017a4 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800172a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800172e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4618      	mov	r0, r3
 8001736:	f005 fd05 	bl	8007144 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001740:	f000 fa21 	bl	8001b86 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <HAL_FDCAN_MspInit+0xbc>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_FDCAN_MspInit+0xbc>)
 800174a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800174e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_FDCAN_MspInit+0xbc>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_FDCAN_MspInit+0xbc>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <HAL_FDCAN_MspInit+0xbc>)
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_FDCAN_MspInit+0xbc>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001774:	2303      	movs	r3, #3
 8001776:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001784:	2309      	movs	r3, #9
 8001786:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001788:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800178c:	4619      	mov	r1, r3
 800178e:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <HAL_FDCAN_MspInit+0xc0>)
 8001790:	f004 fd30 	bl	80061f4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2015      	movs	r0, #21
 800179a:	f003 fbfa 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800179e:	2015      	movs	r0, #21
 80017a0:	f003 fc11 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80017a4:	bf00      	nop
 80017a6:	3778      	adds	r7, #120	@ 0x78
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40006400 	.word	0x40006400
 80017b0:	40021000 	.word	0x40021000
 80017b4:	48000c00 	.word	0x48000c00

080017b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	@ 0x30
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b7a      	ldr	r3, [pc, #488]	@ (80019b8 <MX_GPIO_Init+0x200>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a79      	ldr	r2, [pc, #484]	@ (80019b8 <MX_GPIO_Init+0x200>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b77      	ldr	r3, [pc, #476]	@ (80019b8 <MX_GPIO_Init+0x200>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e6:	4b74      	ldr	r3, [pc, #464]	@ (80019b8 <MX_GPIO_Init+0x200>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	4a73      	ldr	r2, [pc, #460]	@ (80019b8 <MX_GPIO_Init+0x200>)
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f2:	4b71      	ldr	r3, [pc, #452]	@ (80019b8 <MX_GPIO_Init+0x200>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b6e      	ldr	r3, [pc, #440]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	4a6d      	ldr	r2, [pc, #436]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180a:	4b6b      	ldr	r3, [pc, #428]	@ (80019b8 <MX_GPIO_Init+0x200>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b68      	ldr	r3, [pc, #416]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	4a67      	ldr	r2, [pc, #412]	@ (80019b8 <MX_GPIO_Init+0x200>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001822:	4b65      	ldr	r3, [pc, #404]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800182e:	4b62      	ldr	r3, [pc, #392]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	4a61      	ldr	r2, [pc, #388]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183a:	4b5f      	ldr	r3, [pc, #380]	@ (80019b8 <MX_GPIO_Init+0x200>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	4b5c      	ldr	r3, [pc, #368]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	4a5b      	ldr	r2, [pc, #364]	@ (80019b8 <MX_GPIO_Init+0x200>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001852:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800185e:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	4a55      	ldr	r2, [pc, #340]	@ (80019b8 <MX_GPIO_Init+0x200>)
 8001864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186a:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <MX_GPIO_Init+0x200>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nAUX2_EN_Pin|LED_A_INT_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800187c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001880:	f004 fe52 	bl	8006528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, nDEBUG_LED2_Pin|nDEBUG_LED1_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 800188a:	484c      	ldr	r0, [pc, #304]	@ (80019bc <MX_GPIO_Init+0x204>)
 800188c:	f004 fe4c 	bl	8006528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX2_OUTPUT_GPIO_Port, AUX2_OUTPUT_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001896:	484a      	ldr	r0, [pc, #296]	@ (80019c0 <MX_GPIO_Init+0x208>)
 8001898:	f004 fe46 	bl	8006528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCM_GYRO_SPI_GPIO_Port, nCS_MCM_GYRO_SPI_Pin, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	2102      	movs	r1, #2
 80018a0:	4848      	ldr	r0, [pc, #288]	@ (80019c4 <MX_GPIO_Init+0x20c>)
 80018a2:	f004 fe41 	bl	8006528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCM_KILL_Pin|nCAN_STBY_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80018ac:	4845      	ldr	r0, [pc, #276]	@ (80019c4 <MX_GPIO_Init+0x20c>)
 80018ae:	f004 fe3b 	bl	8006528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nWHEEL_MOTOR_SHDN_GPIO_Port, nWHEEL_MOTOR_SHDN_Pin, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2102      	movs	r1, #2
 80018b6:	4844      	ldr	r0, [pc, #272]	@ (80019c8 <MX_GPIO_Init+0x210>)
 80018b8:	f004 fe36 	bl	8006528 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nAUX2_EN_Pin|LED_A_INT_Pin;
 80018bc:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d8:	f004 fc8c 	bl	80061f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = nDEBUG_LED2_Pin|nDEBUG_LED1_Pin;
 80018dc:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4831      	ldr	r0, [pc, #196]	@ (80019bc <MX_GPIO_Init+0x204>)
 80018f6:	f004 fc7d 	bl	80061f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRMC_CURRFAULT_Pin;
 80018fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nRMC_CURRFAULT_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	482f      	ldr	r0, [pc, #188]	@ (80019cc <MX_GPIO_Init+0x214>)
 8001910:	f004 fc70 	bl	80061f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = V_3V3_DIAG_Pin|V_5V_DIAG_Pin|nLMC_CURRFAULT_Pin;
 8001914:	f44f 7341 	mov.w	r3, #772	@ 0x304
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	4619      	mov	r1, r3
 8001928:	4825      	ldr	r0, [pc, #148]	@ (80019c0 <MX_GPIO_Init+0x208>)
 800192a:	f004 fc63 	bl	80061f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX2_OUTPUT_Pin;
 800192e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUX2_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	481e      	ldr	r0, [pc, #120]	@ (80019c0 <MX_GPIO_Init+0x208>)
 8001948:	f004 fc54 	bl	80061f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 800194c:	2301      	movs	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001950:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	4818      	ldr	r0, [pc, #96]	@ (80019c4 <MX_GPIO_Init+0x20c>)
 8001962:	f004 fc47 	bl	80061f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_MCM_GYRO_SPI_Pin|MCM_KILL_Pin|nCAN_STBY_Pin;
 8001966:	f240 2382 	movw	r3, #642	@ 0x282
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4811      	ldr	r0, [pc, #68]	@ (80019c4 <MX_GPIO_Init+0x20c>)
 8001980:	f004 fc38 	bl	80061f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nWHEEL_MOTOR_SHDN_Pin;
 8001984:	2302      	movs	r3, #2
 8001986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nWHEEL_MOTOR_SHDN_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <MX_GPIO_Init+0x210>)
 800199c:	f004 fc2a 	bl	80061f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2101      	movs	r1, #1
 80019a4:	2006      	movs	r0, #6
 80019a6:	f003 faf4 	bl	8004f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019aa:	2006      	movs	r0, #6
 80019ac:	f003 fb0b 	bl	8004fc6 <HAL_NVIC_EnableIRQ>

}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	@ 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48001400 	.word	0x48001400
 80019c0:	48000c00 	.word	0x48000c00
 80019c4:	48001800 	.word	0x48001800
 80019c8:	48001000 	.word	0x48001000
 80019cc:	48000400 	.word	0x48000400

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b0df      	sub	sp, #380	@ 0x17c
 80019d4:	af5e      	add	r7, sp, #376	@ 0x178
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d6:	f002 f86e 	bl	8003ab6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019da:	f000 f84d 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f7ff feeb 	bl	80017b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e2:	f7ff fe17 	bl	8001614 <MX_DMA_Init>
  MX_ADC3_Init();
 80019e6:	f7ff fabf 	bl	8000f68 <MX_ADC3_Init>
  MX_DAC2_Init();
 80019ea:	f7ff fd9b 	bl	8001524 <MX_DAC2_Init>
  MX_USART2_UART_Init();
 80019ee:	f001 ff5d 	bl	80038ac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019f2:	f001 fa0b 	bl	8002e0c <MX_SPI1_Init>
  MX_ADC1_Init();
 80019f6:	f7ff fa3f 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019fa:	f001 fb27 	bl	800304c <MX_TIM1_Init>
  MX_TIM8_Init();
 80019fe:	f001 fcfb 	bl	80033f8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001a02:	f001 fbeb 	bl	80031dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8001a06:	f001 fc6f 	bl	80032e8 <MX_TIM5_Init>
  MX_FDCAN1_Init();
 8001a0a:	f7ff fe2d 	bl	8001668 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  IMU_Init(&imu);
 8001a0e:	4814      	ldr	r0, [pc, #80]	@ (8001a60 <main+0x90>)
 8001a10:	f7ff f92a 	bl	8000c68 <IMU_Init>
  RobotSystem_Init(&robot, leftWheel, rightWheel);
 8001a14:	4c13      	ldr	r4, [pc, #76]	@ (8001a64 <main+0x94>)
 8001a16:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <main+0x98>)
 8001a18:	ab2e      	add	r3, sp, #184	@ 0xb8
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	22c0      	movs	r2, #192	@ 0xc0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00a f9ba 	bl	800bd98 <memcpy>
 8001a24:	4668      	mov	r0, sp
 8001a26:	f104 0308 	add.w	r3, r4, #8
 8001a2a:	22b8      	movs	r2, #184	@ 0xb8
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f00a f9b3 	bl	800bd98 <memcpy>
 8001a32:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001a36:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <main+0x9c>)
 8001a38:	f001 f89e 	bl	8002b78 <RobotSystem_Init>
  Comm_Init(&serial, COMM_UART, &huart2);
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <main+0xa0>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	480c      	ldr	r0, [pc, #48]	@ (8001a74 <main+0xa4>)
 8001a42:	f7fe ff41 	bl	80008c8 <Comm_Init>


  while (1)
  {

	  Comm_Process(&serial);
 8001a46:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <main+0xa4>)
 8001a48:	f7fe ffc2 	bl	80009d0 <Comm_Process>
	  RobotSystem_Calculate(&robot);
 8001a4c:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <main+0x9c>)
 8001a4e:	f001 f949 	bl	8002ce4 <RobotSystem_Calculate>

	  CommandHandler_ProcessCommand(&serial, &robot);
 8001a52:	4906      	ldr	r1, [pc, #24]	@ (8001a6c <main+0x9c>)
 8001a54:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <main+0xa4>)
 8001a56:	f7ff fc1d 	bl	8001294 <CommandHandler_ProcessCommand>
	  Comm_Process(&serial);
 8001a5a:	bf00      	nop
 8001a5c:	e7f3      	b.n	8001a46 <main+0x76>
 8001a5e:	bf00      	nop
 8001a60:	20000050 	.word	0x20000050
 8001a64:	20000200 	.word	0x20000200
 8001a68:	200002c0 	.word	0x200002c0
 8001a6c:	20000070 	.word	0x20000070
 8001a70:	20000780 	.word	0x20000780
 8001a74:	20000504 	.word	0x20000504

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b094      	sub	sp, #80	@ 0x50
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 0318 	add.w	r3, r7, #24
 8001a82:	2238      	movs	r2, #56	@ 0x38
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00a f95a 	bl	800bd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f004 fd74 	bl	8006588 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aaa:	2340      	movs	r3, #64	@ 0x40
 8001aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001aba:	2355      	movs	r3, #85	@ 0x55
 8001abc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aca:	f107 0318 	add.w	r3, r7, #24
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 fe0e 	bl	80066f0 <HAL_RCC_OscConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ada:	f000 f854 	bl	8001b86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ade:	230f      	movs	r3, #15
 8001ae0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2104      	movs	r1, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f005 f90c 	bl	8006d14 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b02:	f000 f840 	bl	8001b86 <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3750      	adds	r7, #80	@ 0x50
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	RobotSystem_InterruptHandler(&robot, htim);
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <HAL_TIM_IC_CaptureCallback+0x18>)
 8001b1c:	f001 f8f3 	bl	8002d06 <RobotSystem_InterruptHandler>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000070 	.word	0x20000070

08001b2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
	IMU_InterruptHandler(&imu, GPIO_Pin);
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4803      	ldr	r0, [pc, #12]	@ (8001b48 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001b3c:	f7ff f988 	bl	8000e50 <IMU_InterruptHandler>

}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000050 	.word	0x20000050

08001b4c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
	Comm_Receive(&serial, 0, size);
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <HAL_UARTEx_RxEventCallback+0x20>)
 8001b60:	f7fe ff23 	bl	80009aa <Comm_Receive>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000504 	.word	0x20000504

08001b70 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
//    {
//      /* Notification Error */
//      Error_Handler();
//    }
//  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8a:	b672      	cpsid	i
}
 8001b8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <Error_Handler+0x8>

08001b92 <Motor_Init>:
 */

#include "motor_control.h"

// Initialize a motor
void Motor_Init(Motor *motor) {
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
    // Example: Initialize GPIOs or timers for the motor
	motor->pid.hallCount = 0;
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	motor->pid.lastHallCount = 0;
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	motor->pid.set_speed = 0;
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	motor->pid.integral = 0;
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	motor->pid.previousFilter = 0;
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	motor->pid.lastUpdateTime = 0;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	motor->pid.lastPwmVal = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	motor->pid.lastHallTime = 0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->pid.totalHallTime = 0;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	675a      	str	r2, [r3, #116]	@ 0x74
	motor->pid.pwmVal = 0;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	motor->pid.filterGain = DER_FILTER_GAIN;
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	motor->pid.maxIntegral = MAX_INTEGRAL_VAL;
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90


	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall1_Channel);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f006 fd3d 	bl	80086b8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall2_Channel);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	885b      	ldrh	r3, [r3, #2]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f006 fd35 	bl	80086b8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall3_Channel);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	889b      	ldrh	r3, [r3, #4]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f006 fd2d 	bl	80086b8 <HAL_TIM_IC_Start_IT>

	Motor_Stop(motor);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f961 	bl	8001f26 <Motor_Stop>
	ReadHallSensors(motor);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fea4 	bl	80029b2 <ReadHallSensors>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <Motor_SetSpeed>:

// Set the speed of a motor
void Motor_SetSpeed(Motor *motor, int64_t target_speed) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	e9c7 2300 	strd	r2, r3, [r7]

	if (target_speed == motor->target_speed) return;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c8a:	4299      	cmp	r1, r3
 8001c8c:	bf08      	it	eq
 8001c8e:	4290      	cmpeq	r0, r2
 8001c90:	d036      	beq.n	8001d00 <Motor_SetSpeed+0x8c>

	if (target_speed > MAX_MOTOR_SPEED) target_speed = MAX_MOTOR_SPEED;
 8001c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c96:	f641 7141 	movw	r1, #8001	@ 0x1f41
 8001c9a:	428a      	cmp	r2, r1
 8001c9c:	f173 0300 	sbcs.w	r3, r3, #0
 8001ca0:	db05      	blt.n	8001cae <Motor_SetSpeed+0x3a>
 8001ca2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed < -MAX_MOTOR_SPEED) target_speed = -MAX_MOTOR_SPEED;
 8001cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb2:	f512 5ffa 	cmn.w	r2, #8000	@ 0x1f40
 8001cb6:	f173 33ff 	sbcs.w	r3, r3, #4294967295	@ 0xffffffff
 8001cba:	da04      	bge.n	8001cc6 <Motor_SetSpeed+0x52>
 8001cbc:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <Motor_SetSpeed+0x94>)
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cc2:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed > -MIN_MOTOR_SPEED && target_speed < MIN_MOTOR_SPEED)
 8001cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cca:	4910      	ldr	r1, [pc, #64]	@ (8001d0c <Motor_SetSpeed+0x98>)
 8001ccc:	428a      	cmp	r2, r1
 8001cce:	f173 33ff 	sbcs.w	r3, r3, #4294967295	@ 0xffffffff
 8001cd2:	db0c      	blt.n	8001cee <Motor_SetSpeed+0x7a>
 8001cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cd8:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001cdc:	f173 0300 	sbcs.w	r3, r3, #0
 8001ce0:	da05      	bge.n	8001cee <Motor_SetSpeed+0x7a>
			target_speed = 0;
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	e9c7 2300 	strd	r2, r3, [r7]

	//motor->pid.integral = 0;
	//motor->pid.previousError = 0;

	motor->target_speed = target_speed;
 8001cee:	68f9      	ldr	r1, [r7, #12]
 8001cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cf4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	Motor_Calculate(motor);
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f935 	bl	8001f68 <Motor_Calculate>
 8001cfe:	e000      	b.n	8001d02 <Motor_SetSpeed+0x8e>
	if (target_speed == motor->target_speed) return;
 8001d00:	bf00      	nop
}
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	ffffe0c0 	.word	0xffffe0c0
 8001d0c:	fffffc19 	.word	0xfffffc19

08001d10 <Motor_SetPwm>:


void Motor_SetPwm(Motor *motor, int16_t duty_cycle) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]

	if(duty_cycle > PWM_MAX_VAL) duty_cycle = PWM_MAX_VAL;
 8001d1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d24:	dd03      	ble.n	8001d2e <Motor_SetPwm+0x1e>
 8001d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	e005      	b.n	8001d3a <Motor_SetPwm+0x2a>
	else if(duty_cycle < 0) duty_cycle = 0;
 8001d2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da01      	bge.n	8001d3a <Motor_SetPwm+0x2a>
 8001d36:	2300      	movs	r3, #0
 8001d38:	807b      	strh	r3, [r7, #2]

	motor->pid.pwmVal = duty_cycle;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	887a      	ldrh	r2, [r7, #2]
 8001d3e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_A_IDX], motor->pid.pwmVal);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d107      	bne.n	8001d5a <Motor_SetPwm+0x4a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d58:	e03b      	b.n	8001dd2 <Motor_SetPwm+0xc2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d108      	bne.n	8001d74 <Motor_SetPwm+0x64>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d72:	e02e      	b.n	8001dd2 <Motor_SetPwm+0xc2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d108      	bne.n	8001d8e <Motor_SetPwm+0x7e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d8c:	e021      	b.n	8001dd2 <Motor_SetPwm+0xc2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d108      	bne.n	8001da8 <Motor_SetPwm+0x98>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	460b      	mov	r3, r1
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da6:	e014      	b.n	8001dd2 <Motor_SetPwm+0xc2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d108      	bne.n	8001dc2 <Motor_SetPwm+0xb2>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dc0:	e007      	b.n	8001dd2 <Motor_SetPwm+0xc2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_B_IDX], motor->pid.pwmVal);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <Motor_SetPwm+0xda>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001de8:	e03b      	b.n	8001e62 <Motor_SetPwm+0x152>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d108      	bne.n	8001e04 <Motor_SetPwm+0xf4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e02:	e02e      	b.n	8001e62 <Motor_SetPwm+0x152>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d108      	bne.n	8001e1e <Motor_SetPwm+0x10e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e1c:	e021      	b.n	8001e62 <Motor_SetPwm+0x152>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	d108      	bne.n	8001e38 <Motor_SetPwm+0x128>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	460b      	mov	r3, r1
 8001e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e36:	e014      	b.n	8001e62 <Motor_SetPwm+0x152>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d108      	bne.n	8001e52 <Motor_SetPwm+0x142>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e50:	e007      	b.n	8001e62 <Motor_SetPwm+0x152>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_C_IDX], motor->pid.pwmVal);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d107      	bne.n	8001e7a <Motor_SetPwm+0x16a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e78:	e03b      	b.n	8001ef2 <Motor_SetPwm+0x1e2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d108      	bne.n	8001e94 <Motor_SetPwm+0x184>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e92:	e02e      	b.n	8001ef2 <Motor_SetPwm+0x1e2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d108      	bne.n	8001eae <Motor_SetPwm+0x19e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001eac:	e021      	b.n	8001ef2 <Motor_SetPwm+0x1e2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d108      	bne.n	8001ec8 <Motor_SetPwm+0x1b8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec6:	e014      	b.n	8001ef2 <Motor_SetPwm+0x1e2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d108      	bne.n	8001ee2 <Motor_SetPwm+0x1d2>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	460b      	mov	r3, r1
 8001ede:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ee0:	e007      	b.n	8001ef2 <Motor_SetPwm+0x1e2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if(motor->pid.lastPwmVal == 0 && motor->pid.lastPwmVal != motor->pid.pwmVal)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <Motor_SetPwm+0x202>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	@ 0x82
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d002      	beq.n	8001f12 <Motor_SetPwm+0x202>
		Motor_Update(motor);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fc35 	bl	800277c <Motor_Update>
	motor->pid.lastPwmVal = motor->pid.pwmVal;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <Motor_Stop>:

// Stop a motor
void Motor_Stop(Motor *motor) {
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
    // Set speed to zero to stop the motor
    Motor_SetSpeed(motor, 0);
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fe9c 	bl	8001c74 <Motor_SetSpeed>
    SetPhase(motor, PHASE_A_IDX, false, false);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fce0 	bl	8002908 <SetPhase>
    SetPhase(motor, PHASE_B_IDX, false, false);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fcda 	bl	8002908 <SetPhase>
    SetPhase(motor, PHASE_C_IDX, false, false);
 8001f54:	2300      	movs	r3, #0
 8001f56:	2200      	movs	r2, #0
 8001f58:	2102      	movs	r1, #2
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fcd4 	bl	8002908 <SetPhase>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <Motor_Calculate>:

void Motor_Calculate(Motor *motor) {
 8001f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f6c:	b0d7      	sub	sp, #348	@ 0x15c
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
	uint32_t currentTime = HAL_GetTick(); // Get the current time in milliseconds
 8001f74:	f001 fe04 	bl	8003b80 <HAL_GetTick>
 8001f78:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

	// Update PID every certain time cycle
	if ((currentTime - motor->pid.lastUpdateTime) >= PID_CALC_TIMING) {
 8001f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f80:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	2b13      	cmp	r3, #19
 8001f8c:	f240 83eb 	bls.w	8002766 <Motor_Calculate+0x7fe>

		CalculateDistance(motor);
 8001f90:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001f94:	f000 fd9a 	bl	8002acc <CalculateDistance>
		if(motor->pid.set_speed > motor->target_speed) {
 8001f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f9c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8001fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fa4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001fa8:	4282      	cmp	r2, r0
 8001faa:	418b      	sbcs	r3, r1
 8001fac:	da78      	bge.n	80020a0 <Motor_Calculate+0x138>
			if(motor->pid.set_speed > 0 && motor->pid.set_speed - motor->acceleration < 0 && motor->target_speed < 0) {
 8001fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fb2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001fb6:	2a01      	cmp	r2, #1
 8001fb8:	f173 0300 	sbcs.w	r3, r3, #0
 8001fbc:	db35      	blt.n	800202a <Motor_Calculate+0xc2>
 8001fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fc2:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8001fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fca:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001fce:	1a84      	subs	r4, r0, r2
 8001fd0:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8001fd4:	eb61 0303 	sbc.w	r3, r1, r3
 8001fd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	da22      	bge.n	800202a <Motor_Calculate+0xc2>
 8001fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fe8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da1c      	bge.n	800202a <Motor_Calculate+0xc2>
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 8001ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ff4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ffc:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002000:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002004:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002008:	eb10 0802 	adds.w	r8, r0, r2
 800200c:	eb41 0903 	adc.w	r9, r1, r3
 8002010:	45a0      	cmp	r8, r4
 8002012:	eb79 0305 	sbcs.w	r3, r9, r5
 8002016:	db3a      	blt.n	800208e <Motor_Calculate+0x126>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 8002018:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 8002028:	e031      	b.n	800208e <Motor_Calculate+0x126>
				}
			}
			else if(motor->pid.set_speed - motor->acceleration <= motor->target_speed) {
 800202a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800202e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002032:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002036:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800203a:	ebb0 0a02 	subs.w	sl, r0, r2
 800203e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002042:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002046:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800204a:	4552      	cmp	r2, sl
 800204c:	eb73 030b 	sbcs.w	r3, r3, fp
 8002050:	db08      	blt.n	8002064 <Motor_Calculate+0xfc>
				motor->pid.set_speed = motor->target_speed;
 8002052:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002056:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800205a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800205e:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8002062:	e014      	b.n	800208e <Motor_Calculate+0x126>
			}
			else {
				motor->pid.set_speed -= motor->acceleration;
 8002064:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002068:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800206c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002070:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002074:	1a84      	subs	r4, r0, r2
 8002076:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 800207a:	eb61 0303 	sbc.w	r3, r1, r3
 800207e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002082:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002086:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800208a:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 800208e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 800209e:	e08d      	b.n	80021bc <Motor_Calculate+0x254>
		} else if(motor->pid.set_speed < motor->target_speed) {
 80020a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020a4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80020a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020ac:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80020b0:	4290      	cmp	r0, r2
 80020b2:	eb71 0303 	sbcs.w	r3, r1, r3
 80020b6:	f280 8081 	bge.w	80021bc <Motor_Calculate+0x254>
			if(motor->pid.set_speed < 0 && motor->pid.set_speed + motor->acceleration > 0 && motor->target_speed > 0) {
 80020ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020be:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da3a      	bge.n	800213c <Motor_Calculate+0x1d4>
 80020c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020ca:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80020ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020d2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80020d6:	1884      	adds	r4, r0, r2
 80020d8:	eb41 0503 	adc.w	r5, r1, r3
 80020dc:	2c01      	cmp	r4, #1
 80020de:	f175 0300 	sbcs.w	r3, r5, #0
 80020e2:	db2b      	blt.n	800213c <Motor_Calculate+0x1d4>
 80020e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020e8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80020ec:	2a01      	cmp	r2, #1
 80020ee:	f173 0300 	sbcs.w	r3, r3, #0
 80020f2:	db23      	blt.n	800213c <Motor_Calculate+0x1d4>
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 80020f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020f8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80020fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002100:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002104:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002108:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800210c:	1a86      	subs	r6, r0, r2
 800210e:	f8c7 60e0 	str.w	r6, [r7, #224]	@ 0xe0
 8002112:	eb61 0303 	sbc.w	r3, r1, r3
 8002116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800211a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800211e:	460b      	mov	r3, r1
 8002120:	429c      	cmp	r4, r3
 8002122:	4613      	mov	r3, r2
 8002124:	eb75 0303 	sbcs.w	r3, r5, r3
 8002128:	db40      	blt.n	80021ac <Motor_Calculate+0x244>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 800212a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 800213a:	e037      	b.n	80021ac <Motor_Calculate+0x244>
				}
			}
			else if(motor->pid.set_speed + motor->acceleration >= motor->target_speed) {
 800213c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002140:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002144:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002148:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800214c:	1884      	adds	r4, r0, r2
 800214e:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8002152:	eb41 0303 	adc.w	r3, r1, r3
 8002156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800215a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800215e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002162:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002166:	4621      	mov	r1, r4
 8002168:	4291      	cmp	r1, r2
 800216a:	4629      	mov	r1, r5
 800216c:	4199      	sbcs	r1, r3
 800216e:	db08      	blt.n	8002182 <Motor_Calculate+0x21a>
				motor->pid.set_speed = motor->target_speed;
 8002170:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002174:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002178:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800217c:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8002180:	e014      	b.n	80021ac <Motor_Calculate+0x244>
			}
			else {
				motor->pid.set_speed += motor->acceleration;
 8002182:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002186:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800218a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800218e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002192:	1884      	adds	r4, r0, r2
 8002194:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8002198:	eb41 0303 	adc.w	r3, r1, r3
 800219c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80021a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80021a4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80021a8:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 80021ac:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		}

		//set motor direction based the sign of the set_speed variable
		if(motor->pid.set_speed < 0) {
 80021bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80021c0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da05      	bge.n	80021d4 <Motor_Calculate+0x26c>
			motor->direction = false;
 80021c8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80021cc:	2300      	movs	r3, #0
 80021ce:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
 80021d2:	e004      	b.n	80021de <Motor_Calculate+0x276>
		}
		else
		{
			motor->direction = true;
 80021d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80021d8:	2301      	movs	r3, #1
 80021da:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
		}

		// Calculate current speed
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 80021de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80021e2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80021e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80021ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80021ee:	1a84      	subs	r4, r0, r2
 80021f0:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 80021f4:	eb61 0303 	sbc.w	r3, r1, r3
 80021f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				* ( 1000 * 1000 * 60 / ((int64_t)motor->pid.totalHallTime))/SPEED_CALC_HALL_TO_REV; // speed in counts per minute
 80021fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002202:	2200      	movs	r2, #0
 8002204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002208:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800220c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002210:	4822      	ldr	r0, [pc, #136]	@ (800229c <Motor_Calculate+0x334>)
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	f7fd ffff 	bl	8000218 <__aeabi_ldivmod>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002222:	4629      	mov	r1, r5
 8002224:	fb02 f001 	mul.w	r0, r2, r1
 8002228:	4621      	mov	r1, r4
 800222a:	fb01 f103 	mul.w	r1, r1, r3
 800222e:	4401      	add	r1, r0
 8002230:	4620      	mov	r0, r4
 8002232:	fba0 2302 	umull	r2, r3, r0, r2
 8002236:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800223a:	4613      	mov	r3, r2
 800223c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002240:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002244:	18cb      	adds	r3, r1, r3
 8002246:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800224a:	f04f 0207 	mov.w	r2, #7
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8002256:	f7fd ffdf 	bl	8000218 <__aeabi_ldivmod>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 8002262:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002266:	e9c3 0114 	strd	r0, r1, [r3, #80]	@ 0x50

		motor->pid.totalHallTime = 0;
 800226a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800226e:	2300      	movs	r3, #0
 8002270:	6753      	str	r3, [r2, #116]	@ 0x74
		motor->pid.lastHallCount = motor->pid.hallCount;
 8002272:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002276:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800227a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800227e:	e9c3 011a 	strd	r0, r1, [r3, #104]	@ 0x68

		//do no calculations if speed is set to 0
		if(motor->pid.set_speed == 0) {
 8002282:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002286:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800228a:	4313      	orrs	r3, r2
 800228c:	d108      	bne.n	80022a0 <Motor_Calculate+0x338>
			Motor_SetPwm(motor,0);
 800228e:	2100      	movs	r1, #0
 8002290:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002294:	f7ff fd3c 	bl	8001d10 <Motor_SetPwm>
			return;
 8002298:	e265      	b.n	8002766 <Motor_Calculate+0x7fe>
 800229a:	bf00      	nop
 800229c:	03938700 	.word	0x03938700
		}

		// Calculate error
		int64_t error = (motor->pid.set_speed - motor->current_speed);
 80022a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022a4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80022a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022ac:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80022b0:	1a84      	subs	r4, r0, r2
 80022b2:	653c      	str	r4, [r7, #80]	@ 0x50
 80022b4:	eb61 0303 	sbc.w	r3, r1, r3
 80022b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80022ba:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80022be:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		// PID calculations
		motor->pid.integral += error * PID_CALC_TIMING/1000; // Integral term, scaled for 50ms
 80022c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022c6:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	@ 0x88
 80022ca:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80022ce:	f04f 0232 	mov.w	r2, #50	@ 0x32
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	f7fd ff9f 	bl	8000218 <__aeabi_ldivmod>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	18a1      	adds	r1, r4, r2
 80022e0:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80022e4:	eb45 0303 	adc.w	r3, r5, r3
 80022e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80022ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022f0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80022f4:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//clamp integral term to avoid integral windup
		if(motor->pid.integral > motor->pid.maxIntegral) motor->pid.integral = motor->pid.maxIntegral;
 80022f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022fc:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002300:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002304:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002308:	4282      	cmp	r2, r0
 800230a:	418b      	sbcs	r3, r1
 800230c:	da07      	bge.n	800231e <Motor_Calculate+0x3b6>
 800230e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002312:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8002316:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800231a:	e9c3 0122 	strd	r0, r1, [r3, #136]	@ 0x88
		if(motor->pid.integral < -1*motor->pid.maxIntegral) motor->pid.integral = -1*motor->pid.maxIntegral;
 800231e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002322:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800232a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800232e:	2400      	movs	r4, #0
 8002330:	4255      	negs	r5, r2
 8002332:	f8c7 50b0 	str.w	r5, [r7, #176]	@ 0xb0
 8002336:	eb64 0303 	sbc.w	r3, r4, r3
 800233a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800233e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8002342:	4623      	mov	r3, r4
 8002344:	4298      	cmp	r0, r3
 8002346:	462b      	mov	r3, r5
 8002348:	eb71 0303 	sbcs.w	r3, r1, r3
 800234c:	da11      	bge.n	8002372 <Motor_Calculate+0x40a>
 800234e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002352:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002356:	2100      	movs	r1, #0
 8002358:	4250      	negs	r0, r2
 800235a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 800235e:	eb61 0303 	sbc.w	r3, r1, r3
 8002362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002366:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800236a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800236e:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//use derivitave filter to calculate derivative term
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 8002372:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002376:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800237a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800237e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8002382:	fb02 f501 	mul.w	r5, r2, r1
 8002386:	fb00 f403 	mul.w	r4, r0, r3
 800238a:	442c      	add	r4, r5
 800238c:	fba0 2302 	umull	r2, r3, r0, r2
 8002390:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002394:	4613      	mov	r3, r2
 8002396:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800239a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800239e:	18e3      	adds	r3, r4, r3
 80023a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80023a4:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80023b0:	f7fd ff32 	bl	8000218 <__aeabi_ldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4614      	mov	r4, r2
 80023ba:	461d      	mov	r5, r3
								+ (100-motor->pid.filterGain)*(error - motor->pid.previousError)/100;
 80023bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023c0:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80023c4:	2100      	movs	r1, #0
 80023c6:	f1d2 0064 	rsbs	r0, r2, #100	@ 0x64
 80023ca:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 80023ce:	eb61 0303 	sbc.w	r3, r1, r3
 80023d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80023d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023da:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 80023de:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80023e2:	1a16      	subs	r6, r2, r0
 80023e4:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 80023e8:	eb63 0301 	sbc.w	r3, r3, r1
 80023ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80023f0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80023f4:	464b      	mov	r3, r9
 80023f6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80023fa:	4652      	mov	r2, sl
 80023fc:	fb02 f203 	mul.w	r2, r2, r3
 8002400:	465b      	mov	r3, fp
 8002402:	4641      	mov	r1, r8
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	4642      	mov	r2, r8
 800240c:	4651      	mov	r1, sl
 800240e:	fba2 1201 	umull	r1, r2, r2, r1
 8002412:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8002416:	460a      	mov	r2, r1
 8002418:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 800241c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002420:	4413      	add	r3, r2
 8002422:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002426:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8002432:	f7fd fef1 	bl	8000218 <__aeabi_ldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 800243a:	18a1      	adds	r1, r4, r2
 800243c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800243e:	eb45 0303 	adc.w	r3, r5, r3
 8002442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002444:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002448:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

		int64_t derivative = (currentFilter) * 1000/PID_CALC_TIMING; // Derivative term
 800244c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	1894      	adds	r4, r2, r2
 8002456:	643c      	str	r4, [r7, #64]	@ 0x40
 8002458:	415b      	adcs	r3, r3
 800245a:	647b      	str	r3, [r7, #68]	@ 0x44
 800245c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002460:	1814      	adds	r4, r2, r0
 8002462:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002464:	414b      	adcs	r3, r1
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 8002474:	4634      	mov	r4, r6
 8002476:	00e3      	lsls	r3, r4, #3
 8002478:	462c      	mov	r4, r5
 800247a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800247e:	462c      	mov	r4, r5
 8002480:	00e2      	lsls	r2, r4, #3
 8002482:	4614      	mov	r4, r2
 8002484:	461d      	mov	r5, r3
 8002486:	4623      	mov	r3, r4
 8002488:	181b      	adds	r3, r3, r0
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30
 800248c:	462b      	mov	r3, r5
 800248e:	eb41 0303 	adc.w	r3, r1, r3
 8002492:	637b      	str	r3, [r7, #52]	@ 0x34
 8002494:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002498:	460b      	mov	r3, r1
 800249a:	18db      	adds	r3, r3, r3
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800249e:	4613      	mov	r3, r2
 80024a0:	eb42 0303 	adc.w	r3, r2, r3
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024a6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80024aa:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		motor->pid.previousFilter = currentFilter;
 80024ae:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80024b2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80024b6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		motor->pid.previousError = error;
 80024ba:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80024be:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80024c2:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		// Compute the new PWM value using the PID formula
		int64_t output = motor->pid.Kp * error + motor->pid.Ki * motor->pid.integral + motor->pid.Kd * derivative;
 80024c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80024ce:	17da      	asrs	r2, r3, #31
 80024d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80024dc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024e0:	462a      	mov	r2, r5
 80024e2:	fb02 f203 	mul.w	r2, r2, r3
 80024e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80024ea:	4621      	mov	r1, r4
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	441a      	add	r2, r3
 80024f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80024f6:	4621      	mov	r1, r4
 80024f8:	fba3 1301 	umull	r1, r3, r3, r1
 80024fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002500:	460b      	mov	r3, r1
 8002502:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800250a:	18d3      	adds	r3, r2, r3
 800250c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002510:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002518:	17da      	asrs	r2, r3, #31
 800251a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800251e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002522:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002526:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800252a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800252e:	4629      	mov	r1, r5
 8002530:	fb02 f001 	mul.w	r0, r2, r1
 8002534:	4621      	mov	r1, r4
 8002536:	fb01 f103 	mul.w	r1, r1, r3
 800253a:	4401      	add	r1, r0
 800253c:	4620      	mov	r0, r4
 800253e:	fba0 2302 	umull	r2, r3, r0, r2
 8002542:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002546:	4613      	mov	r3, r2
 8002548:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800254c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002550:	18cb      	adds	r3, r1, r3
 8002552:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002556:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800255a:	4623      	mov	r3, r4
 800255c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8002560:	4602      	mov	r2, r0
 8002562:	189b      	adds	r3, r3, r2
 8002564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002568:	460b      	mov	r3, r1
 800256a:	462a      	mov	r2, r5
 800256c:	eb42 0303 	adc.w	r3, r2, r3
 8002570:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002574:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002578:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800257c:	17da      	asrs	r2, r3, #31
 800257e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002580:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002582:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002586:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800258a:	462a      	mov	r2, r5
 800258c:	fb02 f203 	mul.w	r2, r2, r3
 8002590:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002594:	4621      	mov	r1, r4
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	441a      	add	r2, r3
 800259c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80025a0:	4621      	mov	r1, r4
 80025a2:	fba3 1301 	umull	r1, r3, r3, r1
 80025a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80025aa:	460b      	mov	r3, r1
 80025ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80025b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025b4:	18d3      	adds	r3, r2, r3
 80025b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80025ba:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80025be:	4623      	mov	r3, r4
 80025c0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80025c4:	4602      	mov	r2, r0
 80025c6:	189b      	adds	r3, r3, r2
 80025c8:	623b      	str	r3, [r7, #32]
 80025ca:	460b      	mov	r3, r1
 80025cc:	462a      	mov	r2, r5
 80025ce:	eb42 0303 	adc.w	r3, r2, r3
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80025d8:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150

		// Clamp the output to the valid PWM range
		if(motor->pid.set_speed > 0) {
 80025dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025e0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80025e4:	2a01      	cmp	r2, #1
 80025e6:	f173 0300 	sbcs.w	r3, r3, #0
 80025ea:	db16      	blt.n	800261a <Motor_Calculate+0x6b2>
			if (output > OUTPUT_MAX_VAL) output = OUTPUT_MAX_VAL;
 80025ec:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80025f0:	495f      	ldr	r1, [pc, #380]	@ (8002770 <Motor_Calculate+0x808>)
 80025f2:	428a      	cmp	r2, r1
 80025f4:	f173 0300 	sbcs.w	r3, r3, #0
 80025f8:	db04      	blt.n	8002604 <Motor_Calculate+0x69c>
 80025fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002774 <Motor_Calculate+0x80c>)
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output < 0) output = 0;
 8002604:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002608:	2b00      	cmp	r3, #0
 800260a:	da37      	bge.n	800267c <Motor_Calculate+0x714>
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 8002618:	e030      	b.n	800267c <Motor_Calculate+0x714>
		}
		else if(motor->pid.set_speed < 0) {
 800261a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800261e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002622:	2b00      	cmp	r3, #0
 8002624:	da24      	bge.n	8002670 <Motor_Calculate+0x708>
			if (output < -OUTPUT_MAX_VAL) output = -OUTPUT_MAX_VAL;
 8002626:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800262a:	4953      	ldr	r1, [pc, #332]	@ (8002778 <Motor_Calculate+0x810>)
 800262c:	428a      	cmp	r2, r1
 800262e:	f173 33ff 	sbcs.w	r3, r3, #4294967295	@ 0xffffffff
 8002632:	da04      	bge.n	800263e <Motor_Calculate+0x6d6>
 8002634:	4a50      	ldr	r2, [pc, #320]	@ (8002778 <Motor_Calculate+0x810>)
 8002636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800263a:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output > 0) output = 0;
 800263e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002642:	2a01      	cmp	r2, #1
 8002644:	f173 0300 	sbcs.w	r3, r3, #0
 8002648:	db05      	blt.n	8002656 <Motor_Calculate+0x6ee>
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			output*=-1;
 8002656:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800265a:	2100      	movs	r1, #0
 800265c:	4250      	negs	r0, r2
 800265e:	61b8      	str	r0, [r7, #24]
 8002660:	eb61 0303 	sbc.w	r3, r1, r3
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800266a:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 800266e:	e005      	b.n	800267c <Motor_Calculate+0x714>
		}
		else {
			output = 0;
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		}

		//shift the output itself to avoid the deadband range of the motor.
		//output is also divided by a factor to allow for more granular kp, ki, and kd values
		output = output/OUTPUT_TO_PWM_MULT + PWM_MIN_VAL;
 800267c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8002680:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	f7fd fdc6 	bl	8000218 <__aeabi_ldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	f112 01af 	adds.w	r1, r2, #175	@ 0xaf
 8002694:	6139      	str	r1, [r7, #16]
 8002696:	f143 0300 	adc.w	r3, r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80026a0:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(output - motor->pid.pwmVal > PWM_MAX_CHANGE) output = motor->pid.pwmVal + PWM_MAX_CHANGE;
 80026a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026a8:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	17da      	asrs	r2, r3, #31
 80026b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80026b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80026b4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80026b8:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80026bc:	4621      	mov	r1, r4
 80026be:	1a51      	subs	r1, r2, r1
 80026c0:	66b9      	str	r1, [r7, #104]	@ 0x68
 80026c2:	4629      	mov	r1, r5
 80026c4:	eb63 0301 	sbc.w	r3, r3, r1
 80026c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026ca:	f240 3321 	movw	r3, #801	@ 0x321
 80026ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80026d2:	4602      	mov	r2, r0
 80026d4:	429a      	cmp	r2, r3
 80026d6:	460b      	mov	r3, r1
 80026d8:	f173 0300 	sbcs.w	r3, r3, #0
 80026dc:	db0c      	blt.n	80026f8 <Motor_Calculate+0x790>
 80026de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026e2:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80026e6:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80026ea:	17da      	asrs	r2, r3, #31
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	60fa      	str	r2, [r7, #12]
 80026f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80026f4:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(motor->pid.pwmVal - output > PWM_MAX_CHANGE) output = motor->pid.pwmVal - PWM_MAX_CHANGE;
 80026f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026fc:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002700:	b21b      	sxth	r3, r3
 8002702:	17da      	asrs	r2, r3, #31
 8002704:	663b      	str	r3, [r7, #96]	@ 0x60
 8002706:	667a      	str	r2, [r7, #100]	@ 0x64
 8002708:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800270c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002710:	4621      	mov	r1, r4
 8002712:	1a89      	subs	r1, r1, r2
 8002714:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002716:	4629      	mov	r1, r5
 8002718:	eb61 0303 	sbc.w	r3, r1, r3
 800271c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800271e:	f240 3321 	movw	r3, #801	@ 0x321
 8002722:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002726:	4602      	mov	r2, r0
 8002728:	429a      	cmp	r2, r3
 800272a:	460b      	mov	r3, r1
 800272c:	f173 0300 	sbcs.w	r3, r3, #0
 8002730:	db0c      	blt.n	800274c <Motor_Calculate+0x7e4>
 8002732:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002736:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 800273a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 800273e:	17da      	asrs	r2, r3, #31
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002748:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		// Apply the PWM value
		Motor_SetPwm(motor, (int16_t)output);
 800274c:	f9b7 3150 	ldrsh.w	r3, [r7, #336]	@ 0x150
 8002750:	4619      	mov	r1, r3
 8002752:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002756:	f7ff fadb 	bl	8001d10 <Motor_SetPwm>

		// Update the last update time
		motor->pid.lastUpdateTime = currentTime;
 800275a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800275e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002762:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
}
 8002766:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800276a:	46bd      	mov	sp, r7
 800276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002770:	000c96a9 	.word	0x000c96a9
 8002774:	000c96a8 	.word	0x000c96a8
 8002778:	fff36958 	.word	0xfff36958

0800277c <Motor_Update>:

// Update the motor state (optional, e.g., for monitoring or control logic)
void Motor_Update(Motor *motor) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

	CalculateHallTiming(motor);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f944 	bl	8002a12 <CalculateHallTiming>

	ReadHallSensors(motor);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f911 	bl	80029b2 <ReadHallSensors>

	bool direction = motor->isDirInverted ? !motor->direction : motor->direction;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00e      	beq.n	80027b8 <Motor_Update+0x3c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e007      	b.n	80027c8 <Motor_Update+0x4c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	73fb      	strb	r3, [r7, #15]

	if(motor->hallState == motor->commutationOrder[0]) {
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d106      	bne.n	80027e8 <Motor_Update+0x6c>
		SetPhases(motor, PHASE_A_IDX, PHASE_C_IDX, direction);
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2202      	movs	r2, #2
 80027de:	2100      	movs	r1, #0
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f84f 	bl	8002884 <SetPhases>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
	}
	else if(motor->hallState == motor->commutationOrder[5]) {
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
	}
}
 80027e6:	e049      	b.n	800287c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[1]) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d106      	bne.n	8002806 <Motor_Update+0x8a>
		SetPhases(motor, PHASE_A_IDX, PHASE_B_IDX, direction);
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2201      	movs	r2, #1
 80027fc:	2100      	movs	r1, #0
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f840 	bl	8002884 <SetPhases>
}
 8002804:	e03a      	b.n	800287c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[2]) {
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002812:	429a      	cmp	r2, r3
 8002814:	d106      	bne.n	8002824 <Motor_Update+0xa8>
		SetPhases(motor, PHASE_C_IDX, PHASE_B_IDX, direction);
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2201      	movs	r2, #1
 800281a:	2102      	movs	r1, #2
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f831 	bl	8002884 <SetPhases>
}
 8002822:	e02b      	b.n	800287c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[3]) {
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <Motor_Update+0xc6>
		SetPhases(motor, PHASE_C_IDX, PHASE_A_IDX, direction);
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2200      	movs	r2, #0
 8002838:	2102      	movs	r1, #2
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f822 	bl	8002884 <SetPhases>
}
 8002840:	e01c      	b.n	800287c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[4]) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800284e:	429a      	cmp	r2, r3
 8002850:	d106      	bne.n	8002860 <Motor_Update+0xe4>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2200      	movs	r2, #0
 8002856:	2101      	movs	r1, #1
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f813 	bl	8002884 <SetPhases>
}
 800285e:	e00d      	b.n	800287c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[5]) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800286c:	429a      	cmp	r2, r3
 800286e:	d105      	bne.n	800287c <Motor_Update+0x100>
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2202      	movs	r2, #2
 8002874:	2101      	movs	r1, #1
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f804 	bl	8002884 <SetPhases>
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <SetPhases>:

void SetPhases(Motor *motor, uint8_t highPhase, uint8_t lowPhase, bool direction) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	70fb      	strb	r3, [r7, #3]
 8002896:	460b      	mov	r3, r1
 8002898:	70bb      	strb	r3, [r7, #2]
 800289a:	4613      	mov	r3, r2
 800289c:	707b      	strb	r3, [r7, #1]
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d82b      	bhi.n	80028fc <SetPhases+0x78>
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d828      	bhi.n	80028fc <SetPhases+0x78>
	if(highPhase == lowPhase) return;
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	78bb      	ldrb	r3, [r7, #2]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d026      	beq.n	8002900 <SetPhases+0x7c>

	uint8_t extraPhase = PHASE_A_IDX + PHASE_B_IDX + PHASE_C_IDX - highPhase - lowPhase;
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	78bb      	ldrb	r3, [r7, #2]
 80028b6:	4413      	add	r3, r2
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f1c3 0303 	rsb	r3, r3, #3
 80028be:	73fb      	strb	r3, [r7, #15]

	SetPhase(motor, extraPhase, false, false);
 80028c0:	7bf9      	ldrb	r1, [r7, #15]
 80028c2:	2300      	movs	r3, #0
 80028c4:	2200      	movs	r2, #0
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f81e 	bl	8002908 <SetPhase>

	SetPhase(motor, highPhase, true, direction);
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	78f9      	ldrb	r1, [r7, #3]
 80028d0:	2201      	movs	r2, #1
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f818 	bl	8002908 <SetPhase>
	SetPhase(motor, lowPhase, true, !direction);
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f083 0301 	eor.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	78b9      	ldrb	r1, [r7, #2]
 80028f2:	2201      	movs	r2, #1
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f807 	bl	8002908 <SetPhase>
 80028fa:	e002      	b.n	8002902 <SetPhases+0x7e>
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 80028fc:	bf00      	nop
 80028fe:	e000      	b.n	8002902 <SetPhases+0x7e>
	if(highPhase == lowPhase) return;
 8002900:	bf00      	nop

}
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <SetPhase>:

void SetPhase(Motor *motor, uint8_t phase,  bool OnorOff, bool HighOrLow) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	461a      	mov	r2, r3
 8002916:	4603      	mov	r3, r0
 8002918:	70fb      	strb	r3, [r7, #3]
 800291a:	460b      	mov	r3, r1
 800291c:	70bb      	strb	r3, [r7, #2]
 800291e:	4613      	mov	r3, r2
 8002920:	707b      	strb	r3, [r7, #1]
	if(OnorOff) {
 8002922:	78bb      	ldrb	r3, [r7, #2]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02c      	beq.n	8002982 <SetPhase+0x7a>
		if(HighOrLow) {
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d014      	beq.n	8002958 <SetPhase+0x50>
			HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3218      	adds	r2, #24
 8002938:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800293c:	4619      	mov	r1, r3
 800293e:	f007 fb19 	bl	8009f74 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(motor->Timer, motor->phaseChannel[phase]);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3218      	adds	r2, #24
 800294c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002950:	4619      	mov	r1, r3
 8002952:	f005 fca1 	bl	8008298 <HAL_TIM_PWM_Start>
		}
	} else {
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
	}
}
 8002956:	e028      	b.n	80029aa <SetPhase+0xa2>
			HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3218      	adds	r2, #24
 8002962:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002966:	4619      	mov	r1, r3
 8002968:	f005 fda8 	bl	80084bc <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(motor->Timer, motor->phaseChannel[phase]);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3218      	adds	r2, #24
 8002976:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800297a:	4619      	mov	r1, r3
 800297c:	f007 fa38 	bl	8009df0 <HAL_TIMEx_PWMN_Start>
}
 8002980:	e013      	b.n	80029aa <SetPhase+0xa2>
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3218      	adds	r2, #24
 800298c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002990:	4619      	mov	r1, r3
 8002992:	f005 fd93 	bl	80084bc <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3218      	adds	r2, #24
 80029a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f007 fae5 	bl	8009f74 <HAL_TIMEx_PWMN_Stop>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <ReadHallSensors>:

void ReadHallSensors(Motor *motor) {
 80029b2:	b590      	push	{r4, r7, lr}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8a9b      	ldrh	r3, [r3, #20]
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f003 fd97 	bl	80064f8 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall2_Port, motor->Hall2_Pin)) << 1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8b9b      	ldrh	r3, [r3, #28]
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f003 fd8d 	bl	80064f8 <HAL_GPIO_ReadPin>
 80029de:	4603      	mov	r3, r0
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	4323      	orrs	r3, r4
 80029e6:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall3_Port, motor->Hall3_Pin) << 2);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1a      	ldr	r2, [r3, #32]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f003 fd80 	bl	80064f8 <HAL_GPIO_ReadPin>
 80029f8:	4603      	mov	r3, r0
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	b25b      	sxtb	r3, r3
 80029fe:	4323      	orrs	r3, r4
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	b2da      	uxtb	r2, r3
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd90      	pop	{r4, r7, pc}

08002a12 <CalculateHallTiming>:


void CalculateHallTiming(Motor *motor) {
 8002a12:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	uint32_t currentMicroTime = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]

	if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	7f1b      	ldrb	r3, [r3, #28]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d109      	bne.n	8002a3e <CalculateHallTiming+0x2c>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall1_Channel);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f006 fba5 	bl	8009184 <HAL_TIM_ReadCapturedValue>
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	e01c      	b.n	8002a78 <CalculateHallTiming+0x66>
	} else if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a42:	7f1b      	ldrb	r3, [r3, #28]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d109      	bne.n	8002a5c <CalculateHallTiming+0x4a>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall2_Channel);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	885b      	ldrh	r3, [r3, #2]
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f006 fb96 	bl	8009184 <HAL_TIM_ReadCapturedValue>
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	e00d      	b.n	8002a78 <CalculateHallTiming+0x66>
	} else if (motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	7f1b      	ldrb	r3, [r3, #28]
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d108      	bne.n	8002a78 <CalculateHallTiming+0x66>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall3_Channel);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	889b      	ldrh	r3, [r3, #4]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f006 fb87 	bl	8009184 <HAL_TIM_ReadCapturedValue>
 8002a76:	60f8      	str	r0, [r7, #12]
	}

	motor->pid.totalHallTime += currentMicroTime - motor->pid.lastHallTime;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	1acb      	subs	r3, r1, r3
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	675a      	str	r2, [r3, #116]	@ 0x74

	motor->pid.lastHallTime = currentMicroTime;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	671a      	str	r2, [r3, #112]	@ 0x70

	if(motor->direction) motor->pid.hallCount++;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <CalculateHallTiming+0x9e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002aa0:	f112 0801 	adds.w	r8, r2, #1
 8002aa4:	f143 0900 	adc.w	r9, r3, #0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	e9c3 8918 	strd	r8, r9, [r3, #96]	@ 0x60
	else motor->pid.hallCount--;
}
 8002aae:	e008      	b.n	8002ac2 <CalculateHallTiming+0xb0>
	else motor->pid.hallCount--;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002ab6:	1e54      	subs	r4, r2, #1
 8002ab8:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	e9c3 4518 	strd	r4, r5, [r3, #96]	@ 0x60
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002acc <CalculateDistance>:

void CalculateDistance(Motor *motor) {
 8002acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
	motor->distance = (int16_t)(motor->pid.hallCount * RPM_INPUT_DIVISOR / HALL_TICKS_PER_REV);
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	e9d1 4518 	ldrd	r4, r5, [r1, #96]	@ 0x60
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	1806      	adds	r6, r0, r0
 8002ae2:	603e      	str	r6, [r7, #0]
 8002ae4:	4149      	adcs	r1, r1
 8002ae6:	6079      	str	r1, [r7, #4]
 8002ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aec:	1902      	adds	r2, r0, r4
 8002aee:	eb41 0305 	adc.w	r3, r1, r5
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	0159      	lsls	r1, r3, #5
 8002afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b00:	0150      	lsls	r0, r2, #5
 8002b02:	eb12 0800 	adds.w	r8, r2, r0
 8002b06:	eb43 0901 	adc.w	r9, r3, r1
 8002b0a:	eb18 0a04 	adds.w	sl, r8, r4
 8002b0e:	eb49 0b05 	adc.w	fp, r9, r5
 8002b12:	f44f 7246 	mov.w	r2, #792	@ 0x318
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	4650      	mov	r0, sl
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	f7fd fb7b 	bl	8000218 <__aeabi_ldivmod>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	b212      	sxth	r2, r2
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002b36 <Motor_GetDistance>:

void Motor_GetDistance(Motor *motor, int16_t *distance) {
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
	*distance = motor->distance;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	801a      	strh	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <Motor_GetSpeed>:

void Motor_GetSpeed(Motor *motor, int16_t *speed) {
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
	*speed = motor->current_speed;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002b66:	b212      	sxth	r2, r2
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	801a      	strh	r2, [r3, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <RobotSystem_Init>:
 */

#include "robot_system.h"

// Initialize the robot system with configurations for the left and right motors
void RobotSystem_Init(RobotSystem *robotSystem, Motor leftMotorConfig, Motor rightMotorConfig) {
 8002b78:	b082      	sub	sp, #8
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	f107 0110 	add.w	r1, r7, #16
 8002b86:	e881 000c 	stmia.w	r1, {r2, r3}
    // Copy configurations into the robot system
    robotSystem->leftWheel = leftMotorConfig;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	22c0      	movs	r2, #192	@ 0xc0
 8002b94:	4619      	mov	r1, r3
 8002b96:	f009 f8ff 	bl	800bd98 <memcpy>
    robotSystem->rightWheel = rightMotorConfig;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	33c0      	adds	r3, #192	@ 0xc0
 8002b9e:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8002ba2:	22c0      	movs	r2, #192	@ 0xc0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f009 f8f7 	bl	800bd98 <memcpy>

    HAL_DAC_Start(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f002 fa41 	bl	8005040 <HAL_DAC_Start>

    RobotSystem_SetCurrentLimit(robotSystem, MAX_CURRENT_LIMIT);
 8002bbe:	210a      	movs	r1, #10
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f8e7 	bl	8002d94 <RobotSystem_SetCurrentLimit>

    // Initialize the left and right motors
    Motor_Init(&robotSystem->leftWheel);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ffe2 	bl	8001b92 <Motor_Init>
    Motor_Init(&robotSystem->rightWheel);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	33c0      	adds	r3, #192	@ 0xc0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe ffdd 	bl	8001b92 <Motor_Init>

    RobotSystem_Enable(robotSystem);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f8b1 	bl	8002d40 <RobotSystem_Enable>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002be8:	b002      	add	sp, #8
 8002bea:	4770      	bx	lr

08002bec <RobotSystem_SetSpeed>:

// Set the speeds of the left and right motors
void RobotSystem_SetSpeed(RobotSystem *robotSystem, int16_t leftSpeed, int16_t rightSpeed) {
 8002bec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	807b      	strh	r3, [r7, #2]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	803b      	strh	r3, [r7, #0]
    Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c04:	17da      	asrs	r2, r3, #31
 8002c06:	4698      	mov	r8, r3
 8002c08:	4691      	mov	r9, r2
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	4608      	mov	r0, r1
 8002c10:	f7ff f830 	bl	8001c74 <Motor_SetSpeed>
    Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002c1a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c1e:	17da      	asrs	r2, r3, #31
 8002c20:	461c      	mov	r4, r3
 8002c22:	4615      	mov	r5, r2
 8002c24:	4622      	mov	r2, r4
 8002c26:	462b      	mov	r3, r5
 8002c28:	4608      	mov	r0, r1
 8002c2a:	f7ff f823 	bl	8001c74 <Motor_SetSpeed>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002c38 <RobotSystem_SetLeftSpeed>:

void RobotSystem_SetLeftSpeed(RobotSystem *robotSystem, int16_t leftSpeed) {
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
	Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c4a:	17da      	asrs	r2, r3, #31
 8002c4c:	461c      	mov	r4, r3
 8002c4e:	4615      	mov	r5, r2
 8002c50:	4622      	mov	r2, r4
 8002c52:	462b      	mov	r3, r5
 8002c54:	4608      	mov	r0, r1
 8002c56:	f7ff f80d 	bl	8001c74 <Motor_SetSpeed>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bdb0      	pop	{r4, r5, r7, pc}

08002c62 <RobotSystem_SetRightSpeed>:

void RobotSystem_SetRightSpeed(RobotSystem *robotSystem, int16_t rightSpeed) {
 8002c62:	b5b0      	push	{r4, r5, r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	807b      	strh	r3, [r7, #2]
	Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002c74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c78:	17da      	asrs	r2, r3, #31
 8002c7a:	461c      	mov	r4, r3
 8002c7c:	4615      	mov	r5, r2
 8002c7e:	4622      	mov	r2, r4
 8002c80:	462b      	mov	r3, r5
 8002c82:	4608      	mov	r0, r1
 8002c84:	f7fe fff6 	bl	8001c74 <Motor_SetSpeed>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdb0      	pop	{r4, r5, r7, pc}

08002c90 <RobotSystem_GetMotorPosition>:
void RobotSystem_Stop(RobotSystem *robotSystem) {
    Motor_Stop(&robotSystem->leftWheel);
    Motor_Stop(&robotSystem->rightWheel);
}

void RobotSystem_GetMotorPosition(RobotSystem *robotSystem, int16_t *leftPos, int16_t *rightPos) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
	Motor_GetDistance(&robotSystem->leftWheel, leftPos);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff48 	bl	8002b36 <Motor_GetDistance>
	Motor_GetDistance(&robotSystem->rightWheel, rightPos);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	33c0      	adds	r3, #192	@ 0xc0
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff42 	bl	8002b36 <Motor_GetDistance>
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <RobotSystem_GetMotorSpeed>:

void RobotSystem_GetMotorSpeed(RobotSystem *robotSystem, int16_t *leftSpeed, int16_t *rightSpeed) {
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
	Motor_GetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff43 	bl	8002b56 <Motor_GetSpeed>
	Motor_GetSpeed(&robotSystem->rightWheel, rightSpeed);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	33c0      	adds	r3, #192	@ 0xc0
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff3d 	bl	8002b56 <Motor_GetSpeed>
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <RobotSystem_Calculate>:

void RobotSystem_Calculate(RobotSystem *robotSystem) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	Motor_Calculate(&robotSystem->leftWheel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f93a 	bl	8001f68 <Motor_Calculate>
	Motor_Calculate(&robotSystem->rightWheel);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	33c0      	adds	r3, #192	@ 0xc0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f935 	bl	8001f68 <Motor_Calculate>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <RobotSystem_InterruptHandler>:

void RobotSystem_InterruptHandler(RobotSystem *robotSystem, TIM_HandleTypeDef *htim) {
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
	if (htim == robotSystem->leftWheel.HallTimer) {
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d103      	bne.n	8002d22 <RobotSystem_InterruptHandler+0x1c>
		Motor_Update(&robotSystem->leftWheel);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fd2d 	bl	800277c <Motor_Update>
	}

	if (htim == robotSystem->rightWheel.HallTimer) {
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d104      	bne.n	8002d38 <RobotSystem_InterruptHandler+0x32>
		Motor_Update(&robotSystem->rightWheel);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	33c0      	adds	r3, #192	@ 0xc0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fd22 	bl	800277c <Motor_Update>
	}
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <RobotSystem_Enable>:

void RobotSystem_Enable (RobotSystem *robotSystem) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	RobotSystem_SetEnablePin(robotSystem, true);
 8002d48:	2101      	movs	r1, #1
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f804 	bl	8002d58 <RobotSystem_SetEnablePin>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <RobotSystem_SetEnablePin>:

void RobotSystem_Disable (RobotSystem *robotSystem) {
	RobotSystem_SetEnablePin(robotSystem, false);
}

void RobotSystem_SetEnablePin(RobotSystem *robotSystem, bool onOrOff) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
	bool setValue = true;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
	if(onOrOff) setValue = true;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <RobotSystem_SetEnablePin+0x1c>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e001      	b.n	8002d78 <RobotSystem_SetEnablePin+0x20>
	else setValue = false;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(robotSystem->Enable_Port, robotSystem->Enable_Pin, setValue);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	4619      	mov	r1, r3
 8002d88:	f003 fbce 	bl	8006528 <HAL_GPIO_WritePin>
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <RobotSystem_SetCurrentLimit>:

void RobotSystem_SetCurrentLimit(RobotSystem *robotSystem, uint16_t currentLimit) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
	if(currentLimit > MAX_CURRENT_LIMIT) {
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	2b0a      	cmp	r3, #10
 8002da4:	d901      	bls.n	8002daa <RobotSystem_SetCurrentLimit+0x16>
		currentLimit = MAX_CURRENT_LIMIT;
 8002da6:	230a      	movs	r3, #10
 8002da8:	807b      	strh	r3, [r7, #2]
	}
	robotSystem->currentLimit = currentLimit;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	887a      	ldrh	r2, [r7, #2]
 8002dae:	f8a3 218e 	strh.w	r2, [r3, #398]	@ 0x18e

	uint32_t voltage = currentLimit * SHUNT_RESISTOR * RESISTORS / RESISTOR2;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	f245 32fc 	movw	r2, #21500	@ 0x53fc
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	4a11      	ldr	r2, [pc, #68]	@ (8002e04 <RobotSystem_SetCurrentLimit+0x70>)
 8002dbe:	fb82 1203 	smull	r1, r2, r2, r3
 8002dc2:	10d2      	asrs	r2, r2, #3
 8002dc4:	17db      	asrs	r3, r3, #31
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	60fb      	str	r3, [r7, #12]
	uint32_t dac_value = 4095 * voltage / 3300; // Convert voltage to digital value
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	031b      	lsls	r3, r3, #12
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <RobotSystem_SetCurrentLimit+0x74>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel, DAC_ALIGN_12B_R, dac_value);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 0188 	ldr.w	r0, [r3, #392]	@ 0x188
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 8002dea:	4619      	mov	r1, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f002 f992 	bl	8005118 <HAL_DAC_SetValue>
	HAL_Delay(25);
 8002df4:	2019      	movs	r0, #25
 8002df6:	f000 fecf 	bl	8003b98 <HAL_Delay>
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	1b4e81b5 	.word	0x1b4e81b5
 8002e08:	09ee009f 	.word	0x09ee009f

08002e0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e12:	4a1c      	ldr	r2, [pc, #112]	@ (8002e84 <MX_SPI1_Init+0x78>)
 8002e14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e16:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e1e:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e24:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e26:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e42:	2218      	movs	r2, #24
 8002e44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e66:	2208      	movs	r2, #8
 8002e68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <MX_SPI1_Init+0x74>)
 8002e6c:	f004 fbb8 	bl	80075e0 <HAL_SPI_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e76:	f7fe fe86 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200005ec 	.word	0x200005ec
 8002e84:	40013000 	.word	0x40013000

08002e88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a17      	ldr	r2, [pc, #92]	@ (8002f04 <HAL_SPI_MspInit+0x7c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d127      	bne.n	8002efa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eaa:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eae:	4a16      	ldr	r2, [pc, #88]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002eb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002eb6:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ec2:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	4a10      	ldr	r2, [pc, #64]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002eda:	231c      	movs	r3, #28
 8002edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eea:	2305      	movs	r3, #5
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <HAL_SPI_MspInit+0x84>)
 8002ef6:	f003 f97d 	bl	80061f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002efa:	bf00      	nop
 8002efc:	3728      	adds	r7, #40	@ 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40013000 	.word	0x40013000
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	48001800 	.word	0x48001800

08002f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f22:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	4a08      	ldr	r2, [pc, #32]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f3a:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f46:	f003 fbc3 	bl	80066d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000

08002f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <NMI_Handler+0x4>

08002f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <HardFault_Handler+0x4>

08002f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <MemManage_Handler+0x4>

08002f70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <BusFault_Handler+0x4>

08002f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <UsageFault_Handler+0x4>

08002f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fae:	f000 fdd5 	bl	8003b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f003 facc 	bl	8006558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002fc8:	4802      	ldr	r0, [pc, #8]	@ (8002fd4 <DMA1_Channel1_IRQHandler+0x10>)
 8002fca:	f002 fc70 	bl	80058ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000814 	.word	0x20000814

08002fd8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002fdc:	4802      	ldr	r0, [pc, #8]	@ (8002fe8 <FDCAN1_IT0_IRQHandler+0x10>)
 8002fde:	f002 ff0f 	bl	8005e00 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200004a0 	.word	0x200004a0

08002fec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ff0:	4802      	ldr	r0, [pc, #8]	@ (8002ffc <TIM2_IRQHandler+0x10>)
 8002ff2:	f005 fcb1 	bl	8008958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000069c 	.word	0x2000069c

08003000 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003004:	4802      	ldr	r0, [pc, #8]	@ (8003010 <USART2_IRQHandler+0x10>)
 8003006:	f007 fa87 	bl	800a518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000780 	.word	0x20000780

08003014 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003018:	4802      	ldr	r0, [pc, #8]	@ (8003024 <TIM5_IRQHandler+0x10>)
 800301a:	f005 fc9d 	bl	8008958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200006e8 	.word	0x200006e8

08003028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <SystemInit+0x20>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	4a05      	ldr	r2, [pc, #20]	@ (8003048 <SystemInit+0x20>)
 8003034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b09c      	sub	sp, #112	@ 0x70
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003052:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003060:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800306c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2234      	movs	r2, #52	@ 0x34
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f008 fe5a 	bl	800bd40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800308c:	4b51      	ldr	r3, [pc, #324]	@ (80031d4 <MX_TIM1_Init+0x188>)
 800308e:	4a52      	ldr	r2, [pc, #328]	@ (80031d8 <MX_TIM1_Init+0x18c>)
 8003090:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8003092:	4b50      	ldr	r3, [pc, #320]	@ (80031d4 <MX_TIM1_Init+0x188>)
 8003094:	2210      	movs	r2, #16
 8003096:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003098:	4b4e      	ldr	r3, [pc, #312]	@ (80031d4 <MX_TIM1_Init+0x188>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800309e:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80030a0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80030a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a6:	4b4b      	ldr	r3, [pc, #300]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030ac:	4b49      	ldr	r3, [pc, #292]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b2:	4b48      	ldr	r3, [pc, #288]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030b8:	4846      	ldr	r0, [pc, #280]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80030ba:	f005 f835 	bl	8008128 <HAL_TIM_Base_Init>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80030c4:	f7fe fd5f 	bl	8001b86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030cc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80030d2:	4619      	mov	r1, r3
 80030d4:	483f      	ldr	r0, [pc, #252]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80030d6:	f005 ff3f 	bl	8008f58 <HAL_TIM_ConfigClockSource>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80030e0:	f7fe fd51 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030e4:	483b      	ldr	r0, [pc, #236]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80030e6:	f005 f876 	bl	80081d6 <HAL_TIM_PWM_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80030f0:	f7fe fd49 	bl	8001b86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f4:	2300      	movs	r3, #0
 80030f6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003100:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003104:	4619      	mov	r1, r3
 8003106:	4833      	ldr	r0, [pc, #204]	@ (80031d4 <MX_TIM1_Init+0x188>)
 8003108:	f006 ff92 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003112:	f7fe fd38 	bl	8001b86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003116:	2360      	movs	r3, #96	@ 0x60
 8003118:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800311e:	2300      	movs	r3, #0
 8003120:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003122:	2300      	movs	r3, #0
 8003124:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003132:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003136:	2200      	movs	r2, #0
 8003138:	4619      	mov	r1, r3
 800313a:	4826      	ldr	r0, [pc, #152]	@ (80031d4 <MX_TIM1_Init+0x188>)
 800313c:	f005 fdf8 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003146:	f7fe fd1e 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800314a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800314e:	2204      	movs	r2, #4
 8003150:	4619      	mov	r1, r3
 8003152:	4820      	ldr	r0, [pc, #128]	@ (80031d4 <MX_TIM1_Init+0x188>)
 8003154:	f005 fdec 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800315e:	f7fe fd12 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003162:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003166:	2208      	movs	r2, #8
 8003168:	4619      	mov	r1, r3
 800316a:	481a      	ldr	r0, [pc, #104]	@ (80031d4 <MX_TIM1_Init+0x188>)
 800316c:	f005 fde0 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003176:	f7fe fd06 	bl	8001b86 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800318e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003192:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80031aa:	2300      	movs	r3, #0
 80031ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4807      	ldr	r0, [pc, #28]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80031b8:	f006 ffd0 	bl	800a15c <HAL_TIMEx_ConfigBreakDeadTime>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80031c2:	f7fe fce0 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031c6:	4803      	ldr	r0, [pc, #12]	@ (80031d4 <MX_TIM1_Init+0x188>)
 80031c8:	f000 fa8a 	bl	80036e0 <HAL_TIM_MspPostInit>

}
 80031cc:	bf00      	nop
 80031ce:	3770      	adds	r7, #112	@ 0x70
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000650 	.word	0x20000650
 80031d8:	40012c00 	.word	0x40012c00

080031dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08c      	sub	sp, #48	@ 0x30
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031e2:	f107 0320 	add.w	r3, r7, #32
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003208:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <MX_TIM2_Init+0x108>)
 800320a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800320e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8003210:	4b34      	ldr	r3, [pc, #208]	@ (80032e4 <MX_TIM2_Init+0x108>)
 8003212:	22a9      	movs	r2, #169	@ 0xa9
 8003214:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b33      	ldr	r3, [pc, #204]	@ (80032e4 <MX_TIM2_Init+0x108>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800321c:	4b31      	ldr	r3, [pc, #196]	@ (80032e4 <MX_TIM2_Init+0x108>)
 800321e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003222:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003224:	4b2f      	ldr	r3, [pc, #188]	@ (80032e4 <MX_TIM2_Init+0x108>)
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322a:	4b2e      	ldr	r3, [pc, #184]	@ (80032e4 <MX_TIM2_Init+0x108>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003230:	482c      	ldr	r0, [pc, #176]	@ (80032e4 <MX_TIM2_Init+0x108>)
 8003232:	f004 ff79 	bl	8008128 <HAL_TIM_Base_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800323c:	f7fe fca3 	bl	8001b86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003244:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003246:	f107 0320 	add.w	r3, r7, #32
 800324a:	4619      	mov	r1, r3
 800324c:	4825      	ldr	r0, [pc, #148]	@ (80032e4 <MX_TIM2_Init+0x108>)
 800324e:	f005 fe83 	bl	8008f58 <HAL_TIM_ConfigClockSource>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003258:	f7fe fc95 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800325c:	4821      	ldr	r0, [pc, #132]	@ (80032e4 <MX_TIM2_Init+0x108>)
 800325e:	f005 f9c9 	bl	80085f4 <HAL_TIM_IC_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003268:	f7fe fc8d 	bl	8001b86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	4619      	mov	r1, r3
 800327a:	481a      	ldr	r0, [pc, #104]	@ (80032e4 <MX_TIM2_Init+0x108>)
 800327c:	f006 fed8 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003286:	f7fe fc7e 	bl	8001b86 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800328a:	230a      	movs	r3, #10
 800328c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800328e:	2301      	movs	r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2200      	movs	r2, #0
 800329e:	4619      	mov	r1, r3
 80032a0:	4810      	ldr	r0, [pc, #64]	@ (80032e4 <MX_TIM2_Init+0x108>)
 80032a2:	f005 fca8 	bl	8008bf6 <HAL_TIM_IC_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80032ac:	f7fe fc6b 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	2204      	movs	r2, #4
 80032b4:	4619      	mov	r1, r3
 80032b6:	480b      	ldr	r0, [pc, #44]	@ (80032e4 <MX_TIM2_Init+0x108>)
 80032b8:	f005 fc9d 	bl	8008bf6 <HAL_TIM_IC_ConfigChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80032c2:	f7fe fc60 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	2208      	movs	r2, #8
 80032ca:	4619      	mov	r1, r3
 80032cc:	4805      	ldr	r0, [pc, #20]	@ (80032e4 <MX_TIM2_Init+0x108>)
 80032ce:	f005 fc92 	bl	8008bf6 <HAL_TIM_IC_ConfigChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80032d8:	f7fe fc55 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032dc:	bf00      	nop
 80032de:	3730      	adds	r7, #48	@ 0x30
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	2000069c 	.word	0x2000069c

080032e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	@ 0x30
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ee:	f107 0320 	add.w	r3, r7, #32
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003314:	4b36      	ldr	r3, [pc, #216]	@ (80033f0 <MX_TIM5_Init+0x108>)
 8003316:	4a37      	ldr	r2, [pc, #220]	@ (80033f4 <MX_TIM5_Init+0x10c>)
 8003318:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 800331a:	4b35      	ldr	r3, [pc, #212]	@ (80033f0 <MX_TIM5_Init+0x108>)
 800331c:	22a9      	movs	r2, #169	@ 0xa9
 800331e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003320:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <MX_TIM5_Init+0x108>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003326:	4b32      	ldr	r3, [pc, #200]	@ (80033f0 <MX_TIM5_Init+0x108>)
 8003328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800332c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332e:	4b30      	ldr	r3, [pc, #192]	@ (80033f0 <MX_TIM5_Init+0x108>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003334:	4b2e      	ldr	r3, [pc, #184]	@ (80033f0 <MX_TIM5_Init+0x108>)
 8003336:	2200      	movs	r2, #0
 8003338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800333a:	482d      	ldr	r0, [pc, #180]	@ (80033f0 <MX_TIM5_Init+0x108>)
 800333c:	f004 fef4 	bl	8008128 <HAL_TIM_Base_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8003346:	f7fe fc1e 	bl	8001b86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800334e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003350:	f107 0320 	add.w	r3, r7, #32
 8003354:	4619      	mov	r1, r3
 8003356:	4826      	ldr	r0, [pc, #152]	@ (80033f0 <MX_TIM5_Init+0x108>)
 8003358:	f005 fdfe 	bl	8008f58 <HAL_TIM_ConfigClockSource>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003362:	f7fe fc10 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003366:	4822      	ldr	r0, [pc, #136]	@ (80033f0 <MX_TIM5_Init+0x108>)
 8003368:	f005 f944 	bl	80085f4 <HAL_TIM_IC_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003372:	f7fe fc08 	bl	8001b86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800337e:	f107 0314 	add.w	r3, r7, #20
 8003382:	4619      	mov	r1, r3
 8003384:	481a      	ldr	r0, [pc, #104]	@ (80033f0 <MX_TIM5_Init+0x108>)
 8003386:	f006 fe53 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8003390:	f7fe fbf9 	bl	8001b86 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003394:	230a      	movs	r3, #10
 8003396:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003398:	2301      	movs	r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2200      	movs	r2, #0
 80033a8:	4619      	mov	r1, r3
 80033aa:	4811      	ldr	r0, [pc, #68]	@ (80033f0 <MX_TIM5_Init+0x108>)
 80033ac:	f005 fc23 	bl	8008bf6 <HAL_TIM_IC_ConfigChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80033b6:	f7fe fbe6 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	2204      	movs	r2, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	480b      	ldr	r0, [pc, #44]	@ (80033f0 <MX_TIM5_Init+0x108>)
 80033c2:	f005 fc18 	bl	8008bf6 <HAL_TIM_IC_ConfigChannel>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 80033cc:	f7fe fbdb 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	2208      	movs	r2, #8
 80033d4:	4619      	mov	r1, r3
 80033d6:	4806      	ldr	r0, [pc, #24]	@ (80033f0 <MX_TIM5_Init+0x108>)
 80033d8:	f005 fc0d 	bl	8008bf6 <HAL_TIM_IC_ConfigChannel>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 80033e2:	f7fe fbd0 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80033e6:	bf00      	nop
 80033e8:	3730      	adds	r7, #48	@ 0x30
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200006e8 	.word	0x200006e8
 80033f4:	40000c00 	.word	0x40000c00

080033f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b09c      	sub	sp, #112	@ 0x70
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800340c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003418:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
 8003428:	615a      	str	r2, [r3, #20]
 800342a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	2234      	movs	r2, #52	@ 0x34
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f008 fc84 	bl	800bd40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003438:	4b51      	ldr	r3, [pc, #324]	@ (8003580 <MX_TIM8_Init+0x188>)
 800343a:	4a52      	ldr	r2, [pc, #328]	@ (8003584 <MX_TIM8_Init+0x18c>)
 800343c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 800343e:	4b50      	ldr	r3, [pc, #320]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003440:	2210      	movs	r2, #16
 8003442:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003444:	4b4e      	ldr	r3, [pc, #312]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 800344a:	4b4d      	ldr	r3, [pc, #308]	@ (8003580 <MX_TIM8_Init+0x188>)
 800344c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003450:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003452:	4b4b      	ldr	r3, [pc, #300]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003458:	4b49      	ldr	r3, [pc, #292]	@ (8003580 <MX_TIM8_Init+0x188>)
 800345a:	2200      	movs	r2, #0
 800345c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345e:	4b48      	ldr	r3, [pc, #288]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003464:	4846      	ldr	r0, [pc, #280]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003466:	f004 fe5f 	bl	8008128 <HAL_TIM_Base_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003470:	f7fe fb89 	bl	8001b86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003478:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800347a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800347e:	4619      	mov	r1, r3
 8003480:	483f      	ldr	r0, [pc, #252]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003482:	f005 fd69 	bl	8008f58 <HAL_TIM_ConfigClockSource>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800348c:	f7fe fb7b 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003490:	483b      	ldr	r0, [pc, #236]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003492:	f004 fea0 	bl	80081d6 <HAL_TIM_PWM_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800349c:	f7fe fb73 	bl	8001b86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80034ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034b0:	4619      	mov	r1, r3
 80034b2:	4833      	ldr	r0, [pc, #204]	@ (8003580 <MX_TIM8_Init+0x188>)
 80034b4:	f006 fdbc 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80034be:	f7fe fb62 	bl	8001b86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034c2:	2360      	movs	r3, #96	@ 0x60
 80034c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ca:	2300      	movs	r3, #0
 80034cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034ce:	2300      	movs	r3, #0
 80034d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034e2:	2200      	movs	r2, #0
 80034e4:	4619      	mov	r1, r3
 80034e6:	4826      	ldr	r0, [pc, #152]	@ (8003580 <MX_TIM8_Init+0x188>)
 80034e8:	f005 fc22 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80034f2:	f7fe fb48 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034fa:	2204      	movs	r2, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4820      	ldr	r0, [pc, #128]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003500:	f005 fc16 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800350a:	f7fe fb3c 	bl	8001b86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800350e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003512:	2208      	movs	r2, #8
 8003514:	4619      	mov	r1, r3
 8003516:	481a      	ldr	r0, [pc, #104]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003518:	f005 fc0a 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003522:	f7fe fb30 	bl	8001b86 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800353a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800353e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003544:	2300      	movs	r3, #0
 8003546:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800354c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003550:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003556:	2300      	movs	r3, #0
 8003558:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4807      	ldr	r0, [pc, #28]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003564:	f006 fdfa 	bl	800a15c <HAL_TIMEx_ConfigBreakDeadTime>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 800356e:	f7fe fb0a 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003572:	4803      	ldr	r0, [pc, #12]	@ (8003580 <MX_TIM8_Init+0x188>)
 8003574:	f000 f8b4 	bl	80036e0 <HAL_TIM_MspPostInit>

}
 8003578:	bf00      	nop
 800357a:	3770      	adds	r7, #112	@ 0x70
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000734 	.word	0x20000734
 8003584:	40013400 	.word	0x40013400

08003588 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08e      	sub	sp, #56	@ 0x38
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a48      	ldr	r2, [pc, #288]	@ (80036c8 <HAL_TIM_Base_MspInit+0x140>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d10c      	bne.n	80035c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035aa:	4b48      	ldr	r3, [pc, #288]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ae:	4a47      	ldr	r2, [pc, #284]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80035b6:	4b45      	ldr	r3, [pc, #276]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80035c2:	e07d      	b.n	80036c0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035cc:	d130      	bne.n	8003630 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ce:	4b3f      	ldr	r3, [pc, #252]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	4a3e      	ldr	r2, [pc, #248]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035da:	4b3c      	ldr	r3, [pc, #240]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035e6:	4b39      	ldr	r3, [pc, #228]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ea:	4a38      	ldr	r2, [pc, #224]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035ec:	f043 0308 	orr.w	r3, r3, #8
 80035f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035f2:	4b36      	ldr	r3, [pc, #216]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LMC_HALL1_Pin|LMC_HALL2_Pin|LMC_HALL3_Pin;
 80035fe:	2398      	movs	r3, #152	@ 0x98
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800360e:	2302      	movs	r3, #2
 8003610:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003616:	4619      	mov	r1, r3
 8003618:	482d      	ldr	r0, [pc, #180]	@ (80036d0 <HAL_TIM_Base_MspInit+0x148>)
 800361a:	f002 fdeb 	bl	80061f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2102      	movs	r1, #2
 8003622:	201c      	movs	r0, #28
 8003624:	f001 fcb5 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003628:	201c      	movs	r0, #28
 800362a:	f001 fccc 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
}
 800362e:	e047      	b.n	80036c0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM5)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a27      	ldr	r2, [pc, #156]	@ (80036d4 <HAL_TIM_Base_MspInit+0x14c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d131      	bne.n	800369e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800363a:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	4a23      	ldr	r2, [pc, #140]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6593      	str	r3, [r2, #88]	@ 0x58
 8003646:	4b21      	ldr	r3, [pc, #132]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003652:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	4a1d      	ldr	r2, [pc, #116]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 8003658:	f043 0320 	orr.w	r3, r3, #32
 800365c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800365e:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RMC_HALL2_Pin|RMC_HALL3_Pin|RMC_HALL1_Pin;
 800366a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 800367c:	2306      	movs	r3, #6
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003684:	4619      	mov	r1, r3
 8003686:	4814      	ldr	r0, [pc, #80]	@ (80036d8 <HAL_TIM_Base_MspInit+0x150>)
 8003688:	f002 fdb4 	bl	80061f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2102      	movs	r1, #2
 8003690:	2032      	movs	r0, #50	@ 0x32
 8003692:	f001 fc7e 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003696:	2032      	movs	r0, #50	@ 0x32
 8003698:	f001 fc95 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
}
 800369c:	e010      	b.n	80036c0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM8)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a0e      	ldr	r2, [pc, #56]	@ (80036dc <HAL_TIM_Base_MspInit+0x154>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10b      	bne.n	80036c0 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036a8:	4b08      	ldr	r3, [pc, #32]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80036aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ac:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80036ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_TIM_Base_MspInit+0x144>)
 80036b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
}
 80036c0:	bf00      	nop
 80036c2:	3738      	adds	r7, #56	@ 0x38
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40021000 	.word	0x40021000
 80036d0:	48000c00 	.word	0x48000c00
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	48001400 	.word	0x48001400
 80036dc:	40013400 	.word	0x40013400

080036e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	@ 0x30
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 031c 	add.w	r3, r7, #28
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a64      	ldr	r2, [pc, #400]	@ (8003890 <HAL_TIM_MspPostInit+0x1b0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d166      	bne.n	80037d0 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	4b64      	ldr	r3, [pc, #400]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003706:	4a63      	ldr	r2, [pc, #396]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800370e:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	4b5e      	ldr	r3, [pc, #376]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	4a5d      	ldr	r2, [pc, #372]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003726:	4b5b      	ldr	r3, [pc, #364]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003732:	4b58      	ldr	r3, [pc, #352]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	4a57      	ldr	r2, [pc, #348]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003738:	f043 0310 	orr.w	r3, r3, #16
 800373c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800373e:	4b55      	ldr	r3, [pc, #340]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_AL_RMC_Pin;
 800374a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800374e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003758:	2300      	movs	r3, #0
 800375a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800375c:	2304      	movs	r3, #4
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003760:	f107 031c 	add.w	r3, r7, #28
 8003764:	4619      	mov	r1, r3
 8003766:	484c      	ldr	r0, [pc, #304]	@ (8003898 <HAL_TIM_MspPostInit+0x1b8>)
 8003768:	f002 fd44 	bl	80061f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_AH_RMC_Pin|PWM_BH_RMC_Pin|PWM_CH_RMC_Pin;
 800376c:	2307      	movs	r3, #7
 800376e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	2300      	movs	r3, #0
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800377c:	2302      	movs	r3, #2
 800377e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003780:	f107 031c 	add.w	r3, r7, #28
 8003784:	4619      	mov	r1, r3
 8003786:	4844      	ldr	r0, [pc, #272]	@ (8003898 <HAL_TIM_MspPostInit+0x1b8>)
 8003788:	f002 fd34 	bl	80061f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_BL_RMC_Pin;
 800378c:	2301      	movs	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800379c:	2306      	movs	r3, #6
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_BL_RMC_GPIO_Port, &GPIO_InitStruct);
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4619      	mov	r1, r3
 80037a6:	483d      	ldr	r0, [pc, #244]	@ (800389c <HAL_TIM_MspPostInit+0x1bc>)
 80037a8:	f002 fd24 	bl	80061f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_CL_RMC_Pin;
 80037ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80037be:	2302      	movs	r3, #2
 80037c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CL_RMC_GPIO_Port, &GPIO_InitStruct);
 80037c2:	f107 031c 	add.w	r3, r7, #28
 80037c6:	4619      	mov	r1, r3
 80037c8:	4835      	ldr	r0, [pc, #212]	@ (80038a0 <HAL_TIM_MspPostInit+0x1c0>)
 80037ca:	f002 fd13 	bl	80061f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80037ce:	e05a      	b.n	8003886 <HAL_TIM_MspPostInit+0x1a6>
  else if(timHandle->Instance==TIM8)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a33      	ldr	r2, [pc, #204]	@ (80038a4 <HAL_TIM_MspPostInit+0x1c4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d155      	bne.n	8003886 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037da:	4b2e      	ldr	r3, [pc, #184]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	4a2d      	ldr	r2, [pc, #180]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f2:	4b28      	ldr	r3, [pc, #160]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	4a27      	ldr	r2, [pc, #156]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037fe:	4b25      	ldr	r3, [pc, #148]	@ (8003894 <HAL_TIM_MspPostInit+0x1b4>)
 8003800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_LMC_Pin|PWM_AL_LMC_Pin|PWM_BL_LMC_Pin|PWM_CL_LMC_Pin;
 800380a:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 800380e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2300      	movs	r3, #0
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800381c:	2304      	movs	r3, #4
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003820:	f107 031c 	add.w	r3, r7, #28
 8003824:	4619      	mov	r1, r3
 8003826:	481c      	ldr	r0, [pc, #112]	@ (8003898 <HAL_TIM_MspPostInit+0x1b8>)
 8003828:	f002 fce4 	bl	80061f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AH_LMC_Pin;
 800382c:	2340      	movs	r3, #64	@ 0x40
 800382e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800383c:	2305      	movs	r3, #5
 800383e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	4619      	mov	r1, r3
 8003846:	4815      	ldr	r0, [pc, #84]	@ (800389c <HAL_TIM_MspPostInit+0x1bc>)
 8003848:	f002 fcd4 	bl	80061f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_CH_LMC_Pin;
 800384c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800385e:	230a      	movs	r3, #10
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	4619      	mov	r1, r3
 8003868:	480c      	ldr	r0, [pc, #48]	@ (800389c <HAL_TIM_MspPostInit+0x1bc>)
 800386a:	f002 fcc3 	bl	80061f4 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 800386e:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <HAL_TIM_MspPostInit+0x1c8>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a0d      	ldr	r2, [pc, #52]	@ (80038a8 <HAL_TIM_MspPostInit+0x1c8>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003878:	6053      	str	r3, [r2, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_TIM_MspPostInit+0x1c8>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <HAL_TIM_MspPostInit+0x1c8>)
 8003880:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003884:	6053      	str	r3, [r2, #4]
}
 8003886:	bf00      	nop
 8003888:	3730      	adds	r7, #48	@ 0x30
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40021000 	.word	0x40021000
 8003898:	48000800 	.word	0x48000800
 800389c:	48000400 	.word	0x48000400
 80038a0:	48001000 	.word	0x48001000
 80038a4:	40013400 	.word	0x40013400
 80038a8:	40010000 	.word	0x40010000

080038ac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038b0:	4b22      	ldr	r3, [pc, #136]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038b2:	4a23      	ldr	r2, [pc, #140]	@ (8003940 <MX_USART2_UART_Init+0x94>)
 80038b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80038b6:	4b21      	ldr	r3, [pc, #132]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038b8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80038bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038be:	4b1f      	ldr	r3, [pc, #124]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038c4:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038ca:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038d0:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038d2:	220c      	movs	r2, #12
 80038d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038d6:	4b19      	ldr	r3, [pc, #100]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038dc:	4b17      	ldr	r3, [pc, #92]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038e2:	4b16      	ldr	r3, [pc, #88]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038e8:	4b14      	ldr	r3, [pc, #80]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ee:	4b13      	ldr	r3, [pc, #76]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038f4:	4811      	ldr	r0, [pc, #68]	@ (800393c <MX_USART2_UART_Init+0x90>)
 80038f6:	f006 fd30 	bl	800a35a <HAL_UART_Init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003900:	f7fe f941 	bl	8001b86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003904:	2100      	movs	r1, #0
 8003906:	480d      	ldr	r0, [pc, #52]	@ (800393c <MX_USART2_UART_Init+0x90>)
 8003908:	f008 f8fc 	bl	800bb04 <HAL_UARTEx_SetTxFifoThreshold>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003912:	f7fe f938 	bl	8001b86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003916:	2100      	movs	r1, #0
 8003918:	4808      	ldr	r0, [pc, #32]	@ (800393c <MX_USART2_UART_Init+0x90>)
 800391a:	f008 f931 	bl	800bb80 <HAL_UARTEx_SetRxFifoThreshold>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003924:	f7fe f92f 	bl	8001b86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003928:	4804      	ldr	r0, [pc, #16]	@ (800393c <MX_USART2_UART_Init+0x90>)
 800392a:	f008 f8b2 	bl	800ba92 <HAL_UARTEx_DisableFifoMode>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003934:	f7fe f927 	bl	8001b86 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000780 	.word	0x20000780
 8003940:	40004400 	.word	0x40004400

08003944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b09e      	sub	sp, #120	@ 0x78
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	2254      	movs	r2, #84	@ 0x54
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f008 f9eb 	bl	800bd40 <memset>
  if(uartHandle->Instance==USART2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a38      	ldr	r2, [pc, #224]	@ (8003a50 <HAL_UART_MspInit+0x10c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d168      	bne.n	8003a46 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003974:	2302      	movs	r3, #2
 8003976:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fbdf 	bl	8007144 <HAL_RCCEx_PeriphCLKConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800398c:	f7fe f8fb 	bl	8001b86 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003990:	4b30      	ldr	r3, [pc, #192]	@ (8003a54 <HAL_UART_MspInit+0x110>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003994:	4a2f      	ldr	r2, [pc, #188]	@ (8003a54 <HAL_UART_MspInit+0x110>)
 8003996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399a:	6593      	str	r3, [r2, #88]	@ 0x58
 800399c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a54 <HAL_UART_MspInit+0x110>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a54 <HAL_UART_MspInit+0x110>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ac:	4a29      	ldr	r2, [pc, #164]	@ (8003a54 <HAL_UART_MspInit+0x110>)
 80039ae:	f043 0308 	orr.w	r3, r3, #8
 80039b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039b4:	4b27      	ldr	r3, [pc, #156]	@ (8003a54 <HAL_UART_MspInit+0x110>)
 80039b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = AUX2_TX_Pin|AUX2_RX_Pin;
 80039c0:	2360      	movs	r3, #96	@ 0x60
 80039c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039cc:	2300      	movs	r3, #0
 80039ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039d0:	2307      	movs	r3, #7
 80039d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80039d8:	4619      	mov	r1, r3
 80039da:	481f      	ldr	r0, [pc, #124]	@ (8003a58 <HAL_UART_MspInit+0x114>)
 80039dc:	f002 fc0a 	bl	80061f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80039e0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 80039e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a60 <HAL_UART_MspInit+0x11c>)
 80039e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80039e6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 80039e8:	221a      	movs	r2, #26
 80039ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039f2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039f8:	4b18      	ldr	r3, [pc, #96]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 80039fa:	2280      	movs	r2, #128	@ 0x80
 80039fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039fe:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a04:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a10:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 8003a12:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003a16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a18:	4810      	ldr	r0, [pc, #64]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 8003a1a:	f001 fd65 	bl	80054e8 <HAL_DMA_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003a24:	f7fe f8af 	bl	8001b86 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003a30:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <HAL_UART_MspInit+0x118>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	2026      	movs	r0, #38	@ 0x26
 8003a3c:	f001 faa9 	bl	8004f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a40:	2026      	movs	r0, #38	@ 0x26
 8003a42:	f001 fac0 	bl	8004fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a46:	bf00      	nop
 8003a48:	3778      	adds	r7, #120	@ 0x78
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40004400 	.word	0x40004400
 8003a54:	40021000 	.word	0x40021000
 8003a58:	48000c00 	.word	0x48000c00
 8003a5c:	20000814 	.word	0x20000814
 8003a60:	40020008 	.word	0x40020008

08003a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a64:	480d      	ldr	r0, [pc, #52]	@ (8003a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a68:	f7ff fade 	bl	8003028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a6c:	480c      	ldr	r0, [pc, #48]	@ (8003aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a6e:	490d      	ldr	r1, [pc, #52]	@ (8003aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a70:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa8 <LoopForever+0xe>)
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a74:	e002      	b.n	8003a7c <LoopCopyDataInit>

08003a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a7a:	3304      	adds	r3, #4

08003a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a80:	d3f9      	bcc.n	8003a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a84:	4c0a      	ldr	r4, [pc, #40]	@ (8003ab0 <LoopForever+0x16>)
  movs r3, #0
 8003a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a88:	e001      	b.n	8003a8e <LoopFillZerobss>

08003a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a8c:	3204      	adds	r2, #4

08003a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a90:	d3fb      	bcc.n	8003a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a92:	f008 f95d 	bl	800bd50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a96:	f7fd ff9b 	bl	80019d0 <main>

08003a9a <LoopForever>:

LoopForever:
    b LoopForever
 8003a9a:	e7fe      	b.n	8003a9a <LoopForever>
  ldr   r0, =_estack
 8003a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa4:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 8003aa8:	0800be1c 	.word	0x0800be1c
  ldr r2, =_sbss
 8003aac:	2000038c 	.word	0x2000038c
  ldr r4, =_ebss
 8003ab0:	20000878 	.word	0x20000878

08003ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ab4:	e7fe      	b.n	8003ab4 <ADC1_2_IRQHandler>

08003ab6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac0:	2003      	movs	r0, #3
 8003ac2:	f001 fa5b 	bl	8004f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ac6:	200f      	movs	r0, #15
 8003ac8:	f000 f80e 	bl	8003ae8 <HAL_InitTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	71fb      	strb	r3, [r7, #7]
 8003ad6:	e001      	b.n	8003adc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ad8:	f7ff fa1a 	bl	8002f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003adc:	79fb      	ldrb	r3, [r7, #7]

}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003af4:	4b16      	ldr	r3, [pc, #88]	@ (8003b50 <HAL_InitTick+0x68>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d022      	beq.n	8003b42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003afc:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <HAL_InitTick+0x6c>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b13      	ldr	r3, [pc, #76]	@ (8003b50 <HAL_InitTick+0x68>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fa66 	bl	8004fe2 <HAL_SYSTICK_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10f      	bne.n	8003b3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	d809      	bhi.n	8003b36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b22:	2200      	movs	r2, #0
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b2a:	f001 fa32 	bl	8004f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b58 <HAL_InitTick+0x70>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e007      	b.n	8003b46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
 8003b3a:	e004      	b.n	8003b46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	e001      	b.n	8003b46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000388 	.word	0x20000388
 8003b54:	20000380 	.word	0x20000380
 8003b58:	20000384 	.word	0x20000384

08003b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_IncTick+0x1c>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <HAL_IncTick+0x20>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4413      	add	r3, r2
 8003b6a:	4a03      	ldr	r2, [pc, #12]	@ (8003b78 <HAL_IncTick+0x1c>)
 8003b6c:	6013      	str	r3, [r2, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	20000874 	.word	0x20000874
 8003b7c:	20000388 	.word	0x20000388

08003b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return uwTick;
 8003b84:	4b03      	ldr	r3, [pc, #12]	@ (8003b94 <HAL_GetTick+0x14>)
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000874 	.word	0x20000874

08003b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba0:	f7ff ffee 	bl	8003b80 <HAL_GetTick>
 8003ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bb0:	d004      	beq.n	8003bbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bb2:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <HAL_Delay+0x40>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bbc:	bf00      	nop
 8003bbe:	f7ff ffdf 	bl	8003b80 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d8f7      	bhi.n	8003bbe <HAL_Delay+0x26>
  {
  }
}
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000388 	.word	0x20000388

08003bdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3360      	adds	r3, #96	@ 0x60
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <LL_ADC_SetOffset+0x44>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	03fff000 	.word	0x03fff000

08003c8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3360      	adds	r3, #96	@ 0x60
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3360      	adds	r3, #96	@ 0x60
 8003cc8:	461a      	mov	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3360      	adds	r3, #96	@ 0x60
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3360      	adds	r3, #96	@ 0x60
 8003d34:	461a      	mov	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	615a      	str	r2, [r3, #20]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3330      	adds	r3, #48	@ 0x30
 8003d90:	461a      	mov	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	4413      	add	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	211f      	movs	r1, #31
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	f003 011f 	and.w	r1, r3, #31
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3314      	adds	r3, #20
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0e5b      	lsrs	r3, r3, #25
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	4413      	add	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	0d1b      	lsrs	r3, r3, #20
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2107      	movs	r1, #7
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0d1b      	lsrs	r3, r3, #20
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f003 0318 	and.w	r3, r3, #24
 8003e52:	4908      	ldr	r1, [pc, #32]	@ (8003e74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e54:	40d9      	lsrs	r1, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	400b      	ands	r3, r1
 8003e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	0007ffff 	.word	0x0007ffff

08003e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003e88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6093      	str	r3, [r2, #8]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb0:	d101      	bne.n	8003eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ed4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ed8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f00:	d101      	bne.n	8003f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <LL_ADC_IsEnabled+0x18>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <LL_ADC_IsEnabled+0x1a>
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d101      	bne.n	8003f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d101      	bne.n	8003f78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b089      	sub	sp, #36	@ 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1a9      	b.n	80042f6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd f851 	bl	8001058 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff67 	bl	8003e9c <LL_ADC_IsDeepPowerDownEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff ff4d 	bl	8003e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ff82 	bl	8003eec <LL_ADC_IsInternalRegulatorEnabled>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d115      	bne.n	800401a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ff66 	bl	8003ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ff8:	4b9c      	ldr	r3, [pc, #624]	@ (800426c <HAL_ADC_Init+0x2e4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	4a9c      	ldr	r2, [pc, #624]	@ (8004270 <HAL_ADC_Init+0x2e8>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	3301      	adds	r3, #1
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800400c:	e002      	b.n	8004014 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b01      	subs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f9      	bne.n	800400e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff64 	bl	8003eec <LL_ADC_IsInternalRegulatorEnabled>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	f043 0210 	orr.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff75 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 8004050:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 8142 	bne.w	80042e4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 813e 	bne.w	80042e4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004070:	f043 0202 	orr.w	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff49 	bl	8003f14 <LL_ADC_IsEnabled>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d141      	bne.n	800410c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004090:	d004      	beq.n	800409c <HAL_ADC_Init+0x114>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a77      	ldr	r2, [pc, #476]	@ (8004274 <HAL_ADC_Init+0x2ec>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d10f      	bne.n	80040bc <HAL_ADC_Init+0x134>
 800409c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040a0:	f7ff ff38 	bl	8003f14 <LL_ADC_IsEnabled>
 80040a4:	4604      	mov	r4, r0
 80040a6:	4873      	ldr	r0, [pc, #460]	@ (8004274 <HAL_ADC_Init+0x2ec>)
 80040a8:	f7ff ff34 	bl	8003f14 <LL_ADC_IsEnabled>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4323      	orrs	r3, r4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e012      	b.n	80040e2 <HAL_ADC_Init+0x15a>
 80040bc:	486e      	ldr	r0, [pc, #440]	@ (8004278 <HAL_ADC_Init+0x2f0>)
 80040be:	f7ff ff29 	bl	8003f14 <LL_ADC_IsEnabled>
 80040c2:	4604      	mov	r4, r0
 80040c4:	486d      	ldr	r0, [pc, #436]	@ (800427c <HAL_ADC_Init+0x2f4>)
 80040c6:	f7ff ff25 	bl	8003f14 <LL_ADC_IsEnabled>
 80040ca:	4603      	mov	r3, r0
 80040cc:	431c      	orrs	r4, r3
 80040ce:	486c      	ldr	r0, [pc, #432]	@ (8004280 <HAL_ADC_Init+0x2f8>)
 80040d0:	f7ff ff20 	bl	8003f14 <LL_ADC_IsEnabled>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4323      	orrs	r3, r4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d012      	beq.n	800410c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ee:	d004      	beq.n	80040fa <HAL_ADC_Init+0x172>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004274 <HAL_ADC_Init+0x2ec>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_ADC_Init+0x176>
 80040fa:	4a62      	ldr	r2, [pc, #392]	@ (8004284 <HAL_ADC_Init+0x2fc>)
 80040fc:	e000      	b.n	8004100 <HAL_ADC_Init+0x178>
 80040fe:	4a62      	ldr	r2, [pc, #392]	@ (8004288 <HAL_ADC_Init+0x300>)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f7ff fd68 	bl	8003bdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7f5b      	ldrb	r3, [r3, #29]
 8004110:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004116:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800411c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004122:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800412a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004136:	2b01      	cmp	r3, #1
 8004138:	d106      	bne.n	8004148 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	045b      	lsls	r3, r3, #17
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	4b48      	ldr	r3, [pc, #288]	@ (800428c <HAL_ADC_Init+0x304>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	69b9      	ldr	r1, [r7, #24]
 8004174:	430b      	orrs	r3, r1
 8004176:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fee4 	bl	8003f60 <LL_ADC_INJ_IsConversionOngoing>
 8004198:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d17f      	bne.n	80042a0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d17c      	bne.n	80042a0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80041aa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041c2:	f023 0302 	bic.w	r3, r3, #2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	69b9      	ldr	r1, [r7, #24]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d017      	beq.n	8004208 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80041e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80041f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80041f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6911      	ldr	r1, [r2, #16]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004206:	e013      	b.n	8004230 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004216:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800422c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004236:	2b01      	cmp	r3, #1
 8004238:	d12a      	bne.n	8004290 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004250:	4311      	orrs	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004256:	4311      	orrs	r1, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800425c:	430a      	orrs	r2, r1
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	611a      	str	r2, [r3, #16]
 800426a:	e019      	b.n	80042a0 <HAL_ADC_Init+0x318>
 800426c:	20000380 	.word	0x20000380
 8004270:	053e2d63 	.word	0x053e2d63
 8004274:	50000100 	.word	0x50000100
 8004278:	50000400 	.word	0x50000400
 800427c:	50000500 	.word	0x50000500
 8004280:	50000600 	.word	0x50000600
 8004284:	50000300 	.word	0x50000300
 8004288:	50000700 	.word	0x50000700
 800428c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d10c      	bne.n	80042c2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f023 010f 	bic.w	r1, r3, #15
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	1e5a      	subs	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
 80042c0:	e007      	b.n	80042d2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 020f 	bic.w	r2, r2, #15
 80042d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042e2:	e007      	b.n	80042f4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e8:	f043 0210 	orr.w	r2, r3, #16
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3724      	adds	r7, #36	@ 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd90      	pop	{r4, r7, pc}
 80042fe:	bf00      	nop

08004300 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b0b6      	sub	sp, #216	@ 0xd8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x24>
 800431e:	2302      	movs	r3, #2
 8004320:	f000 bc13 	b.w	8004b4a <HAL_ADC_ConfigChannel+0x84a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fe02 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	f040 83f3 	bne.w	8004b24 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f7ff fd18 	bl	8003d80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fdf0 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 800435a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fdfc 	bl	8003f60 <LL_ADC_INJ_IsConversionOngoing>
 8004368:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800436c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 81d9 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004376:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800437a:	2b00      	cmp	r3, #0
 800437c:	f040 81d4 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004388:	d10f      	bne.n	80043aa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	4619      	mov	r1, r3
 8004396:	f7ff fd1f 	bl	8003dd8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fcd9 	bl	8003d5a <LL_ADC_SetSamplingTimeCommonConfig>
 80043a8:	e00e      	b.n	80043c8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f7ff fd0e 	bl	8003dd8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fcc9 	bl	8003d5a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	08db      	lsrs	r3, r3, #3
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d022      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6919      	ldr	r1, [r3, #16]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043fa:	f7ff fc23 	bl	8003c44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6919      	ldr	r1, [r3, #16]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	461a      	mov	r2, r3
 800440c:	f7ff fc6f 	bl	8003cee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800441c:	2b01      	cmp	r3, #1
 800441e:	d102      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x126>
 8004420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004424:	e000      	b.n	8004428 <HAL_ADC_ConfigChannel+0x128>
 8004426:	2300      	movs	r3, #0
 8004428:	461a      	mov	r2, r3
 800442a:	f7ff fc7b 	bl	8003d24 <LL_ADC_SetOffsetSaturation>
 800442e:	e17b      	b.n	8004728 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fc28 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 800443c:	4603      	mov	r3, r0
 800443e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <HAL_ADC_ConfigChannel+0x15c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fc1d 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004452:	4603      	mov	r3, r0
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	f003 021f 	and.w	r2, r3, #31
 800445a:	e01e      	b.n	800449a <HAL_ADC_ConfigChannel+0x19a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fc12 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004468:	4603      	mov	r3, r0
 800446a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800447a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800447e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e004      	b.n	8004498 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800448e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x1b2>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	0e9b      	lsrs	r3, r3, #26
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	e018      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x1e4>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044be:	fa93 f3a3 	rbit	r3, r3
 80044c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80044c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80044ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80044d6:	2320      	movs	r3, #32
 80044d8:	e004      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80044da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d106      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fbe1 	bl	8003cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fbc5 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004502:	4603      	mov	r3, r0
 8004504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x222>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fbba 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004518:	4603      	mov	r3, r0
 800451a:	0e9b      	lsrs	r3, r3, #26
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	e01e      	b.n	8004560 <HAL_ADC_ConfigChannel+0x260>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2101      	movs	r1, #1
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fbaf 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 800452e:	4603      	mov	r3, r0
 8004530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004550:	2320      	movs	r3, #32
 8004552:	e004      	b.n	800455e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004558:	fab3 f383 	clz	r3, r3
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x278>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0e9b      	lsrs	r3, r3, #26
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	e018      	b.n	80045aa <HAL_ADC_ConfigChannel+0x2aa>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800458c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004594:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800459c:	2320      	movs	r3, #32
 800459e:	e004      	b.n	80045aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80045a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045a4:	fab3 f383 	clz	r3, r3
 80045a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d106      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fb7e 	bl	8003cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2102      	movs	r1, #2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fb62 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x2e8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2102      	movs	r1, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fb57 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80045de:	4603      	mov	r3, r0
 80045e0:	0e9b      	lsrs	r3, r3, #26
 80045e2:	f003 021f 	and.w	r2, r3, #31
 80045e6:	e01e      	b.n	8004626 <HAL_ADC_ConfigChannel+0x326>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fb4c 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004606:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800460a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800460e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004616:	2320      	movs	r3, #32
 8004618:	e004      	b.n	8004624 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800461a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <HAL_ADC_ConfigChannel+0x33e>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	0e9b      	lsrs	r3, r3, #26
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	e016      	b.n	800466c <HAL_ADC_ConfigChannel+0x36c>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004656:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800465e:	2320      	movs	r3, #32
 8004660:	e004      	b.n	800466c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004662:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800466c:	429a      	cmp	r2, r3
 800466e:	d106      	bne.n	800467e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2200      	movs	r2, #0
 8004676:	2102      	movs	r1, #2
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fb1d 	bl	8003cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2103      	movs	r1, #3
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fb01 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x3aa>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2103      	movs	r1, #3
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff faf6 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80046a0:	4603      	mov	r3, r0
 80046a2:	0e9b      	lsrs	r3, r3, #26
 80046a4:	f003 021f 	and.w	r2, r3, #31
 80046a8:	e017      	b.n	80046da <HAL_ADC_ConfigChannel+0x3da>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2103      	movs	r1, #3
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff faeb 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80046b6:	4603      	mov	r3, r0
 80046b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80046c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80046c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e003      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80046d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d105      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x3f2>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	0e9b      	lsrs	r3, r3, #26
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	e011      	b.n	8004716 <HAL_ADC_ConfigChannel+0x416>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004702:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800470a:	2320      	movs	r3, #32
 800470c:	e003      	b.n	8004716 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800470e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004710:	fab3 f383 	clz	r3, r3
 8004714:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004716:	429a      	cmp	r2, r3
 8004718:	d106      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	2103      	movs	r1, #3
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fac8 	bl	8003cb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fbf1 	bl	8003f14 <LL_ADC_IsEnabled>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 813d 	bne.w	80049b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f7ff fb72 	bl	8003e30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4aa2      	ldr	r2, [pc, #648]	@ (80049dc <HAL_ADC_ConfigChannel+0x6dc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	f040 812e 	bne.w	80049b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x480>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	3301      	adds	r3, #1
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2b09      	cmp	r3, #9
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e019      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x4b4>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800478e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004790:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004798:	2320      	movs	r3, #32
 800479a:	e003      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800479c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2b09      	cmp	r3, #9
 80047ac:	bf94      	ite	ls
 80047ae:	2301      	movls	r3, #1
 80047b0:	2300      	movhi	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d079      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d107      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x4d4>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0e9b      	lsrs	r3, r3, #26
 80047ca:	3301      	adds	r3, #1
 80047cc:	069b      	lsls	r3, r3, #26
 80047ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047d2:	e015      	b.n	8004800 <HAL_ADC_ConfigChannel+0x500>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80047e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80047e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80047f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	069b      	lsls	r3, r3, #26
 80047fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x520>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0e9b      	lsrs	r3, r3, #26
 8004812:	3301      	adds	r3, #1
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	e017      	b.n	8004850 <HAL_ADC_ConfigChannel+0x550>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800482e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004830:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004838:	2320      	movs	r3, #32
 800483a:	e003      	b.n	8004844 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800483c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3301      	adds	r3, #1
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	ea42 0103 	orr.w	r1, r2, r3
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x576>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0e9b      	lsrs	r3, r3, #26
 8004866:	3301      	adds	r3, #1
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	051b      	lsls	r3, r3, #20
 8004874:	e018      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x5a8>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800488e:	2320      	movs	r3, #32
 8004890:	e003      	b.n	800489a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	3301      	adds	r3, #1
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a8:	430b      	orrs	r3, r1
 80048aa:	e07e      	b.n	80049aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x5c8>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	0e9b      	lsrs	r3, r3, #26
 80048be:	3301      	adds	r3, #1
 80048c0:	069b      	lsls	r3, r3, #26
 80048c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048c6:	e015      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x5f4>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80048e0:	2320      	movs	r3, #32
 80048e2:	e003      	b.n	80048ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	069b      	lsls	r3, r3, #26
 80048f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x614>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	e017      	b.n	8004944 <HAL_ADC_ConfigChannel+0x644>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	61fb      	str	r3, [r7, #28]
  return result;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800492c:	2320      	movs	r3, #32
 800492e:	e003      	b.n	8004938 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	3301      	adds	r3, #1
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x670>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	3301      	adds	r3, #1
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	3b1e      	subs	r3, #30
 8004968:	051b      	lsls	r3, r3, #20
 800496a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800496e:	e01b      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x6a8>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	613b      	str	r3, [r7, #16]
  return result;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004988:	2320      	movs	r3, #32
 800498a:	e003      	b.n	8004994 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	3301      	adds	r3, #1
 8004996:	f003 021f 	and.w	r2, r3, #31
 800499a:	4613      	mov	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	3b1e      	subs	r3, #30
 80049a2:	051b      	lsls	r3, r3, #20
 80049a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049ae:	4619      	mov	r1, r3
 80049b0:	f7ff fa12 	bl	8003dd8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b09      	ldr	r3, [pc, #36]	@ (80049e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80be 	beq.w	8004b3e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ca:	d004      	beq.n	80049d6 <HAL_ADC_ConfigChannel+0x6d6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a04      	ldr	r2, [pc, #16]	@ (80049e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10a      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x6ec>
 80049d6:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80049d8:	e009      	b.n	80049ee <HAL_ADC_ConfigChannel+0x6ee>
 80049da:	bf00      	nop
 80049dc:	407f0000 	.word	0x407f0000
 80049e0:	80080000 	.word	0x80080000
 80049e4:	50000100 	.word	0x50000100
 80049e8:	50000300 	.word	0x50000300
 80049ec:	4b59      	ldr	r3, [pc, #356]	@ (8004b54 <HAL_ADC_ConfigChannel+0x854>)
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff f91a 	bl	8003c28 <LL_ADC_GetCommonPathInternalCh>
 80049f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a56      	ldr	r2, [pc, #344]	@ (8004b58 <HAL_ADC_ConfigChannel+0x858>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_ADC_ConfigChannel+0x70c>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a55      	ldr	r2, [pc, #340]	@ (8004b5c <HAL_ADC_ConfigChannel+0x85c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d13a      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d134      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a20:	d005      	beq.n	8004a2e <HAL_ADC_ConfigChannel+0x72e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a4e      	ldr	r2, [pc, #312]	@ (8004b60 <HAL_ADC_ConfigChannel+0x860>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f040 8085 	bne.w	8004b38 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a36:	d004      	beq.n	8004a42 <HAL_ADC_ConfigChannel+0x742>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a49      	ldr	r2, [pc, #292]	@ (8004b64 <HAL_ADC_ConfigChannel+0x864>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x746>
 8004a42:	4a49      	ldr	r2, [pc, #292]	@ (8004b68 <HAL_ADC_ConfigChannel+0x868>)
 8004a44:	e000      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x748>
 8004a46:	4a43      	ldr	r2, [pc, #268]	@ (8004b54 <HAL_ADC_ConfigChannel+0x854>)
 8004a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7ff f8d5 	bl	8003c02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a58:	4b44      	ldr	r3, [pc, #272]	@ (8004b6c <HAL_ADC_ConfigChannel+0x86c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	4a44      	ldr	r2, [pc, #272]	@ (8004b70 <HAL_ADC_ConfigChannel+0x870>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	099b      	lsrs	r3, r3, #6
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a72:	e002      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f9      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a80:	e05a      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a3b      	ldr	r2, [pc, #236]	@ (8004b74 <HAL_ADC_ConfigChannel+0x874>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d125      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11f      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a31      	ldr	r2, [pc, #196]	@ (8004b64 <HAL_ADC_ConfigChannel+0x864>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d104      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x7ac>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a34      	ldr	r2, [pc, #208]	@ (8004b78 <HAL_ADC_ConfigChannel+0x878>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d047      	beq.n	8004b3c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ab4:	d004      	beq.n	8004ac0 <HAL_ADC_ConfigChannel+0x7c0>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <HAL_ADC_ConfigChannel+0x864>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x7c4>
 8004ac0:	4a29      	ldr	r2, [pc, #164]	@ (8004b68 <HAL_ADC_ConfigChannel+0x868>)
 8004ac2:	e000      	b.n	8004ac6 <HAL_ADC_ConfigChannel+0x7c6>
 8004ac4:	4a23      	ldr	r2, [pc, #140]	@ (8004b54 <HAL_ADC_ConfigChannel+0x854>)
 8004ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7ff f896 	bl	8003c02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ad6:	e031      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a27      	ldr	r2, [pc, #156]	@ (8004b7c <HAL_ADC_ConfigChannel+0x87c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d12d      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d127      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <HAL_ADC_ConfigChannel+0x864>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b00:	d004      	beq.n	8004b0c <HAL_ADC_ConfigChannel+0x80c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a17      	ldr	r2, [pc, #92]	@ (8004b64 <HAL_ADC_ConfigChannel+0x864>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x810>
 8004b0c:	4a16      	ldr	r2, [pc, #88]	@ (8004b68 <HAL_ADC_ConfigChannel+0x868>)
 8004b0e:	e000      	b.n	8004b12 <HAL_ADC_ConfigChannel+0x812>
 8004b10:	4a10      	ldr	r2, [pc, #64]	@ (8004b54 <HAL_ADC_ConfigChannel+0x854>)
 8004b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f7ff f870 	bl	8003c02 <LL_ADC_SetCommonPathInternalCh>
 8004b22:	e00c      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b28:	f043 0220 	orr.w	r2, r3, #32
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b36:	e002      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b38:	bf00      	nop
 8004b3a:	e000      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b46:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	37d8      	adds	r7, #216	@ 0xd8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	50000700 	.word	0x50000700
 8004b58:	c3210000 	.word	0xc3210000
 8004b5c:	90c00010 	.word	0x90c00010
 8004b60:	50000600 	.word	0x50000600
 8004b64:	50000100 	.word	0x50000100
 8004b68:	50000300 	.word	0x50000300
 8004b6c:	20000380 	.word	0x20000380
 8004b70:	053e2d63 	.word	0x053e2d63
 8004b74:	c7520000 	.word	0xc7520000
 8004b78:	50000500 	.word	0x50000500
 8004b7c:	cb840000 	.word	0xcb840000

08004b80 <LL_ADC_IsEnabled>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <LL_ADC_IsEnabled+0x18>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <LL_ADC_IsEnabled+0x1a>
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d101      	bne.n	8004bbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b0a1      	sub	sp, #132	@ 0x84
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e0e7      	b.n	8004dba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c02:	d102      	bne.n	8004c0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c04:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c06:	60bb      	str	r3, [r7, #8]
 8004c08:	e009      	b.n	8004c1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d102      	bne.n	8004c1a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004c14:	4b6d      	ldr	r3, [pc, #436]	@ (8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	e001      	b.n	8004c1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0be      	b.n	8004dba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff ffb1 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8004c44:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ffab 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 80a0 	bne.w	8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 809c 	bne.w	8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c68:	d004      	beq.n	8004c74 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a55      	ldr	r2, [pc, #340]	@ (8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d101      	bne.n	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004c74:	4b56      	ldr	r3, [pc, #344]	@ (8004dd0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004c76:	e000      	b.n	8004c7a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004c78:	4b56      	ldr	r3, [pc, #344]	@ (8004dd4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004c7a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d04b      	beq.n	8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6859      	ldr	r1, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c96:	035b      	lsls	r3, r3, #13
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ca8:	d004      	beq.n	8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a45      	ldr	r2, [pc, #276]	@ (8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10f      	bne.n	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004cb4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004cb8:	f7ff ff62 	bl	8004b80 <LL_ADC_IsEnabled>
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	4841      	ldr	r0, [pc, #260]	@ (8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cc0:	f7ff ff5e 	bl	8004b80 <LL_ADC_IsEnabled>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	4323      	orrs	r3, r4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e012      	b.n	8004cfa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004cd4:	483c      	ldr	r0, [pc, #240]	@ (8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004cd6:	f7ff ff53 	bl	8004b80 <LL_ADC_IsEnabled>
 8004cda:	4604      	mov	r4, r0
 8004cdc:	483b      	ldr	r0, [pc, #236]	@ (8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cde:	f7ff ff4f 	bl	8004b80 <LL_ADC_IsEnabled>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	431c      	orrs	r4, r3
 8004ce6:	483c      	ldr	r0, [pc, #240]	@ (8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004ce8:	f7ff ff4a 	bl	8004b80 <LL_ADC_IsEnabled>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4323      	orrs	r3, r4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d056      	beq.n	8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d06:	f023 030f 	bic.w	r3, r3, #15
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	6811      	ldr	r1, [r2, #0]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	6892      	ldr	r2, [r2, #8]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	431a      	orrs	r2, r3
 8004d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d18:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d1a:	e047      	b.n	8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d26:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d30:	d004      	beq.n	8004d3c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a23      	ldr	r2, [pc, #140]	@ (8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d10f      	bne.n	8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004d3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d40:	f7ff ff1e 	bl	8004b80 <LL_ADC_IsEnabled>
 8004d44:	4604      	mov	r4, r0
 8004d46:	481f      	ldr	r0, [pc, #124]	@ (8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d48:	f7ff ff1a 	bl	8004b80 <LL_ADC_IsEnabled>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4323      	orrs	r3, r4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e012      	b.n	8004d82 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004d5c:	481a      	ldr	r0, [pc, #104]	@ (8004dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d5e:	f7ff ff0f 	bl	8004b80 <LL_ADC_IsEnabled>
 8004d62:	4604      	mov	r4, r0
 8004d64:	4819      	ldr	r0, [pc, #100]	@ (8004dcc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d66:	f7ff ff0b 	bl	8004b80 <LL_ADC_IsEnabled>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	431c      	orrs	r4, r3
 8004d6e:	481a      	ldr	r0, [pc, #104]	@ (8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d70:	f7ff ff06 	bl	8004b80 <LL_ADC_IsEnabled>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4323      	orrs	r3, r4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d012      	beq.n	8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d8e:	f023 030f 	bic.w	r3, r3, #15
 8004d92:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d96:	e009      	b.n	8004dac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004daa:	e000      	b.n	8004dae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004dac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004db6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3784      	adds	r7, #132	@ 0x84
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd90      	pop	{r4, r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	50000100 	.word	0x50000100
 8004dc8:	50000400 	.word	0x50000400
 8004dcc:	50000500 	.word	0x50000500
 8004dd0:	50000300 	.word	0x50000300
 8004dd4:	50000700 	.word	0x50000700
 8004dd8:	50000600 	.word	0x50000600

08004ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dec:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <__NVIC_SetPriorityGrouping+0x44>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e0e:	4a04      	ldr	r2, [pc, #16]	@ (8004e20 <__NVIC_SetPriorityGrouping+0x44>)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	60d3      	str	r3, [r2, #12]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e28:	4b04      	ldr	r3, [pc, #16]	@ (8004e3c <__NVIC_GetPriorityGrouping+0x18>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	f003 0307 	and.w	r3, r3, #7
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	e000ed00 	.word	0xe000ed00

08004e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	db0b      	blt.n	8004e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	f003 021f 	and.w	r2, r3, #31
 8004e58:	4907      	ldr	r1, [pc, #28]	@ (8004e78 <__NVIC_EnableIRQ+0x38>)
 8004e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	2001      	movs	r0, #1
 8004e62:	fa00 f202 	lsl.w	r2, r0, r2
 8004e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	e000e100 	.word	0xe000e100

08004e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	db0a      	blt.n	8004ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	490c      	ldr	r1, [pc, #48]	@ (8004ec8 <__NVIC_SetPriority+0x4c>)
 8004e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9a:	0112      	lsls	r2, r2, #4
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ea4:	e00a      	b.n	8004ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	4908      	ldr	r1, [pc, #32]	@ (8004ecc <__NVIC_SetPriority+0x50>)
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	3b04      	subs	r3, #4
 8004eb4:	0112      	lsls	r2, r2, #4
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	440b      	add	r3, r1
 8004eba:	761a      	strb	r2, [r3, #24]
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	e000e100 	.word	0xe000e100
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b089      	sub	sp, #36	@ 0x24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f1c3 0307 	rsb	r3, r3, #7
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	bf28      	it	cs
 8004eee:	2304      	movcs	r3, #4
 8004ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d902      	bls.n	8004f00 <NVIC_EncodePriority+0x30>
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3b03      	subs	r3, #3
 8004efe:	e000      	b.n	8004f02 <NVIC_EncodePriority+0x32>
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	401a      	ands	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f22:	43d9      	mvns	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f28:	4313      	orrs	r3, r2
         );
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3724      	adds	r7, #36	@ 0x24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f48:	d301      	bcc.n	8004f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e00f      	b.n	8004f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f78 <SysTick_Config+0x40>)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f56:	210f      	movs	r1, #15
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f5c:	f7ff ff8e 	bl	8004e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f60:	4b05      	ldr	r3, [pc, #20]	@ (8004f78 <SysTick_Config+0x40>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f66:	4b04      	ldr	r3, [pc, #16]	@ (8004f78 <SysTick_Config+0x40>)
 8004f68:	2207      	movs	r2, #7
 8004f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	e000e010 	.word	0xe000e010

08004f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff29 	bl	8004ddc <__NVIC_SetPriorityGrouping>
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fa0:	f7ff ff40 	bl	8004e24 <__NVIC_GetPriorityGrouping>
 8004fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	6978      	ldr	r0, [r7, #20]
 8004fac:	f7ff ff90 	bl	8004ed0 <NVIC_EncodePriority>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff5f 	bl	8004e7c <__NVIC_SetPriority>
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	4603      	mov	r3, r0
 8004fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff33 	bl	8004e40 <__NVIC_EnableIRQ>
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ffa4 	bl	8004f38 <SysTick_Config>
 8004ff0:	4603      	mov	r3, r0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e014      	b.n	8005036 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	791b      	ldrb	r3, [r3, #4]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d105      	bne.n	8005022 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fc fabb 	bl	8001598 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e056      	b.n	8005102 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	795b      	ldrb	r3, [r3, #5]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_DAC_Start+0x20>
 800505c:	2302      	movs	r3, #2
 800505e:	e050      	b.n	8005102 <HAL_DAC_Start+0xc2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2201      	movs	r2, #1
 800507a:	409a      	lsls	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005084:	4b22      	ldr	r3, [pc, #136]	@ (8005110 <HAL_DAC_Start+0xd0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	4a22      	ldr	r2, [pc, #136]	@ (8005114 <HAL_DAC_Start+0xd4>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	099b      	lsrs	r3, r3, #6
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005096:	e002      	b.n	800509e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3b01      	subs	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f9      	bne.n	8005098 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10f      	bne.n	80050ca <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d11d      	bne.n	80050f4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	e014      	b.n	80050f4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2102      	movs	r1, #2
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0202 	orr.w	r2, r2, #2
 80050f2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000380 	.word	0x20000380
 8005114:	053e2d63 	.word	0x053e2d63

08005118 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e018      	b.n	8005166 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4413      	add	r3, r2
 800514c:	3308      	adds	r3, #8
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e004      	b.n	800515c <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4413      	add	r3, r2
 8005158:	3314      	adds	r3, #20
 800515a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	461a      	mov	r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	@ 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_DAC_ConfigChannel+0x1c>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e1a1      	b.n	80054d8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	795b      	ldrb	r3, [r3, #5]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_DAC_ConfigChannel+0x32>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e198      	b.n	80054d8 <HAL_DAC_ConfigChannel+0x364>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2202      	movs	r2, #2
 80051b0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d17a      	bne.n	80052b0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80051ba:	f7fe fce1 	bl	8003b80 <HAL_GetTick>
 80051be:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d13d      	bne.n	8005242 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051c6:	e018      	b.n	80051fa <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051c8:	f7fe fcda 	bl	8003b80 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d911      	bls.n	80051fa <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f043 0208 	orr.w	r2, r3, #8
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2203      	movs	r2, #3
 80051f4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e16e      	b.n	80054d8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1df      	bne.n	80051c8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005210:	641a      	str	r2, [r3, #64]	@ 0x40
 8005212:	e020      	b.n	8005256 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005214:	f7fe fcb4 	bl	8003b80 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d90f      	bls.n	8005242 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005228:	2b00      	cmp	r3, #0
 800522a:	da0a      	bge.n	8005242 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f043 0208 	orr.w	r2, r3, #8
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2203      	movs	r2, #3
 800523c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e14a      	b.n	80054d8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005248:	2b00      	cmp	r3, #0
 800524a:	dbe3      	blt.n	8005214 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	ea02 0103 	and.w	r1, r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	409a      	lsls	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	21ff      	movs	r1, #255	@ 0xff
 8005292:	fa01 f303 	lsl.w	r3, r1, r3
 8005296:	43db      	mvns	r3, r3
 8005298:	ea02 0103 	and.w	r1, r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	409a      	lsls	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d11d      	bne.n	80052f4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	221f      	movs	r2, #31
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d0:	4013      	ands	r3, r2
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e8:	4313      	orrs	r3, r2
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2207      	movs	r2, #7
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530c:	4013      	ands	r3, r2
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d102      	bne.n	800531e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005318:	2300      	movs	r3, #0
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	e00f      	b.n	800533e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d102      	bne.n	800532c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005326:	2301      	movs	r3, #1
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	e008      	b.n	800533e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005334:	2301      	movs	r3, #1
 8005336:	623b      	str	r3, [r7, #32]
 8005338:	e001      	b.n	800533e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800533a:	2300      	movs	r3, #0
 800533c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	6a3a      	ldr	r2, [r7, #32]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005360:	4013      	ands	r3, r2
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	791b      	ldrb	r3, [r3, #4]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d102      	bne.n	8005372 <HAL_DAC_ConfigChannel+0x1fe>
 800536c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005370:	e000      	b.n	8005374 <HAL_DAC_ConfigChannel+0x200>
 8005372:	2300      	movs	r3, #0
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800538c:	4013      	ands	r3, r2
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	795b      	ldrb	r3, [r3, #5]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d102      	bne.n	800539e <HAL_DAC_ConfigChannel+0x22a>
 8005398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800539c:	e000      	b.n	80053a0 <HAL_DAC_ConfigChannel+0x22c>
 800539e:	2300      	movs	r3, #0
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d114      	bne.n	80053e0 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80053b6:	f001 fe49 	bl	800704c <HAL_RCC_GetHCLKFreq>
 80053ba:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4a48      	ldr	r2, [pc, #288]	@ (80054e0 <HAL_DAC_ConfigChannel+0x36c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d904      	bls.n	80053ce <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80053cc:	e00f      	b.n	80053ee <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4a44      	ldr	r2, [pc, #272]	@ (80054e4 <HAL_DAC_ConfigChannel+0x370>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d90a      	bls.n	80053ec <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80053de:	e006      	b.n	80053ee <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e6:	4313      	orrs	r3, r2
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ea:	e000      	b.n	80053ee <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80053ec:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fc:	4313      	orrs	r3, r2
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005406:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6819      	ldr	r1, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43da      	mvns	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	400a      	ands	r2, r1
 8005424:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005440:	4013      	ands	r3, r2
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005458:	4313      	orrs	r3, r2
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005462:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	22c0      	movs	r2, #192	@ 0xc0
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43da      	mvns	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	400a      	ands	r2, r1
 800547e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	089b      	lsrs	r3, r3, #2
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	ea02 0103 	and.w	r1, r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	409a      	lsls	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80054d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3728      	adds	r7, #40	@ 0x28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	09896800 	.word	0x09896800
 80054e4:	04c4b400 	.word	0x04c4b400

080054e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e08d      	b.n	8005616 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	4b47      	ldr	r3, [pc, #284]	@ (8005620 <HAL_DMA_Init+0x138>)
 8005502:	429a      	cmp	r2, r3
 8005504:	d80f      	bhi.n	8005526 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	4b45      	ldr	r3, [pc, #276]	@ (8005624 <HAL_DMA_Init+0x13c>)
 800550e:	4413      	add	r3, r2
 8005510:	4a45      	ldr	r2, [pc, #276]	@ (8005628 <HAL_DMA_Init+0x140>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	009a      	lsls	r2, r3, #2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a42      	ldr	r2, [pc, #264]	@ (800562c <HAL_DMA_Init+0x144>)
 8005522:	641a      	str	r2, [r3, #64]	@ 0x40
 8005524:	e00e      	b.n	8005544 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	4b40      	ldr	r3, [pc, #256]	@ (8005630 <HAL_DMA_Init+0x148>)
 800552e:	4413      	add	r3, r2
 8005530:	4a3d      	ldr	r2, [pc, #244]	@ (8005628 <HAL_DMA_Init+0x140>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	009a      	lsls	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a3c      	ldr	r2, [pc, #240]	@ (8005634 <HAL_DMA_Init+0x14c>)
 8005542:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800555a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa76 	bl	8005a88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055a4:	d102      	bne.n	80055ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_DMA_Init+0x104>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d80c      	bhi.n	80055ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa96 	bl	8005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	e008      	b.n	80055fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40020407 	.word	0x40020407
 8005624:	bffdfff8 	.word	0xbffdfff8
 8005628:	cccccccd 	.word	0xcccccccd
 800562c:	40020000 	.word	0x40020000
 8005630:	bffdfbf8 	.word	0xbffdfbf8
 8005634:	40020400 	.word	0x40020400

08005638 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_DMA_Start_IT+0x20>
 8005654:	2302      	movs	r3, #2
 8005656:	e066      	b.n	8005726 <HAL_DMA_Start_IT+0xee>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d155      	bne.n	8005718 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f9bb 	bl	8005a0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 020e 	orr.w	r2, r2, #14
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e00f      	b.n	80056d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0204 	bic.w	r2, r2, #4
 80056be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 020a 	orr.w	r2, r2, #10
 80056ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005704:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e005      	b.n	8005724 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005720:	2302      	movs	r3, #2
 8005722:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d005      	beq.n	8005752 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
 8005750:	e037      	b.n	80057c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 020e 	bic.w	r2, r2, #14
 8005760:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800576c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005770:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	f003 021f 	and.w	r2, r3, #31
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	2101      	movs	r1, #1
 8005790:	fa01 f202 	lsl.w	r2, r1, r2
 8005794:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800579e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d00d      	beq.n	8005814 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2204      	movs	r2, #4
 80057fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
 8005812:	e047      	b.n	80058a4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 020e 	bic.w	r2, r2, #14
 8005822:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800583e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005848:	f003 021f 	and.w	r2, r3, #31
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005860:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005878:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005882:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
    }
  }
  return status;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	2204      	movs	r2, #4
 80058d0:	409a      	lsls	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d026      	beq.n	8005928 <HAL_DMA_IRQHandler+0x7a>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d021      	beq.n	8005928 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0204 	bic.w	r2, r2, #4
 8005900:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	f003 021f 	and.w	r2, r3, #31
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	2104      	movs	r1, #4
 8005910:	fa01 f202 	lsl.w	r2, r1, r2
 8005914:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	2b00      	cmp	r3, #0
 800591c:	d071      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005926:	e06c      	b.n	8005a02 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	2202      	movs	r2, #2
 8005932:	409a      	lsls	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d02e      	beq.n	800599a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d029      	beq.n	800599a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 020a 	bic.w	r2, r2, #10
 8005962:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005970:	f003 021f 	and.w	r2, r3, #31
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	2102      	movs	r1, #2
 800597a:	fa01 f202 	lsl.w	r2, r1, r2
 800597e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d038      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005998:	e033      	b.n	8005a02 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2208      	movs	r2, #8
 80059a4:	409a      	lsls	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d02a      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d025      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 020e 	bic.w	r2, r2, #14
 80059c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059cc:	f003 021f 	and.w	r2, r3, #31
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	2101      	movs	r1, #1
 80059d6:	fa01 f202 	lsl.w	r2, r1, r2
 80059da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
}
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f003 021f 	and.w	r2, r3, #31
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f202 	lsl.w	r2, r1, r2
 8005a48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d108      	bne.n	8005a6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a6a:	e007      	b.n	8005a7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	60da      	str	r2, [r3, #12]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	4b16      	ldr	r3, [pc, #88]	@ (8005af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d802      	bhi.n	8005aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005a9c:	4b15      	ldr	r3, [pc, #84]	@ (8005af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e001      	b.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005aa2:	4b15      	ldr	r3, [pc, #84]	@ (8005af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005aa4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	3b08      	subs	r3, #8
 8005ab2:	4a12      	ldr	r2, [pc, #72]	@ (8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	009a      	lsls	r2, r3, #2
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	461a      	mov	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8005b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2201      	movs	r2, #1
 8005adc:	409a      	lsls	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40020407 	.word	0x40020407
 8005af4:	40020800 	.word	0x40020800
 8005af8:	40020820 	.word	0x40020820
 8005afc:	cccccccd 	.word	0xcccccccd
 8005b00:	40020880 	.word	0x40020880

08005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b26:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	2201      	movs	r2, #1
 8005b32:	409a      	lsls	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	1000823f 	.word	0x1000823f
 8005b48:	40020940 	.word	0x40020940

08005b4c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e147      	b.n	8005dee <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb fdbe 	bl	80016f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0210 	bic.w	r2, r2, #16
 8005b86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b88:	f7fd fffa 	bl	8003b80 <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005b8e:	e012      	b.n	8005bb6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005b90:	f7fd fff6 	bl	8003b80 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b0a      	cmp	r3, #10
 8005b9c:	d90b      	bls.n	8005bb6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba2:	f043 0201 	orr.w	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2203      	movs	r2, #3
 8005bae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e11b      	b.n	8005dee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d0e5      	beq.n	8005b90 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bd4:	f7fd ffd4 	bl	8003b80 <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005bda:	e012      	b.n	8005c02 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005bdc:	f7fd ffd0 	bl	8003b80 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b0a      	cmp	r3, #10
 8005be8:	d90b      	bls.n	8005c02 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bee:	f043 0201 	orr.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0f5      	b.n	8005dee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0e5      	beq.n	8005bdc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0202 	orr.w	r2, r2, #2
 8005c1e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a74      	ldr	r2, [pc, #464]	@ (8005df8 <HAL_FDCAN_Init+0x2ac>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d103      	bne.n	8005c32 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005c2a:	4a74      	ldr	r2, [pc, #464]	@ (8005dfc <HAL_FDCAN_Init+0x2b0>)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7c1b      	ldrb	r3, [r3, #16]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d108      	bne.n	8005c4c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c48:	619a      	str	r2, [r3, #24]
 8005c4a:	e007      	b.n	8005c5c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	7c5b      	ldrb	r3, [r3, #17]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d108      	bne.n	8005c76 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c72:	619a      	str	r2, [r3, #24]
 8005c74:	e007      	b.n	8005c86 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c84:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7c9b      	ldrb	r3, [r3, #18]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d108      	bne.n	8005ca0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c9c:	619a      	str	r2, [r3, #24]
 8005c9e:	e007      	b.n	8005cb0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cae:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005cd4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0210 	bic.w	r2, r2, #16
 8005ce4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d108      	bne.n	8005d00 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0204 	orr.w	r2, r2, #4
 8005cfc:	619a      	str	r2, [r3, #24]
 8005cfe:	e02c      	b.n	8005d5a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d028      	beq.n	8005d5a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d01c      	beq.n	8005d4a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d1e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0210 	orr.w	r2, r2, #16
 8005d2e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d110      	bne.n	8005d5a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0220 	orr.w	r2, r2, #32
 8005d46:	619a      	str	r2, [r3, #24]
 8005d48:	e007      	b.n	8005d5a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699a      	ldr	r2, [r3, #24]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0220 	orr.w	r2, r2, #32
 8005d58:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d6a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005d72:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005d82:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005d84:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d8e:	d115      	bne.n	8005dbc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005d9e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da4:	3b01      	subs	r3, #1
 8005da6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005da8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	3b01      	subs	r3, #1
 8005db2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005db8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005dba:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f9a2 	bl	800611c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40006400 	.word	0x40006400
 8005dfc:	40006500 	.word	0x40006500

08005e00 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	@ 0x30
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e34:	4013      	ands	r3, r2
 8005e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e56:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005e5a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	4013      	ands	r3, r2
 8005e66:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005e72:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e86:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d006      	beq.n	8005eb2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2240      	movs	r2, #64	@ 0x40
 8005eaa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f916 	bl	80060de <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d019      	beq.n	8005ef0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d014      	beq.n	8005ef0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ece:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4013      	ands	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ee6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005ee8:	6939      	ldr	r1, [r7, #16]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f8d8 	bl	80060a0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005efc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f8a2 	bl	800604a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005f14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fb fe2a 	bl	8001b70 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f28:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005f2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f897 	bl	8006060 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00c      	beq.n	8005f56 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f890 	bl	8006076 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d018      	beq.n	8005f92 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d013      	beq.n	8005f92 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f72:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2280      	movs	r2, #128	@ 0x80
 8005f88:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f87c 	bl	800608a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00c      	beq.n	8005fb6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f880 	bl	80060b6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005fd2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f878 	bl	80060ca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00f      	beq.n	8006004 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005ff6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006012:	69f9      	ldr	r1, [r7, #28]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f876 	bl	8006106 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f858 	bl	80060f2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006042:	bf00      	nop
 8006044:	3730      	adds	r7, #48	@ 0x30
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006124:	4b30      	ldr	r3, [pc, #192]	@ (80061e8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006126:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2f      	ldr	r2, [pc, #188]	@ (80061ec <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d103      	bne.n	800613a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006138:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2c      	ldr	r2, [pc, #176]	@ (80061f0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d103      	bne.n	800614c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800614a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800615a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006162:	041a      	lsls	r2, r3, #16
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006180:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006188:	061a      	lsls	r2, r3, #24
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e005      	b.n	80061ce <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3304      	adds	r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d3f3      	bcc.n	80061c2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	4000a400 	.word	0x4000a400
 80061ec:	40006800 	.word	0x40006800
 80061f0:	40006c00 	.word	0x40006c00

080061f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006202:	e15a      	b.n	80064ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	2101      	movs	r1, #1
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	fa01 f303 	lsl.w	r3, r1, r3
 8006210:	4013      	ands	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 814c 	beq.w	80064b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b01      	cmp	r3, #1
 8006226:	d005      	beq.n	8006234 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006230:	2b02      	cmp	r3, #2
 8006232:	d130      	bne.n	8006296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	2203      	movs	r2, #3
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	43db      	mvns	r3, r3
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4013      	ands	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800626a:	2201      	movs	r2, #1
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	43db      	mvns	r3, r3
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4013      	ands	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	f003 0201 	and.w	r2, r3, #1
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d017      	beq.n	80062d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	2203      	movs	r2, #3
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4013      	ands	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d123      	bne.n	8006326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	08da      	lsrs	r2, r3, #3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3208      	adds	r2, #8
 80062e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	220f      	movs	r2, #15
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43db      	mvns	r3, r3
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4013      	ands	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	08da      	lsrs	r2, r3, #3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3208      	adds	r2, #8
 8006320:	6939      	ldr	r1, [r7, #16]
 8006322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	2203      	movs	r2, #3
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43db      	mvns	r3, r3
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4013      	ands	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f003 0203 	and.w	r2, r3, #3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 80a6 	beq.w	80064b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006368:	4b5b      	ldr	r3, [pc, #364]	@ (80064d8 <HAL_GPIO_Init+0x2e4>)
 800636a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636c:	4a5a      	ldr	r2, [pc, #360]	@ (80064d8 <HAL_GPIO_Init+0x2e4>)
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	6613      	str	r3, [r2, #96]	@ 0x60
 8006374:	4b58      	ldr	r3, [pc, #352]	@ (80064d8 <HAL_GPIO_Init+0x2e4>)
 8006376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006380:	4a56      	ldr	r2, [pc, #344]	@ (80064dc <HAL_GPIO_Init+0x2e8>)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	089b      	lsrs	r3, r3, #2
 8006386:	3302      	adds	r3, #2
 8006388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800638c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	220f      	movs	r2, #15
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4013      	ands	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80063aa:	d01f      	beq.n	80063ec <HAL_GPIO_Init+0x1f8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a4c      	ldr	r2, [pc, #304]	@ (80064e0 <HAL_GPIO_Init+0x2ec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d019      	beq.n	80063e8 <HAL_GPIO_Init+0x1f4>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a4b      	ldr	r2, [pc, #300]	@ (80064e4 <HAL_GPIO_Init+0x2f0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <HAL_GPIO_Init+0x1f0>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a4a      	ldr	r2, [pc, #296]	@ (80064e8 <HAL_GPIO_Init+0x2f4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00d      	beq.n	80063e0 <HAL_GPIO_Init+0x1ec>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a49      	ldr	r2, [pc, #292]	@ (80064ec <HAL_GPIO_Init+0x2f8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <HAL_GPIO_Init+0x1e8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a48      	ldr	r2, [pc, #288]	@ (80064f0 <HAL_GPIO_Init+0x2fc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d101      	bne.n	80063d8 <HAL_GPIO_Init+0x1e4>
 80063d4:	2305      	movs	r3, #5
 80063d6:	e00a      	b.n	80063ee <HAL_GPIO_Init+0x1fa>
 80063d8:	2306      	movs	r3, #6
 80063da:	e008      	b.n	80063ee <HAL_GPIO_Init+0x1fa>
 80063dc:	2304      	movs	r3, #4
 80063de:	e006      	b.n	80063ee <HAL_GPIO_Init+0x1fa>
 80063e0:	2303      	movs	r3, #3
 80063e2:	e004      	b.n	80063ee <HAL_GPIO_Init+0x1fa>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e002      	b.n	80063ee <HAL_GPIO_Init+0x1fa>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <HAL_GPIO_Init+0x1fa>
 80063ec:	2300      	movs	r3, #0
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	f002 0203 	and.w	r2, r2, #3
 80063f4:	0092      	lsls	r2, r2, #2
 80063f6:	4093      	lsls	r3, r2
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063fe:	4937      	ldr	r1, [pc, #220]	@ (80064dc <HAL_GPIO_Init+0x2e8>)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	3302      	adds	r3, #2
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800640c:	4b39      	ldr	r3, [pc, #228]	@ (80064f4 <HAL_GPIO_Init+0x300>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	43db      	mvns	r3, r3
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4013      	ands	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006430:	4a30      	ldr	r2, [pc, #192]	@ (80064f4 <HAL_GPIO_Init+0x300>)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006436:	4b2f      	ldr	r3, [pc, #188]	@ (80064f4 <HAL_GPIO_Init+0x300>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	43db      	mvns	r3, r3
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4013      	ands	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800645a:	4a26      	ldr	r2, [pc, #152]	@ (80064f4 <HAL_GPIO_Init+0x300>)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006460:	4b24      	ldr	r3, [pc, #144]	@ (80064f4 <HAL_GPIO_Init+0x300>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	43db      	mvns	r3, r3
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4013      	ands	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006484:	4a1b      	ldr	r2, [pc, #108]	@ (80064f4 <HAL_GPIO_Init+0x300>)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800648a:	4b1a      	ldr	r3, [pc, #104]	@ (80064f4 <HAL_GPIO_Init+0x300>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	43db      	mvns	r3, r3
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4013      	ands	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80064ae:	4a11      	ldr	r2, [pc, #68]	@ (80064f4 <HAL_GPIO_Init+0x300>)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	3301      	adds	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f47f ae9d 	bne.w	8006204 <HAL_GPIO_Init+0x10>
  }
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	40021000 	.word	0x40021000
 80064dc:	40010000 	.word	0x40010000
 80064e0:	48000400 	.word	0x48000400
 80064e4:	48000800 	.word	0x48000800
 80064e8:	48000c00 	.word	0x48000c00
 80064ec:	48001000 	.word	0x48001000
 80064f0:	48001400 	.word	0x48001400
 80064f4:	40010400 	.word	0x40010400

080064f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	887b      	ldrh	r3, [r7, #2]
 800650a:	4013      	ands	r3, r2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
 8006514:	e001      	b.n	800651a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
 8006534:	4613      	mov	r3, r2
 8006536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006538:	787b      	ldrb	r3, [r7, #1]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800653e:	887a      	ldrh	r2, [r7, #2]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006544:	e002      	b.n	800654c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006546:	887a      	ldrh	r2, [r7, #2]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	4603      	mov	r3, r0
 8006560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006562:	4b08      	ldr	r3, [pc, #32]	@ (8006584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d006      	beq.n	800657c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800656e:	4a05      	ldr	r2, [pc, #20]	@ (8006584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fb fad8 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }
}
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40010400 	.word	0x40010400

08006588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d141      	bne.n	800661a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006596:	4b4b      	ldr	r3, [pc, #300]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800659e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a2:	d131      	bne.n	8006608 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065a4:	4b47      	ldr	r3, [pc, #284]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065aa:	4a46      	ldr	r2, [pc, #280]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065b4:	4b43      	ldr	r3, [pc, #268]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065bc:	4a41      	ldr	r2, [pc, #260]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065c4:	4b40      	ldr	r3, [pc, #256]	@ (80066c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2232      	movs	r2, #50	@ 0x32
 80065ca:	fb02 f303 	mul.w	r3, r2, r3
 80065ce:	4a3f      	ldr	r2, [pc, #252]	@ (80066cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065d0:	fba2 2303 	umull	r2, r3, r2, r3
 80065d4:	0c9b      	lsrs	r3, r3, #18
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065da:	e002      	b.n	80065e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3b01      	subs	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065e2:	4b38      	ldr	r3, [pc, #224]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ee:	d102      	bne.n	80065f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f2      	bne.n	80065dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065f6:	4b33      	ldr	r3, [pc, #204]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006602:	d158      	bne.n	80066b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e057      	b.n	80066b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006608:	4b2e      	ldr	r3, [pc, #184]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800660a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800660e:	4a2d      	ldr	r2, [pc, #180]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006618:	e04d      	b.n	80066b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006620:	d141      	bne.n	80066a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006622:	4b28      	ldr	r3, [pc, #160]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800662a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662e:	d131      	bne.n	8006694 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006630:	4b24      	ldr	r3, [pc, #144]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006636:	4a23      	ldr	r2, [pc, #140]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006640:	4b20      	ldr	r3, [pc, #128]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006648:	4a1e      	ldr	r2, [pc, #120]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800664a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800664e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006650:	4b1d      	ldr	r3, [pc, #116]	@ (80066c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2232      	movs	r2, #50	@ 0x32
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	4a1c      	ldr	r2, [pc, #112]	@ (80066cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	0c9b      	lsrs	r3, r3, #18
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006666:	e002      	b.n	800666e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3b01      	subs	r3, #1
 800666c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800666e:	4b15      	ldr	r3, [pc, #84]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800667a:	d102      	bne.n	8006682 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f2      	bne.n	8006668 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006682:	4b10      	ldr	r3, [pc, #64]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800668e:	d112      	bne.n	80066b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e011      	b.n	80066b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006694:	4b0b      	ldr	r3, [pc, #44]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800669a:	4a0a      	ldr	r2, [pc, #40]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80066a4:	e007      	b.n	80066b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066a6:	4b07      	ldr	r3, [pc, #28]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066ae:	4a05      	ldr	r2, [pc, #20]	@ (80066c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	40007000 	.word	0x40007000
 80066c8:	20000380 	.word	0x20000380
 80066cc:	431bde83 	.word	0x431bde83

080066d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80066d4:	4b05      	ldr	r3, [pc, #20]	@ (80066ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4a04      	ldr	r2, [pc, #16]	@ (80066ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80066da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066de:	6093      	str	r3, [r2, #8]
}
 80066e0:	bf00      	nop
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40007000 	.word	0x40007000

080066f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e2fe      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d075      	beq.n	80067fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800670e:	4b97      	ldr	r3, [pc, #604]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
 8006716:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006718:	4b94      	ldr	r3, [pc, #592]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b0c      	cmp	r3, #12
 8006726:	d102      	bne.n	800672e <HAL_RCC_OscConfig+0x3e>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d002      	beq.n	8006734 <HAL_RCC_OscConfig+0x44>
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d10b      	bne.n	800674c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006734:	4b8d      	ldr	r3, [pc, #564]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d05b      	beq.n	80067f8 <HAL_RCC_OscConfig+0x108>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d157      	bne.n	80067f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e2d9      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006754:	d106      	bne.n	8006764 <HAL_RCC_OscConfig+0x74>
 8006756:	4b85      	ldr	r3, [pc, #532]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a84      	ldr	r2, [pc, #528]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800675c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	e01d      	b.n	80067a0 <HAL_RCC_OscConfig+0xb0>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800676c:	d10c      	bne.n	8006788 <HAL_RCC_OscConfig+0x98>
 800676e:	4b7f      	ldr	r3, [pc, #508]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a7e      	ldr	r2, [pc, #504]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4b7c      	ldr	r3, [pc, #496]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a7b      	ldr	r2, [pc, #492]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e00b      	b.n	80067a0 <HAL_RCC_OscConfig+0xb0>
 8006788:	4b78      	ldr	r3, [pc, #480]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a77      	ldr	r2, [pc, #476]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800678e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	4b75      	ldr	r3, [pc, #468]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a74      	ldr	r2, [pc, #464]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800679a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800679e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d013      	beq.n	80067d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fd f9ea 	bl	8003b80 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fd f9e6 	bl	8003b80 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	@ 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e29e      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067c2:	4b6a      	ldr	r3, [pc, #424]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0xc0>
 80067ce:	e014      	b.n	80067fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fd f9d6 	bl	8003b80 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d8:	f7fd f9d2 	bl	8003b80 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b64      	cmp	r3, #100	@ 0x64
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e28a      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067ea:	4b60      	ldr	r3, [pc, #384]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f0      	bne.n	80067d8 <HAL_RCC_OscConfig+0xe8>
 80067f6:	e000      	b.n	80067fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d075      	beq.n	80068f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006806:	4b59      	ldr	r3, [pc, #356]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 030c 	and.w	r3, r3, #12
 800680e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006810:	4b56      	ldr	r3, [pc, #344]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b0c      	cmp	r3, #12
 800681e:	d102      	bne.n	8006826 <HAL_RCC_OscConfig+0x136>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d002      	beq.n	800682c <HAL_RCC_OscConfig+0x13c>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b04      	cmp	r3, #4
 800682a:	d11f      	bne.n	800686c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800682c:	4b4f      	ldr	r3, [pc, #316]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_OscConfig+0x154>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e25d      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006844:	4b49      	ldr	r3, [pc, #292]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	061b      	lsls	r3, r3, #24
 8006852:	4946      	ldr	r1, [pc, #280]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006854:	4313      	orrs	r3, r2
 8006856:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006858:	4b45      	ldr	r3, [pc, #276]	@ (8006970 <HAL_RCC_OscConfig+0x280>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7fd f943 	bl	8003ae8 <HAL_InitTick>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d043      	beq.n	80068f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e249      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d023      	beq.n	80068bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006874:	4b3d      	ldr	r3, [pc, #244]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a3c      	ldr	r2, [pc, #240]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800687a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800687e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fd f97e 	bl	8003b80 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006888:	f7fd f97a 	bl	8003b80 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e232      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800689a:	4b34      	ldr	r3, [pc, #208]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a6:	4b31      	ldr	r3, [pc, #196]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	061b      	lsls	r3, r3, #24
 80068b4:	492d      	ldr	r1, [pc, #180]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	604b      	str	r3, [r1, #4]
 80068ba:	e01a      	b.n	80068f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068bc:	4b2b      	ldr	r3, [pc, #172]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2a      	ldr	r2, [pc, #168]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 80068c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c8:	f7fd f95a 	bl	8003b80 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068d0:	f7fd f956 	bl	8003b80 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e20e      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068e2:	4b22      	ldr	r3, [pc, #136]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x1e0>
 80068ee:	e000      	b.n	80068f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d041      	beq.n	8006982 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01c      	beq.n	8006940 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006906:	4b19      	ldr	r3, [pc, #100]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800690c:	4a17      	ldr	r2, [pc, #92]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006916:	f7fd f933 	bl	8003b80 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800691e:	f7fd f92f 	bl	8003b80 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e1e7      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006930:	4b0e      	ldr	r3, [pc, #56]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0ef      	beq.n	800691e <HAL_RCC_OscConfig+0x22e>
 800693e:	e020      	b.n	8006982 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006940:	4b0a      	ldr	r3, [pc, #40]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006946:	4a09      	ldr	r2, [pc, #36]	@ (800696c <HAL_RCC_OscConfig+0x27c>)
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fd f916 	bl	8003b80 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006956:	e00d      	b.n	8006974 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006958:	f7fd f912 	bl	8003b80 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d906      	bls.n	8006974 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e1ca      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
 800696a:	bf00      	nop
 800696c:	40021000 	.word	0x40021000
 8006970:	20000384 	.word	0x20000384
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006974:	4b8c      	ldr	r3, [pc, #560]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1ea      	bne.n	8006958 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80a6 	beq.w	8006adc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006990:	2300      	movs	r3, #0
 8006992:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006994:	4b84      	ldr	r3, [pc, #528]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_OscConfig+0x2b4>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x2b6>
 80069a4:	2300      	movs	r3, #0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069aa:	4b7f      	ldr	r3, [pc, #508]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ae:	4a7e      	ldr	r2, [pc, #504]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 80069b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80069b6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80069c2:	2301      	movs	r3, #1
 80069c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069c6:	4b79      	ldr	r3, [pc, #484]	@ (8006bac <HAL_RCC_OscConfig+0x4bc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d118      	bne.n	8006a04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d2:	4b76      	ldr	r3, [pc, #472]	@ (8006bac <HAL_RCC_OscConfig+0x4bc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a75      	ldr	r2, [pc, #468]	@ (8006bac <HAL_RCC_OscConfig+0x4bc>)
 80069d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069de:	f7fd f8cf 	bl	8003b80 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fd f8cb 	bl	8003b80 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e183      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f8:	4b6c      	ldr	r3, [pc, #432]	@ (8006bac <HAL_RCC_OscConfig+0x4bc>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d108      	bne.n	8006a1e <HAL_RCC_OscConfig+0x32e>
 8006a0c:	4b66      	ldr	r3, [pc, #408]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a12:	4a65      	ldr	r2, [pc, #404]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a1c:	e024      	b.n	8006a68 <HAL_RCC_OscConfig+0x378>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b05      	cmp	r3, #5
 8006a24:	d110      	bne.n	8006a48 <HAL_RCC_OscConfig+0x358>
 8006a26:	4b60      	ldr	r3, [pc, #384]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a2e:	f043 0304 	orr.w	r3, r3, #4
 8006a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a36:	4b5c      	ldr	r3, [pc, #368]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a46:	e00f      	b.n	8006a68 <HAL_RCC_OscConfig+0x378>
 8006a48:	4b57      	ldr	r3, [pc, #348]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4e:	4a56      	ldr	r2, [pc, #344]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a58:	4b53      	ldr	r3, [pc, #332]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5e:	4a52      	ldr	r2, [pc, #328]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a60:	f023 0304 	bic.w	r3, r3, #4
 8006a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d016      	beq.n	8006a9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a70:	f7fd f886 	bl	8003b80 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a76:	e00a      	b.n	8006a8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a78:	f7fd f882 	bl	8003b80 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e138      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8e:	4b46      	ldr	r3, [pc, #280]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0ed      	beq.n	8006a78 <HAL_RCC_OscConfig+0x388>
 8006a9c:	e015      	b.n	8006aca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9e:	f7fd f86f 	bl	8003b80 <HAL_GetTick>
 8006aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006aa4:	e00a      	b.n	8006abc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa6:	f7fd f86b 	bl	8003b80 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e121      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006abc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1ed      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006aca:	7ffb      	ldrb	r3, [r7, #31]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d105      	bne.n	8006adc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad0:	4b35      	ldr	r3, [pc, #212]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad4:	4a34      	ldr	r2, [pc, #208]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ada:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d03c      	beq.n	8006b62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01c      	beq.n	8006b2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006af0:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006af6:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b00:	f7fd f83e 	bl	8003b80 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b08:	f7fd f83a 	bl	8003b80 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e0f2      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b1a:	4b23      	ldr	r3, [pc, #140]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0ef      	beq.n	8006b08 <HAL_RCC_OscConfig+0x418>
 8006b28:	e01b      	b.n	8006b62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b30:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3a:	f7fd f821 	bl	8003b80 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b42:	f7fd f81d 	bl	8003b80 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0d5      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b54:	4b14      	ldr	r3, [pc, #80]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ef      	bne.n	8006b42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80c9 	beq.w	8006cfe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 030c 	and.w	r3, r3, #12
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	f000 8083 	beq.w	8006c80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d15e      	bne.n	8006c40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b82:	4b09      	ldr	r3, [pc, #36]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a08      	ldr	r2, [pc, #32]	@ (8006ba8 <HAL_RCC_OscConfig+0x4b8>)
 8006b88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8e:	f7fc fff7 	bl	8003b80 <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b94:	e00c      	b.n	8006bb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b96:	f7fc fff3 	bl	8003b80 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d905      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e0ab      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb0:	4b55      	ldr	r3, [pc, #340]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ec      	bne.n	8006b96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bbc:	4b52      	ldr	r3, [pc, #328]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	4b52      	ldr	r3, [pc, #328]	@ (8006d0c <HAL_RCC_OscConfig+0x61c>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6a11      	ldr	r1, [r2, #32]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bcc:	3a01      	subs	r2, #1
 8006bce:	0112      	lsls	r2, r2, #4
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006bd6:	0212      	lsls	r2, r2, #8
 8006bd8:	4311      	orrs	r1, r2
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bde:	0852      	lsrs	r2, r2, #1
 8006be0:	3a01      	subs	r2, #1
 8006be2:	0552      	lsls	r2, r2, #21
 8006be4:	4311      	orrs	r1, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006bea:	0852      	lsrs	r2, r2, #1
 8006bec:	3a01      	subs	r2, #1
 8006bee:	0652      	lsls	r2, r2, #25
 8006bf0:	4311      	orrs	r1, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006bf6:	06d2      	lsls	r2, r2, #27
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	4943      	ldr	r1, [pc, #268]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c00:	4b41      	ldr	r3, [pc, #260]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a40      	ldr	r2, [pc, #256]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	4a3d      	ldr	r2, [pc, #244]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c18:	f7fc ffb2 	bl	8003b80 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c20:	f7fc ffae 	bl	8003b80 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e066      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c32:	4b35      	ldr	r3, [pc, #212]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0x530>
 8006c3e:	e05e      	b.n	8006cfe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c40:	4b31      	ldr	r3, [pc, #196]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a30      	ldr	r2, [pc, #192]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4c:	f7fc ff98 	bl	8003b80 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fc ff94 	bl	8003b80 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e04c      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c66:	4b28      	ldr	r3, [pc, #160]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c72:	4b25      	ldr	r3, [pc, #148]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	4924      	ldr	r1, [pc, #144]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c78:	4b25      	ldr	r3, [pc, #148]	@ (8006d10 <HAL_RCC_OscConfig+0x620>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	60cb      	str	r3, [r1, #12]
 8006c7e:	e03e      	b.n	8006cfe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e039      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8006d08 <HAL_RCC_OscConfig+0x618>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f003 0203 	and.w	r2, r3, #3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d12c      	bne.n	8006cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006caa:	3b01      	subs	r3, #1
 8006cac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d123      	bne.n	8006cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d11b      	bne.n	8006cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ccc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d113      	bne.n	8006cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d109      	bne.n	8006cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d001      	beq.n	8006cfe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3720      	adds	r7, #32
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	019f800c 	.word	0x019f800c
 8006d10:	feeefffc 	.word	0xfeeefffc

08006d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e11e      	b.n	8006f6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d2c:	4b91      	ldr	r3, [pc, #580]	@ (8006f74 <HAL_RCC_ClockConfig+0x260>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d910      	bls.n	8006d5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8006f74 <HAL_RCC_ClockConfig+0x260>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f023 020f 	bic.w	r2, r3, #15
 8006d42:	498c      	ldr	r1, [pc, #560]	@ (8006f74 <HAL_RCC_ClockConfig+0x260>)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b8a      	ldr	r3, [pc, #552]	@ (8006f74 <HAL_RCC_ClockConfig+0x260>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e106      	b.n	8006f6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d073      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d129      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d70:	4b81      	ldr	r3, [pc, #516]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0f4      	b.n	8006f6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006d80:	f000 f99c 	bl	80070bc <RCC_GetSysClockFreqFromPLLSource>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4a7c      	ldr	r2, [pc, #496]	@ (8006f7c <HAL_RCC_ClockConfig+0x268>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d93f      	bls.n	8006e0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d033      	beq.n	8006e0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d12f      	bne.n	8006e0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dae:	4b72      	ldr	r3, [pc, #456]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006db6:	4a70      	ldr	r2, [pc, #448]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006dbe:	2380      	movs	r3, #128	@ 0x80
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e024      	b.n	8006e0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d107      	bne.n	8006ddc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0c6      	b.n	8006f6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ddc:	4b66      	ldr	r3, [pc, #408]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e0be      	b.n	8006f6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006dec:	f000 f8ce 	bl	8006f8c <HAL_RCC_GetSysClockFreq>
 8006df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4a61      	ldr	r2, [pc, #388]	@ (8006f7c <HAL_RCC_ClockConfig+0x268>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d909      	bls.n	8006e0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e02:	4a5d      	ldr	r2, [pc, #372]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e0a:	2380      	movs	r3, #128	@ 0x80
 8006e0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f023 0203 	bic.w	r2, r3, #3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4957      	ldr	r1, [pc, #348]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e20:	f7fc feae 	bl	8003b80 <HAL_GetTick>
 8006e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e26:	e00a      	b.n	8006e3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e28:	f7fc feaa 	bl	8003b80 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e095      	b.n	8006f6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 020c 	and.w	r2, r3, #12
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d1eb      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d023      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e68:	4b43      	ldr	r3, [pc, #268]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	4a42      	ldr	r2, [pc, #264]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e80:	4b3d      	ldr	r3, [pc, #244]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e88:	4a3b      	ldr	r2, [pc, #236]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e90:	4b39      	ldr	r3, [pc, #228]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	4936      	ldr	r1, [pc, #216]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	608b      	str	r3, [r1, #8]
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b80      	cmp	r3, #128	@ 0x80
 8006ea8:	d105      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006eaa:	4b33      	ldr	r3, [pc, #204]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	4a32      	ldr	r2, [pc, #200]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006eb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006eb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8006f74 <HAL_RCC_ClockConfig+0x260>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d21d      	bcs.n	8006f00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f74 <HAL_RCC_ClockConfig+0x260>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f023 020f 	bic.w	r2, r3, #15
 8006ecc:	4929      	ldr	r1, [pc, #164]	@ (8006f74 <HAL_RCC_ClockConfig+0x260>)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ed4:	f7fc fe54 	bl	8003b80 <HAL_GetTick>
 8006ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eda:	e00a      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006edc:	f7fc fe50 	bl	8003b80 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e03b      	b.n	8006f6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef2:	4b20      	ldr	r3, [pc, #128]	@ (8006f74 <HAL_RCC_ClockConfig+0x260>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d1ed      	bne.n	8006edc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d008      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	4917      	ldr	r1, [pc, #92]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f2a:	4b13      	ldr	r3, [pc, #76]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	490f      	ldr	r1, [pc, #60]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f3e:	f000 f825 	bl	8006f8c <HAL_RCC_GetSysClockFreq>
 8006f42:	4602      	mov	r2, r0
 8006f44:	4b0c      	ldr	r3, [pc, #48]	@ (8006f78 <HAL_RCC_ClockConfig+0x264>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	091b      	lsrs	r3, r3, #4
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	490c      	ldr	r1, [pc, #48]	@ (8006f80 <HAL_RCC_ClockConfig+0x26c>)
 8006f50:	5ccb      	ldrb	r3, [r1, r3]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f84 <HAL_RCC_ClockConfig+0x270>)
 8006f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <HAL_RCC_ClockConfig+0x274>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fc fdc0 	bl	8003ae8 <HAL_InitTick>
 8006f68:	4603      	mov	r3, r0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40022000 	.word	0x40022000
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	04c4b400 	.word	0x04c4b400
 8006f80:	0800bdcc 	.word	0x0800bdcc
 8006f84:	20000380 	.word	0x20000380
 8006f88:	20000384 	.word	0x20000384

08006f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f92:	4b2c      	ldr	r3, [pc, #176]	@ (8007044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 030c 	and.w	r3, r3, #12
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d102      	bne.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8007048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	e047      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006fa4:	4b27      	ldr	r3, [pc, #156]	@ (8007044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 030c 	and.w	r3, r3, #12
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d102      	bne.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fb0:	4b25      	ldr	r3, [pc, #148]	@ (8007048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	e03e      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006fb6:	4b23      	ldr	r3, [pc, #140]	@ (8007044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 030c 	and.w	r3, r3, #12
 8006fbe:	2b0c      	cmp	r3, #12
 8006fc0:	d136      	bne.n	8007030 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fc2:	4b20      	ldr	r3, [pc, #128]	@ (8007044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8007044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	091b      	lsrs	r3, r3, #4
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d10c      	bne.n	8006ffa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fe0:	4a19      	ldr	r2, [pc, #100]	@ (8007048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	4a16      	ldr	r2, [pc, #88]	@ (8007044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fea:	68d2      	ldr	r2, [r2, #12]
 8006fec:	0a12      	lsrs	r2, r2, #8
 8006fee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	617b      	str	r3, [r7, #20]
      break;
 8006ff8:	e00c      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ffa:	4a13      	ldr	r2, [pc, #76]	@ (8007048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007002:	4a10      	ldr	r2, [pc, #64]	@ (8007044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007004:	68d2      	ldr	r2, [r2, #12]
 8007006:	0a12      	lsrs	r2, r2, #8
 8007008:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800700c:	fb02 f303 	mul.w	r3, r2, r3
 8007010:	617b      	str	r3, [r7, #20]
      break;
 8007012:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007014:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	0e5b      	lsrs	r3, r3, #25
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	3301      	adds	r3, #1
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	e001      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007034:	693b      	ldr	r3, [r7, #16]
}
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40021000 	.word	0x40021000
 8007048:	00f42400 	.word	0x00f42400

0800704c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007050:	4b03      	ldr	r3, [pc, #12]	@ (8007060 <HAL_RCC_GetHCLKFreq+0x14>)
 8007052:	681b      	ldr	r3, [r3, #0]
}
 8007054:	4618      	mov	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000380 	.word	0x20000380

08007064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007068:	f7ff fff0 	bl	800704c <HAL_RCC_GetHCLKFreq>
 800706c:	4602      	mov	r2, r0
 800706e:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	4904      	ldr	r1, [pc, #16]	@ (800708c <HAL_RCC_GetPCLK1Freq+0x28>)
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40021000 	.word	0x40021000
 800708c:	0800bddc 	.word	0x0800bddc

08007090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007094:	f7ff ffda 	bl	800704c <HAL_RCC_GetHCLKFreq>
 8007098:	4602      	mov	r2, r0
 800709a:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	0adb      	lsrs	r3, r3, #11
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	4904      	ldr	r1, [pc, #16]	@ (80070b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070a6:	5ccb      	ldrb	r3, [r1, r3]
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40021000 	.word	0x40021000
 80070b8:	0800bddc 	.word	0x0800bddc

080070bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070c2:	4b1e      	ldr	r3, [pc, #120]	@ (800713c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070cc:	4b1b      	ldr	r3, [pc, #108]	@ (800713c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	3301      	adds	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d10c      	bne.n	80070fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070e0:	4a17      	ldr	r2, [pc, #92]	@ (8007140 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	4a14      	ldr	r2, [pc, #80]	@ (800713c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070ea:	68d2      	ldr	r2, [r2, #12]
 80070ec:	0a12      	lsrs	r2, r2, #8
 80070ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	617b      	str	r3, [r7, #20]
    break;
 80070f8:	e00c      	b.n	8007114 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070fa:	4a11      	ldr	r2, [pc, #68]	@ (8007140 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	4a0e      	ldr	r2, [pc, #56]	@ (800713c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007104:	68d2      	ldr	r2, [r2, #12]
 8007106:	0a12      	lsrs	r2, r2, #8
 8007108:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	617b      	str	r3, [r7, #20]
    break;
 8007112:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007114:	4b09      	ldr	r3, [pc, #36]	@ (800713c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	0e5b      	lsrs	r3, r3, #25
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	3301      	adds	r3, #1
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	fbb2 f3f3 	udiv	r3, r2, r3
 800712c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800712e:	687b      	ldr	r3, [r7, #4]
}
 8007130:	4618      	mov	r0, r3
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	40021000 	.word	0x40021000
 8007140:	00f42400 	.word	0x00f42400

08007144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800714c:	2300      	movs	r3, #0
 800714e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007150:	2300      	movs	r3, #0
 8007152:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8098 	beq.w	8007292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007162:	2300      	movs	r3, #0
 8007164:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007166:	4b43      	ldr	r3, [pc, #268]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800716a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10d      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007172:	4b40      	ldr	r3, [pc, #256]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007176:	4a3f      	ldr	r2, [pc, #252]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800717c:	6593      	str	r3, [r2, #88]	@ 0x58
 800717e:	4b3d      	ldr	r3, [pc, #244]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007186:	60bb      	str	r3, [r7, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800718a:	2301      	movs	r3, #1
 800718c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800718e:	4b3a      	ldr	r3, [pc, #232]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a39      	ldr	r2, [pc, #228]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800719a:	f7fc fcf1 	bl	8003b80 <HAL_GetTick>
 800719e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071a0:	e009      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a2:	f7fc fced 	bl	8003b80 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d902      	bls.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	74fb      	strb	r3, [r7, #19]
        break;
 80071b4:	e005      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b6:	4b30      	ldr	r3, [pc, #192]	@ (8007278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0ef      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80071c2:	7cfb      	ldrb	r3, [r7, #19]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d159      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d01e      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d019      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071e4:	4b23      	ldr	r3, [pc, #140]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071f0:	4b20      	ldr	r3, [pc, #128]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007200:	4b1c      	ldr	r3, [pc, #112]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007206:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800720c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007210:	4a18      	ldr	r2, [pc, #96]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d016      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007222:	f7fc fcad 	bl	8003b80 <HAL_GetTick>
 8007226:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007228:	e00b      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722a:	f7fc fca9 	bl	8003b80 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007238:	4293      	cmp	r3, r2
 800723a:	d902      	bls.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	74fb      	strb	r3, [r7, #19]
            break;
 8007240:	e006      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007242:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0ec      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007250:	7cfb      	ldrb	r3, [r7, #19]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007264:	4903      	ldr	r1, [pc, #12]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800726c:	e008      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800726e:	7cfb      	ldrb	r3, [r7, #19]
 8007270:	74bb      	strb	r3, [r7, #18]
 8007272:	e005      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007274:	40021000 	.word	0x40021000
 8007278:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727c:	7cfb      	ldrb	r3, [r7, #19]
 800727e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007280:	7c7b      	ldrb	r3, [r7, #17]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d105      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007286:	4ba7      	ldr	r3, [pc, #668]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800728a:	4aa6      	ldr	r2, [pc, #664]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007290:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800729e:	4ba1      	ldr	r3, [pc, #644]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a4:	f023 0203 	bic.w	r2, r3, #3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	499d      	ldr	r1, [pc, #628]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072c0:	4b98      	ldr	r3, [pc, #608]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c6:	f023 020c 	bic.w	r2, r3, #12
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4995      	ldr	r1, [pc, #596]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072e2:	4b90      	ldr	r3, [pc, #576]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	498c      	ldr	r1, [pc, #560]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007304:	4b87      	ldr	r3, [pc, #540]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	4984      	ldr	r1, [pc, #528]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007314:	4313      	orrs	r3, r2
 8007316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0310 	and.w	r3, r3, #16
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007326:	4b7f      	ldr	r3, [pc, #508]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	497b      	ldr	r1, [pc, #492]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007348:	4b76      	ldr	r3, [pc, #472]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	4973      	ldr	r1, [pc, #460]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800736a:	4b6e      	ldr	r3, [pc, #440]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007370:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	496a      	ldr	r1, [pc, #424]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800738c:	4b65      	ldr	r3, [pc, #404]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007392:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	4962      	ldr	r1, [pc, #392]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800739c:	4313      	orrs	r3, r2
 800739e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073ae:	4b5d      	ldr	r3, [pc, #372]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073bc:	4959      	ldr	r1, [pc, #356]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073d0:	4b54      	ldr	r3, [pc, #336]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073d6:	f023 0203 	bic.w	r2, r3, #3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073de:	4951      	ldr	r1, [pc, #324]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073f2:	4b4c      	ldr	r3, [pc, #304]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	4948      	ldr	r1, [pc, #288]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007410:	2b00      	cmp	r3, #0
 8007412:	d015      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007414:	4b43      	ldr	r3, [pc, #268]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007422:	4940      	ldr	r1, [pc, #256]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007424:	4313      	orrs	r3, r2
 8007426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007432:	d105      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007434:	4b3b      	ldr	r3, [pc, #236]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	4a3a      	ldr	r2, [pc, #232]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800743a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800743e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007448:	2b00      	cmp	r3, #0
 800744a:	d015      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800744c:	4b35      	ldr	r3, [pc, #212]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007452:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745a:	4932      	ldr	r1, [pc, #200]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800745c:	4313      	orrs	r3, r2
 800745e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007466:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800746a:	d105      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800746c:	4b2d      	ldr	r3, [pc, #180]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	4a2c      	ldr	r2, [pc, #176]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007476:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d015      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007484:	4b27      	ldr	r3, [pc, #156]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	4924      	ldr	r1, [pc, #144]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007494:	4313      	orrs	r3, r2
 8007496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074a2:	d105      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074a4:	4b1f      	ldr	r3, [pc, #124]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d015      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074bc:	4b19      	ldr	r3, [pc, #100]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ca:	4916      	ldr	r1, [pc, #88]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074da:	d105      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074dc:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	4a10      	ldr	r2, [pc, #64]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d019      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	4908      	ldr	r1, [pc, #32]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007512:	d109      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007514:	4b03      	ldr	r3, [pc, #12]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4a02      	ldr	r2, [pc, #8]	@ (8007524 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800751e:	60d3      	str	r3, [r2, #12]
 8007520:	e002      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007522:	bf00      	nop
 8007524:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d015      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007534:	4b29      	ldr	r3, [pc, #164]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800753a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007542:	4926      	ldr	r1, [pc, #152]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007552:	d105      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007554:	4b21      	ldr	r3, [pc, #132]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a20      	ldr	r2, [pc, #128]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800755a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800755e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d015      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800756c:	4b1b      	ldr	r3, [pc, #108]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007572:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800757a:	4918      	ldr	r1, [pc, #96]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800757c:	4313      	orrs	r3, r2
 800757e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758a:	d105      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800758c:	4b13      	ldr	r3, [pc, #76]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4a12      	ldr	r2, [pc, #72]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007596:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d015      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075a4:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075b2:	490a      	ldr	r1, [pc, #40]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075c2:	d105      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075c4:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	4a04      	ldr	r2, [pc, #16]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80075d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40021000 	.word	0x40021000

080075e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e09d      	b.n	800772e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007602:	d009      	beq.n	8007618 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	61da      	str	r2, [r3, #28]
 800760a:	e005      	b.n	8007618 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fb fc28 	bl	8002e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800764e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007658:	d902      	bls.n	8007660 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	e002      	b.n	8007666 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007664:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800766e:	d007      	beq.n	8007680 <HAL_SPI_Init+0xa0>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007678:	d002      	beq.n	8007680 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c2:	ea42 0103 	orr.w	r1, r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	f003 0204 	and.w	r2, r3, #4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80076fc:	ea42 0103 	orr.w	r1, r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800771c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b088      	sub	sp, #32
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007746:	f7fc fa1b 	bl	8003b80 <HAL_GetTick>
 800774a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d001      	beq.n	8007760 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800775c:	2302      	movs	r3, #2
 800775e:	e15c      	b.n	8007a1a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_SPI_Transmit+0x36>
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e154      	b.n	8007a1a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_SPI_Transmit+0x48>
 800777a:	2302      	movs	r3, #2
 800777c:	e14d      	b.n	8007a1a <HAL_SPI_Transmit+0x2e4>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2203      	movs	r2, #3
 800778a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d0:	d10f      	bne.n	80077f2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fc:	2b40      	cmp	r3, #64	@ 0x40
 80077fe:	d007      	beq.n	8007810 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800780e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007818:	d952      	bls.n	80078c0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <HAL_SPI_Transmit+0xf2>
 8007822:	8b7b      	ldrh	r3, [r7, #26]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d145      	bne.n	80078b4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782c:	881a      	ldrh	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007838:	1c9a      	adds	r2, r3, #2
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800784c:	e032      	b.n	80078b4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b02      	cmp	r3, #2
 800785a:	d112      	bne.n	8007882 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007860:	881a      	ldrh	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	1c9a      	adds	r2, r3, #2
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007880:	e018      	b.n	80078b4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007882:	f7fc f97d 	bl	8003b80 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d803      	bhi.n	800789a <HAL_SPI_Transmit+0x164>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007898:	d102      	bne.n	80078a0 <HAL_SPI_Transmit+0x16a>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0b2      	b.n	8007a1a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1c7      	bne.n	800784e <HAL_SPI_Transmit+0x118>
 80078be:	e083      	b.n	80079c8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <HAL_SPI_Transmit+0x198>
 80078c8:	8b7b      	ldrh	r3, [r7, #26]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d177      	bne.n	80079be <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d912      	bls.n	80078fe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078dc:	881a      	ldrh	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e8:	1c9a      	adds	r2, r3, #2
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b02      	subs	r3, #2
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078fc:	e05f      	b.n	80079be <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	330c      	adds	r3, #12
 8007908:	7812      	ldrb	r2, [r2, #0]
 800790a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007924:	e04b      	b.n	80079be <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b02      	cmp	r3, #2
 8007932:	d12b      	bne.n	800798c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b01      	cmp	r3, #1
 800793c:	d912      	bls.n	8007964 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007942:	881a      	ldrh	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794e:	1c9a      	adds	r2, r3, #2
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b02      	subs	r3, #2
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007962:	e02c      	b.n	80079be <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	330c      	adds	r3, #12
 800796e:	7812      	ldrb	r2, [r2, #0]
 8007970:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800798a:	e018      	b.n	80079be <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800798c:	f7fc f8f8 	bl	8003b80 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d803      	bhi.n	80079a4 <HAL_SPI_Transmit+0x26e>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079a2:	d102      	bne.n	80079aa <HAL_SPI_Transmit+0x274>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e02d      	b.n	8007a1a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1ae      	bne.n	8007926 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fb65 	bl	800809c <SPI_EndRxTxTransaction>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2220      	movs	r2, #32
 80079dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10a      	bne.n	80079fc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e000      	b.n	8007a1a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007a18:	2300      	movs	r3, #0
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b08a      	sub	sp, #40	@ 0x28
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a30:	2301      	movs	r3, #1
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a34:	f7fc f8a4 	bl	8003b80 <HAL_GetTick>
 8007a38:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a40:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007a48:	887b      	ldrh	r3, [r7, #2]
 8007a4a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007a4c:	887b      	ldrh	r3, [r7, #2]
 8007a4e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a50:	7ffb      	ldrb	r3, [r7, #31]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d00c      	beq.n	8007a70 <HAL_SPI_TransmitReceive+0x4e>
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a5c:	d106      	bne.n	8007a6c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <HAL_SPI_TransmitReceive+0x4a>
 8007a66:	7ffb      	ldrb	r3, [r7, #31]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d001      	beq.n	8007a70 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e1f3      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_SPI_TransmitReceive+0x60>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_SPI_TransmitReceive+0x60>
 8007a7c:	887b      	ldrh	r3, [r7, #2]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e1e8      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x72>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e1e1      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x436>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d003      	beq.n	8007ab0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2205      	movs	r2, #5
 8007aac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	887a      	ldrh	r2, [r7, #2]
 8007ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	887a      	ldrh	r2, [r7, #2]
 8007ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	887a      	ldrh	r2, [r7, #2]
 8007ad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	887a      	ldrh	r2, [r7, #2]
 8007adc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007af2:	d802      	bhi.n	8007afa <HAL_SPI_TransmitReceive+0xd8>
 8007af4:	8abb      	ldrh	r3, [r7, #20]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d908      	bls.n	8007b0c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	e007      	b.n	8007b1c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b1a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b26:	2b40      	cmp	r3, #64	@ 0x40
 8007b28:	d007      	beq.n	8007b3a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b42:	f240 8083 	bls.w	8007c4c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <HAL_SPI_TransmitReceive+0x132>
 8007b4e:	8afb      	ldrh	r3, [r7, #22]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d16f      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b58:	881a      	ldrh	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b78:	e05c      	b.n	8007c34 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d11b      	bne.n	8007bc0 <HAL_SPI_TransmitReceive+0x19e>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d016      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x19e>
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d113      	bne.n	8007bc0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9c:	881a      	ldrh	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba8:	1c9a      	adds	r2, r3, #2
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d11c      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x1e6>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d016      	beq.n	8007c08 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be4:	b292      	uxth	r2, r2
 8007be6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c04:	2301      	movs	r3, #1
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c08:	f7fb ffba 	bl	8003b80 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d80d      	bhi.n	8007c34 <HAL_SPI_TransmitReceive+0x212>
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c1e:	d009      	beq.n	8007c34 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e111      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d19d      	bne.n	8007b7a <HAL_SPI_TransmitReceive+0x158>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d197      	bne.n	8007b7a <HAL_SPI_TransmitReceive+0x158>
 8007c4a:	e0e5      	b.n	8007e18 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_SPI_TransmitReceive+0x23a>
 8007c54:	8afb      	ldrh	r3, [r7, #22]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	f040 80d1 	bne.w	8007dfe <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d912      	bls.n	8007c8c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6a:	881a      	ldrh	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	1c9a      	adds	r2, r3, #2
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b02      	subs	r3, #2
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c8a:	e0b8      	b.n	8007dfe <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cb2:	e0a4      	b.n	8007dfe <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d134      	bne.n	8007d2c <HAL_SPI_TransmitReceive+0x30a>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02f      	beq.n	8007d2c <HAL_SPI_TransmitReceive+0x30a>
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d12c      	bne.n	8007d2c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d912      	bls.n	8007d02 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce0:	881a      	ldrh	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cec:	1c9a      	adds	r2, r3, #2
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b02      	subs	r3, #2
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d00:	e012      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	3b01      	subs	r3, #1
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d148      	bne.n	8007dcc <HAL_SPI_TransmitReceive+0x3aa>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d042      	beq.n	8007dcc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d923      	bls.n	8007d9a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5c:	b292      	uxth	r2, r2
 8007d5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d64:	1c9a      	adds	r2, r3, #2
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b02      	subs	r3, #2
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d81f      	bhi.n	8007dc8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d96:	605a      	str	r2, [r3, #4]
 8007d98:	e016      	b.n	8007dc8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f103 020c 	add.w	r2, r3, #12
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da6:	7812      	ldrb	r2, [r2, #0]
 8007da8:	b2d2      	uxtb	r2, r2
 8007daa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007dcc:	f7fb fed8 	bl	8003b80 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d803      	bhi.n	8007de4 <HAL_SPI_TransmitReceive+0x3c2>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007de2:	d102      	bne.n	8007dea <HAL_SPI_TransmitReceive+0x3c8>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e02c      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f47f af55 	bne.w	8007cb4 <HAL_SPI_TransmitReceive+0x292>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f47f af4e 	bne.w	8007cb4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e18:	6a3a      	ldr	r2, [r7, #32]
 8007e1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f93d 	bl	800809c <SPI_EndRxTxTransaction>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e00e      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007e56:	2300      	movs	r3, #0
  }
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3728      	adds	r7, #40	@ 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e70:	f7fb fe86 	bl	8003b80 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e80:	f7fb fe7e 	bl	8003b80 <HAL_GetTick>
 8007e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e86:	4b39      	ldr	r3, [pc, #228]	@ (8007f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	015b      	lsls	r3, r3, #5
 8007e8c:	0d1b      	lsrs	r3, r3, #20
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	fb02 f303 	mul.w	r3, r2, r3
 8007e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e96:	e054      	b.n	8007f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e9e:	d050      	beq.n	8007f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ea0:	f7fb fe6e 	bl	8003b80 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d902      	bls.n	8007eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d13d      	bne.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ece:	d111      	bne.n	8007ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ed8:	d004      	beq.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee2:	d107      	bne.n	8007ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007efc:	d10f      	bne.n	8007f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e017      	b.n	8007f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	bf0c      	ite	eq
 8007f52:	2301      	moveq	r3, #1
 8007f54:	2300      	movne	r3, #0
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d19b      	bne.n	8007e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3720      	adds	r7, #32
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000380 	.word	0x20000380

08007f70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08a      	sub	sp, #40	@ 0x28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f82:	f7fb fdfd 	bl	8003b80 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	4413      	add	r3, r2
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007f92:	f7fb fdf5 	bl	8003b80 <HAL_GetTick>
 8007f96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8008098 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	00da      	lsls	r2, r3, #3
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	0d1b      	lsrs	r3, r3, #20
 8007fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb2:	fb02 f303 	mul.w	r3, r2, r3
 8007fb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007fb8:	e060      	b.n	800807c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007fc0:	d107      	bne.n	8007fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d104      	bne.n	8007fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fd8:	d050      	beq.n	800807c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fda:	f7fb fdd1 	bl	8003b80 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d902      	bls.n	8007ff0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d13d      	bne.n	800806c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ffe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008008:	d111      	bne.n	800802e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008012:	d004      	beq.n	800801e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801c:	d107      	bne.n	800802e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800802c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008036:	d10f      	bne.n	8008058 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e010      	b.n	800808e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	3b01      	subs	r3, #1
 800807a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4013      	ands	r3, r2
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	429a      	cmp	r2, r3
 800808a:	d196      	bne.n	8007fba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3728      	adds	r7, #40	@ 0x28
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000380 	.word	0x20000380

0800809c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff ff5b 	bl	8007f70 <SPI_WaitFifoStateUntilTimeout>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080c4:	f043 0220 	orr.w	r2, r3, #32
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e027      	b.n	8008120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	2180      	movs	r1, #128	@ 0x80
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7ff fec0 	bl	8007e60 <SPI_WaitFlagStateUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ea:	f043 0220 	orr.w	r2, r3, #32
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e014      	b.n	8008120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff ff34 	bl	8007f70 <SPI_WaitFifoStateUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008112:	f043 0220 	orr.w	r2, r3, #32
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e000      	b.n	8008120 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e049      	b.n	80081ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fb fa1a 	bl	8003588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f001 f878 	bl	800925c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e049      	b.n	800827c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f841 	bl	8008284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3304      	adds	r3, #4
 8008212:	4619      	mov	r1, r3
 8008214:	4610      	mov	r0, r2
 8008216:	f001 f821 	bl	800925c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d109      	bne.n	80082bc <HAL_TIM_PWM_Start+0x24>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	bf14      	ite	ne
 80082b4:	2301      	movne	r3, #1
 80082b6:	2300      	moveq	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	e03c      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d109      	bne.n	80082d6 <HAL_TIM_PWM_Start+0x3e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	bf14      	ite	ne
 80082ce:	2301      	movne	r3, #1
 80082d0:	2300      	moveq	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	e02f      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d109      	bne.n	80082f0 <HAL_TIM_PWM_Start+0x58>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	bf14      	ite	ne
 80082e8:	2301      	movne	r3, #1
 80082ea:	2300      	moveq	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	e022      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b0c      	cmp	r3, #12
 80082f4:	d109      	bne.n	800830a <HAL_TIM_PWM_Start+0x72>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b01      	cmp	r3, #1
 8008300:	bf14      	ite	ne
 8008302:	2301      	movne	r3, #1
 8008304:	2300      	moveq	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	e015      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b10      	cmp	r3, #16
 800830e:	d109      	bne.n	8008324 <HAL_TIM_PWM_Start+0x8c>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b01      	cmp	r3, #1
 800831a:	bf14      	ite	ne
 800831c:	2301      	movne	r3, #1
 800831e:	2300      	moveq	r3, #0
 8008320:	b2db      	uxtb	r3, r3
 8008322:	e008      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b01      	cmp	r3, #1
 800832e:	bf14      	ite	ne
 8008330:	2301      	movne	r3, #1
 8008332:	2300      	moveq	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e0a6      	b.n	800848c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <HAL_TIM_PWM_Start+0xb6>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800834c:	e023      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b04      	cmp	r3, #4
 8008352:	d104      	bne.n	800835e <HAL_TIM_PWM_Start+0xc6>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800835c:	e01b      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d104      	bne.n	800836e <HAL_TIM_PWM_Start+0xd6>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800836c:	e013      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b0c      	cmp	r3, #12
 8008372:	d104      	bne.n	800837e <HAL_TIM_PWM_Start+0xe6>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800837c:	e00b      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b10      	cmp	r3, #16
 8008382:	d104      	bne.n	800838e <HAL_TIM_PWM_Start+0xf6>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800838c:	e003      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2202      	movs	r2, #2
 8008392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2201      	movs	r2, #1
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 fd00 	bl	8009da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a3a      	ldr	r2, [pc, #232]	@ (8008494 <HAL_TIM_PWM_Start+0x1fc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d018      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x148>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a39      	ldr	r2, [pc, #228]	@ (8008498 <HAL_TIM_PWM_Start+0x200>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d013      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x148>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a37      	ldr	r2, [pc, #220]	@ (800849c <HAL_TIM_PWM_Start+0x204>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d00e      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x148>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a36      	ldr	r2, [pc, #216]	@ (80084a0 <HAL_TIM_PWM_Start+0x208>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d009      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x148>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a34      	ldr	r2, [pc, #208]	@ (80084a4 <HAL_TIM_PWM_Start+0x20c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d004      	beq.n	80083e0 <HAL_TIM_PWM_Start+0x148>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a33      	ldr	r2, [pc, #204]	@ (80084a8 <HAL_TIM_PWM_Start+0x210>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d101      	bne.n	80083e4 <HAL_TIM_PWM_Start+0x14c>
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <HAL_TIM_PWM_Start+0x14e>
 80083e4:	2300      	movs	r3, #0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a25      	ldr	r2, [pc, #148]	@ (8008494 <HAL_TIM_PWM_Start+0x1fc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d022      	beq.n	800844a <HAL_TIM_PWM_Start+0x1b2>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800840c:	d01d      	beq.n	800844a <HAL_TIM_PWM_Start+0x1b2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a26      	ldr	r2, [pc, #152]	@ (80084ac <HAL_TIM_PWM_Start+0x214>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d018      	beq.n	800844a <HAL_TIM_PWM_Start+0x1b2>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a24      	ldr	r2, [pc, #144]	@ (80084b0 <HAL_TIM_PWM_Start+0x218>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d013      	beq.n	800844a <HAL_TIM_PWM_Start+0x1b2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a23      	ldr	r2, [pc, #140]	@ (80084b4 <HAL_TIM_PWM_Start+0x21c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00e      	beq.n	800844a <HAL_TIM_PWM_Start+0x1b2>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a19      	ldr	r2, [pc, #100]	@ (8008498 <HAL_TIM_PWM_Start+0x200>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d009      	beq.n	800844a <HAL_TIM_PWM_Start+0x1b2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a18      	ldr	r2, [pc, #96]	@ (800849c <HAL_TIM_PWM_Start+0x204>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d004      	beq.n	800844a <HAL_TIM_PWM_Start+0x1b2>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a18      	ldr	r2, [pc, #96]	@ (80084a8 <HAL_TIM_PWM_Start+0x210>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d115      	bne.n	8008476 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	4b19      	ldr	r3, [pc, #100]	@ (80084b8 <HAL_TIM_PWM_Start+0x220>)
 8008452:	4013      	ands	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b06      	cmp	r3, #6
 800845a:	d015      	beq.n	8008488 <HAL_TIM_PWM_Start+0x1f0>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008462:	d011      	beq.n	8008488 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0201 	orr.w	r2, r2, #1
 8008472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008474:	e008      	b.n	8008488 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f042 0201 	orr.w	r2, r2, #1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e000      	b.n	800848a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008488:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	40012c00 	.word	0x40012c00
 8008498:	40013400 	.word	0x40013400
 800849c:	40014000 	.word	0x40014000
 80084a0:	40014400 	.word	0x40014400
 80084a4:	40014800 	.word	0x40014800
 80084a8:	40015000 	.word	0x40015000
 80084ac:	40000400 	.word	0x40000400
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000c00 	.word	0x40000c00
 80084b8:	00010007 	.word	0x00010007

080084bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2200      	movs	r2, #0
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 fc68 	bl	8009da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a40      	ldr	r2, [pc, #256]	@ (80085dc <HAL_TIM_PWM_Stop+0x120>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d018      	beq.n	8008510 <HAL_TIM_PWM_Stop+0x54>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a3f      	ldr	r2, [pc, #252]	@ (80085e0 <HAL_TIM_PWM_Stop+0x124>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d013      	beq.n	8008510 <HAL_TIM_PWM_Stop+0x54>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a3d      	ldr	r2, [pc, #244]	@ (80085e4 <HAL_TIM_PWM_Stop+0x128>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00e      	beq.n	8008510 <HAL_TIM_PWM_Stop+0x54>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a3c      	ldr	r2, [pc, #240]	@ (80085e8 <HAL_TIM_PWM_Stop+0x12c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d009      	beq.n	8008510 <HAL_TIM_PWM_Stop+0x54>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a3a      	ldr	r2, [pc, #232]	@ (80085ec <HAL_TIM_PWM_Stop+0x130>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d004      	beq.n	8008510 <HAL_TIM_PWM_Stop+0x54>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a39      	ldr	r2, [pc, #228]	@ (80085f0 <HAL_TIM_PWM_Stop+0x134>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d101      	bne.n	8008514 <HAL_TIM_PWM_Stop+0x58>
 8008510:	2301      	movs	r3, #1
 8008512:	e000      	b.n	8008516 <HAL_TIM_PWM_Stop+0x5a>
 8008514:	2300      	movs	r3, #0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d017      	beq.n	800854a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008524:	4013      	ands	r3, r2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10f      	bne.n	800854a <HAL_TIM_PWM_Stop+0x8e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6a1a      	ldr	r2, [r3, #32]
 8008530:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008534:	4013      	ands	r3, r2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d107      	bne.n	800854a <HAL_TIM_PWM_Stop+0x8e>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008548:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6a1a      	ldr	r2, [r3, #32]
 8008550:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008554:	4013      	ands	r3, r2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10f      	bne.n	800857a <HAL_TIM_PWM_Stop+0xbe>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6a1a      	ldr	r2, [r3, #32]
 8008560:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008564:	4013      	ands	r3, r2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d107      	bne.n	800857a <HAL_TIM_PWM_Stop+0xbe>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0201 	bic.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <HAL_TIM_PWM_Stop+0xce>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008588:	e023      	b.n	80085d2 <HAL_TIM_PWM_Stop+0x116>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b04      	cmp	r3, #4
 800858e:	d104      	bne.n	800859a <HAL_TIM_PWM_Stop+0xde>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008598:	e01b      	b.n	80085d2 <HAL_TIM_PWM_Stop+0x116>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b08      	cmp	r3, #8
 800859e:	d104      	bne.n	80085aa <HAL_TIM_PWM_Stop+0xee>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085a8:	e013      	b.n	80085d2 <HAL_TIM_PWM_Stop+0x116>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b0c      	cmp	r3, #12
 80085ae:	d104      	bne.n	80085ba <HAL_TIM_PWM_Stop+0xfe>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085b8:	e00b      	b.n	80085d2 <HAL_TIM_PWM_Stop+0x116>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b10      	cmp	r3, #16
 80085be:	d104      	bne.n	80085ca <HAL_TIM_PWM_Stop+0x10e>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085c8:	e003      	b.n	80085d2 <HAL_TIM_PWM_Stop+0x116>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40012c00 	.word	0x40012c00
 80085e0:	40013400 	.word	0x40013400
 80085e4:	40014000 	.word	0x40014000
 80085e8:	40014400 	.word	0x40014400
 80085ec:	40014800 	.word	0x40014800
 80085f0:	40015000 	.word	0x40015000

080085f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e049      	b.n	800869a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d106      	bne.n	8008620 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f841 	bl	80086a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3304      	adds	r3, #4
 8008630:	4619      	mov	r1, r3
 8008632:	4610      	mov	r0, r2
 8008634:	f000 fe12 	bl	800925c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <HAL_TIM_IC_Start_IT+0x1e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	e023      	b.n	800871e <HAL_TIM_IC_Start_IT+0x66>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d104      	bne.n	80086e6 <HAL_TIM_IC_Start_IT+0x2e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	e01b      	b.n	800871e <HAL_TIM_IC_Start_IT+0x66>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d104      	bne.n	80086f6 <HAL_TIM_IC_Start_IT+0x3e>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	e013      	b.n	800871e <HAL_TIM_IC_Start_IT+0x66>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b0c      	cmp	r3, #12
 80086fa:	d104      	bne.n	8008706 <HAL_TIM_IC_Start_IT+0x4e>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008702:	b2db      	uxtb	r3, r3
 8008704:	e00b      	b.n	800871e <HAL_TIM_IC_Start_IT+0x66>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b10      	cmp	r3, #16
 800870a:	d104      	bne.n	8008716 <HAL_TIM_IC_Start_IT+0x5e>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008712:	b2db      	uxtb	r3, r3
 8008714:	e003      	b.n	800871e <HAL_TIM_IC_Start_IT+0x66>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800871c:	b2db      	uxtb	r3, r3
 800871e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <HAL_TIM_IC_Start_IT+0x78>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800872c:	b2db      	uxtb	r3, r3
 800872e:	e013      	b.n	8008758 <HAL_TIM_IC_Start_IT+0xa0>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b04      	cmp	r3, #4
 8008734:	d104      	bne.n	8008740 <HAL_TIM_IC_Start_IT+0x88>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800873c:	b2db      	uxtb	r3, r3
 800873e:	e00b      	b.n	8008758 <HAL_TIM_IC_Start_IT+0xa0>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2b08      	cmp	r3, #8
 8008744:	d104      	bne.n	8008750 <HAL_TIM_IC_Start_IT+0x98>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800874c:	b2db      	uxtb	r3, r3
 800874e:	e003      	b.n	8008758 <HAL_TIM_IC_Start_IT+0xa0>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008756:	b2db      	uxtb	r3, r3
 8008758:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d102      	bne.n	8008766 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008760:	7b7b      	ldrb	r3, [r7, #13]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d001      	beq.n	800876a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e0e2      	b.n	8008930 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d104      	bne.n	800877a <HAL_TIM_IC_Start_IT+0xc2>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008778:	e023      	b.n	80087c2 <HAL_TIM_IC_Start_IT+0x10a>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b04      	cmp	r3, #4
 800877e:	d104      	bne.n	800878a <HAL_TIM_IC_Start_IT+0xd2>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008788:	e01b      	b.n	80087c2 <HAL_TIM_IC_Start_IT+0x10a>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2b08      	cmp	r3, #8
 800878e:	d104      	bne.n	800879a <HAL_TIM_IC_Start_IT+0xe2>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008798:	e013      	b.n	80087c2 <HAL_TIM_IC_Start_IT+0x10a>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b0c      	cmp	r3, #12
 800879e:	d104      	bne.n	80087aa <HAL_TIM_IC_Start_IT+0xf2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087a8:	e00b      	b.n	80087c2 <HAL_TIM_IC_Start_IT+0x10a>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	d104      	bne.n	80087ba <HAL_TIM_IC_Start_IT+0x102>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087b8:	e003      	b.n	80087c2 <HAL_TIM_IC_Start_IT+0x10a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2202      	movs	r2, #2
 80087be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <HAL_TIM_IC_Start_IT+0x11a>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087d0:	e013      	b.n	80087fa <HAL_TIM_IC_Start_IT+0x142>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d104      	bne.n	80087e2 <HAL_TIM_IC_Start_IT+0x12a>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087e0:	e00b      	b.n	80087fa <HAL_TIM_IC_Start_IT+0x142>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d104      	bne.n	80087f2 <HAL_TIM_IC_Start_IT+0x13a>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087f0:	e003      	b.n	80087fa <HAL_TIM_IC_Start_IT+0x142>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2202      	movs	r2, #2
 80087f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	d841      	bhi.n	8008884 <HAL_TIM_IC_Start_IT+0x1cc>
 8008800:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <HAL_TIM_IC_Start_IT+0x150>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800883d 	.word	0x0800883d
 800880c:	08008885 	.word	0x08008885
 8008810:	08008885 	.word	0x08008885
 8008814:	08008885 	.word	0x08008885
 8008818:	0800884f 	.word	0x0800884f
 800881c:	08008885 	.word	0x08008885
 8008820:	08008885 	.word	0x08008885
 8008824:	08008885 	.word	0x08008885
 8008828:	08008861 	.word	0x08008861
 800882c:	08008885 	.word	0x08008885
 8008830:	08008885 	.word	0x08008885
 8008834:	08008885 	.word	0x08008885
 8008838:	08008873 	.word	0x08008873
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0202 	orr.w	r2, r2, #2
 800884a:	60da      	str	r2, [r3, #12]
      break;
 800884c:	e01d      	b.n	800888a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0204 	orr.w	r2, r2, #4
 800885c:	60da      	str	r2, [r3, #12]
      break;
 800885e:	e014      	b.n	800888a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0208 	orr.w	r2, r2, #8
 800886e:	60da      	str	r2, [r3, #12]
      break;
 8008870:	e00b      	b.n	800888a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f042 0210 	orr.w	r2, r2, #16
 8008880:	60da      	str	r2, [r3, #12]
      break;
 8008882:	e002      	b.n	800888a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	bf00      	nop
  }

  if (status == HAL_OK)
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d14e      	bne.n	800892e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2201      	movs	r2, #1
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	f001 fa83 	bl	8009da4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a25      	ldr	r2, [pc, #148]	@ (8008938 <HAL_TIM_IC_Start_IT+0x280>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d022      	beq.n	80088ee <HAL_TIM_IC_Start_IT+0x236>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088b0:	d01d      	beq.n	80088ee <HAL_TIM_IC_Start_IT+0x236>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a21      	ldr	r2, [pc, #132]	@ (800893c <HAL_TIM_IC_Start_IT+0x284>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <HAL_TIM_IC_Start_IT+0x236>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008940 <HAL_TIM_IC_Start_IT+0x288>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <HAL_TIM_IC_Start_IT+0x236>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008944 <HAL_TIM_IC_Start_IT+0x28c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00e      	beq.n	80088ee <HAL_TIM_IC_Start_IT+0x236>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008948 <HAL_TIM_IC_Start_IT+0x290>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_TIM_IC_Start_IT+0x236>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a1b      	ldr	r2, [pc, #108]	@ (800894c <HAL_TIM_IC_Start_IT+0x294>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_TIM_IC_Start_IT+0x236>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a19      	ldr	r2, [pc, #100]	@ (8008950 <HAL_TIM_IC_Start_IT+0x298>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d115      	bne.n	800891a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	4b17      	ldr	r3, [pc, #92]	@ (8008954 <HAL_TIM_IC_Start_IT+0x29c>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b06      	cmp	r3, #6
 80088fe:	d015      	beq.n	800892c <HAL_TIM_IC_Start_IT+0x274>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008906:	d011      	beq.n	800892c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0201 	orr.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008918:	e008      	b.n	800892c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f042 0201 	orr.w	r2, r2, #1
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e000      	b.n	800892e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800892c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	40012c00 	.word	0x40012c00
 800893c:	40000400 	.word	0x40000400
 8008940:	40000800 	.word	0x40000800
 8008944:	40000c00 	.word	0x40000c00
 8008948:	40013400 	.word	0x40013400
 800894c:	40014000 	.word	0x40014000
 8008950:	40015000 	.word	0x40015000
 8008954:	00010007 	.word	0x00010007

08008958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d020      	beq.n	80089bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d01b      	beq.n	80089bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f06f 0202 	mvn.w	r2, #2
 800898c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7f9 f8b4 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 80089a8:	e005      	b.n	80089b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fc38 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fc3f 	bl	8009234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d020      	beq.n	8008a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01b      	beq.n	8008a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f06f 0204 	mvn.w	r2, #4
 80089d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7f9 f88e 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 80089f4:	e005      	b.n	8008a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fc12 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc19 	bl	8009234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d020      	beq.n	8008a54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0208 	mvn.w	r2, #8
 8008a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7f9 f868 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 8008a40:	e005      	b.n	8008a4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fbec 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fbf3 	bl	8009234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d020      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01b      	beq.n	8008aa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f06f 0210 	mvn.w	r2, #16
 8008a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2208      	movs	r2, #8
 8008a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7f9 f842 	bl	8001b10 <HAL_TIM_IC_CaptureCallback>
 8008a8c:	e005      	b.n	8008a9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fbc6 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fbcd 	bl	8009234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00c      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0201 	mvn.w	r2, #1
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fba4 	bl	800920c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d104      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00c      	beq.n	8008af2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d007      	beq.n	8008af2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f001 fbd3 	bl	800a298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00c      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 fbcb 	bl	800a2ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00c      	beq.n	8008b3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d007      	beq.n	8008b3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fb87 	bl	8009248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f06f 0220 	mvn.w	r2, #32
 8008b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 fb93 	bl	800a284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00c      	beq.n	8008b82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d007      	beq.n	8008b82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 fb9f 	bl	800a2c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00c      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d007      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fb97 	bl	800a2d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00c      	beq.n	8008bca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 fb8f 	bl	800a2e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00c      	beq.n	8008bee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d007      	beq.n	8008bee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fb87 	bl	800a2fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bee:	bf00      	nop
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b086      	sub	sp, #24
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e088      	b.n	8008d26 <HAL_TIM_IC_ConfigChannel+0x130>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d11b      	bne.n	8008c5a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008c32:	f000 fef1 	bl	8009a18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699a      	ldr	r2, [r3, #24]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 020c 	bic.w	r2, r2, #12
 8008c44:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6999      	ldr	r1, [r3, #24]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	619a      	str	r2, [r3, #24]
 8008c58:	e060      	b.n	8008d1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d11c      	bne.n	8008c9a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008c70:	f000 ff75 	bl	8009b5e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	699a      	ldr	r2, [r3, #24]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008c82:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6999      	ldr	r1, [r3, #24]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	021a      	lsls	r2, r3, #8
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	619a      	str	r2, [r3, #24]
 8008c98:	e040      	b.n	8008d1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d11b      	bne.n	8008cd8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008cb0:	f000 ffc2 	bl	8009c38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	69da      	ldr	r2, [r3, #28]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 020c 	bic.w	r2, r2, #12
 8008cc2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69d9      	ldr	r1, [r3, #28]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	61da      	str	r2, [r3, #28]
 8008cd6:	e021      	b.n	8008d1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b0c      	cmp	r3, #12
 8008cdc:	d11c      	bne.n	8008d18 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008cee:	f000 ffdf 	bl	8009cb0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69da      	ldr	r2, [r3, #28]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008d00:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69d9      	ldr	r1, [r3, #28]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	021a      	lsls	r2, r3, #8
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	61da      	str	r2, [r3, #28]
 8008d16:	e001      	b.n	8008d1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e0ff      	b.n	8008f4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b14      	cmp	r3, #20
 8008d5a:	f200 80f0 	bhi.w	8008f3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008db9 	.word	0x08008db9
 8008d68:	08008f3f 	.word	0x08008f3f
 8008d6c:	08008f3f 	.word	0x08008f3f
 8008d70:	08008f3f 	.word	0x08008f3f
 8008d74:	08008df9 	.word	0x08008df9
 8008d78:	08008f3f 	.word	0x08008f3f
 8008d7c:	08008f3f 	.word	0x08008f3f
 8008d80:	08008f3f 	.word	0x08008f3f
 8008d84:	08008e3b 	.word	0x08008e3b
 8008d88:	08008f3f 	.word	0x08008f3f
 8008d8c:	08008f3f 	.word	0x08008f3f
 8008d90:	08008f3f 	.word	0x08008f3f
 8008d94:	08008e7b 	.word	0x08008e7b
 8008d98:	08008f3f 	.word	0x08008f3f
 8008d9c:	08008f3f 	.word	0x08008f3f
 8008da0:	08008f3f 	.word	0x08008f3f
 8008da4:	08008ebd 	.word	0x08008ebd
 8008da8:	08008f3f 	.word	0x08008f3f
 8008dac:	08008f3f 	.word	0x08008f3f
 8008db0:	08008f3f 	.word	0x08008f3f
 8008db4:	08008efd 	.word	0x08008efd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fb00 	bl	80093c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0208 	orr.w	r2, r2, #8
 8008dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0204 	bic.w	r2, r2, #4
 8008de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6999      	ldr	r1, [r3, #24]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	691a      	ldr	r2, [r3, #16]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	619a      	str	r2, [r3, #24]
      break;
 8008df6:	e0a5      	b.n	8008f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68b9      	ldr	r1, [r7, #8]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fb7a 	bl	80094f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	699a      	ldr	r2, [r3, #24]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	699a      	ldr	r2, [r3, #24]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6999      	ldr	r1, [r3, #24]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	021a      	lsls	r2, r3, #8
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	619a      	str	r2, [r3, #24]
      break;
 8008e38:	e084      	b.n	8008f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fbed 	bl	8009620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69da      	ldr	r2, [r3, #28]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0208 	orr.w	r2, r2, #8
 8008e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f022 0204 	bic.w	r2, r2, #4
 8008e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69d9      	ldr	r1, [r3, #28]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	61da      	str	r2, [r3, #28]
      break;
 8008e78:	e064      	b.n	8008f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fc5f 	bl	8009744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	69da      	ldr	r2, [r3, #28]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69da      	ldr	r2, [r3, #28]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69d9      	ldr	r1, [r3, #28]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	021a      	lsls	r2, r3, #8
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	61da      	str	r2, [r3, #28]
      break;
 8008eba:	e043      	b.n	8008f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fcd2 	bl	800986c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0208 	orr.w	r2, r2, #8
 8008ed6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0204 	bic.w	r2, r2, #4
 8008ee6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008efa:	e023      	b.n	8008f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fd1c 	bl	8009940 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f26:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	021a      	lsls	r2, r3, #8
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f3c:	e002      	b.n	8008f44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]
      break;
 8008f42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop

08008f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d101      	bne.n	8008f74 <HAL_TIM_ConfigClockSource+0x1c>
 8008f70:	2302      	movs	r3, #2
 8008f72:	e0f6      	b.n	8009162 <HAL_TIM_ConfigClockSource+0x20a>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a6f      	ldr	r2, [pc, #444]	@ (800916c <HAL_TIM_ConfigClockSource+0x214>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	f000 80c1 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8008fb4:	4a6d      	ldr	r2, [pc, #436]	@ (800916c <HAL_TIM_ConfigClockSource+0x214>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	f200 80c6 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fbc:	4a6c      	ldr	r2, [pc, #432]	@ (8009170 <HAL_TIM_ConfigClockSource+0x218>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	f000 80b9 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8008fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8009170 <HAL_TIM_ConfigClockSource+0x218>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	f200 80be 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fcc:	4a69      	ldr	r2, [pc, #420]	@ (8009174 <HAL_TIM_ConfigClockSource+0x21c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	f000 80b1 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8008fd4:	4a67      	ldr	r2, [pc, #412]	@ (8009174 <HAL_TIM_ConfigClockSource+0x21c>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	f200 80b6 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fdc:	4a66      	ldr	r2, [pc, #408]	@ (8009178 <HAL_TIM_ConfigClockSource+0x220>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	f000 80a9 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8008fe4:	4a64      	ldr	r2, [pc, #400]	@ (8009178 <HAL_TIM_ConfigClockSource+0x220>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	f200 80ae 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fec:	4a63      	ldr	r2, [pc, #396]	@ (800917c <HAL_TIM_ConfigClockSource+0x224>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	f000 80a1 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8008ff4:	4a61      	ldr	r2, [pc, #388]	@ (800917c <HAL_TIM_ConfigClockSource+0x224>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	f200 80a6 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ffc:	4a60      	ldr	r2, [pc, #384]	@ (8009180 <HAL_TIM_ConfigClockSource+0x228>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	f000 8099 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8009004:	4a5e      	ldr	r2, [pc, #376]	@ (8009180 <HAL_TIM_ConfigClockSource+0x228>)
 8009006:	4293      	cmp	r3, r2
 8009008:	f200 809e 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 800900c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009010:	f000 8091 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8009014:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009018:	f200 8096 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 800901c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009020:	f000 8089 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8009024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009028:	f200 808e 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009030:	d03e      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0x158>
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009036:	f200 8087 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 800903a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800903e:	f000 8086 	beq.w	800914e <HAL_TIM_ConfigClockSource+0x1f6>
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009046:	d87f      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8009048:	2b70      	cmp	r3, #112	@ 0x70
 800904a:	d01a      	beq.n	8009082 <HAL_TIM_ConfigClockSource+0x12a>
 800904c:	2b70      	cmp	r3, #112	@ 0x70
 800904e:	d87b      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8009050:	2b60      	cmp	r3, #96	@ 0x60
 8009052:	d050      	beq.n	80090f6 <HAL_TIM_ConfigClockSource+0x19e>
 8009054:	2b60      	cmp	r3, #96	@ 0x60
 8009056:	d877      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8009058:	2b50      	cmp	r3, #80	@ 0x50
 800905a:	d03c      	beq.n	80090d6 <HAL_TIM_ConfigClockSource+0x17e>
 800905c:	2b50      	cmp	r3, #80	@ 0x50
 800905e:	d873      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8009060:	2b40      	cmp	r3, #64	@ 0x40
 8009062:	d058      	beq.n	8009116 <HAL_TIM_ConfigClockSource+0x1be>
 8009064:	2b40      	cmp	r3, #64	@ 0x40
 8009066:	d86f      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8009068:	2b30      	cmp	r3, #48	@ 0x30
 800906a:	d064      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 800906c:	2b30      	cmp	r3, #48	@ 0x30
 800906e:	d86b      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8009070:	2b20      	cmp	r3, #32
 8009072:	d060      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8009074:	2b20      	cmp	r3, #32
 8009076:	d867      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05c      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 800907c:	2b10      	cmp	r3, #16
 800907e:	d05a      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x1de>
 8009080:	e062      	b.n	8009148 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009092:	f000 fe67 	bl	8009d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	609a      	str	r2, [r3, #8]
      break;
 80090ae:	e04f      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090c0:	f000 fe50 	bl	8009d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090d2:	609a      	str	r2, [r3, #8]
      break;
 80090d4:	e03c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e2:	461a      	mov	r2, r3
 80090e4:	f000 fd0c 	bl	8009b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2150      	movs	r1, #80	@ 0x50
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fe1b 	bl	8009d2a <TIM_ITRx_SetConfig>
      break;
 80090f4:	e02c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009102:	461a      	mov	r2, r3
 8009104:	f000 fd68 	bl	8009bd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2160      	movs	r1, #96	@ 0x60
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fe0b 	bl	8009d2a <TIM_ITRx_SetConfig>
      break;
 8009114:	e01c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009122:	461a      	mov	r2, r3
 8009124:	f000 fcec 	bl	8009b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2140      	movs	r1, #64	@ 0x40
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fdfb 	bl	8009d2a <TIM_ITRx_SetConfig>
      break;
 8009134:	e00c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f000 fdf2 	bl	8009d2a <TIM_ITRx_SetConfig>
      break;
 8009146:	e003      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
      break;
 800914c:	e000      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800914e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	00100070 	.word	0x00100070
 8009170:	00100060 	.word	0x00100060
 8009174:	00100050 	.word	0x00100050
 8009178:	00100040 	.word	0x00100040
 800917c:	00100030 	.word	0x00100030
 8009180:	00100020 	.word	0x00100020

08009184 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b0c      	cmp	r3, #12
 8009196:	d831      	bhi.n	80091fc <HAL_TIM_ReadCapturedValue+0x78>
 8009198:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091d5 	.word	0x080091d5
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	080091fd 	.word	0x080091fd
 80091ac:	080091fd 	.word	0x080091fd
 80091b0:	080091df 	.word	0x080091df
 80091b4:	080091fd 	.word	0x080091fd
 80091b8:	080091fd 	.word	0x080091fd
 80091bc:	080091fd 	.word	0x080091fd
 80091c0:	080091e9 	.word	0x080091e9
 80091c4:	080091fd 	.word	0x080091fd
 80091c8:	080091fd 	.word	0x080091fd
 80091cc:	080091fd 	.word	0x080091fd
 80091d0:	080091f3 	.word	0x080091f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091da:	60fb      	str	r3, [r7, #12]

      break;
 80091dc:	e00f      	b.n	80091fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e4:	60fb      	str	r3, [r7, #12]

      break;
 80091e6:	e00a      	b.n	80091fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ee:	60fb      	str	r3, [r7, #12]

      break;
 80091f0:	e005      	b.n	80091fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f8:	60fb      	str	r3, [r7, #12]

      break;
 80091fa:	e000      	b.n	80091fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80091fc:	bf00      	nop
  }

  return tmpreg;
 80091fe:	68fb      	ldr	r3, [r7, #12]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a4c      	ldr	r2, [pc, #304]	@ (80093a0 <TIM_Base_SetConfig+0x144>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d017      	beq.n	80092a4 <TIM_Base_SetConfig+0x48>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800927a:	d013      	beq.n	80092a4 <TIM_Base_SetConfig+0x48>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a49      	ldr	r2, [pc, #292]	@ (80093a4 <TIM_Base_SetConfig+0x148>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00f      	beq.n	80092a4 <TIM_Base_SetConfig+0x48>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a48      	ldr	r2, [pc, #288]	@ (80093a8 <TIM_Base_SetConfig+0x14c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d00b      	beq.n	80092a4 <TIM_Base_SetConfig+0x48>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a47      	ldr	r2, [pc, #284]	@ (80093ac <TIM_Base_SetConfig+0x150>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d007      	beq.n	80092a4 <TIM_Base_SetConfig+0x48>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a46      	ldr	r2, [pc, #280]	@ (80093b0 <TIM_Base_SetConfig+0x154>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d003      	beq.n	80092a4 <TIM_Base_SetConfig+0x48>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a45      	ldr	r2, [pc, #276]	@ (80093b4 <TIM_Base_SetConfig+0x158>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d108      	bne.n	80092b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a39      	ldr	r2, [pc, #228]	@ (80093a0 <TIM_Base_SetConfig+0x144>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d023      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c4:	d01f      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a36      	ldr	r2, [pc, #216]	@ (80093a4 <TIM_Base_SetConfig+0x148>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d01b      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a35      	ldr	r2, [pc, #212]	@ (80093a8 <TIM_Base_SetConfig+0x14c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d017      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a34      	ldr	r2, [pc, #208]	@ (80093ac <TIM_Base_SetConfig+0x150>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d013      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a33      	ldr	r2, [pc, #204]	@ (80093b0 <TIM_Base_SetConfig+0x154>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00f      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a33      	ldr	r2, [pc, #204]	@ (80093b8 <TIM_Base_SetConfig+0x15c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d00b      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a32      	ldr	r2, [pc, #200]	@ (80093bc <TIM_Base_SetConfig+0x160>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d007      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a31      	ldr	r2, [pc, #196]	@ (80093c0 <TIM_Base_SetConfig+0x164>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d003      	beq.n	8009306 <TIM_Base_SetConfig+0xaa>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a2c      	ldr	r2, [pc, #176]	@ (80093b4 <TIM_Base_SetConfig+0x158>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d108      	bne.n	8009318 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800930c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	4313      	orrs	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a18      	ldr	r2, [pc, #96]	@ (80093a0 <TIM_Base_SetConfig+0x144>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d013      	beq.n	800936c <TIM_Base_SetConfig+0x110>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a1a      	ldr	r2, [pc, #104]	@ (80093b0 <TIM_Base_SetConfig+0x154>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d00f      	beq.n	800936c <TIM_Base_SetConfig+0x110>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a1a      	ldr	r2, [pc, #104]	@ (80093b8 <TIM_Base_SetConfig+0x15c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00b      	beq.n	800936c <TIM_Base_SetConfig+0x110>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a19      	ldr	r2, [pc, #100]	@ (80093bc <TIM_Base_SetConfig+0x160>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d007      	beq.n	800936c <TIM_Base_SetConfig+0x110>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a18      	ldr	r2, [pc, #96]	@ (80093c0 <TIM_Base_SetConfig+0x164>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d003      	beq.n	800936c <TIM_Base_SetConfig+0x110>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a13      	ldr	r2, [pc, #76]	@ (80093b4 <TIM_Base_SetConfig+0x158>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d103      	bne.n	8009374 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	691a      	ldr	r2, [r3, #16]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b01      	cmp	r3, #1
 8009384:	d105      	bne.n	8009392 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f023 0201 	bic.w	r2, r3, #1
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	611a      	str	r2, [r3, #16]
  }
}
 8009392:	bf00      	nop
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	40012c00 	.word	0x40012c00
 80093a4:	40000400 	.word	0x40000400
 80093a8:	40000800 	.word	0x40000800
 80093ac:	40000c00 	.word	0x40000c00
 80093b0:	40013400 	.word	0x40013400
 80093b4:	40015000 	.word	0x40015000
 80093b8:	40014000 	.word	0x40014000
 80093bc:	40014400 	.word	0x40014400
 80093c0:	40014800 	.word	0x40014800

080093c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	f023 0201 	bic.w	r2, r3, #1
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4313      	orrs	r3, r2
 8009408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f023 0302 	bic.w	r3, r3, #2
 8009410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	4313      	orrs	r3, r2
 800941a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a30      	ldr	r2, [pc, #192]	@ (80094e0 <TIM_OC1_SetConfig+0x11c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d013      	beq.n	800944c <TIM_OC1_SetConfig+0x88>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a2f      	ldr	r2, [pc, #188]	@ (80094e4 <TIM_OC1_SetConfig+0x120>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d00f      	beq.n	800944c <TIM_OC1_SetConfig+0x88>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a2e      	ldr	r2, [pc, #184]	@ (80094e8 <TIM_OC1_SetConfig+0x124>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d00b      	beq.n	800944c <TIM_OC1_SetConfig+0x88>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a2d      	ldr	r2, [pc, #180]	@ (80094ec <TIM_OC1_SetConfig+0x128>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d007      	beq.n	800944c <TIM_OC1_SetConfig+0x88>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a2c      	ldr	r2, [pc, #176]	@ (80094f0 <TIM_OC1_SetConfig+0x12c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_OC1_SetConfig+0x88>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a2b      	ldr	r2, [pc, #172]	@ (80094f4 <TIM_OC1_SetConfig+0x130>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d10c      	bne.n	8009466 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f023 0308 	bic.w	r3, r3, #8
 8009452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f023 0304 	bic.w	r3, r3, #4
 8009464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a1d      	ldr	r2, [pc, #116]	@ (80094e0 <TIM_OC1_SetConfig+0x11c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d013      	beq.n	8009496 <TIM_OC1_SetConfig+0xd2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a1c      	ldr	r2, [pc, #112]	@ (80094e4 <TIM_OC1_SetConfig+0x120>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00f      	beq.n	8009496 <TIM_OC1_SetConfig+0xd2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a1b      	ldr	r2, [pc, #108]	@ (80094e8 <TIM_OC1_SetConfig+0x124>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00b      	beq.n	8009496 <TIM_OC1_SetConfig+0xd2>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a1a      	ldr	r2, [pc, #104]	@ (80094ec <TIM_OC1_SetConfig+0x128>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d007      	beq.n	8009496 <TIM_OC1_SetConfig+0xd2>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a19      	ldr	r2, [pc, #100]	@ (80094f0 <TIM_OC1_SetConfig+0x12c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d003      	beq.n	8009496 <TIM_OC1_SetConfig+0xd2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a18      	ldr	r2, [pc, #96]	@ (80094f4 <TIM_OC1_SetConfig+0x130>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d111      	bne.n	80094ba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800949c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	621a      	str	r2, [r3, #32]
}
 80094d4:	bf00      	nop
 80094d6:	371c      	adds	r7, #28
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	40012c00 	.word	0x40012c00
 80094e4:	40013400 	.word	0x40013400
 80094e8:	40014000 	.word	0x40014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	40014800 	.word	0x40014800
 80094f4:	40015000 	.word	0x40015000

080094f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	f023 0210 	bic.w	r2, r3, #16
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800952a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	021b      	lsls	r3, r3, #8
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 0320 	bic.w	r3, r3, #32
 8009546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a2c      	ldr	r2, [pc, #176]	@ (8009608 <TIM_OC2_SetConfig+0x110>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d007      	beq.n	800956c <TIM_OC2_SetConfig+0x74>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a2b      	ldr	r2, [pc, #172]	@ (800960c <TIM_OC2_SetConfig+0x114>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d003      	beq.n	800956c <TIM_OC2_SetConfig+0x74>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a2a      	ldr	r2, [pc, #168]	@ (8009610 <TIM_OC2_SetConfig+0x118>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d10d      	bne.n	8009588 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	011b      	lsls	r3, r3, #4
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	4313      	orrs	r3, r2
 800957e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009586:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a1f      	ldr	r2, [pc, #124]	@ (8009608 <TIM_OC2_SetConfig+0x110>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d013      	beq.n	80095b8 <TIM_OC2_SetConfig+0xc0>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a1e      	ldr	r2, [pc, #120]	@ (800960c <TIM_OC2_SetConfig+0x114>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00f      	beq.n	80095b8 <TIM_OC2_SetConfig+0xc0>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a1e      	ldr	r2, [pc, #120]	@ (8009614 <TIM_OC2_SetConfig+0x11c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00b      	beq.n	80095b8 <TIM_OC2_SetConfig+0xc0>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a1d      	ldr	r2, [pc, #116]	@ (8009618 <TIM_OC2_SetConfig+0x120>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d007      	beq.n	80095b8 <TIM_OC2_SetConfig+0xc0>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1c      	ldr	r2, [pc, #112]	@ (800961c <TIM_OC2_SetConfig+0x124>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <TIM_OC2_SetConfig+0xc0>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a17      	ldr	r2, [pc, #92]	@ (8009610 <TIM_OC2_SetConfig+0x118>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d113      	bne.n	80095e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	621a      	str	r2, [r3, #32]
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	40012c00 	.word	0x40012c00
 800960c:	40013400 	.word	0x40013400
 8009610:	40015000 	.word	0x40015000
 8009614:	40014000 	.word	0x40014000
 8009618:	40014400 	.word	0x40014400
 800961c:	40014800 	.word	0x40014800

08009620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800964e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800966c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a2b      	ldr	r2, [pc, #172]	@ (800972c <TIM_OC3_SetConfig+0x10c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d007      	beq.n	8009692 <TIM_OC3_SetConfig+0x72>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a2a      	ldr	r2, [pc, #168]	@ (8009730 <TIM_OC3_SetConfig+0x110>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d003      	beq.n	8009692 <TIM_OC3_SetConfig+0x72>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a29      	ldr	r2, [pc, #164]	@ (8009734 <TIM_OC3_SetConfig+0x114>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d10d      	bne.n	80096ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	021b      	lsls	r3, r3, #8
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a1e      	ldr	r2, [pc, #120]	@ (800972c <TIM_OC3_SetConfig+0x10c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <TIM_OC3_SetConfig+0xbe>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009730 <TIM_OC3_SetConfig+0x110>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00f      	beq.n	80096de <TIM_OC3_SetConfig+0xbe>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009738 <TIM_OC3_SetConfig+0x118>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d00b      	beq.n	80096de <TIM_OC3_SetConfig+0xbe>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a1c      	ldr	r2, [pc, #112]	@ (800973c <TIM_OC3_SetConfig+0x11c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d007      	beq.n	80096de <TIM_OC3_SetConfig+0xbe>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009740 <TIM_OC3_SetConfig+0x120>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d003      	beq.n	80096de <TIM_OC3_SetConfig+0xbe>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a16      	ldr	r2, [pc, #88]	@ (8009734 <TIM_OC3_SetConfig+0x114>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d113      	bne.n	8009706 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	011b      	lsls	r3, r3, #4
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4313      	orrs	r3, r2
 8009704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	621a      	str	r2, [r3, #32]
}
 8009720:	bf00      	nop
 8009722:	371c      	adds	r7, #28
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	40012c00 	.word	0x40012c00
 8009730:	40013400 	.word	0x40013400
 8009734:	40015000 	.word	0x40015000
 8009738:	40014000 	.word	0x40014000
 800973c:	40014400 	.word	0x40014400
 8009740:	40014800 	.word	0x40014800

08009744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800977e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	4313      	orrs	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	031b      	lsls	r3, r3, #12
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a2c      	ldr	r2, [pc, #176]	@ (8009854 <TIM_OC4_SetConfig+0x110>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d007      	beq.n	80097b8 <TIM_OC4_SetConfig+0x74>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a2b      	ldr	r2, [pc, #172]	@ (8009858 <TIM_OC4_SetConfig+0x114>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d003      	beq.n	80097b8 <TIM_OC4_SetConfig+0x74>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a2a      	ldr	r2, [pc, #168]	@ (800985c <TIM_OC4_SetConfig+0x118>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d10d      	bne.n	80097d4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	031b      	lsls	r3, r3, #12
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009854 <TIM_OC4_SetConfig+0x110>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d013      	beq.n	8009804 <TIM_OC4_SetConfig+0xc0>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a1e      	ldr	r2, [pc, #120]	@ (8009858 <TIM_OC4_SetConfig+0x114>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d00f      	beq.n	8009804 <TIM_OC4_SetConfig+0xc0>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a1e      	ldr	r2, [pc, #120]	@ (8009860 <TIM_OC4_SetConfig+0x11c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d00b      	beq.n	8009804 <TIM_OC4_SetConfig+0xc0>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a1d      	ldr	r2, [pc, #116]	@ (8009864 <TIM_OC4_SetConfig+0x120>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d007      	beq.n	8009804 <TIM_OC4_SetConfig+0xc0>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009868 <TIM_OC4_SetConfig+0x124>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d003      	beq.n	8009804 <TIM_OC4_SetConfig+0xc0>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a17      	ldr	r2, [pc, #92]	@ (800985c <TIM_OC4_SetConfig+0x118>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d113      	bne.n	800982c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800980a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009812:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	019b      	lsls	r3, r3, #6
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	4313      	orrs	r3, r2
 800981e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	019b      	lsls	r3, r3, #6
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	4313      	orrs	r3, r2
 800982a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	621a      	str	r2, [r3, #32]
}
 8009846:	bf00      	nop
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	40012c00 	.word	0x40012c00
 8009858:	40013400 	.word	0x40013400
 800985c:	40015000 	.word	0x40015000
 8009860:	40014000 	.word	0x40014000
 8009864:	40014400 	.word	0x40014400
 8009868:	40014800 	.word	0x40014800

0800986c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800989a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800989e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80098b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a19      	ldr	r2, [pc, #100]	@ (8009928 <TIM_OC5_SetConfig+0xbc>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d013      	beq.n	80098ee <TIM_OC5_SetConfig+0x82>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a18      	ldr	r2, [pc, #96]	@ (800992c <TIM_OC5_SetConfig+0xc0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00f      	beq.n	80098ee <TIM_OC5_SetConfig+0x82>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a17      	ldr	r2, [pc, #92]	@ (8009930 <TIM_OC5_SetConfig+0xc4>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00b      	beq.n	80098ee <TIM_OC5_SetConfig+0x82>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a16      	ldr	r2, [pc, #88]	@ (8009934 <TIM_OC5_SetConfig+0xc8>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d007      	beq.n	80098ee <TIM_OC5_SetConfig+0x82>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a15      	ldr	r2, [pc, #84]	@ (8009938 <TIM_OC5_SetConfig+0xcc>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d003      	beq.n	80098ee <TIM_OC5_SetConfig+0x82>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a14      	ldr	r2, [pc, #80]	@ (800993c <TIM_OC5_SetConfig+0xd0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d109      	bne.n	8009902 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	4313      	orrs	r3, r2
 8009900:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	621a      	str	r2, [r3, #32]
}
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	40012c00 	.word	0x40012c00
 800992c:	40013400 	.word	0x40013400
 8009930:	40014000 	.word	0x40014000
 8009934:	40014400 	.word	0x40014400
 8009938:	40014800 	.word	0x40014800
 800993c:	40015000 	.word	0x40015000

08009940 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800996e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4313      	orrs	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	051b      	lsls	r3, r3, #20
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a1a      	ldr	r2, [pc, #104]	@ (8009a00 <TIM_OC6_SetConfig+0xc0>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d013      	beq.n	80099c4 <TIM_OC6_SetConfig+0x84>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a19      	ldr	r2, [pc, #100]	@ (8009a04 <TIM_OC6_SetConfig+0xc4>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00f      	beq.n	80099c4 <TIM_OC6_SetConfig+0x84>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a18      	ldr	r2, [pc, #96]	@ (8009a08 <TIM_OC6_SetConfig+0xc8>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00b      	beq.n	80099c4 <TIM_OC6_SetConfig+0x84>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a17      	ldr	r2, [pc, #92]	@ (8009a0c <TIM_OC6_SetConfig+0xcc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d007      	beq.n	80099c4 <TIM_OC6_SetConfig+0x84>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a16      	ldr	r2, [pc, #88]	@ (8009a10 <TIM_OC6_SetConfig+0xd0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d003      	beq.n	80099c4 <TIM_OC6_SetConfig+0x84>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a15      	ldr	r2, [pc, #84]	@ (8009a14 <TIM_OC6_SetConfig+0xd4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d109      	bne.n	80099d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	029b      	lsls	r3, r3, #10
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	621a      	str	r2, [r3, #32]
}
 80099f2:	bf00      	nop
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	40012c00 	.word	0x40012c00
 8009a04:	40013400 	.word	0x40013400
 8009a08:	40014000 	.word	0x40014000
 8009a0c:	40014400 	.word	0x40014400
 8009a10:	40014800 	.word	0x40014800
 8009a14:	40015000 	.word	0x40015000

08009a18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	f023 0201 	bic.w	r2, r3, #1
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4a28      	ldr	r2, [pc, #160]	@ (8009ae4 <TIM_TI1_SetConfig+0xcc>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d01b      	beq.n	8009a7e <TIM_TI1_SetConfig+0x66>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4c:	d017      	beq.n	8009a7e <TIM_TI1_SetConfig+0x66>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4a25      	ldr	r2, [pc, #148]	@ (8009ae8 <TIM_TI1_SetConfig+0xd0>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d013      	beq.n	8009a7e <TIM_TI1_SetConfig+0x66>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4a24      	ldr	r2, [pc, #144]	@ (8009aec <TIM_TI1_SetConfig+0xd4>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d00f      	beq.n	8009a7e <TIM_TI1_SetConfig+0x66>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4a23      	ldr	r2, [pc, #140]	@ (8009af0 <TIM_TI1_SetConfig+0xd8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d00b      	beq.n	8009a7e <TIM_TI1_SetConfig+0x66>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4a22      	ldr	r2, [pc, #136]	@ (8009af4 <TIM_TI1_SetConfig+0xdc>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d007      	beq.n	8009a7e <TIM_TI1_SetConfig+0x66>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4a21      	ldr	r2, [pc, #132]	@ (8009af8 <TIM_TI1_SetConfig+0xe0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d003      	beq.n	8009a7e <TIM_TI1_SetConfig+0x66>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4a20      	ldr	r2, [pc, #128]	@ (8009afc <TIM_TI1_SetConfig+0xe4>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d101      	bne.n	8009a82 <TIM_TI1_SetConfig+0x6a>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e000      	b.n	8009a84 <TIM_TI1_SetConfig+0x6c>
 8009a82:	2300      	movs	r3, #0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f023 0303 	bic.w	r3, r3, #3
 8009a8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e003      	b.n	8009aa2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f043 0301 	orr.w	r3, r3, #1
 8009aa0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	011b      	lsls	r3, r3, #4
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f023 030a 	bic.w	r3, r3, #10
 8009abc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f003 030a 	and.w	r3, r3, #10
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	621a      	str	r2, [r3, #32]
}
 8009ad6:	bf00      	nop
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40012c00 	.word	0x40012c00
 8009ae8:	40000400 	.word	0x40000400
 8009aec:	40000800 	.word	0x40000800
 8009af0:	40000c00 	.word	0x40000c00
 8009af4:	40013400 	.word	0x40013400
 8009af8:	40014000 	.word	0x40014000
 8009afc:	40015000 	.word	0x40015000

08009b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	f023 0201 	bic.w	r2, r3, #1
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	f023 030a 	bic.w	r3, r3, #10
 8009b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	621a      	str	r2, [r3, #32]
}
 8009b52:	bf00      	nop
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b087      	sub	sp, #28
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	607a      	str	r2, [r7, #4]
 8009b6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	f023 0210 	bic.w	r2, r3, #16
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	031b      	lsls	r3, r3, #12
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	621a      	str	r2, [r3, #32]
}
 8009bcc:	bf00      	nop
 8009bce:	371c      	adds	r7, #28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	f023 0210 	bic.w	r2, r3, #16
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	031b      	lsls	r3, r3, #12
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	011b      	lsls	r3, r3, #4
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	621a      	str	r2, [r3, #32]
}
 8009c2c:	bf00      	nop
 8009c2e:	371c      	adds	r7, #28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009c88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	621a      	str	r2, [r3, #32]
}
 8009ca4:	bf00      	nop
 8009ca6:	371c      	adds	r7, #28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6a1b      	ldr	r3, [r3, #32]
 8009cc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	021b      	lsls	r3, r3, #8
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009cee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	031b      	lsls	r3, r3, #12
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009d02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	031b      	lsls	r3, r3, #12
 8009d08:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	621a      	str	r2, [r3, #32]
}
 8009d1e:	bf00      	nop
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	f043 0307 	orr.w	r3, r3, #7
 8009d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	609a      	str	r2, [r3, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	021a      	lsls	r2, r3, #8
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	431a      	orrs	r2, r3
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	609a      	str	r2, [r3, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	371c      	adds	r7, #28
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f003 031f 	and.w	r3, r3, #31
 8009db6:	2201      	movs	r2, #1
 8009db8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a1a      	ldr	r2, [r3, #32]
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	43db      	mvns	r3, r3
 8009dc6:	401a      	ands	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a1a      	ldr	r2, [r3, #32]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	6879      	ldr	r1, [r7, #4]
 8009dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	621a      	str	r2, [r3, #32]
}
 8009de2:	bf00      	nop
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d109      	bne.n	8009e14 <HAL_TIMEx_PWMN_Start+0x24>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	bf14      	ite	ne
 8009e0c:	2301      	movne	r3, #1
 8009e0e:	2300      	moveq	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	e022      	b.n	8009e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d109      	bne.n	8009e2e <HAL_TIMEx_PWMN_Start+0x3e>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	bf14      	ite	ne
 8009e26:	2301      	movne	r3, #1
 8009e28:	2300      	moveq	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	e015      	b.n	8009e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d109      	bne.n	8009e48 <HAL_TIMEx_PWMN_Start+0x58>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	bf14      	ite	ne
 8009e40:	2301      	movne	r3, #1
 8009e42:	2300      	moveq	r3, #0
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	e008      	b.n	8009e5a <HAL_TIMEx_PWMN_Start+0x6a>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	bf14      	ite	ne
 8009e54:	2301      	movne	r3, #1
 8009e56:	2300      	moveq	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e073      	b.n	8009f4a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d104      	bne.n	8009e72 <HAL_TIMEx_PWMN_Start+0x82>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e70:	e013      	b.n	8009e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	d104      	bne.n	8009e82 <HAL_TIMEx_PWMN_Start+0x92>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e80:	e00b      	b.n	8009e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b08      	cmp	r3, #8
 8009e86:	d104      	bne.n	8009e92 <HAL_TIMEx_PWMN_Start+0xa2>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e90:	e003      	b.n	8009e9a <HAL_TIMEx_PWMN_Start+0xaa>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2202      	movs	r2, #2
 8009e96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2204      	movs	r2, #4
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 fa34 	bl	800a310 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009eb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a25      	ldr	r2, [pc, #148]	@ (8009f54 <HAL_TIMEx_PWMN_Start+0x164>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d022      	beq.n	8009f08 <HAL_TIMEx_PWMN_Start+0x118>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eca:	d01d      	beq.n	8009f08 <HAL_TIMEx_PWMN_Start+0x118>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a21      	ldr	r2, [pc, #132]	@ (8009f58 <HAL_TIMEx_PWMN_Start+0x168>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d018      	beq.n	8009f08 <HAL_TIMEx_PWMN_Start+0x118>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a20      	ldr	r2, [pc, #128]	@ (8009f5c <HAL_TIMEx_PWMN_Start+0x16c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d013      	beq.n	8009f08 <HAL_TIMEx_PWMN_Start+0x118>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8009f60 <HAL_TIMEx_PWMN_Start+0x170>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d00e      	beq.n	8009f08 <HAL_TIMEx_PWMN_Start+0x118>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a1d      	ldr	r2, [pc, #116]	@ (8009f64 <HAL_TIMEx_PWMN_Start+0x174>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d009      	beq.n	8009f08 <HAL_TIMEx_PWMN_Start+0x118>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f68 <HAL_TIMEx_PWMN_Start+0x178>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d004      	beq.n	8009f08 <HAL_TIMEx_PWMN_Start+0x118>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a1a      	ldr	r2, [pc, #104]	@ (8009f6c <HAL_TIMEx_PWMN_Start+0x17c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d115      	bne.n	8009f34 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	4b18      	ldr	r3, [pc, #96]	@ (8009f70 <HAL_TIMEx_PWMN_Start+0x180>)
 8009f10:	4013      	ands	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b06      	cmp	r3, #6
 8009f18:	d015      	beq.n	8009f46 <HAL_TIMEx_PWMN_Start+0x156>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f20:	d011      	beq.n	8009f46 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0201 	orr.w	r2, r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f32:	e008      	b.n	8009f46 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0201 	orr.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	e000      	b.n	8009f48 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	40012c00 	.word	0x40012c00
 8009f58:	40000400 	.word	0x40000400
 8009f5c:	40000800 	.word	0x40000800
 8009f60:	40000c00 	.word	0x40000c00
 8009f64:	40013400 	.word	0x40013400
 8009f68:	40014000 	.word	0x40014000
 8009f6c:	40015000 	.word	0x40015000
 8009f70:	00010007 	.word	0x00010007

08009f74 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 f9c2 	bl	800a310 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6a1a      	ldr	r2, [r3, #32]
 8009f92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009f96:	4013      	ands	r3, r2
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10f      	bne.n	8009fbc <HAL_TIMEx_PWMN_Stop+0x48>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6a1a      	ldr	r2, [r3, #32]
 8009fa2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d107      	bne.n	8009fbc <HAL_TIMEx_PWMN_Stop+0x48>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009fba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6a1a      	ldr	r2, [r3, #32]
 8009fc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10f      	bne.n	8009fec <HAL_TIMEx_PWMN_Stop+0x78>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6a1a      	ldr	r2, [r3, #32]
 8009fd2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d107      	bne.n	8009fec <HAL_TIMEx_PWMN_Stop+0x78>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0201 	bic.w	r2, r2, #1
 8009fea:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d104      	bne.n	8009ffc <HAL_TIMEx_PWMN_Stop+0x88>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ffa:	e013      	b.n	800a024 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d104      	bne.n	800a00c <HAL_TIMEx_PWMN_Stop+0x98>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a00a:	e00b      	b.n	800a024 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b08      	cmp	r3, #8
 800a010:	d104      	bne.n	800a01c <HAL_TIMEx_PWMN_Stop+0xa8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a01a:	e003      	b.n	800a024 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a040:	2b01      	cmp	r3, #1
 800a042:	d101      	bne.n	800a048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a044:	2302      	movs	r3, #2
 800a046:	e074      	b.n	800a132 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a34      	ldr	r2, [pc, #208]	@ (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d009      	beq.n	800a086 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a33      	ldr	r2, [pc, #204]	@ (800a144 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d004      	beq.n	800a086 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a31      	ldr	r2, [pc, #196]	@ (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d108      	bne.n	800a098 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a08c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a09e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a21      	ldr	r2, [pc, #132]	@ (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d022      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c8:	d01d      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a14c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d018      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a150 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d013      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a154 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d00e      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a15      	ldr	r2, [pc, #84]	@ (800a144 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d009      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a18      	ldr	r2, [pc, #96]	@ (800a158 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d004      	beq.n	800a106 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a11      	ldr	r2, [pc, #68]	@ (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d10c      	bne.n	800a120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a10c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	4313      	orrs	r3, r2
 800a116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	40012c00 	.word	0x40012c00
 800a144:	40013400 	.word	0x40013400
 800a148:	40015000 	.word	0x40015000
 800a14c:	40000400 	.word	0x40000400
 800a150:	40000800 	.word	0x40000800
 800a154:	40000c00 	.word	0x40000c00
 800a158:	40014000 	.word	0x40014000

0800a15c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a166:	2300      	movs	r3, #0
 800a168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a174:	2302      	movs	r3, #2
 800a176:	e078      	b.n	800a26a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	4313      	orrs	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	041b      	lsls	r3, r3, #16
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a1c      	ldr	r2, [pc, #112]	@ (800a278 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d009      	beq.n	800a21e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a1b      	ldr	r2, [pc, #108]	@ (800a27c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d004      	beq.n	800a21e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a19      	ldr	r2, [pc, #100]	@ (800a280 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d11c      	bne.n	800a258 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a228:	051b      	lsls	r3, r3, #20
 800a22a:	4313      	orrs	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	40012c00 	.word	0x40012c00
 800a27c:	40013400 	.word	0x40013400
 800a280:	40015000 	.word	0x40015000

0800a284 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	2204      	movs	r2, #4
 800a324:	fa02 f303 	lsl.w	r3, r2, r3
 800a328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6a1a      	ldr	r2, [r3, #32]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	43db      	mvns	r3, r3
 800a332:	401a      	ands	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6a1a      	ldr	r2, [r3, #32]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f003 030f 	and.w	r3, r3, #15
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	fa01 f303 	lsl.w	r3, r1, r3
 800a348:	431a      	orrs	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	621a      	str	r2, [r3, #32]
}
 800a34e:	bf00      	nop
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e042      	b.n	800a3f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7f9 fae0 	bl	8003944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2224      	movs	r2, #36	@ 0x24
 800a388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0201 	bic.w	r2, r2, #1
 800a39a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 ff1d 	bl	800b1e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fc1e 	bl	800abec <UART_SetConfig>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d101      	bne.n	800a3ba <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e01b      	b.n	800a3f2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a3c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a3d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 0201 	orr.w	r2, r2, #1
 800a3e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 ff9c 	bl	800b328 <UART_CheckIdleState>
 800a3f0:	4603      	mov	r3, r0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b08a      	sub	sp, #40	@ 0x28
 800a3fe:	af02      	add	r7, sp, #8
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a410:	2b20      	cmp	r3, #32
 800a412:	d17b      	bne.n	800a50c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <HAL_UART_Transmit+0x26>
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e074      	b.n	800a50e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2221      	movs	r2, #33	@ 0x21
 800a430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a434:	f7f9 fba4 	bl	8003b80 <HAL_GetTick>
 800a438:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	88fa      	ldrh	r2, [r7, #6]
 800a43e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	88fa      	ldrh	r2, [r7, #6]
 800a446:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a452:	d108      	bne.n	800a466 <HAL_UART_Transmit+0x6c>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	61bb      	str	r3, [r7, #24]
 800a464:	e003      	b.n	800a46e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a46e:	e030      	b.n	800a4d2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2200      	movs	r2, #0
 800a478:	2180      	movs	r1, #128	@ 0x80
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 fffe 	bl	800b47c <UART_WaitOnFlagUntilTimeout>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2220      	movs	r2, #32
 800a48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e03d      	b.n	800a50e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10b      	bne.n	800a4b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	461a      	mov	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	3302      	adds	r3, #2
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	e007      	b.n	800a4c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	781a      	ldrb	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1c8      	bne.n	800a470 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2140      	movs	r1, #64	@ 0x40
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f000 ffc7 	bl	800b47c <UART_WaitOnFlagUntilTimeout>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e006      	b.n	800a50e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	e000      	b.n	800a50e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a50c:	2302      	movs	r3, #2
  }
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b0ba      	sub	sp, #232	@ 0xe8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a53e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a542:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a546:	4013      	ands	r3, r2
 800a548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a54c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a550:	2b00      	cmp	r3, #0
 800a552:	d11b      	bne.n	800a58c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a558:	f003 0320 	and.w	r3, r3, #32
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d015      	beq.n	800a58c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a564:	f003 0320 	and.w	r3, r3, #32
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d105      	bne.n	800a578 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d009      	beq.n	800a58c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8300 	beq.w	800ab82 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
      }
      return;
 800a58a:	e2fa      	b.n	800ab82 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a58c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8123 	beq.w	800a7dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a596:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a59a:	4b8d      	ldr	r3, [pc, #564]	@ (800a7d0 <HAL_UART_IRQHandler+0x2b8>)
 800a59c:	4013      	ands	r3, r2
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a5a6:	4b8b      	ldr	r3, [pc, #556]	@ (800a7d4 <HAL_UART_IRQHandler+0x2bc>)
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 8116 	beq.w	800a7dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d011      	beq.n	800a5e0 <HAL_UART_IRQHandler+0xc8>
 800a5bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00b      	beq.n	800a5e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5d6:	f043 0201 	orr.w	r2, r3, #1
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d011      	beq.n	800a610 <HAL_UART_IRQHandler+0xf8>
 800a5ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00b      	beq.n	800a610 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a606:	f043 0204 	orr.w	r2, r3, #4
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d011      	beq.n	800a640 <HAL_UART_IRQHandler+0x128>
 800a61c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a620:	f003 0301 	and.w	r3, r3, #1
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00b      	beq.n	800a640 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2204      	movs	r2, #4
 800a62e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a636:	f043 0202 	orr.w	r2, r3, #2
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a644:	f003 0308 	and.w	r3, r3, #8
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d017      	beq.n	800a67c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a650:	f003 0320 	and.w	r3, r3, #32
 800a654:	2b00      	cmp	r3, #0
 800a656:	d105      	bne.n	800a664 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a658:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a65c:	4b5c      	ldr	r3, [pc, #368]	@ (800a7d0 <HAL_UART_IRQHandler+0x2b8>)
 800a65e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00b      	beq.n	800a67c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2208      	movs	r2, #8
 800a66a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a672:	f043 0208 	orr.w	r2, r3, #8
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a684:	2b00      	cmp	r3, #0
 800a686:	d012      	beq.n	800a6ae <HAL_UART_IRQHandler+0x196>
 800a688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a68c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00c      	beq.n	800a6ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a69c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6a4:	f043 0220 	orr.w	r2, r3, #32
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 8266 	beq.w	800ab86 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d013      	beq.n	800a6ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d105      	bne.n	800a6de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a702:	2b40      	cmp	r3, #64	@ 0x40
 800a704:	d005      	beq.n	800a712 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a70a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d054      	beq.n	800a7bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f001 f807 	bl	800b726 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a722:	2b40      	cmp	r3, #64	@ 0x40
 800a724:	d146      	bne.n	800a7b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a734:	e853 3f00 	ldrex	r3, [r3]
 800a738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3308      	adds	r3, #8
 800a74e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a75e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a76a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1d9      	bne.n	800a726 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d017      	beq.n	800a7ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a782:	4a15      	ldr	r2, [pc, #84]	@ (800a7d8 <HAL_UART_IRQHandler+0x2c0>)
 800a784:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fb f827 	bl	80057e0 <HAL_DMA_Abort_IT>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d019      	beq.n	800a7cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7aa:	e00f      	b.n	800a7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fa13 	bl	800abd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b2:	e00b      	b.n	800a7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fa0f 	bl	800abd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ba:	e007      	b.n	800a7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fa0b 	bl	800abd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a7ca:	e1dc      	b.n	800ab86 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7cc:	bf00      	nop
    return;
 800a7ce:	e1da      	b.n	800ab86 <HAL_UART_IRQHandler+0x66e>
 800a7d0:	10000001 	.word	0x10000001
 800a7d4:	04000120 	.word	0x04000120
 800a7d8:	0800b9dd 	.word	0x0800b9dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	f040 8170 	bne.w	800aac6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ea:	f003 0310 	and.w	r3, r3, #16
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 8169 	beq.w	800aac6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7f8:	f003 0310 	and.w	r3, r3, #16
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 8162 	beq.w	800aac6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2210      	movs	r2, #16
 800a808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a814:	2b40      	cmp	r3, #64	@ 0x40
 800a816:	f040 80d8 	bne.w	800a9ca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 80af 	beq.w	800a990 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a838:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a83c:	429a      	cmp	r2, r3
 800a83e:	f080 80a7 	bcs.w	800a990 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a848:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0320 	and.w	r3, r3, #32
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f040 8087 	bne.w	800a96e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a86c:	e853 3f00 	ldrex	r3, [r3]
 800a870:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a874:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a87c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a88a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a88e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a896:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a8a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1da      	bne.n	800a860 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	3308      	adds	r3, #8
 800a8b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a8ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8bc:	f023 0301 	bic.w	r3, r3, #1
 800a8c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a8ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a8d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8da:	e841 2300 	strex	r3, r2, [r1]
 800a8de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1e1      	bne.n	800a8aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8f0:	e853 3f00 	ldrex	r3, [r3]
 800a8f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3308      	adds	r3, #8
 800a906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a90a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a90c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a910:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a912:	e841 2300 	strex	r3, r2, [r1]
 800a916:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1e3      	bne.n	800a8e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2220      	movs	r2, #32
 800a922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a93a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a93c:	f023 0310 	bic.w	r3, r3, #16
 800a940:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	461a      	mov	r2, r3
 800a94a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a94e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a950:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a954:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a95c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e4      	bne.n	800a92c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fa fee0 	bl	800572e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2202      	movs	r2, #2
 800a972:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a980:	b29b      	uxth	r3, r3
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	b29b      	uxth	r3, r3
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7f7 f8df 	bl	8001b4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a98e:	e0fc      	b.n	800ab8a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a99a:	429a      	cmp	r2, r3
 800a99c:	f040 80f5 	bne.w	800ab8a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 0320 	and.w	r3, r3, #32
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	f040 80eb 	bne.w	800ab8a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f7 f8c2 	bl	8001b4c <HAL_UARTEx_RxEventCallback>
      return;
 800a9c8:	e0df      	b.n	800ab8a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 80d1 	beq.w	800ab8e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a9ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 80cc 	beq.w	800ab8e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa18:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e4      	bne.n	800a9f6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3308      	adds	r3, #8
 800aa32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	623b      	str	r3, [r7, #32]
   return(result);
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa42:	f023 0301 	bic.w	r3, r3, #1
 800aa46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3308      	adds	r3, #8
 800aa50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa54:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa5c:	e841 2300 	strex	r3, r2, [r1]
 800aa60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1e1      	bne.n	800aa2c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f023 0310 	bic.w	r3, r3, #16
 800aa90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa9e:	61fb      	str	r3, [r7, #28]
 800aaa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa2:	69b9      	ldr	r1, [r7, #24]
 800aaa4:	69fa      	ldr	r2, [r7, #28]
 800aaa6:	e841 2300 	strex	r3, r2, [r1]
 800aaaa:	617b      	str	r3, [r7, #20]
   return(result);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1e4      	bne.n	800aa7c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2202      	movs	r2, #2
 800aab6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7f7 f844 	bl	8001b4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aac4:	e063      	b.n	800ab8e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00e      	beq.n	800aaf0 <HAL_UART_IRQHandler+0x5d8>
 800aad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d008      	beq.n	800aaf0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aae6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 ffb4 	bl	800ba56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aaee:	e051      	b.n	800ab94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d014      	beq.n	800ab26 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d105      	bne.n	800ab14 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d008      	beq.n	800ab26 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d03a      	beq.n	800ab92 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
    }
    return;
 800ab24:	e035      	b.n	800ab92 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d009      	beq.n	800ab46 <HAL_UART_IRQHandler+0x62e>
 800ab32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 ff5e 	bl	800ba00 <UART_EndTransmit_IT>
    return;
 800ab44:	e026      	b.n	800ab94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d009      	beq.n	800ab66 <HAL_UART_IRQHandler+0x64e>
 800ab52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 ff8d 	bl	800ba7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab64:	e016      	b.n	800ab94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d010      	beq.n	800ab94 <HAL_UART_IRQHandler+0x67c>
 800ab72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	da0c      	bge.n	800ab94 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 ff75 	bl	800ba6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab80:	e008      	b.n	800ab94 <HAL_UART_IRQHandler+0x67c>
      return;
 800ab82:	bf00      	nop
 800ab84:	e006      	b.n	800ab94 <HAL_UART_IRQHandler+0x67c>
    return;
 800ab86:	bf00      	nop
 800ab88:	e004      	b.n	800ab94 <HAL_UART_IRQHandler+0x67c>
      return;
 800ab8a:	bf00      	nop
 800ab8c:	e002      	b.n	800ab94 <HAL_UART_IRQHandler+0x67c>
      return;
 800ab8e:	bf00      	nop
 800ab90:	e000      	b.n	800ab94 <HAL_UART_IRQHandler+0x67c>
    return;
 800ab92:	bf00      	nop
  }
}
 800ab94:	37e8      	adds	r7, #232	@ 0xe8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop

0800ab9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abf0:	b08c      	sub	sp, #48	@ 0x30
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	431a      	orrs	r2, r3
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4baa      	ldr	r3, [pc, #680]	@ (800aec4 <UART_SetConfig+0x2d8>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	6812      	ldr	r2, [r2, #0]
 800ac22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac24:	430b      	orrs	r3, r1
 800ac26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	68da      	ldr	r2, [r3, #12]
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a9f      	ldr	r2, [pc, #636]	@ (800aec8 <UART_SetConfig+0x2dc>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d004      	beq.n	800ac58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac54:	4313      	orrs	r3, r2
 800ac56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ac62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac6c:	430b      	orrs	r3, r1
 800ac6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac76:	f023 010f 	bic.w	r1, r3, #15
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a90      	ldr	r2, [pc, #576]	@ (800aecc <UART_SetConfig+0x2e0>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d125      	bne.n	800acdc <UART_SetConfig+0xf0>
 800ac90:	4b8f      	ldr	r3, [pc, #572]	@ (800aed0 <UART_SetConfig+0x2e4>)
 800ac92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac96:	f003 0303 	and.w	r3, r3, #3
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d81a      	bhi.n	800acd4 <UART_SetConfig+0xe8>
 800ac9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aca4 <UART_SetConfig+0xb8>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acb5 	.word	0x0800acb5
 800aca8:	0800acc5 	.word	0x0800acc5
 800acac:	0800acbd 	.word	0x0800acbd
 800acb0:	0800accd 	.word	0x0800accd
 800acb4:	2301      	movs	r3, #1
 800acb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acba:	e116      	b.n	800aeea <UART_SetConfig+0x2fe>
 800acbc:	2302      	movs	r3, #2
 800acbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acc2:	e112      	b.n	800aeea <UART_SetConfig+0x2fe>
 800acc4:	2304      	movs	r3, #4
 800acc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acca:	e10e      	b.n	800aeea <UART_SetConfig+0x2fe>
 800accc:	2308      	movs	r3, #8
 800acce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acd2:	e10a      	b.n	800aeea <UART_SetConfig+0x2fe>
 800acd4:	2310      	movs	r3, #16
 800acd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acda:	e106      	b.n	800aeea <UART_SetConfig+0x2fe>
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a7c      	ldr	r2, [pc, #496]	@ (800aed4 <UART_SetConfig+0x2e8>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d138      	bne.n	800ad58 <UART_SetConfig+0x16c>
 800ace6:	4b7a      	ldr	r3, [pc, #488]	@ (800aed0 <UART_SetConfig+0x2e4>)
 800ace8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acec:	f003 030c 	and.w	r3, r3, #12
 800acf0:	2b0c      	cmp	r3, #12
 800acf2:	d82d      	bhi.n	800ad50 <UART_SetConfig+0x164>
 800acf4:	a201      	add	r2, pc, #4	@ (adr r2, 800acfc <UART_SetConfig+0x110>)
 800acf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfa:	bf00      	nop
 800acfc:	0800ad31 	.word	0x0800ad31
 800ad00:	0800ad51 	.word	0x0800ad51
 800ad04:	0800ad51 	.word	0x0800ad51
 800ad08:	0800ad51 	.word	0x0800ad51
 800ad0c:	0800ad41 	.word	0x0800ad41
 800ad10:	0800ad51 	.word	0x0800ad51
 800ad14:	0800ad51 	.word	0x0800ad51
 800ad18:	0800ad51 	.word	0x0800ad51
 800ad1c:	0800ad39 	.word	0x0800ad39
 800ad20:	0800ad51 	.word	0x0800ad51
 800ad24:	0800ad51 	.word	0x0800ad51
 800ad28:	0800ad51 	.word	0x0800ad51
 800ad2c:	0800ad49 	.word	0x0800ad49
 800ad30:	2300      	movs	r3, #0
 800ad32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad36:	e0d8      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ad38:	2302      	movs	r3, #2
 800ad3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3e:	e0d4      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ad40:	2304      	movs	r3, #4
 800ad42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad46:	e0d0      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ad48:	2308      	movs	r3, #8
 800ad4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad4e:	e0cc      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ad50:	2310      	movs	r3, #16
 800ad52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad56:	e0c8      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a5e      	ldr	r2, [pc, #376]	@ (800aed8 <UART_SetConfig+0x2ec>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d125      	bne.n	800adae <UART_SetConfig+0x1c2>
 800ad62:	4b5b      	ldr	r3, [pc, #364]	@ (800aed0 <UART_SetConfig+0x2e4>)
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ad6c:	2b30      	cmp	r3, #48	@ 0x30
 800ad6e:	d016      	beq.n	800ad9e <UART_SetConfig+0x1b2>
 800ad70:	2b30      	cmp	r3, #48	@ 0x30
 800ad72:	d818      	bhi.n	800ada6 <UART_SetConfig+0x1ba>
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d00a      	beq.n	800ad8e <UART_SetConfig+0x1a2>
 800ad78:	2b20      	cmp	r3, #32
 800ad7a:	d814      	bhi.n	800ada6 <UART_SetConfig+0x1ba>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <UART_SetConfig+0x19a>
 800ad80:	2b10      	cmp	r3, #16
 800ad82:	d008      	beq.n	800ad96 <UART_SetConfig+0x1aa>
 800ad84:	e00f      	b.n	800ada6 <UART_SetConfig+0x1ba>
 800ad86:	2300      	movs	r3, #0
 800ad88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad8c:	e0ad      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ad8e:	2302      	movs	r3, #2
 800ad90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad94:	e0a9      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ad96:	2304      	movs	r3, #4
 800ad98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad9c:	e0a5      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ad9e:	2308      	movs	r3, #8
 800ada0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ada4:	e0a1      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ada6:	2310      	movs	r3, #16
 800ada8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adac:	e09d      	b.n	800aeea <UART_SetConfig+0x2fe>
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a4a      	ldr	r2, [pc, #296]	@ (800aedc <UART_SetConfig+0x2f0>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d125      	bne.n	800ae04 <UART_SetConfig+0x218>
 800adb8:	4b45      	ldr	r3, [pc, #276]	@ (800aed0 <UART_SetConfig+0x2e4>)
 800adba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800adc2:	2bc0      	cmp	r3, #192	@ 0xc0
 800adc4:	d016      	beq.n	800adf4 <UART_SetConfig+0x208>
 800adc6:	2bc0      	cmp	r3, #192	@ 0xc0
 800adc8:	d818      	bhi.n	800adfc <UART_SetConfig+0x210>
 800adca:	2b80      	cmp	r3, #128	@ 0x80
 800adcc:	d00a      	beq.n	800ade4 <UART_SetConfig+0x1f8>
 800adce:	2b80      	cmp	r3, #128	@ 0x80
 800add0:	d814      	bhi.n	800adfc <UART_SetConfig+0x210>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <UART_SetConfig+0x1f0>
 800add6:	2b40      	cmp	r3, #64	@ 0x40
 800add8:	d008      	beq.n	800adec <UART_SetConfig+0x200>
 800adda:	e00f      	b.n	800adfc <UART_SetConfig+0x210>
 800addc:	2300      	movs	r3, #0
 800adde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ade2:	e082      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ade4:	2302      	movs	r3, #2
 800ade6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adea:	e07e      	b.n	800aeea <UART_SetConfig+0x2fe>
 800adec:	2304      	movs	r3, #4
 800adee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adf2:	e07a      	b.n	800aeea <UART_SetConfig+0x2fe>
 800adf4:	2308      	movs	r3, #8
 800adf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adfa:	e076      	b.n	800aeea <UART_SetConfig+0x2fe>
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae02:	e072      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a35      	ldr	r2, [pc, #212]	@ (800aee0 <UART_SetConfig+0x2f4>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d12a      	bne.n	800ae64 <UART_SetConfig+0x278>
 800ae0e:	4b30      	ldr	r3, [pc, #192]	@ (800aed0 <UART_SetConfig+0x2e4>)
 800ae10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae1c:	d01a      	beq.n	800ae54 <UART_SetConfig+0x268>
 800ae1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae22:	d81b      	bhi.n	800ae5c <UART_SetConfig+0x270>
 800ae24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae28:	d00c      	beq.n	800ae44 <UART_SetConfig+0x258>
 800ae2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae2e:	d815      	bhi.n	800ae5c <UART_SetConfig+0x270>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <UART_SetConfig+0x250>
 800ae34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae38:	d008      	beq.n	800ae4c <UART_SetConfig+0x260>
 800ae3a:	e00f      	b.n	800ae5c <UART_SetConfig+0x270>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae42:	e052      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ae44:	2302      	movs	r3, #2
 800ae46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae4a:	e04e      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ae4c:	2304      	movs	r3, #4
 800ae4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae52:	e04a      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ae54:	2308      	movs	r3, #8
 800ae56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae5a:	e046      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ae5c:	2310      	movs	r3, #16
 800ae5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae62:	e042      	b.n	800aeea <UART_SetConfig+0x2fe>
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a17      	ldr	r2, [pc, #92]	@ (800aec8 <UART_SetConfig+0x2dc>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d13a      	bne.n	800aee4 <UART_SetConfig+0x2f8>
 800ae6e:	4b18      	ldr	r3, [pc, #96]	@ (800aed0 <UART_SetConfig+0x2e4>)
 800ae70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae7c:	d01a      	beq.n	800aeb4 <UART_SetConfig+0x2c8>
 800ae7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae82:	d81b      	bhi.n	800aebc <UART_SetConfig+0x2d0>
 800ae84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae88:	d00c      	beq.n	800aea4 <UART_SetConfig+0x2b8>
 800ae8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae8e:	d815      	bhi.n	800aebc <UART_SetConfig+0x2d0>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <UART_SetConfig+0x2b0>
 800ae94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae98:	d008      	beq.n	800aeac <UART_SetConfig+0x2c0>
 800ae9a:	e00f      	b.n	800aebc <UART_SetConfig+0x2d0>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea2:	e022      	b.n	800aeea <UART_SetConfig+0x2fe>
 800aea4:	2302      	movs	r3, #2
 800aea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeaa:	e01e      	b.n	800aeea <UART_SetConfig+0x2fe>
 800aeac:	2304      	movs	r3, #4
 800aeae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb2:	e01a      	b.n	800aeea <UART_SetConfig+0x2fe>
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeba:	e016      	b.n	800aeea <UART_SetConfig+0x2fe>
 800aebc:	2310      	movs	r3, #16
 800aebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aec2:	e012      	b.n	800aeea <UART_SetConfig+0x2fe>
 800aec4:	cfff69f3 	.word	0xcfff69f3
 800aec8:	40008000 	.word	0x40008000
 800aecc:	40013800 	.word	0x40013800
 800aed0:	40021000 	.word	0x40021000
 800aed4:	40004400 	.word	0x40004400
 800aed8:	40004800 	.word	0x40004800
 800aedc:	40004c00 	.word	0x40004c00
 800aee0:	40005000 	.word	0x40005000
 800aee4:	2310      	movs	r3, #16
 800aee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4aae      	ldr	r2, [pc, #696]	@ (800b1a8 <UART_SetConfig+0x5bc>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	f040 8097 	bne.w	800b024 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aef6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aefa:	2b08      	cmp	r3, #8
 800aefc:	d823      	bhi.n	800af46 <UART_SetConfig+0x35a>
 800aefe:	a201      	add	r2, pc, #4	@ (adr r2, 800af04 <UART_SetConfig+0x318>)
 800af00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af47 	.word	0x0800af47
 800af0c:	0800af31 	.word	0x0800af31
 800af10:	0800af47 	.word	0x0800af47
 800af14:	0800af37 	.word	0x0800af37
 800af18:	0800af47 	.word	0x0800af47
 800af1c:	0800af47 	.word	0x0800af47
 800af20:	0800af47 	.word	0x0800af47
 800af24:	0800af3f 	.word	0x0800af3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af28:	f7fc f89c 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 800af2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af2e:	e010      	b.n	800af52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af30:	4b9e      	ldr	r3, [pc, #632]	@ (800b1ac <UART_SetConfig+0x5c0>)
 800af32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af34:	e00d      	b.n	800af52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af36:	f7fc f829 	bl	8006f8c <HAL_RCC_GetSysClockFreq>
 800af3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af3c:	e009      	b.n	800af52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af44:	e005      	b.n	800af52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 8130 	beq.w	800b1ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5e:	4a94      	ldr	r2, [pc, #592]	@ (800b1b0 <UART_SetConfig+0x5c4>)
 800af60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af64:	461a      	mov	r2, r3
 800af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af68:	fbb3 f3f2 	udiv	r3, r3, r2
 800af6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	685a      	ldr	r2, [r3, #4]
 800af72:	4613      	mov	r3, r2
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	4413      	add	r3, r2
 800af78:	69ba      	ldr	r2, [r7, #24]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d305      	bcc.n	800af8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af84:	69ba      	ldr	r2, [r7, #24]
 800af86:	429a      	cmp	r2, r3
 800af88:	d903      	bls.n	800af92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af90:	e113      	b.n	800b1ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af94:	2200      	movs	r2, #0
 800af96:	60bb      	str	r3, [r7, #8]
 800af98:	60fa      	str	r2, [r7, #12]
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9e:	4a84      	ldr	r2, [pc, #528]	@ (800b1b0 <UART_SetConfig+0x5c4>)
 800afa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	2200      	movs	r2, #0
 800afa8:	603b      	str	r3, [r7, #0]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afb4:	f7f5 f980 	bl	80002b8 <__aeabi_uldivmod>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4610      	mov	r0, r2
 800afbe:	4619      	mov	r1, r3
 800afc0:	f04f 0200 	mov.w	r2, #0
 800afc4:	f04f 0300 	mov.w	r3, #0
 800afc8:	020b      	lsls	r3, r1, #8
 800afca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afce:	0202      	lsls	r2, r0, #8
 800afd0:	6979      	ldr	r1, [r7, #20]
 800afd2:	6849      	ldr	r1, [r1, #4]
 800afd4:	0849      	lsrs	r1, r1, #1
 800afd6:	2000      	movs	r0, #0
 800afd8:	460c      	mov	r4, r1
 800afda:	4605      	mov	r5, r0
 800afdc:	eb12 0804 	adds.w	r8, r2, r4
 800afe0:	eb43 0905 	adc.w	r9, r3, r5
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	469a      	mov	sl, r3
 800afec:	4693      	mov	fp, r2
 800afee:	4652      	mov	r2, sl
 800aff0:	465b      	mov	r3, fp
 800aff2:	4640      	mov	r0, r8
 800aff4:	4649      	mov	r1, r9
 800aff6:	f7f5 f95f 	bl	80002b8 <__aeabi_uldivmod>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	4613      	mov	r3, r2
 800b000:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b008:	d308      	bcc.n	800b01c <UART_SetConfig+0x430>
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b010:	d204      	bcs.n	800b01c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6a3a      	ldr	r2, [r7, #32]
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	e0ce      	b.n	800b1ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b022:	e0ca      	b.n	800b1ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	69db      	ldr	r3, [r3, #28]
 800b028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b02c:	d166      	bne.n	800b0fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b02e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b032:	2b08      	cmp	r3, #8
 800b034:	d827      	bhi.n	800b086 <UART_SetConfig+0x49a>
 800b036:	a201      	add	r2, pc, #4	@ (adr r2, 800b03c <UART_SetConfig+0x450>)
 800b038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03c:	0800b061 	.word	0x0800b061
 800b040:	0800b069 	.word	0x0800b069
 800b044:	0800b071 	.word	0x0800b071
 800b048:	0800b087 	.word	0x0800b087
 800b04c:	0800b077 	.word	0x0800b077
 800b050:	0800b087 	.word	0x0800b087
 800b054:	0800b087 	.word	0x0800b087
 800b058:	0800b087 	.word	0x0800b087
 800b05c:	0800b07f 	.word	0x0800b07f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b060:	f7fc f800 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 800b064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b066:	e014      	b.n	800b092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b068:	f7fc f812 	bl	8007090 <HAL_RCC_GetPCLK2Freq>
 800b06c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b06e:	e010      	b.n	800b092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b070:	4b4e      	ldr	r3, [pc, #312]	@ (800b1ac <UART_SetConfig+0x5c0>)
 800b072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b074:	e00d      	b.n	800b092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b076:	f7fb ff89 	bl	8006f8c <HAL_RCC_GetSysClockFreq>
 800b07a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b07c:	e009      	b.n	800b092 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b07e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b084:	e005      	b.n	800b092 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 8090 	beq.w	800b1ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b09e:	4a44      	ldr	r2, [pc, #272]	@ (800b1b0 <UART_SetConfig+0x5c4>)
 800b0a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0ac:	005a      	lsls	r2, r3, #1
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	085b      	lsrs	r3, r3, #1
 800b0b4:	441a      	add	r2, r3
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	2b0f      	cmp	r3, #15
 800b0c4:	d916      	bls.n	800b0f4 <UART_SetConfig+0x508>
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0cc:	d212      	bcs.n	800b0f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f023 030f 	bic.w	r3, r3, #15
 800b0d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	8bfb      	ldrh	r3, [r7, #30]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	8bfa      	ldrh	r2, [r7, #30]
 800b0f0:	60da      	str	r2, [r3, #12]
 800b0f2:	e062      	b.n	800b1ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0fa:	e05e      	b.n	800b1ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b100:	2b08      	cmp	r3, #8
 800b102:	d828      	bhi.n	800b156 <UART_SetConfig+0x56a>
 800b104:	a201      	add	r2, pc, #4	@ (adr r2, 800b10c <UART_SetConfig+0x520>)
 800b106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800b131 	.word	0x0800b131
 800b110:	0800b139 	.word	0x0800b139
 800b114:	0800b141 	.word	0x0800b141
 800b118:	0800b157 	.word	0x0800b157
 800b11c:	0800b147 	.word	0x0800b147
 800b120:	0800b157 	.word	0x0800b157
 800b124:	0800b157 	.word	0x0800b157
 800b128:	0800b157 	.word	0x0800b157
 800b12c:	0800b14f 	.word	0x0800b14f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b130:	f7fb ff98 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 800b134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b136:	e014      	b.n	800b162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b138:	f7fb ffaa 	bl	8007090 <HAL_RCC_GetPCLK2Freq>
 800b13c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b13e:	e010      	b.n	800b162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b140:	4b1a      	ldr	r3, [pc, #104]	@ (800b1ac <UART_SetConfig+0x5c0>)
 800b142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b144:	e00d      	b.n	800b162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b146:	f7fb ff21 	bl	8006f8c <HAL_RCC_GetSysClockFreq>
 800b14a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b14c:	e009      	b.n	800b162 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b14e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b154:	e005      	b.n	800b162 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b156:	2300      	movs	r3, #0
 800b158:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b160:	bf00      	nop
    }

    if (pclk != 0U)
 800b162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d028      	beq.n	800b1ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16c:	4a10      	ldr	r2, [pc, #64]	@ (800b1b0 <UART_SetConfig+0x5c4>)
 800b16e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b172:	461a      	mov	r2, r3
 800b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b176:	fbb3 f2f2 	udiv	r2, r3, r2
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	441a      	add	r2, r3
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	2b0f      	cmp	r3, #15
 800b190:	d910      	bls.n	800b1b4 <UART_SetConfig+0x5c8>
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b198:	d20c      	bcs.n	800b1b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	60da      	str	r2, [r3, #12]
 800b1a4:	e009      	b.n	800b1ba <UART_SetConfig+0x5ce>
 800b1a6:	bf00      	nop
 800b1a8:	40008000 	.word	0x40008000
 800b1ac:	00f42400 	.word	0x00f42400
 800b1b0:	0800bde4 	.word	0x0800bde4
      }
      else
      {
        ret = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b1d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3730      	adds	r7, #48	@ 0x30
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b1e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f0:	f003 0308 	and.w	r3, r3, #8
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00a      	beq.n	800b20e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00a      	beq.n	800b252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	430a      	orrs	r2, r1
 800b250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b256:	f003 0304 	and.w	r3, r3, #4
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	430a      	orrs	r2, r1
 800b272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b278:	f003 0310 	and.w	r3, r3, #16
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00a      	beq.n	800b296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	430a      	orrs	r2, r1
 800b294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b29a:	f003 0320 	and.w	r3, r3, #32
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00a      	beq.n	800b2b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d01a      	beq.n	800b2fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2e2:	d10a      	bne.n	800b2fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00a      	beq.n	800b31c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	430a      	orrs	r2, r1
 800b31a:	605a      	str	r2, [r3, #4]
  }
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b098      	sub	sp, #96	@ 0x60
 800b32c:	af02      	add	r7, sp, #8
 800b32e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b338:	f7f8 fc22 	bl	8003b80 <HAL_GetTick>
 800b33c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d12f      	bne.n	800b3ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b34c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b354:	2200      	movs	r2, #0
 800b356:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f88e 	bl	800b47c <UART_WaitOnFlagUntilTimeout>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d022      	beq.n	800b3ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36e:	e853 3f00 	ldrex	r3, [r3]
 800b372:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b37a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b384:	647b      	str	r3, [r7, #68]	@ 0x44
 800b386:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b38a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b38c:	e841 2300 	strex	r3, r2, [r1]
 800b390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e6      	bne.n	800b366 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2220      	movs	r2, #32
 800b39c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	e063      	b.n	800b474 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0304 	and.w	r3, r3, #4
 800b3b6:	2b04      	cmp	r3, #4
 800b3b8:	d149      	bne.n	800b44e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 f857 	bl	800b47c <UART_WaitOnFlagUntilTimeout>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d03c      	beq.n	800b44e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b3e2:	6a3b      	ldr	r3, [r7, #32]
 800b3e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1e6      	bne.n	800b3d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	3308      	adds	r3, #8
 800b40c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	e853 3f00 	ldrex	r3, [r3]
 800b414:	60fb      	str	r3, [r7, #12]
   return(result);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f023 0301 	bic.w	r3, r3, #1
 800b41c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3308      	adds	r3, #8
 800b424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b426:	61fa      	str	r2, [r7, #28]
 800b428:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42a:	69b9      	ldr	r1, [r7, #24]
 800b42c:	69fa      	ldr	r2, [r7, #28]
 800b42e:	e841 2300 	strex	r3, r2, [r1]
 800b432:	617b      	str	r3, [r7, #20]
   return(result);
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1e5      	bne.n	800b406 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e012      	b.n	800b474 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2220      	movs	r2, #32
 800b45a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3758      	adds	r7, #88	@ 0x58
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	4613      	mov	r3, r2
 800b48a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b48c:	e04f      	b.n	800b52e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b494:	d04b      	beq.n	800b52e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b496:	f7f8 fb73 	bl	8003b80 <HAL_GetTick>
 800b49a:	4602      	mov	r2, r0
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	69ba      	ldr	r2, [r7, #24]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d302      	bcc.n	800b4ac <UART_WaitOnFlagUntilTimeout+0x30>
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d101      	bne.n	800b4b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e04e      	b.n	800b54e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0304 	and.w	r3, r3, #4
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d037      	beq.n	800b52e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	2b80      	cmp	r3, #128	@ 0x80
 800b4c2:	d034      	beq.n	800b52e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b40      	cmp	r3, #64	@ 0x40
 800b4c8:	d031      	beq.n	800b52e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d110      	bne.n	800b4fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2208      	movs	r2, #8
 800b4de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 f920 	bl	800b726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e029      	b.n	800b54e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b508:	d111      	bne.n	800b52e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 f906 	bl	800b726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2220      	movs	r2, #32
 800b51e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b52a:	2303      	movs	r3, #3
 800b52c:	e00f      	b.n	800b54e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	69da      	ldr	r2, [r3, #28]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	4013      	ands	r3, r2
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	bf0c      	ite	eq
 800b53e:	2301      	moveq	r3, #1
 800b540:	2300      	movne	r3, #0
 800b542:	b2db      	uxtb	r3, r3
 800b544:	461a      	mov	r2, r3
 800b546:	79fb      	ldrb	r3, [r7, #7]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d0a0      	beq.n	800b48e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
	...

0800b558 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b096      	sub	sp, #88	@ 0x58
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	4613      	mov	r3, r2
 800b564:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	88fa      	ldrh	r2, [r7, #6]
 800b570:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2222      	movs	r2, #34	@ 0x22
 800b580:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d02d      	beq.n	800b5ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b594:	4a40      	ldr	r2, [pc, #256]	@ (800b698 <UART_Start_Receive_DMA+0x140>)
 800b596:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b59e:	4a3f      	ldr	r2, [pc, #252]	@ (800b69c <UART_Start_Receive_DMA+0x144>)
 800b5a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5a8:	4a3d      	ldr	r2, [pc, #244]	@ (800b6a0 <UART_Start_Receive_DMA+0x148>)
 800b5aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3324      	adds	r3, #36	@ 0x24
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	f7fa f834 	bl	8005638 <HAL_DMA_Start_IT>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d009      	beq.n	800b5ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2210      	movs	r2, #16
 800b5da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e051      	b.n	800b68e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d018      	beq.n	800b624 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5fa:	e853 3f00 	ldrex	r3, [r3]
 800b5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b606:	657b      	str	r3, [r7, #84]	@ 0x54
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	461a      	mov	r2, r3
 800b60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b610:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b612:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b614:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b618:	e841 2300 	strex	r3, r2, [r1]
 800b61c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b61e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1e6      	bne.n	800b5f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3308      	adds	r3, #8
 800b62a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b636:	f043 0301 	orr.w	r3, r3, #1
 800b63a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3308      	adds	r3, #8
 800b642:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b644:	637a      	str	r2, [r7, #52]	@ 0x34
 800b646:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b648:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b64a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b64c:	e841 2300 	strex	r3, r2, [r1]
 800b650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1e5      	bne.n	800b624 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3308      	adds	r3, #8
 800b65e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	613b      	str	r3, [r7, #16]
   return(result);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b66e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3308      	adds	r3, #8
 800b676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b678:	623a      	str	r2, [r7, #32]
 800b67a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67c:	69f9      	ldr	r1, [r7, #28]
 800b67e:	6a3a      	ldr	r2, [r7, #32]
 800b680:	e841 2300 	strex	r3, r2, [r1]
 800b684:	61bb      	str	r3, [r7, #24]
   return(result);
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e5      	bne.n	800b658 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3758      	adds	r7, #88	@ 0x58
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	0800b7f3 	.word	0x0800b7f3
 800b69c:	0800b91f 	.word	0x0800b91f
 800b6a0:	0800b95d 	.word	0x0800b95d

0800b6a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b08f      	sub	sp, #60	@ 0x3c
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
 800b6b4:	e853 3f00 	ldrex	r3, [r3]
 800b6b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6d2:	e841 2300 	strex	r3, r2, [r1]
 800b6d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1e6      	bne.n	800b6ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b6f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6fe:	61ba      	str	r2, [r7, #24]
 800b700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b702:	6979      	ldr	r1, [r7, #20]
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	e841 2300 	strex	r3, r2, [r1]
 800b70a:	613b      	str	r3, [r7, #16]
   return(result);
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1e5      	bne.n	800b6de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2220      	movs	r2, #32
 800b716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b71a:	bf00      	nop
 800b71c:	373c      	adds	r7, #60	@ 0x3c
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b726:	b480      	push	{r7}
 800b728:	b095      	sub	sp, #84	@ 0x54
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b736:	e853 3f00 	ldrex	r3, [r3]
 800b73a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	461a      	mov	r2, r3
 800b74a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b74c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b74e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b754:	e841 2300 	strex	r3, r2, [r1]
 800b758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1e6      	bne.n	800b72e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3308      	adds	r3, #8
 800b766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	e853 3f00 	ldrex	r3, [r3]
 800b76e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b776:	f023 0301 	bic.w	r3, r3, #1
 800b77a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3308      	adds	r3, #8
 800b782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b78c:	e841 2300 	strex	r3, r2, [r1]
 800b790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e3      	bne.n	800b760 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d118      	bne.n	800b7d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	e853 3f00 	ldrex	r3, [r3]
 800b7ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	f023 0310 	bic.w	r3, r3, #16
 800b7b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7be:	61bb      	str	r3, [r7, #24]
 800b7c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c2:	6979      	ldr	r1, [r7, #20]
 800b7c4:	69ba      	ldr	r2, [r7, #24]
 800b7c6:	e841 2300 	strex	r3, r2, [r1]
 800b7ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1e6      	bne.n	800b7a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2220      	movs	r2, #32
 800b7d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7e6:	bf00      	nop
 800b7e8:	3754      	adds	r7, #84	@ 0x54
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b09c      	sub	sp, #112	@ 0x70
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0320 	and.w	r3, r3, #32
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d171      	bne.n	800b8f2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b80e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b810:	2200      	movs	r2, #0
 800b812:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b81e:	e853 3f00 	ldrex	r3, [r3]
 800b822:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b826:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b82a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b82c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	461a      	mov	r2, r3
 800b832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b834:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b836:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b838:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b83a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b83c:	e841 2300 	strex	r3, r2, [r1]
 800b840:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e6      	bne.n	800b816 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b85a:	f023 0301 	bic.w	r3, r3, #1
 800b85e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3308      	adds	r3, #8
 800b866:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b868:	647a      	str	r2, [r7, #68]	@ 0x44
 800b86a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b86e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b870:	e841 2300 	strex	r3, r2, [r1]
 800b874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1e5      	bne.n	800b848 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b87c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	3308      	adds	r3, #8
 800b882:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b886:	e853 3f00 	ldrex	r3, [r3]
 800b88a:	623b      	str	r3, [r7, #32]
   return(result);
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b892:	663b      	str	r3, [r7, #96]	@ 0x60
 800b894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3308      	adds	r3, #8
 800b89a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b89c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8a4:	e841 2300 	strex	r3, r2, [r1]
 800b8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1e5      	bne.n	800b87c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b8b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8b2:	2220      	movs	r2, #32
 800b8b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d118      	bne.n	800b8f2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f023 0310 	bic.w	r3, r3, #16
 800b8d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8de:	61fb      	str	r3, [r7, #28]
 800b8e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e2:	69b9      	ldr	r1, [r7, #24]
 800b8e4:	69fa      	ldr	r2, [r7, #28]
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e6      	bne.n	800b8c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d107      	bne.n	800b910 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b902:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b906:	4619      	mov	r1, r3
 800b908:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b90a:	f7f6 f91f 	bl	8001b4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b90e:	e002      	b.n	800b916 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b910:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b912:	f7ff f94d 	bl	800abb0 <HAL_UART_RxCpltCallback>
}
 800b916:	bf00      	nop
 800b918:	3770      	adds	r7, #112	@ 0x70
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b084      	sub	sp, #16
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2201      	movs	r2, #1
 800b930:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b936:	2b01      	cmp	r3, #1
 800b938:	d109      	bne.n	800b94e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b940:	085b      	lsrs	r3, r3, #1
 800b942:	b29b      	uxth	r3, r3
 800b944:	4619      	mov	r1, r3
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f7f6 f900 	bl	8001b4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b94c:	e002      	b.n	800b954 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f7ff f938 	bl	800abc4 <HAL_UART_RxHalfCpltCallback>
}
 800b954:	bf00      	nop
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b968:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b970:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b978:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b984:	2b80      	cmp	r3, #128	@ 0x80
 800b986:	d109      	bne.n	800b99c <UART_DMAError+0x40>
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	2b21      	cmp	r3, #33	@ 0x21
 800b98c:	d106      	bne.n	800b99c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2200      	movs	r2, #0
 800b992:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b996:	6978      	ldr	r0, [r7, #20]
 800b998:	f7ff fe84 	bl	800b6a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9a6:	2b40      	cmp	r3, #64	@ 0x40
 800b9a8:	d109      	bne.n	800b9be <UART_DMAError+0x62>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b22      	cmp	r3, #34	@ 0x22
 800b9ae:	d106      	bne.n	800b9be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b9b8:	6978      	ldr	r0, [r7, #20]
 800b9ba:	f7ff feb4 	bl	800b726 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9c4:	f043 0210 	orr.w	r2, r3, #16
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9ce:	6978      	ldr	r0, [r7, #20]
 800b9d0:	f7ff f902 	bl	800abd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9d4:	bf00      	nop
 800b9d6:	3718      	adds	r7, #24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff f8f0 	bl	800abd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9f8:	bf00      	nop
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b088      	sub	sp, #32
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	e853 3f00 	ldrex	r3, [r3]
 800ba14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	61bb      	str	r3, [r7, #24]
 800ba28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2a:	6979      	ldr	r1, [r7, #20]
 800ba2c:	69ba      	ldr	r2, [r7, #24]
 800ba2e:	e841 2300 	strex	r3, r2, [r1]
 800ba32:	613b      	str	r3, [r7, #16]
   return(result);
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1e6      	bne.n	800ba08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2220      	movs	r2, #32
 800ba3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff f8a7 	bl	800ab9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba4e:	bf00      	nop
 800ba50:	3720      	adds	r7, #32
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba72:	bf00      	nop
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b085      	sub	sp, #20
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d101      	bne.n	800baa8 <HAL_UARTEx_DisableFifoMode+0x16>
 800baa4:	2302      	movs	r3, #2
 800baa6:	e027      	b.n	800baf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2224      	movs	r2, #36	@ 0x24
 800bab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f022 0201 	bic.w	r2, r2, #1
 800bace:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bad6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d101      	bne.n	800bb1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e02d      	b.n	800bb78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2224      	movs	r2, #36	@ 0x24
 800bb28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f022 0201 	bic.w	r2, r2, #1
 800bb42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	430a      	orrs	r2, r1
 800bb56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f8a3 	bl	800bca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d101      	bne.n	800bb98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb94:	2302      	movs	r3, #2
 800bb96:	e02d      	b.n	800bbf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2224      	movs	r2, #36	@ 0x24
 800bba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f022 0201 	bic.w	r2, r2, #1
 800bbbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f865 	bl	800bca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2220      	movs	r2, #32
 800bbe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08c      	sub	sp, #48	@ 0x30
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	4613      	mov	r3, r2
 800bc08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	d142      	bne.n	800bc9a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bc1a:	88fb      	ldrh	r3, [r7, #6]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e03b      	b.n	800bc9c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2201      	movs	r2, #1
 800bc28:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bc30:	88fb      	ldrh	r3, [r7, #6]
 800bc32:	461a      	mov	r2, r3
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f7ff fc8e 	bl	800b558 <UART_Start_Receive_DMA>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bc42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d124      	bne.n	800bc94 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d11d      	bne.n	800bc8e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2210      	movs	r2, #16
 800bc58:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	e853 3f00 	ldrex	r3, [r3]
 800bc66:	617b      	str	r3, [r7, #20]
   return(result);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f043 0310 	orr.w	r3, r3, #16
 800bc6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	461a      	mov	r2, r3
 800bc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc78:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc7a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7c:	6a39      	ldr	r1, [r7, #32]
 800bc7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc80:	e841 2300 	strex	r3, r2, [r1]
 800bc84:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1e6      	bne.n	800bc5a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bc8c:	e002      	b.n	800bc94 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bc94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc98:	e000      	b.n	800bc9c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bc9a:	2302      	movs	r3, #2
  }
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3730      	adds	r7, #48	@ 0x30
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d108      	bne.n	800bcc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcc4:	e031      	b.n	800bd2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcc6:	2308      	movs	r3, #8
 800bcc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcca:	2308      	movs	r3, #8
 800bccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	0e5b      	lsrs	r3, r3, #25
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	f003 0307 	and.w	r3, r3, #7
 800bcdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	0f5b      	lsrs	r3, r3, #29
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	f003 0307 	and.w	r3, r3, #7
 800bcec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	7b3a      	ldrb	r2, [r7, #12]
 800bcf2:	4911      	ldr	r1, [pc, #68]	@ (800bd38 <UARTEx_SetNbDataToProcess+0x94>)
 800bcf4:	5c8a      	ldrb	r2, [r1, r2]
 800bcf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcfa:	7b3a      	ldrb	r2, [r7, #12]
 800bcfc:	490f      	ldr	r1, [pc, #60]	@ (800bd3c <UARTEx_SetNbDataToProcess+0x98>)
 800bcfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd00:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
 800bd0e:	7b7a      	ldrb	r2, [r7, #13]
 800bd10:	4909      	ldr	r1, [pc, #36]	@ (800bd38 <UARTEx_SetNbDataToProcess+0x94>)
 800bd12:	5c8a      	ldrb	r2, [r1, r2]
 800bd14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd18:	7b7a      	ldrb	r2, [r7, #13]
 800bd1a:	4908      	ldr	r1, [pc, #32]	@ (800bd3c <UARTEx_SetNbDataToProcess+0x98>)
 800bd1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd2a:	bf00      	nop
 800bd2c:	3714      	adds	r7, #20
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	0800bdfc 	.word	0x0800bdfc
 800bd3c:	0800be04 	.word	0x0800be04

0800bd40 <memset>:
 800bd40:	4402      	add	r2, r0
 800bd42:	4603      	mov	r3, r0
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d100      	bne.n	800bd4a <memset+0xa>
 800bd48:	4770      	bx	lr
 800bd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd4e:	e7f9      	b.n	800bd44 <memset+0x4>

0800bd50 <__libc_init_array>:
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	4d0d      	ldr	r5, [pc, #52]	@ (800bd88 <__libc_init_array+0x38>)
 800bd54:	4c0d      	ldr	r4, [pc, #52]	@ (800bd8c <__libc_init_array+0x3c>)
 800bd56:	1b64      	subs	r4, r4, r5
 800bd58:	10a4      	asrs	r4, r4, #2
 800bd5a:	2600      	movs	r6, #0
 800bd5c:	42a6      	cmp	r6, r4
 800bd5e:	d109      	bne.n	800bd74 <__libc_init_array+0x24>
 800bd60:	4d0b      	ldr	r5, [pc, #44]	@ (800bd90 <__libc_init_array+0x40>)
 800bd62:	4c0c      	ldr	r4, [pc, #48]	@ (800bd94 <__libc_init_array+0x44>)
 800bd64:	f000 f826 	bl	800bdb4 <_init>
 800bd68:	1b64      	subs	r4, r4, r5
 800bd6a:	10a4      	asrs	r4, r4, #2
 800bd6c:	2600      	movs	r6, #0
 800bd6e:	42a6      	cmp	r6, r4
 800bd70:	d105      	bne.n	800bd7e <__libc_init_array+0x2e>
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
 800bd74:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd78:	4798      	blx	r3
 800bd7a:	3601      	adds	r6, #1
 800bd7c:	e7ee      	b.n	800bd5c <__libc_init_array+0xc>
 800bd7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd82:	4798      	blx	r3
 800bd84:	3601      	adds	r6, #1
 800bd86:	e7f2      	b.n	800bd6e <__libc_init_array+0x1e>
 800bd88:	0800be14 	.word	0x0800be14
 800bd8c:	0800be14 	.word	0x0800be14
 800bd90:	0800be14 	.word	0x0800be14
 800bd94:	0800be18 	.word	0x0800be18

0800bd98 <memcpy>:
 800bd98:	440a      	add	r2, r1
 800bd9a:	4291      	cmp	r1, r2
 800bd9c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bda0:	d100      	bne.n	800bda4 <memcpy+0xc>
 800bda2:	4770      	bx	lr
 800bda4:	b510      	push	{r4, lr}
 800bda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdae:	4291      	cmp	r1, r2
 800bdb0:	d1f9      	bne.n	800bda6 <memcpy+0xe>
 800bdb2:	bd10      	pop	{r4, pc}

0800bdb4 <_init>:
 800bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb6:	bf00      	nop
 800bdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdba:	bc08      	pop	{r3}
 800bdbc:	469e      	mov	lr, r3
 800bdbe:	4770      	bx	lr

0800bdc0 <_fini>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	bf00      	nop
 800bdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc6:	bc08      	pop	{r3}
 800bdc8:	469e      	mov	lr, r3
 800bdca:	4770      	bx	lr
