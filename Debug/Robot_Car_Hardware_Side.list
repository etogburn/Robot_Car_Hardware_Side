
Robot_Car_Hardware_Side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800c7bc  0800c7bc  0000d7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c80c  0800c80c  0000e394  2**0
                  CONTENTS
  4 .ARM          00000008  0800c80c  0800c80c  0000d80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c814  0800c814  0000e394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c814  0800c814  0000d814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c818  0800c818  0000d818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000394  20000000  0800c81c  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000394  0800cbb0  0000e394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000994  0800cbb0  0000e994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e394  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026247  00000000  00000000  0000e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a47  00000000  00000000  0003460b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00039058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001662  00000000  00000000  0003ad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c487  00000000  00000000  0003c3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e7e  00000000  00000000  00068849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e454  00000000  00000000  0008d6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001abb1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c14  00000000  00000000  001abb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001b3774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000394 	.word	0x20000394
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c7a4 	.word	0x0800c7a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000398 	.word	0x20000398
 8000214:	0800c7a4 	.word	0x0800c7a4

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b9b5 	b.w	80005a4 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f84d 	bl	80002e8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f840 	bl	80002e8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f82f 	bl	80002e8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f821 	bl	80002e8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_uldivmod>:
 80002b8:	b953      	cbnz	r3, 80002d0 <__aeabi_uldivmod+0x18>
 80002ba:	b94a      	cbnz	r2, 80002d0 <__aeabi_uldivmod+0x18>
 80002bc:	2900      	cmp	r1, #0
 80002be:	bf08      	it	eq
 80002c0:	2800      	cmpeq	r0, #0
 80002c2:	bf1c      	itt	ne
 80002c4:	f04f 31ff 	movne.w	r1, #4294967295
 80002c8:	f04f 30ff 	movne.w	r0, #4294967295
 80002cc:	f000 b96a 	b.w	80005a4 <__aeabi_idiv0>
 80002d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d8:	f000 f806 	bl	80002e8 <__udivmoddi4>
 80002dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e4:	b004      	add	sp, #16
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Coms_IncIdx>:
#ifdef HAS_USB_COMMS
#include "usbd_cdc_if.h"
#endif
#include "usart.h"

static void Coms_IncIdx(uint8_t *idx) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	(*idx)++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
	if(*idx >= FIFO_SIZE) (*idx) = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d902      	bls.n	80005ca <Coms_IncIdx+0x22>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <ComsHandler_PacketToBuf>:

static void ComsHandler_PacketToBuf(DecodedPacket_t *packet, StringBuffer_t *buffer) {
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]

	if(packet->invalid) return;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7adb      	ldrb	r3, [r3, #11]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14c      	bne.n	8000682 <ComsHandler_PacketToBuf+0xac>
	buffer->length = 5 + packet->length;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7a9b      	ldrb	r3, [r3, #10]
 80005ec:	3305      	adds	r3, #5
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	701a      	strb	r2, [r3, #0]

	buffer->data[0] = START_BYTE;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	22aa      	movs	r2, #170	@ 0xaa
 80005f8:	705a      	strb	r2, [r3, #1]
	buffer->data[1] = packet->length;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a9a      	ldrb	r2, [r3, #10]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	709a      	strb	r2, [r3, #2]
	buffer->data[2] = (packet->command & 0xFF00) >> 8;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	70da      	strb	r2, [r3, #3]
	buffer->data[3] = packet->command & 0x00FF;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 800061a:	2304      	movs	r3, #4
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e00c      	b.n	800063a <ComsHandler_PacketToBuf+0x64>
		buffer->data[i] = packet->data[i-4];
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	1f1a      	subs	r2, r3, #4
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	440a      	add	r2, r1
 800062a:	7891      	ldrb	r1, [r2, #2]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3301      	adds	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	429a      	cmp	r2, r3
 8000644:	dbec      	blt.n	8000620 <ComsHandler_PacketToBuf+0x4a>
	}

	uint8_t checksum = buffer->data[0];
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 800064c:	2301      	movs	r3, #1
 800064e:	737b      	strb	r3, [r7, #13]
 8000650:	e009      	b.n	8000666 <ComsHandler_PacketToBuf+0x90>
		checksum ^= buffer->data[i];
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	785a      	ldrb	r2, [r3, #1]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	4053      	eors	r3, r2
 800065e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 8000660:	7b7b      	ldrb	r3, [r7, #13]
 8000662:	3301      	adds	r3, #1
 8000664:	737b      	strb	r3, [r7, #13]
 8000666:	7b7a      	ldrb	r2, [r7, #13]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	429a      	cmp	r2, r3
 8000670:	dbef      	blt.n	8000652 <ComsHandler_PacketToBuf+0x7c>
	}

	buffer->data[buffer->length - 1] = checksum;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	4413      	add	r3, r2
 800067c:	7bba      	ldrb	r2, [r7, #14]
 800067e:	705a      	strb	r2, [r3, #1]
 8000680:	e000      	b.n	8000684 <ComsHandler_PacketToBuf+0xae>
	if(packet->invalid) return;
 8000682:	bf00      	nop
}
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <ComsHandler_BufToPacket>:

static void ComsHandler_BufToPacket(DecodedPacket_t *packet, void *buf) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]

	StringBuffer_t *buffer = (StringBuffer_t *)buf;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	60fb      	str	r3, [r7, #12]

	uint8_t length = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]

	memset(packet->data, 0, MAX_DATA_SIZE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3302      	adds	r3, #2
 80006a4:	2208      	movs	r2, #8
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00c f841 	bl	800c730 <memset>

	packet->invalid = false;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	72da      	strb	r2, [r3, #11]
	packet->isNew = true;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	731a      	strb	r2, [r3, #12]

    if (buffer->data[0] != START_BYTE) {
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	2baa      	cmp	r3, #170	@ 0xaa
 80006c0:	d002      	beq.n	80006c8 <ComsHandler_BufToPacket+0x3a>
    	packet->invalid = true; // Invalid start byte, discard packet
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	72da      	strb	r2, [r3, #11]
    }

    packet->length = buffer->data[1];
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	789a      	ldrb	r2, [r3, #2]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	729a      	strb	r2, [r3, #10]
    if (buffer->data[1] > MAX_DATA_SIZE) {
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d905      	bls.n	80006e4 <ComsHandler_BufToPacket+0x56>
		packet->invalid = true;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	72da      	strb	r2, [r3, #11]
		packet->length = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	729a      	strb	r2, [r3, #10]
	}

    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006e4:	230c      	movs	r3, #12
 80006e6:	75bb      	strb	r3, [r7, #22]
 80006e8:	e00b      	b.n	8000702 <ComsHandler_BufToPacket+0x74>
    	if(buffer->data[i] != 0) {
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <ComsHandler_BufToPacket+0x6e>
    		length = i;
 80006f6:	7dbb      	ldrb	r3, [r7, #22]
 80006f8:	75fb      	strb	r3, [r7, #23]
    		break;
 80006fa:	e005      	b.n	8000708 <ComsHandler_BufToPacket+0x7a>
    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	3b01      	subs	r3, #1
 8000700:	75bb      	strb	r3, [r7, #22]
 8000702:	7dbb      	ldrb	r3, [r7, #22]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d8f0      	bhi.n	80006ea <ComsHandler_BufToPacket+0x5c>
    	}
    }

    uint8_t checksum = buffer->data[0];
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 800070e:	2301      	movs	r3, #1
 8000710:	753b      	strb	r3, [r7, #20]
 8000712:	e009      	b.n	8000728 <ComsHandler_BufToPacket+0x9a>
		checksum ^= buffer->data[i];
 8000714:	7d3b      	ldrb	r3, [r7, #20]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	785a      	ldrb	r2, [r3, #1]
 800071c:	7d7b      	ldrb	r3, [r7, #21]
 800071e:	4053      	eors	r3, r2
 8000720:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 8000722:	7d3b      	ldrb	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	753b      	strb	r3, [r7, #20]
 8000728:	7d3a      	ldrb	r2, [r7, #20]
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	429a      	cmp	r2, r3
 800072e:	d3f1      	bcc.n	8000714 <ComsHandler_BufToPacket+0x86>
	}

	if(checksum != buffer->data[length]) {
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	4413      	add	r3, r2
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	7d7a      	ldrb	r2, [r7, #21]
 800073a:	429a      	cmp	r2, r3
 800073c:	d002      	beq.n	8000744 <ComsHandler_BufToPacket+0xb6>
		packet->invalid = true;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	72da      	strb	r2, [r3, #11]
	}

    // Populate the command structure
    packet->command = (buffer->data[2] << 8) | buffer->data[3];
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	78db      	ldrb	r3, [r3, #3]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	801a      	strh	r2, [r3, #0]

    if(packet->length != 0) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7a9b      	ldrb	r3, [r3, #10]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d014      	beq.n	800078e <ComsHandler_BufToPacket+0x100>
    	for(uint8_t i = 0; i < packet->length; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	74fb      	strb	r3, [r7, #19]
 8000768:	e00c      	b.n	8000784 <ComsHandler_BufToPacket+0xf6>
    		packet->data[i] = buffer->data[4+i];
 800076a:	7cfb      	ldrb	r3, [r7, #19]
 800076c:	1d1a      	adds	r2, r3, #4
 800076e:	7cfb      	ldrb	r3, [r7, #19]
 8000770:	68f9      	ldr	r1, [r7, #12]
 8000772:	440a      	add	r2, r1
 8000774:	7851      	ldrb	r1, [r2, #1]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	460a      	mov	r2, r1
 800077c:	709a      	strb	r2, [r3, #2]
    	for(uint8_t i = 0; i < packet->length; i++) {
 800077e:	7cfb      	ldrb	r3, [r7, #19]
 8000780:	3301      	adds	r3, #1
 8000782:	74fb      	strb	r3, [r7, #19]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a9b      	ldrb	r3, [r3, #10]
 8000788:	7cfa      	ldrb	r2, [r7, #19]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3ed      	bcc.n	800076a <ComsHandler_BufToPacket+0xdc>
    	}
    }
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <UART_Send>:

// UART Send Function
static HAL_StatusTypeDef UART_Send(void *config, DecodedPacket_t *packet)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b088      	sub	sp, #32
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)config;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	61fb      	str	r3, [r7, #28]

    StringBuffer_t buf;
    memset(buf.data, 0, MAX_BUF_SIZE);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	3301      	adds	r3, #1
 80007aa:	220d      	movs	r2, #13
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00b ffbe 	bl	800c730 <memset>
    ComsHandler_PacketToBuf(packet, &buf);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	6838      	ldr	r0, [r7, #0]
 80007bc:	f7ff ff0b 	bl	80005d6 <ComsHandler_PacketToBuf>

    return HAL_UART_Transmit(huart, buf.data, buf.length, HAL_MAX_DELAY);
 80007c0:	7b3b      	ldrb	r3, [r7, #12]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	1c59      	adds	r1, r3, #1
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	69f8      	ldr	r0, [r7, #28]
 80007d0:	f00a fb0b 	bl	800adea <HAL_UART_Transmit>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <UART_SetupReceive>:

// UART Receive Function
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer

static HAL_StatusTypeDef UART_SetupReceive(void *inst)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007f2:	60bb      	str	r3, [r7, #8]

    memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	3370      	adds	r3, #112	@ 0x70
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	3305      	adds	r3, #5
 800080a:	220d      	movs	r2, #13
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f00b ff8e 	bl	800c730 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->rxBuf[instance->rxIdx].data, MAX_BUF_SIZE);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	3370      	adds	r3, #112	@ 0x70
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	3305      	adds	r3, #5
 800082a:	220d      	movs	r2, #13
 800082c:	4619      	mov	r1, r3
 800082e:	68b8      	ldr	r0, [r7, #8]
 8000830:	f00b fedc 	bl	800c5ec <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(DMA_UART_HANDLE, DMA_IT_HT);
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <UART_SetupReceive+0x70>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <UART_SetupReceive+0x70>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f022 0204 	bic.w	r2, r2, #4
 8000842:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000930 	.word	0x20000930

08000854 <UART_Receive>:

static HAL_StatusTypeDef UART_Receive(void *inst, uint8_t *data, uint16_t length)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	4613      	mov	r3, r2
 8000860:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	617b      	str	r3, [r7, #20]
    //UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;

    instance->rxBuf[instance->rxIdx].length = length;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	b2d8      	uxtb	r0, r3
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	460b      	mov	r3, r1
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	1a5b      	subs	r3, r3, r1
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	3374      	adds	r3, #116	@ 0x74
 800087e:	4602      	mov	r2, r0
 8000880:	701a      	strb	r2, [r3, #0]

    Coms_IncIdx(&instance->rxIdx);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe8f 	bl	80005a8 <Coms_IncIdx>

    UART_SetupReceive(inst);
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff ffa8 	bl	80007e0 <UART_SetupReceive>
    //__HAL_DMA_DISABLE_IT(hdma_usart1_rx, DMA_IT_HT);

    return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <CAN_Send>:
}
#endif

// CAN Send Function
static HAL_StatusTypeDef CAN_Send(void *config, DecodedPacket_t *packet)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b08c      	sub	sp, #48	@ 0x30
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]

#ifdef FDCAN

    FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    FDCAN_TxHeaderTypeDef txHeader;
    txHeader.Identifier = packet->command;  //send command as packet ID
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	60bb      	str	r3, [r7, #8]
    txHeader.IdType = FDCAN_EXTENDED_ID;
 80008ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b2:	60fb      	str	r3, [r7, #12]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
    txHeader.DataLength = packet->length;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	7a9b      	ldrb	r3, [r3, #10]
 80008bc:	617b      	str	r3, [r7, #20]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.MessageMarker = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Only include data bytes 5 to N-1
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, packet->data);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	1c9a      	adds	r2, r3, #2
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80008de:	f005 fcd9 	bl	8006294 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008e2:	4603      	mov	r3, r0
#endif

	return HAL_OK;
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3730      	adds	r7, #48	@ 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CAN_Receive>:

// CAN Receive Function
//going to be handled in an interrupt as with the all receive functions
static HAL_StatusTypeDef CAN_Receive(void *inst, uint8_t *data, uint16_t length)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b092      	sub	sp, #72	@ 0x48
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]

#ifdef FDCAN
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
    FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)instance->config;
 80008fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
    uint8_t RxData[8];

	// Check if a new message is available

		// Retrieve the message from the FIFO
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, RxData) == HAL_OK)
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	f107 0218 	add.w	r2, r7, #24
 800090e:	2140      	movs	r1, #64	@ 0x40
 8000910:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000912:	f005 fd03 	bl	800631c <HAL_FDCAN_GetRxMessage>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d14d      	bne.n	80009b8 <CAN_Receive+0xcc>
		{
			// Process the received message
			instance->rxPacket[instance->processIdx].invalid = false;
 800091c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	4619      	mov	r1, r3
 8000922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000924:	460b      	mov	r3, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	330f      	adds	r3, #15
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
			instance->rxPacket[instance->processIdx].isNew = true;
 8000934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	4619      	mov	r1, r3
 800093a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800093c:	460b      	mov	r3, r1
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	3310      	adds	r3, #16
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
			instance->rxPacket[instance->processIdx].length = rxHeader.DataLength & 0xFF;
 800094c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800094e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	4619      	mov	r1, r3
 8000954:	b2d0      	uxtb	r0, r2
 8000956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000958:	460b      	mov	r3, r1
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	330e      	adds	r3, #14
 8000964:	4602      	mov	r2, r0
 8000966:	701a      	strb	r2, [r3, #0]
			memset(instance->rxPacket[instance->processIdx].data, 0, MAX_DATA_SIZE);
 8000968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	461a      	mov	r2, r3
 800096e:	4613      	mov	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000978:	4413      	add	r3, r2
 800097a:	3306      	adds	r3, #6
 800097c:	2208      	movs	r2, #8
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f00b fed5 	bl	800c730 <memset>
			memcpy(instance->rxPacket[instance->processIdx].data, RxData, MAX_DATA_SIZE);
 8000986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	461a      	mov	r2, r3
 800098c:	4613      	mov	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000996:	4413      	add	r3, r2
 8000998:	3306      	adds	r3, #6
 800099a:	461a      	mov	r2, r3
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	cb03      	ldmia	r3!, {r0, r1}
 80009a2:	6010      	str	r0, [r2, #0]
 80009a4:	6051      	str	r1, [r2, #4]

			Coms_IncIdx(&instance->rxIdx);
 80009a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdfd 	bl	80005a8 <Coms_IncIdx>
			Coms_IncIdx(&instance->processIdx);
 80009ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009b0:	3302      	adds	r3, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fdf8 	bl	80005a8 <Coms_IncIdx>
		{

		}

#endif
    return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3748      	adds	r7, #72	@ 0x48
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <CAN_SetupReceive>:

static HAL_StatusTypeDef CAN_SetupReceive(void *inst)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]
	FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)instance->config;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d4:	60bb      	str	r3, [r7, #8]

	HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	68b8      	ldr	r0, [r7, #8]
 80009dc:	f005 fda6 	bl	800652c <HAL_FDCAN_ActivateNotification>

    return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <Comm_Init>:

// Initialize Communication Instance
void Comm_Init(ComsInterface_t *instance, CommType type, void *config)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	460b      	mov	r3, r1
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	72fb      	strb	r3, [r7, #11]
    instance->type = type;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	7afa      	ldrb	r2, [r7, #11]
 80009fe:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    instance->config = config;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    instance->decodeIdx = 0;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
    instance->rxIdx = 0;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
    instance->processIdx = 0;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	709a      	strb	r2, [r3, #2]

    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	75fb      	strb	r3, [r7, #23]
 8000a20:	e016      	b.n	8000a50 <Comm_Init+0x64>
    	instance->rxPacket[i].invalid = true;
 8000a22:	7dfa      	ldrb	r2, [r7, #23]
 8000a24:	68f9      	ldr	r1, [r7, #12]
 8000a26:	4613      	mov	r3, r2
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	1a9b      	subs	r3, r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	440b      	add	r3, r1
 8000a30:	330f      	adds	r3, #15
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
    	instance->rxPacket[i].isNew = false;
 8000a36:	7dfa      	ldrb	r2, [r7, #23]
 8000a38:	68f9      	ldr	r1, [r7, #12]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	440b      	add	r3, r1
 8000a44:	3310      	adds	r3, #16
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	75fb      	strb	r3, [r7, #23]
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	d9e5      	bls.n	8000a22 <Comm_Init+0x36>
    }

    if (type == COMM_UART) {
 8000a56:	7afb      	ldrb	r3, [r7, #11]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10f      	bne.n	8000a7c <Comm_Init+0x90>
        instance->interface.Send = UART_Send;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4a13      	ldr	r2, [pc, #76]	@ (8000aac <Comm_Init+0xc0>)
 8000a60:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = UART_Receive;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <Comm_Init+0xc4>)
 8000a68:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <Comm_Init+0xc8>)
 8000a70:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        UART_SetupReceive(instance);
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff feb3 	bl	80007e0 <UART_SetupReceive>
        instance->interface.Receive = CAN_Receive;
        FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
        HAL_FDCAN_Start(hfdcan);
        CAN_SetupReceive(hfdcan);
    }
}
 8000a7a:	e012      	b.n	8000aa2 <Comm_Init+0xb6>
    else if (type == COMM_CAN) {
 8000a7c:	7afb      	ldrb	r3, [r7, #11]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10f      	bne.n	8000aa2 <Comm_Init+0xb6>
        instance->interface.Send = CAN_Send;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <Comm_Init+0xcc>)
 8000a86:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = CAN_Receive;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <Comm_Init+0xd0>)
 8000a8e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	613b      	str	r3, [r7, #16]
        HAL_FDCAN_Start(hfdcan);
 8000a96:	6938      	ldr	r0, [r7, #16]
 8000a98:	f005 fbd4 	bl	8006244 <HAL_FDCAN_Start>
        CAN_SetupReceive(hfdcan);
 8000a9c:	6938      	ldr	r0, [r7, #16]
 8000a9e:	f7ff ff90 	bl	80009c2 <CAN_SetupReceive>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	08000797 	.word	0x08000797
 8000ab0:	08000855 	.word	0x08000855
 8000ab4:	0800068f 	.word	0x0800068f
 8000ab8:	0800089b 	.word	0x0800089b
 8000abc:	080008ed 	.word	0x080008ed

08000ac0 <Comm_Send>:

// Wrapper for Sending Data
HAL_StatusTypeDef Comm_Send(ComsInterface_t *instance, DecodedPacket_t *packet)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	if(packet->invalid) return HAL_ERROR;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	7adb      	ldrb	r3, [r3, #11]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <Comm_Send+0x16>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e009      	b.n	8000aea <Comm_Send+0x2a>

    return instance->interface.Send(instance->config, packet);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 8000ae2:	6839      	ldr	r1, [r7, #0]
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	4798      	blx	r3
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <Comm_Receive>:

// Wrapper for Receiving Data
HAL_StatusTypeDef Comm_Receive(ComsInterface_t *instance, uint8_t *data, uint16_t length)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80fb      	strh	r3, [r7, #6]
    return instance->interface.Receive(instance, data, length);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b06:	88fa      	ldrh	r2, [r7, #6]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	4798      	blx	r3
 8000b0e:	4603      	mov	r3, r0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <Comm_Process>:

void Comm_Process(ComsInterface_t *instance) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	static uint32_t currentTime;
	static uint32_t lastTime;

	currentTime = HAL_GetTick();
 8000b20:	f003 fa50 	bl	8003fc4 <HAL_GetTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4a22      	ldr	r2, [pc, #136]	@ (8000bb0 <Comm_Process+0x98>)
 8000b28:	6013      	str	r3, [r2, #0]

	if(instance->type == COMM_UART) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d132      	bne.n	8000b9a <Comm_Process+0x82>
		if(currentTime - lastTime > 1000) {
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <Comm_Process+0x98>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <Comm_Process+0x9c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b42:	d92a      	bls.n	8000b9a <Comm_Process+0x82>
			UART_SetupReceive(instance);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fe4b 	bl	80007e0 <UART_SetupReceive>
			lastTime = currentTime;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <Comm_Process+0x98>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a19      	ldr	r2, [pc, #100]	@ (8000bb4 <Comm_Process+0x9c>)
 8000b50:	6013      	str	r3, [r2, #0]
		}
	}

	while (instance->decodeIdx != instance->rxIdx) {
 8000b52:	e022      	b.n	8000b9a <Comm_Process+0x82>
		instance->interface.ConvertToPacket(&instance->rxPacket[instance->decodeIdx], &instance->rxBuf[instance->decodeIdx]);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	785b      	ldrb	r3, [r3, #1]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	460b      	mov	r3, r1
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	1a5b      	subs	r3, r3, r1
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	440b      	add	r3, r1
 8000b6c:	1d18      	adds	r0, r3, #4
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	4619      	mov	r1, r3
 8000b74:	460b      	mov	r3, r1
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	3370      	adds	r3, #112	@ 0x70
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	440b      	add	r3, r1
 8000b82:	3304      	adds	r3, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4790      	blx	r2
		Coms_IncIdx(&instance->decodeIdx);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fd0b 	bl	80005a8 <Coms_IncIdx>
		lastTime = currentTime;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <Comm_Process+0x98>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a07      	ldr	r2, [pc, #28]	@ (8000bb4 <Comm_Process+0x9c>)
 8000b98:	6013      	str	r3, [r2, #0]
	while (instance->decodeIdx != instance->rxIdx) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	785a      	ldrb	r2, [r3, #1]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d1d6      	bne.n	8000b54 <Comm_Process+0x3c>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200003b0 	.word	0x200003b0
 8000bb4:	200003b4 	.word	0x200003b4

08000bb8 <Comm_GetPacket>:

DecodedPacket_t Comm_GetPacket(ComsInterface_t *instance) {
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	DecodedPacket_t packet = {
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	819a      	strh	r2, [r3, #12]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	74fb      	strb	r3, [r7, #19]
			.invalid = true,
			.isNew = false
	};

	if(instance->decodeIdx == instance->processIdx) {
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	785a      	ldrb	r2, [r3, #1]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	789b      	ldrb	r3, [r3, #2]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d10a      	bne.n	8000bf6 <Comm_GetPacket+0x3e>
		return packet;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	461c      	mov	r4, r3
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bea:	6020      	str	r0, [r4, #0]
 8000bec:	6061      	str	r1, [r4, #4]
 8000bee:	60a2      	str	r2, [r4, #8]
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	81a3      	strh	r3, [r4, #12]
 8000bf4:	e029      	b.n	8000c4a <Comm_GetPacket+0x92>
	}

	uint8_t idx = instance->processIdx;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	75fb      	strb	r3, [r7, #23]

	Coms_IncIdx(&instance->processIdx);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3302      	adds	r3, #2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fcd1 	bl	80005a8 <Coms_IncIdx>
	memcpy(&packet, &instance->rxPacket[idx], sizeof(instance->rxPacket[idx]));
 8000c06:	7dfa      	ldrb	r2, [r7, #23]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	1d19      	adds	r1, r3, #4
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	220e      	movs	r2, #14
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00b fdb3 	bl	800c788 <memcpy>

	instance->rxPacket[idx].isNew = false;
 8000c22:	7dfa      	ldrb	r2, [r7, #23]
 8000c24:	6839      	ldr	r1, [r7, #0]
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	440b      	add	r3, r1
 8000c30:	3310      	adds	r3, #16
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]

	return packet;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	461c      	mov	r4, r3
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c40:	6020      	str	r0, [r4, #0]
 8000c42:	6061      	str	r1, [r4, #4]
 8000c44:	60a2      	str	r2, [r4, #8]
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	81a3      	strh	r3, [r4, #12]
}
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}

08000c52 <IMU_WriteRegister>:

#include "IMU.h"
#include <stdio.h> // For debugging with printf

// Internal helper function: Write a register
static HAL_StatusTypeDef IMU_WriteRegister(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t value) {
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	70fb      	strb	r3, [r7, #3]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = { reg, value };
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	733b      	strb	r3, [r7, #12]
 8000c66:	78bb      	ldrb	r3, [r7, #2]
 8000c68:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6858      	ldr	r0, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	891b      	ldrh	r3, [r3, #8]
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	f006 f94f 	bl	8006f18 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(imu->hspi, data, 2, HAL_MAX_DELAY);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	f107 010c 	add.w	r1, r7, #12
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	2202      	movs	r2, #2
 8000c88:	f007 fa4d 	bl	8008126 <HAL_SPI_Transmit>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6858      	ldr	r0, [r3, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	891b      	ldrh	r3, [r3, #8]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f006 f93c 	bl	8006f18 <HAL_GPIO_WritePin>

    return status;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <IMU_BurstRead>:

// Internal helper function: Burst read
static HAL_StatusTypeDef IMU_BurstRead(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t *buffer, uint8_t length) {
 8000caa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cae:	b08f      	sub	sp, #60	@ 0x3c
 8000cb0:	af02      	add	r7, sp, #8
 8000cb2:	6178      	str	r0, [r7, #20]
 8000cb4:	60fa      	str	r2, [r7, #12]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	460b      	mov	r3, r1
 8000cba:	74fb      	strb	r3, [r7, #19]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	74bb      	strb	r3, [r7, #18]
 8000cc0:	466b      	mov	r3, sp
 8000cc2:	461e      	mov	r6, r3

    uint8_t tx_data[length+1];
 8000cc4:	7cbb      	ldrb	r3, [r7, #18]
 8000cc6:	1c59      	adds	r1, r3, #1
 8000cc8:	1e4b      	subs	r3, r1, #1
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ccc:	460a      	mov	r2, r1
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603a      	str	r2, [r7, #0]
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	00c3      	lsls	r3, r0, #3
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ce6:	6838      	ldr	r0, [r7, #0]
 8000ce8:	00c2      	lsls	r2, r0, #3
 8000cea:	460a      	mov	r2, r1
 8000cec:	2300      	movs	r3, #0
 8000cee:	4692      	mov	sl, r2
 8000cf0:	469b      	mov	fp, r3
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000cfe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000d02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d06:	460b      	mov	r3, r1
 8000d08:	3307      	adds	r3, #7
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d12:	ab02      	add	r3, sp, #8
 8000d14:	3300      	adds	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_data[length+1];
 8000d18:	7cbb      	ldrb	r3, [r7, #18]
 8000d1a:	1c59      	adds	r1, r3, #1
 8000d1c:	1e4b      	subs	r3, r1, #1
 8000d1e:	623b      	str	r3, [r7, #32]
 8000d20:	460a      	mov	r2, r1
 8000d22:	2300      	movs	r3, #0
 8000d24:	4690      	mov	r8, r2
 8000d26:	4699      	mov	r9, r3
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	2300      	movs	r3, #0
 8000d40:	4614      	mov	r4, r2
 8000d42:	461d      	mov	r5, r3
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	00eb      	lsls	r3, r5, #3
 8000d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d52:	00e2      	lsls	r2, r4, #3
 8000d54:	460b      	mov	r3, r1
 8000d56:	3307      	adds	r3, #7
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d60:	ab02      	add	r3, sp, #8
 8000d62:	3300      	adds	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    tx_data[0] = reg | IMU_READ_BIT;
 8000d66:	7cfb      	ldrb	r3, [r7, #19]
 8000d68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= length; i++) {
 8000d72:	2301      	movs	r3, #1
 8000d74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d78:	e00f      	b.n	8000d9a <IMU_BurstRead+0xf0>
    	tx_data[i] = (tx_data[i-1]+1);
 8000d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d82:	5cd2      	ldrb	r2, [r2, r3]
 8000d84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d88:	3201      	adds	r2, #1
 8000d8a:	b2d1      	uxtb	r1, r2
 8000d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d8e:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 1; i <= length; i++) {
 8000d90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d94:	3301      	adds	r3, #1
 8000d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d9a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000d9e:	7cbb      	ldrb	r3, [r7, #18]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d9ea      	bls.n	8000d7a <IMU_BurstRead+0xd0>
    }

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	6858      	ldr	r0, [r3, #4]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	891b      	ldrh	r3, [r3, #8]
 8000dac:	2200      	movs	r2, #0
 8000dae:	4619      	mov	r1, r3
 8000db0:	f006 f8b2 	bl	8006f18 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx_data, rx_data, length + 1, HAL_MAX_DELAY);
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	7cbb      	ldrb	r3, [r7, #18]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	9200      	str	r2, [sp, #0]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dca:	f007 fb22 	bl	8008412 <HAL_SPI_TransmitReceive>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	76fb      	strb	r3, [r7, #27]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	6858      	ldr	r0, [r3, #4]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	891b      	ldrh	r3, [r3, #8]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f006 f89b 	bl	8006f18 <HAL_GPIO_WritePin>

    for(uint8_t i = 1; i <= length; i++) {
 8000de2:	2301      	movs	r3, #1
 8000de4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000de8:	e00e      	b.n	8000e08 <IMU_BurstRead+0x15e>
    	*(buffer+(i-1)) = rx_data[i];
 8000dea:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000dee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000df2:	3b01      	subs	r3, #1
 8000df4:	68f9      	ldr	r1, [r7, #12]
 8000df6:	440b      	add	r3, r1
 8000df8:	69f9      	ldr	r1, [r7, #28]
 8000dfa:	5c8a      	ldrb	r2, [r1, r2]
 8000dfc:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= length; i++) {
 8000dfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e02:	3301      	adds	r3, #1
 8000e04:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000e08:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e0c:	7cbb      	ldrb	r3, [r7, #18]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d9eb      	bls.n	8000dea <IMU_BurstRead+0x140>
	}


    return status;
 8000e12:	7efb      	ldrb	r3, [r7, #27]
 8000e14:	46b5      	mov	sp, r6
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3734      	adds	r7, #52	@ 0x34
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e20 <IMU_Init>:

// Initialize the IMU
HAL_StatusTypeDef IMU_Init(IMU_HandleTypeDef *imu) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
//
//    for(uint8_t i = 0; i < 14; i++) {
//    	data_buffer[i] = 0;
//    }

    if (IMU_WriteRegister(imu, 0x76, 0x00) != HAL_OK) { //userbank 0 select
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2176      	movs	r1, #118	@ 0x76
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff0e 	bl	8000c52 <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
	HAL_Delay(1);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f003 f8d0 	bl	8003fdc <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_DEVICE_CONFIG_REG, IMU_DEVICE_CONFIG_RESET) != HAL_OK) {
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2111      	movs	r1, #17
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff06 	bl	8000c52 <IMU_WriteRegister>
    	//   return HAL_ERROR;
	}

    HAL_Delay(5);
 8000e46:	2005      	movs	r0, #5
 8000e48:	f003 f8c8 	bl	8003fdc <HAL_Delay>

    if (IMU_BurstRead(imu, IMU_WHO_AM_I_REG, &who_am_i, 1) != HAL_OK || who_am_i != IMU_WHO_AM_I_EXPECTED) {
 8000e4c:	f107 020f 	add.w	r2, r7, #15
 8000e50:	2301      	movs	r3, #1
 8000e52:	2175      	movs	r1, #117	@ 0x75
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff28 	bl	8000caa <IMU_BurstRead>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f003 f8bc 	bl	8003fdc <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_PWR_MGMT_0, IMU_ENABLE_ACCEL_GYRO) != HAL_OK) {
 8000e64:	220f      	movs	r2, #15
 8000e66:	214e      	movs	r1, #78	@ 0x4e
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fef2 	bl	8000c52 <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f003 f8b4 	bl	8003fdc <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_GYRO_CONFIG_REG, IMU_GYRO_CONFIG_DATA) != HAL_OK) {
 8000e74:	2248      	movs	r2, #72	@ 0x48
 8000e76:	214f      	movs	r1, #79	@ 0x4f
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff feea 	bl	8000c52 <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f003 f8ac 	bl	8003fdc <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_ACCEL_CONFIG_REG, IMU_ACCEL_CONFIG_DATA) != HAL_OK) {
 8000e84:	2248      	movs	r2, #72	@ 0x48
 8000e86:	2150      	movs	r1, #80	@ 0x50
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fee2 	bl	8000c52 <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f003 f8a4 	bl	8003fdc <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG0_REG, IMU_INT_CONFIG0_DATA) != HAL_OK) {
 8000e94:	2220      	movs	r2, #32
 8000e96:	2163      	movs	r1, #99	@ 0x63
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff feda 	bl	8000c52 <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
    HAL_Delay(1);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f003 f89c 	bl	8003fdc <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_SOURCE_REG, IMU_INT_ENABLE_DATA_RDY) != HAL_OK) {
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	2165      	movs	r1, #101	@ 0x65
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fed2 	bl	8000c52 <IMU_WriteRegister>
       // return HAL_ERROR;
    }
    HAL_Delay(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f003 f894 	bl	8003fdc <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG_REG, IMU_INT_ACTIVE_HIGH) != HAL_OK) {
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	2114      	movs	r1, #20
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff feca 	bl	8000c52 <IMU_WriteRegister>
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f003 f88c 	bl	8003fdc <HAL_Delay>


    return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <IMU_ReadAll>:

    return HAL_OK;
}

// Read all data (accelerometer, gyroscope, and temperature)
HAL_StatusTypeDef IMU_ReadAll(IMU_HandleTypeDef *imu) {
 8000ece:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	466b      	mov	r3, sp
 8000eda:	461e      	mov	r6, r3
	uint8_t length = 14;
 8000edc:	230e      	movs	r3, #14
 8000ede:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[length];
 8000ee0:	7df9      	ldrb	r1, [r7, #23]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	b2cb      	uxtb	r3, r1
 8000eea:	2200      	movs	r2, #0
 8000eec:	4698      	mov	r8, r3
 8000eee:	4691      	mov	r9, r2
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000efc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f04:	b2cb      	uxtb	r3, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	461c      	mov	r4, r3
 8000f0a:	4615      	mov	r5, r2
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	00eb      	lsls	r3, r5, #3
 8000f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f1a:	00e2      	lsls	r2, r4, #3
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	3307      	adds	r3, #7
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	ebad 0d03 	sub.w	sp, sp, r3
 8000f28:	466b      	mov	r3, sp
 8000f2a:	3300      	adds	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
    uint8_t intStatus = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	72fb      	strb	r3, [r7, #11]
    if (IMU_BurstRead(imu, IMU_TEMP_OUT_H, raw_data, length) != HAL_OK) {
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	211d      	movs	r1, #29
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff feb6 	bl	8000caa <IMU_BurstRead>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <IMU_ReadAll+0x7a>
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e059      	b.n	8000ffc <IMU_ReadAll+0x12e>
    }

    imu->accel[0] = (raw_data[2] << 8) | raw_data[3];
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	789b      	ldrb	r3, [r3, #2]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	78db      	ldrb	r3, [r3, #3]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	825a      	strh	r2, [r3, #18]
    imu->accel[1] = (raw_data[4] << 8) | raw_data[5];
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	791b      	ldrb	r3, [r3, #4]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	795b      	ldrb	r3, [r3, #5]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	829a      	strh	r2, [r3, #20]
    imu->accel[2] = (raw_data[6] << 8) | raw_data[7];
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	799b      	ldrb	r3, [r3, #6]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	79db      	ldrb	r3, [r3, #7]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	82da      	strh	r2, [r3, #22]

    imu->temperature = (raw_data[0] << 8) | raw_data[1];
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	83da      	strh	r2, [r3, #30]

    imu->gyro[0] = (raw_data[8] << 8) | raw_data[9];
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	7a1b      	ldrb	r3, [r3, #8]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	7a5b      	ldrb	r3, [r3, #9]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	831a      	strh	r2, [r3, #24]
    imu->gyro[1] = (raw_data[10] << 8) | raw_data[11];
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	7a9b      	ldrb	r3, [r3, #10]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	7adb      	ldrb	r3, [r3, #11]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	835a      	strh	r2, [r3, #26]
    imu->gyro[2] = (raw_data[12] << 8) | raw_data[13];
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	7b1b      	ldrb	r3, [r3, #12]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	7b5b      	ldrb	r3, [r3, #13]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	839a      	strh	r2, [r3, #28]

    if (IMU_BurstRead(imu, IMU_INT_STATUS_REG, &intStatus, 1) != HAL_OK) {
 8000fe2:	f107 020b 	add.w	r2, r7, #11
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	212d      	movs	r1, #45	@ 0x2d
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fe5d 	bl	8000caa <IMU_BurstRead>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <IMU_ReadAll+0x12c>
		return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <IMU_ReadAll+0x12e>
	}

    return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	46b5      	mov	sp, r6
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001008 <IMU_InterruptHandler>:

// Interrupt handler
void IMU_InterruptHandler(IMU_HandleTypeDef *imu, uint16_t GPIO_pin) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
    if (GPIO_pin != imu->int_pin) return;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	8a1b      	ldrh	r3, [r3, #16]
 8001018:	887a      	ldrh	r2, [r7, #2]
 800101a:	429a      	cmp	r2, r3
 800101c:	d103      	bne.n	8001026 <IMU_InterruptHandler+0x1e>

    if (IMU_ReadAll(imu) == HAL_OK) {
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff55 	bl	8000ece <IMU_ReadAll>
 8001024:	e000      	b.n	8001028 <IMU_InterruptHandler+0x20>
    if (GPIO_pin != imu->int_pin) return;
 8001026:	bf00      	nop
        // Data successfully read
    } else {
        // Handle read error
    }
}
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	@ 0x30
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2220      	movs	r2, #32
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f00b fb71 	bl	800c730 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001050:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001054:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001056:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001058:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800105c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105e:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001064:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106a:	4b2b      	ldr	r3, [pc, #172]	@ (8001118 <MX_ADC1_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001070:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001076:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001078:	2204      	movs	r2, #4
 800107a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800107c:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001082:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001088:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <MX_ADC1_Init+0xe8>)
 800108a:	2201      	movs	r2, #1
 800108c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108e:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_ADC1_Init+0xe8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_ADC1_Init+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b8:	4817      	ldr	r0, [pc, #92]	@ (8001118 <MX_ADC1_Init+0xe8>)
 80010ba:	f003 f987 	bl	80043cc <HAL_ADC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c4:	f000 feb8 	bl	8001e38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_ADC1_Init+0xe8>)
 80010d4:	f003 ff9c 	bl	8005010 <HAL_ADCEx_MultiModeConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010de:	f000 feab 	bl	8001e38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_ADC1_Init+0xec>)
 80010e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e6:	2306      	movs	r3, #6
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ee:	237f      	movs	r3, #127	@ 0x7f
 80010f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC1_Init+0xe8>)
 8001100:	f003 fb20 	bl	8004744 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110a:	f000 fe95 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	@ 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200003b8 	.word	0x200003b8
 800111c:	10c00010 	.word	0x10c00010

08001120 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00b faf9 	bl	800c730 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001140:	4a31      	ldr	r2, [pc, #196]	@ (8001208 <MX_ADC3_Init+0xe8>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001146:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800114a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800114c:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <MX_ADC3_Init+0xe4>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_ADC3_Init+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001166:	2204      	movs	r2, #4
 8001168:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_ADC3_Init+0xe4>)
 800116c:	2200      	movs	r2, #0
 800116e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001178:	2201      	movs	r2, #1
 800117a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_ADC3_Init+0xe4>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_ADC3_Init+0xe4>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_ADC3_Init+0xe4>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <MX_ADC3_Init+0xe4>)
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_ADC3_Init+0xe4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011a6:	4817      	ldr	r0, [pc, #92]	@ (8001204 <MX_ADC3_Init+0xe4>)
 80011a8:	f003 f910 	bl	80043cc <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011b2:	f000 fe41 	bl	8001e38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4810      	ldr	r0, [pc, #64]	@ (8001204 <MX_ADC3_Init+0xe4>)
 80011c2:	f003 ff25 	bl	8005010 <HAL_ADCEx_MultiModeConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011cc:	f000 fe34 	bl	8001e38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_ADC3_Init+0xec>)
 80011d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d4:	2306      	movs	r3, #6
 80011d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011dc:	237f      	movs	r3, #127	@ 0x7f
 80011de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e0:	2304      	movs	r3, #4
 80011e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_ADC3_Init+0xe4>)
 80011ee:	f003 faa9 	bl	8004744 <HAL_ADC_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80011f8:	f000 fe1e 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	@ 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000424 	.word	0x20000424
 8001208:	50000400 	.word	0x50000400
 800120c:	1d500080 	.word	0x1d500080

08001210 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0a2      	sub	sp, #136	@ 0x88
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	2254      	movs	r2, #84	@ 0x54
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f00b fa7d 	bl	800c730 <memset>
  if(adcHandle->Instance==ADC1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800123e:	d14e      	bne.n	80012de <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001244:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001246:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800124a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	4618      	mov	r0, r3
 8001252:	f006 fc6f 	bl	8007b34 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800125c:	f000 fdec 	bl	8001e38 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001260:	4b4a      	ldr	r3, [pc, #296]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	4a49      	ldr	r2, [pc, #292]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001266:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800126a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126c:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b44      	ldr	r3, [pc, #272]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a43      	ldr	r2, [pc, #268]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b41      	ldr	r3, [pc, #260]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b3e      	ldr	r3, [pc, #248]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a3d      	ldr	r2, [pc, #244]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOARD_TEMP_Pin;
 80012a8:	2308      	movs	r3, #8
 80012aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(BOARD_TEMP_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012be:	f005 fc91 	bl	8006be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMC_CURRSENSE_Pin;
 80012c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012d4:	4619      	mov	r1, r3
 80012d6:	482e      	ldr	r0, [pc, #184]	@ (8001390 <HAL_ADC_MspInit+0x180>)
 80012d8:	f005 fc84 	bl	8006be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012dc:	e051      	b.n	8001382 <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001394 <HAL_ADC_MspInit+0x184>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d14c      	bne.n	8001382 <HAL_ADC_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f006 fc1b 	bl	8007b34 <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 8001304:	f000 fd98 	bl	8001e38 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	4a1f      	ldr	r2, [pc, #124]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001314:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	4a19      	ldr	r2, [pc, #100]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132c:	4b17      	ldr	r3, [pc, #92]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	4a13      	ldr	r2, [pc, #76]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <HAL_ADC_MspInit+0x17c>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LMC_CURRSENSE_Pin;
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001360:	4619      	mov	r1, r3
 8001362:	480d      	ldr	r0, [pc, #52]	@ (8001398 <HAL_ADC_MspInit+0x188>)
 8001364:	f005 fc3e 	bl	8006be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBAT_SW_DIAG_Pin;
 8001368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136e:	2303      	movs	r3, #3
 8001370:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VBAT_SW_DIAG_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	@ (800139c <HAL_ADC_MspInit+0x18c>)
 800137e:	f005 fc31 	bl	8006be4 <HAL_GPIO_Init>
}
 8001382:	bf00      	nop
 8001384:	3788      	adds	r7, #136	@ 0x88
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	48000400 	.word	0x48000400
 8001394:	50000400 	.word	0x50000400
 8001398:	48001000 	.word	0x48001000
 800139c:	48000c00 	.word	0x48000c00

080013a0 <SendResponse>:
		COMMAND_0x0181
};

// Function to initialize the Command Handler

static void SendResponse(ComsInterface_t *interface) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	Comm_Send(interface, &response);
 80013a8:	4903      	ldr	r1, [pc, #12]	@ (80013b8 <SendResponse+0x18>)
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fb88 	bl	8000ac0 <Comm_Send>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000490 	.word	0x20000490

080013bc <SetResponse>:

static void SetResponse(uint16_t command, uint8_t length, uint8_t *data) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	603a      	str	r2, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	460b      	mov	r3, r1
 80013ca:	717b      	strb	r3, [r7, #5]
	if(data == NULL) {
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <SetResponse+0x1e>
		response.length = 0;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <SetResponse+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	729a      	strb	r2, [r3, #10]
 80013d8:	e00e      	b.n	80013f8 <SetResponse+0x3c>
	} else {
		response.length = sizeof(data);
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <SetResponse+0x50>)
 80013dc:	2204      	movs	r2, #4
 80013de:	729a      	strb	r2, [r3, #10]
		memset(response.data, 0, MAX_DATA_SIZE);
 80013e0:	2208      	movs	r2, #8
 80013e2:	2100      	movs	r1, #0
 80013e4:	480a      	ldr	r0, [pc, #40]	@ (8001410 <SetResponse+0x54>)
 80013e6:	f00b f9a3 	bl	800c730 <memset>
		memcpy(response.data, data, response.length);
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <SetResponse+0x50>)
 80013ec:	7a9b      	ldrb	r3, [r3, #10]
 80013ee:	461a      	mov	r2, r3
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	4807      	ldr	r0, [pc, #28]	@ (8001410 <SetResponse+0x54>)
 80013f4:	f00b f9c8 	bl	800c788 <memcpy>
	}
	response.invalid = false;
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <SetResponse+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	72da      	strb	r2, [r3, #11]
	response.command = command;
 80013fe:	4a03      	ldr	r2, [pc, #12]	@ (800140c <SetResponse+0x50>)
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	8013      	strh	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000490 	.word	0x20000490
 8001410:	20000492 	.word	0x20000492

08001414 <Response_OK>:

static void Response_OK() {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_OK, 0, NULL);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	20ff      	movs	r0, #255	@ 0xff
 800141e:	f7ff ffcd 	bl	80013bc <SetResponse>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}

08001426 <Response_Invalid>:

static void Response_Invalid() {
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_INVALID, 0, NULL);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	20fe      	movs	r0, #254	@ 0xfe
 8001430:	f7ff ffc4 	bl	80013bc <SetResponse>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <makeInt16_t>:

static int16_t makeInt16_t(uint8_t *val1, uint8_t *val2) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	return (*val1 << 8) | *val2;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <int16_tToUint8_t>:

static void int16_tToUint8_t(int16_t *input, uint8_t *output) {
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	if(sizeof(input) != sizeof(output)) return;
	
	uint8_t maxLoop = sizeof(input)/2;
 800146a:	2302      	movs	r3, #2
 800146c:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = 0; i < maxLoop; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e01d      	b.n	80014b0 <int16_tToUint8_t+0x50>
		output[2*i] = (input[i] & 0xFF00) >> 8;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001480:	121a      	asrs	r2, r3, #8
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4619      	mov	r1, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	440b      	add	r3, r1
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
		output[2*i+1] = input[i] & 0xFF;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	f9b3 1000 	ldrsh.w	r1, [r3]
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	3301      	adds	r3, #1
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	b2ca      	uxtb	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < maxLoop; i++) {
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	3301      	adds	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d3dd      	bcc.n	8001474 <int16_tToUint8_t+0x14>
	}

}
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <CommandHandler_ProcessCommand>:
void CommandHandler_Init(void) {
    // Initialize any peripherals or variables related to command handling
    // Example: GPIO, Timers, etc.
}
// Function to process a received command
void CommandHandler_ProcessCommand(ComsInterface_t *interface, RobotSystem *robot) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
    // Check for NULL pointer
	DecodedPacket_t packet = Comm_GetPacket(interface);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fb6f 	bl	8000bb8 <Comm_GetPacket>

	if(!packet.isNew) return;
 80014da:	7e3b      	ldrb	r3, [r7, #24]
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d139      	bne.n	800155a <CommandHandler_ProcessCommand+0x96>

	if(packet.invalid) {
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <CommandHandler_ProcessCommand+0x34>
		Response_Invalid();
 80014ec:	f7ff ff9b 	bl	8001426 <Response_Invalid>
		SendResponse(interface);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff55 	bl	80013a0 <SendResponse>
		return;
 80014f6:	e031      	b.n	800155c <CommandHandler_ProcessCommand+0x98>
	}

	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e029      	b.n	8001552 <CommandHandler_ProcessCommand+0x8e>
		if (commandTable[i].commandID == packet.command) {
 80014fe:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <CommandHandler_ProcessCommand+0xa0>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001506:	89bb      	ldrh	r3, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d11f      	bne.n	800154c <CommandHandler_ProcessCommand+0x88>
			if(commandTable[i].expLength == 0 || commandTable[i].expLength == packet.length) {
 800150c:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <CommandHandler_ProcessCommand+0xa0>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	885b      	ldrh	r3, [r3, #2]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <CommandHandler_ProcessCommand+0x66>
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <CommandHandler_ProcessCommand+0xa0>)
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	885b      	ldrh	r3, [r3, #2]
 8001524:	7dba      	ldrb	r2, [r7, #22]
 8001526:	4293      	cmp	r3, r2
 8001528:	d10a      	bne.n	8001540 <CommandHandler_ProcessCommand+0x7c>
				commandTable[i].handler(&packet, robot);
 800152a:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <CommandHandler_ProcessCommand+0xa0>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f107 020c 	add.w	r2, r7, #12
 8001538:	6839      	ldr	r1, [r7, #0]
 800153a:	4610      	mov	r0, r2
 800153c:	4798      	blx	r3
 800153e:	e001      	b.n	8001544 <CommandHandler_ProcessCommand+0x80>
			} else {
				Response_Invalid();
 8001540:	f7ff ff71 	bl	8001426 <Response_Invalid>
			}
			SendResponse(interface);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff2b 	bl	80013a0 <SendResponse>
			return;
 800154a:	e007      	b.n	800155c <CommandHandler_ProcessCommand+0x98>
	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	3301      	adds	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	2b09      	cmp	r3, #9
 8001556:	d9d2      	bls.n	80014fe <CommandHandler_ProcessCommand+0x3a>
 8001558:	e000      	b.n	800155c <CommandHandler_ProcessCommand+0x98>
	if(!packet.isNew) return;
 800155a:	bf00      	nop
		}
	}
}
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000

08001568 <Handle_SetMotorEnable>:

void Handle_SetMotorEnable(DecodedPacket_t *packet, RobotSystem *robot) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	uint8_t data = packet->data[0] > 0 ? 1 : 0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	789b      	ldrb	r3, [r3, #2]
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	73fb      	strb	r3, [r7, #15]

	if(data) {
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <Handle_SetMotorEnable+0x28>
		RobotSystem_Enable(robot);
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f001 fda2 	bl	80030d2 <RobotSystem_Enable>
 800158e:	e002      	b.n	8001596 <Handle_SetMotorEnable+0x2e>
	} else {
		RobotSystem_Disable(robot);
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f001 fdb1 	bl	80030f8 <RobotSystem_Disable>
	}

	Response_OK();
 8001596:	f7ff ff3d 	bl	8001414 <Response_OK>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <Handle_SetMotorSpeed>:

void Handle_SetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
	int16_t leftSpeed = makeInt16_t(&packet->data[0], &packet->data[1]);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	1c9a      	adds	r2, r3, #2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3303      	adds	r3, #3
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f7ff ff3e 	bl	8001438 <makeInt16_t>
 80015bc:	4603      	mov	r3, r0
 80015be:	81fb      	strh	r3, [r7, #14]
	int16_t rightSpeed = makeInt16_t(&packet->data[2], &packet->data[3]);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	1d1a      	adds	r2, r3, #4
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3305      	adds	r3, #5
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f7ff ff34 	bl	8001438 <makeInt16_t>
 80015d0:	4603      	mov	r3, r0
 80015d2:	81bb      	strh	r3, [r7, #12]
	RobotSystem_SetSpeed(robot, leftSpeed, rightSpeed);
 80015d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015dc:	4619      	mov	r1, r3
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f001 fcaa 	bl	8002f38 <RobotSystem_SetSpeed>

	Response_OK();
 80015e4:	f7ff ff16 	bl	8001414 <Response_OK>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Handle_SetMotorStop>:

void Handle_SetMotorStop(DecodedPacket_t *packet, RobotSystem *robot) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	RobotSystem_SetSpeed(robot, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f001 fc9a 	bl	8002f38 <RobotSystem_SetSpeed>

	Response_OK();
 8001604:	f7ff ff06 	bl	8001414 <Response_OK>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <Handle_SetOneMotorSpeed>:

void Handle_SetOneMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	int16_t speed = makeInt16_t(&packet->data[0], &packet->data[1]);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	1c9a      	adds	r2, r3, #2
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3303      	adds	r3, #3
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f7ff ff07 	bl	8001438 <makeInt16_t>
 800162a:	4603      	mov	r3, r0
 800162c:	81fb      	strh	r3, [r7, #14]

	if(packet->command == COMMAND_SETLEFTSPEED) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	f240 1203 	movw	r2, #259	@ 0x103
 8001636:	4293      	cmp	r3, r2
 8001638:	d106      	bne.n	8001648 <Handle_SetOneMotorSpeed+0x38>
		RobotSystem_SetLeftSpeed(robot, speed);
 800163a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800163e:	4619      	mov	r1, r3
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f001 fca4 	bl	8002f8e <RobotSystem_SetLeftSpeed>
 8001646:	e00a      	b.n	800165e <Handle_SetOneMotorSpeed+0x4e>
	} else if(packet->command == COMMAND_SETRIGHTSPEED) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001650:	d105      	bne.n	800165e <Handle_SetOneMotorSpeed+0x4e>
		RobotSystem_SetRightSpeed(robot, speed);
 8001652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001656:	4619      	mov	r1, r3
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f001 fcb2 	bl	8002fc2 <RobotSystem_SetRightSpeed>
	}

	Response_OK();
 800165e:	f7ff fed9 	bl	8001414 <Response_OK>
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <Handle_GetMotorPosition>:

void Handle_GetMotorPosition(DecodedPacket_t *packet, RobotSystem *robot) {
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	int16_t wheelPos[2];
	uint8_t data[4];

	RobotSystem_GetMotorPosition(robot, &wheelPos[0], &wheelPos[1]);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	1c9a      	adds	r2, r3, #2
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4619      	mov	r1, r3
 8001680:	6838      	ldr	r0, [r7, #0]
 8001682:	f001 fccb 	bl	800301c <RobotSystem_GetMotorPosition>

	int16_tToUint8_t(wheelPos, data);
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fee5 	bl	8001460 <int16_tToUint8_t>

	SetResponse(COMMAND_GETMOTORPOSITION, sizeof(data), data);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	461a      	mov	r2, r3
 800169c:	2104      	movs	r1, #4
 800169e:	f240 1081 	movw	r0, #385	@ 0x181
 80016a2:	f7ff fe8b 	bl	80013bc <SetResponse>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <Handle_GetMotorSpeed>:

void Handle_GetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
	int16_t speed[2];
	uint8_t data[4];

	RobotSystem_GetMotorSpeed(robot, &speed[0], &speed[1]);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	1c9a      	adds	r2, r3, #2
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f001 fcbe 	bl	8003046 <RobotSystem_GetMotorSpeed>

	int16_tToUint8_t(speed, data);
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fec3 	bl	8001460 <int16_tToUint8_t>

	SetResponse(COMMAND_GETMOTORSPEED, sizeof(data), data);
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	461a      	mov	r2, r3
 80016e0:	2104      	movs	r1, #4
 80016e2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80016e6:	f7ff fe69 	bl	80013bc <SetResponse>
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <Handle_WakeUp>:

void Handle_WakeUp(DecodedPacket_t *packet, RobotSystem *robot) {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fe5b 	bl	80013bc <SetResponse>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <Handle_Ready>:

void Handle_Ready(DecodedPacket_t *packet, RobotSystem *robot) {
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fe4d 	bl	80013bc <SetResponse>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <Handle_Shutdown>:

void Handle_Shutdown(DecodedPacket_t *packet, RobotSystem *robot) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
	Response_OK();
 8001734:	f7ff fe6e 	bl	8001414 <Response_OK>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <MX_DAC2_Init>:

DAC_HandleTypeDef hdac2;

/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	@ 0x30
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001746:	463b      	mov	r3, r7
 8001748:	2230      	movs	r2, #48	@ 0x30
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f00a ffef 	bl	800c730 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <MX_DAC2_Init+0x6c>)
 8001754:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <MX_DAC2_Init+0x70>)
 8001756:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001758:	4814      	ldr	r0, [pc, #80]	@ (80017ac <MX_DAC2_Init+0x6c>)
 800175a:	f003 fe70 	bl	800543e <HAL_DAC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001764:	f000 fb68 	bl	8001e38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001768:	2302      	movs	r3, #2
 800176a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001784:	2301      	movs	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <MX_DAC2_Init+0x6c>)
 8001794:	f003 ff10 	bl	80055b8 <HAL_DAC_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800179e:	f000 fb4b 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	@ 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200004a0 	.word	0x200004a0
 80017b0:	50000c00 	.word	0x50000c00

080017b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a15      	ldr	r2, [pc, #84]	@ (8001828 <HAL_DAC_MspInit+0x74>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d124      	bne.n	8001820 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* DAC2 clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_DAC_MspInit+0x78>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <HAL_DAC_MspInit+0x78>)
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e2:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_DAC_MspInit+0x78>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_DAC_MspInit+0x78>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <HAL_DAC_MspInit+0x78>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <HAL_DAC_MspInit+0x78>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = WHEEL_MOTOR_CURRENT_LIMIT_Pin;
 8001806:	2340      	movs	r3, #64	@ 0x40
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WHEEL_MOTOR_CURRENT_LIMIT_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181c:	f005 f9e2 	bl	8006be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	@ 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	50000c00 	.word	0x50000c00
 800182c:	40021000 	.word	0x40021000

08001830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <MX_DMA_Init+0x50>)
 8001838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183a:	4a11      	ldr	r2, [pc, #68]	@ (8001880 <MX_DMA_Init+0x50>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6493      	str	r3, [r2, #72]	@ 0x48
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <MX_DMA_Init+0x50>)
 8001844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_DMA_Init+0x50>)
 8001850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001852:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <MX_DMA_Init+0x50>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6493      	str	r3, [r2, #72]	@ 0x48
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_DMA_Init+0x50>)
 800185c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200b      	movs	r0, #11
 800186c:	f003 fdb3 	bl	80053d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001870:	200b      	movs	r0, #11
 8001872:	f003 fdca 	bl	800540a <HAL_NVIC_EnableIRQ>

}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 800188a:	4a20      	ldr	r2, [pc, #128]	@ (800190c <MX_FDCAN1_Init+0x88>)
 800188c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV4;
 800188e:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 8001890:	2202      	movs	r2, #2
 8001892:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001894:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018c0:	2210      	movs	r2, #16
 80018c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018c6:	2204      	movs	r2, #4
 80018c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018cc:	2202      	movs	r2, #2
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018d8:	2210      	movs	r2, #16
 80018da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018de:	2204      	movs	r2, #4
 80018e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80018e8:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	@ (8001908 <MX_FDCAN1_Init+0x84>)
 80018f6:	f004 fb4b 	bl	8005f90 <HAL_FDCAN_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001900:	f000 fa9a 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200004b4 	.word	0x200004b4
 800190c:	40006400 	.word	0x40006400

08001910 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09e      	sub	sp, #120	@ 0x78
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2254      	movs	r2, #84	@ 0x54
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f00a fefd 	bl	800c730 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <HAL_FDCAN_MspInit+0xb8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d13f      	bne.n	80019c0 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001944:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001946:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800194a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	4618      	mov	r0, r3
 8001952:	f006 f8ef 	bl	8007b34 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800195c:	f000 fa6c 	bl	8001e38 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_FDCAN_MspInit+0xbc>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001964:	4a19      	ldr	r2, [pc, #100]	@ (80019cc <HAL_FDCAN_MspInit+0xbc>)
 8001966:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800196a:	6593      	str	r3, [r2, #88]	@ 0x58
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_FDCAN_MspInit+0xbc>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_FDCAN_MspInit+0xbc>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197c:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <HAL_FDCAN_MspInit+0xbc>)
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_FDCAN_MspInit+0xbc>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001990:	2303      	movs	r3, #3
 8001992:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019a0:	2309      	movs	r3, #9
 80019a2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019a8:	4619      	mov	r1, r3
 80019aa:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <HAL_FDCAN_MspInit+0xc0>)
 80019ac:	f005 f91a 	bl	8006be4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2015      	movs	r0, #21
 80019b6:	f003 fd0e 	bl	80053d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80019ba:	2015      	movs	r0, #21
 80019bc:	f003 fd25 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80019c0:	bf00      	nop
 80019c2:	3778      	adds	r7, #120	@ 0x78
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40006400 	.word	0x40006400
 80019cc:	40021000 	.word	0x40021000
 80019d0:	48000c00 	.word	0x48000c00

080019d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	@ 0x30
 80019d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	4a79      	ldr	r2, [pc, #484]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f6:	4b77      	ldr	r3, [pc, #476]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a02:	4b74      	ldr	r3, [pc, #464]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	4a73      	ldr	r2, [pc, #460]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0e:	4b71      	ldr	r3, [pc, #452]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	4a6d      	ldr	r2, [pc, #436]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a26:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	4b68      	ldr	r3, [pc, #416]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	4a67      	ldr	r2, [pc, #412]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3e:	4b65      	ldr	r3, [pc, #404]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	4b62      	ldr	r3, [pc, #392]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	4a61      	ldr	r2, [pc, #388]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a56:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a62:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	4a5b      	ldr	r2, [pc, #364]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6e:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a7a:	4b56      	ldr	r3, [pc, #344]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7e:	4a55      	ldr	r2, [pc, #340]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nAUX2_EN_Pin|LED_A_INT_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a9c:	f005 fa3c 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, nDEBUG_LED2_Pin|nDEBUG_LED1_Pin, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8001aa6:	484c      	ldr	r0, [pc, #304]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001aa8:	f005 fa36 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX2_OUTPUT_GPIO_Port, AUX2_OUTPUT_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ab2:	484a      	ldr	r0, [pc, #296]	@ (8001bdc <MX_GPIO_Init+0x208>)
 8001ab4:	f005 fa30 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCM_GYRO_SPI_GPIO_Port, nCS_MCM_GYRO_SPI_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2102      	movs	r1, #2
 8001abc:	4848      	ldr	r0, [pc, #288]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001abe:	f005 fa2b 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCM_KILL_Pin|CAN_EN_5V_Pin|nCAN_STBY_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001ac8:	4845      	ldr	r0, [pc, #276]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001aca:	f005 fa25 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nWHEEL_MOTOR_SHDN_GPIO_Port, nWHEEL_MOTOR_SHDN_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	4844      	ldr	r0, [pc, #272]	@ (8001be4 <MX_GPIO_Init+0x210>)
 8001ad4:	f005 fa20 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nAUX2_EN_Pin|LED_A_INT_Pin;
 8001ad8:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af4:	f005 f876 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = nDEBUG_LED2_Pin|nDEBUG_LED1_Pin;
 8001af8:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4831      	ldr	r0, [pc, #196]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001b12:	f005 f867 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRMC_CURRFAULT_Pin;
 8001b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nRMC_CURRFAULT_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	482f      	ldr	r0, [pc, #188]	@ (8001be8 <MX_GPIO_Init+0x214>)
 8001b2c:	f005 f85a 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = V_3V3_DIAG_Pin|V_5V_DIAG_Pin|nLMC_CURRFAULT_Pin;
 8001b30:	f44f 7341 	mov.w	r3, #772	@ 0x304
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4825      	ldr	r0, [pc, #148]	@ (8001bdc <MX_GPIO_Init+0x208>)
 8001b46:	f005 f84d 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX2_OUTPUT_Pin;
 8001b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUX2_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	481e      	ldr	r0, [pc, #120]	@ (8001bdc <MX_GPIO_Init+0x208>)
 8001b64:	f005 f83e 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4818      	ldr	r0, [pc, #96]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001b7e:	f005 f831 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_MCM_GYRO_SPI_Pin|MCM_KILL_Pin|CAN_EN_5V_Pin|nCAN_STBY_Pin;
 8001b82:	f240 3382 	movw	r3, #898	@ 0x382
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4811      	ldr	r0, [pc, #68]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001b9c:	f005 f822 	bl	8006be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nWHEEL_MOTOR_SHDN_Pin;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nWHEEL_MOTOR_SHDN_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480b      	ldr	r0, [pc, #44]	@ (8001be4 <MX_GPIO_Init+0x210>)
 8001bb8:	f005 f814 	bl	8006be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	2006      	movs	r0, #6
 8001bc2:	f003 fc08 	bl	80053d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bc6:	2006      	movs	r0, #6
 8001bc8:	f003 fc1f 	bl	800540a <HAL_NVIC_EnableIRQ>

}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	@ 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	48001400 	.word	0x48001400
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	48001800 	.word	0x48001800
 8001be4:	48001000 	.word	0x48001000
 8001be8:	48000400 	.word	0x48000400

08001bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b0e5      	sub	sp, #404	@ 0x194
 8001bf0:	af5e      	add	r7, sp, #376	@ 0x178
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf2:	f002 f982 	bl	8003efa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf6:	f000 f88d 	bl	8001d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bfa:	f7ff feeb 	bl	80019d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bfe:	f7ff fe17 	bl	8001830 <MX_DMA_Init>
  MX_ADC3_Init();
 8001c02:	f7ff fa8d 	bl	8001120 <MX_ADC3_Init>
  MX_DAC2_Init();
 8001c06:	f7ff fd9b 	bl	8001740 <MX_DAC2_Init>
  MX_USART2_UART_Init();
 8001c0a:	f002 f871 	bl	8003cf0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001c0e:	f001 fb1f 	bl	8003250 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001c12:	f7ff fa0d 	bl	8001030 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001c16:	f001 fc3b 	bl	8003490 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001c1a:	f001 fe0f 	bl	800383c <MX_TIM8_Init>
  MX_TIM2_Init();
 8001c1e:	f001 fcff 	bl	8003620 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001c22:	f001 fd83 	bl	800372c <MX_TIM5_Init>
  MX_FDCAN1_Init();
 8001c26:	f7ff fe2d 	bl	8001884 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  IMU_Init(&imu);
 8001c2a:	4831      	ldr	r0, [pc, #196]	@ (8001cf0 <main+0x104>)
 8001c2c:	f7ff f8f8 	bl	8000e20 <IMU_Init>
  RobotSystem_Init(&robot, leftWheel, rightWheel);
 8001c30:	4c30      	ldr	r4, [pc, #192]	@ (8001cf4 <main+0x108>)
 8001c32:	4a31      	ldr	r2, [pc, #196]	@ (8001cf8 <main+0x10c>)
 8001c34:	ab2e      	add	r3, sp, #184	@ 0xb8
 8001c36:	4611      	mov	r1, r2
 8001c38:	22c0      	movs	r2, #192	@ 0xc0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00a fda4 	bl	800c788 <memcpy>
 8001c40:	4668      	mov	r0, sp
 8001c42:	f104 0308 	add.w	r3, r4, #8
 8001c46:	22b8      	movs	r2, #184	@ 0xb8
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f00a fd9d 	bl	800c788 <memcpy>
 8001c4e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001c52:	482a      	ldr	r0, [pc, #168]	@ (8001cfc <main+0x110>)
 8001c54:	f001 f936 	bl	8002ec4 <RobotSystem_Init>
  Comm_Init(&serial, COMM_UART, &huart2);
 8001c58:	4a29      	ldr	r2, [pc, #164]	@ (8001d00 <main+0x114>)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4829      	ldr	r0, [pc, #164]	@ (8001d04 <main+0x118>)
 8001c5e:	f7fe fec5 	bl	80009ec <Comm_Init>
  Comm_Init(&canbus, COMM_CAN, &hfdcan1);
 8001c62:	4a29      	ldr	r2, [pc, #164]	@ (8001d08 <main+0x11c>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	4829      	ldr	r0, [pc, #164]	@ (8001d0c <main+0x120>)
 8001c68:	f7fe fec0 	bl	80009ec <Comm_Init>
  HAL_Delay(250);
 8001c6c:	20fa      	movs	r0, #250	@ 0xfa
 8001c6e:	f002 f9b5 	bl	8003fdc <HAL_Delay>
  DecodedPacket_t readyPacket = {
 8001c72:	463b      	mov	r3, r7
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	819a      	strh	r2, [r3, #12]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	803b      	strh	r3, [r7, #0]
		  .command = COMMAND_READY,
		  .length = 0,
		  .invalid = false
  };
  Comm_Send(&serial, &readyPacket);
 8001c82:	463b      	mov	r3, r7
 8001c84:	4619      	mov	r1, r3
 8001c86:	481f      	ldr	r0, [pc, #124]	@ (8001d04 <main+0x118>)
 8001c88:	f7fe ff1a 	bl	8000ac0 <Comm_Send>

  HAL_GPIO_WritePin(nCAN_STBY_GPIO_Port, nCAN_STBY_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c92:	481f      	ldr	r0, [pc, #124]	@ (8001d10 <main+0x124>)
 8001c94:	f005 f940 	bl	8006f18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_EN_5V_GPIO_Port, CAN_EN_5V_Pin, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c9e:	481c      	ldr	r0, [pc, #112]	@ (8001d10 <main+0x124>)
 8001ca0:	f005 f93a 	bl	8006f18 <HAL_GPIO_WritePin>

  readyPacket.length = 2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	72bb      	strb	r3, [r7, #10]
  readyPacket.data[0] = 0xAA;
 8001ca8:	23aa      	movs	r3, #170	@ 0xaa
 8001caa:	70bb      	strb	r3, [r7, #2]
  readyPacket.data[1] = 0xCC;
 8001cac:	23cc      	movs	r3, #204	@ 0xcc
 8001cae:	70fb      	strb	r3, [r7, #3]
  uint32_t currentTime = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  uint32_t lastTime = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]


  while (1)
  {

	  Comm_Process(&serial);
 8001cb8:	4812      	ldr	r0, [pc, #72]	@ (8001d04 <main+0x118>)
 8001cba:	f7fe ff2d 	bl	8000b18 <Comm_Process>
	  RobotSystem_Calculate(&robot);
 8001cbe:	480f      	ldr	r0, [pc, #60]	@ (8001cfc <main+0x110>)
 8001cc0:	f001 f9d6 	bl	8003070 <RobotSystem_Calculate>

	  CommandHandler_ProcessCommand(&serial, &robot);
 8001cc4:	490d      	ldr	r1, [pc, #52]	@ (8001cfc <main+0x110>)
 8001cc6:	480f      	ldr	r0, [pc, #60]	@ (8001d04 <main+0x118>)
 8001cc8:	f7ff fbfc 	bl	80014c4 <CommandHandler_ProcessCommand>

	  currentTime = HAL_GetTick();
 8001ccc:	f002 f97a 	bl	8003fc4 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]
	  if(currentTime - lastTime > 250) {
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2bfa      	cmp	r3, #250	@ 0xfa
 8001cda:	d9ed      	bls.n	8001cb8 <main+0xcc>
		  HAL_StatusTypeDef state = Comm_Send(&canbus, &readyPacket);
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480a      	ldr	r0, [pc, #40]	@ (8001d0c <main+0x120>)
 8001ce2:	f7fe feed 	bl	8000ac0 <Comm_Send>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	73fb      	strb	r3, [r7, #15]
		  lastTime = currentTime;
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	617b      	str	r3, [r7, #20]
	  Comm_Process(&serial);
 8001cee:	e7e3      	b.n	8001cb8 <main+0xcc>
 8001cf0:	20000050 	.word	0x20000050
 8001cf4:	200002c8 	.word	0x200002c8
 8001cf8:	20000208 	.word	0x20000208
 8001cfc:	20000070 	.word	0x20000070
 8001d00:	2000089c 	.word	0x2000089c
 8001d04:	20000518 	.word	0x20000518
 8001d08:	200004b4 	.word	0x200004b4
 8001d0c:	20000610 	.word	0x20000610
 8001d10:	48001800 	.word	0x48001800

08001d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b094      	sub	sp, #80	@ 0x50
 8001d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1a:	f107 0318 	add.w	r3, r7, #24
 8001d1e:	2238      	movs	r2, #56	@ 0x38
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00a fd04 	bl	800c730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f005 f91e 	bl	8006f78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d46:	2340      	movs	r3, #64	@ 0x40
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d52:	2304      	movs	r3, #4
 8001d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d56:	2355      	movs	r3, #85	@ 0x55
 8001d58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d62:	2302      	movs	r3, #2
 8001d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d66:	f107 0318 	add.w	r3, r7, #24
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 f9b8 	bl	80070e0 <HAL_RCC_OscConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d76:	f000 f85f 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7a:	230f      	movs	r3, #15
 8001d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2104      	movs	r1, #4
 8001d92:	4618      	mov	r0, r3
 8001d94:	f005 fcb6 	bl	8007704 <HAL_RCC_ClockConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d9e:	f000 f84b 	bl	8001e38 <Error_Handler>
  }
}
 8001da2:	bf00      	nop
 8001da4:	3750      	adds	r7, #80	@ 0x50
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	RobotSystem_InterruptHandler(&robot, htim);
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4803      	ldr	r0, [pc, #12]	@ (8001dc4 <HAL_TIM_IC_CaptureCallback+0x18>)
 8001db8:	f001 f96e 	bl	8003098 <RobotSystem_InterruptHandler>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000070 	.word	0x20000070

08001dc8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
	IMU_InterruptHandler(&imu, GPIO_Pin);
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4803      	ldr	r0, [pc, #12]	@ (8001de4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001dd8:	f7ff f916 	bl	8001008 <IMU_InterruptHandler>

}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000050 	.word	0x20000050

08001de8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
	Comm_Receive(&serial, 0, size);
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	461a      	mov	r2, r3
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <HAL_UARTEx_RxEventCallback+0x20>)
 8001dfc:	f7fe fe79 	bl	8000af2 <Comm_Receive>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000518 	.word	0x20000518

08001e0c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_FDCAN_RxFifo0Callback+0x1e>
	{
		Comm_Receive(&canbus, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	4803      	ldr	r0, [pc, #12]	@ (8001e34 <HAL_FDCAN_RxFifo0Callback+0x28>)
 8001e26:	f7fe fe64 	bl	8000af2 <Comm_Receive>
	}
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000610 	.word	0x20000610

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <Error_Handler+0x8>

08001e44 <Motor_Init>:
 */

#include "motor_control.h"

// Initialize a motor
void Motor_Init(Motor *motor) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
    // Example: Initialize GPIOs or timers for the motor
	motor->pid.hallCount = 0;
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	motor->pid.lastHallCount = 0;
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	motor->pid.set_speed = 0;
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	motor->pid.integral = 0;
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	motor->pid.previousFilter = 0;
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	motor->pid.lastUpdateTime = 0;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	motor->pid.lastPwmVal = 0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	motor->pid.lastHallTime = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->pid.totalHallTime = 0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	675a      	str	r2, [r3, #116]	@ 0x74
	motor->pid.pwmVal = 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	motor->pid.filterGain = DER_FILTER_GAIN;
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	motor->pid.maxIntegral = MAX_INTEGRAL_VAL;
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	motor->isFault = false;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor->faultRecovery = false;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43


	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall1_Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f007 f8d4 	bl	80090a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall2_Channel);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	885b      	ldrh	r3, [r3, #2]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f007 f8cc 	bl	80090a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall3_Channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	889b      	ldrh	r3, [r3, #4]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f007 f8c4 	bl	80090a8 <HAL_TIM_IC_Start_IT>

	Motor_Stop(motor);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f960 	bl	80021e6 <Motor_Stop>
	ReadHallSensors(motor);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 feb1 	bl	8002c8e <ReadHallSensors>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <Motor_SetSpeed>:

// Set the speed of a motor
void Motor_SetSpeed(Motor *motor, int64_t target_speed) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	e9c7 2300 	strd	r2, r3, [r7]

	if (target_speed == motor->target_speed) return;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f4a:	4299      	cmp	r1, r3
 8001f4c:	bf08      	it	eq
 8001f4e:	4290      	cmpeq	r0, r2
 8001f50:	d036      	beq.n	8001fc0 <Motor_SetSpeed+0x8c>

	if (target_speed > MAX_MOTOR_SPEED) target_speed = MAX_MOTOR_SPEED;
 8001f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f56:	f641 7141 	movw	r1, #8001	@ 0x1f41
 8001f5a:	428a      	cmp	r2, r1
 8001f5c:	f173 0300 	sbcs.w	r3, r3, #0
 8001f60:	db05      	blt.n	8001f6e <Motor_SetSpeed+0x3a>
 8001f62:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed < -MAX_MOTOR_SPEED) target_speed = -MAX_MOTOR_SPEED;
 8001f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f72:	f512 5ffa 	cmn.w	r2, #8000	@ 0x1f40
 8001f76:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001f7a:	da04      	bge.n	8001f86 <Motor_SetSpeed+0x52>
 8001f7c:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <Motor_SetSpeed+0x94>)
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed > -MIN_MOTOR_SPEED && target_speed < MIN_MOTOR_SPEED)
 8001f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f8a:	4910      	ldr	r1, [pc, #64]	@ (8001fcc <Motor_SetSpeed+0x98>)
 8001f8c:	428a      	cmp	r2, r1
 8001f8e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001f92:	db0c      	blt.n	8001fae <Motor_SetSpeed+0x7a>
 8001f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f98:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001f9c:	f173 0300 	sbcs.w	r3, r3, #0
 8001fa0:	da05      	bge.n	8001fae <Motor_SetSpeed+0x7a>
			target_speed = 0;
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9c7 2300 	strd	r2, r3, [r7]

	//motor->pid.integral = 0;
	//motor->pid.previousError = 0;

	motor->target_speed = target_speed;
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fb4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	Motor_Calculate(motor);
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f935 	bl	8002228 <Motor_Calculate>
 8001fbe:	e000      	b.n	8001fc2 <Motor_SetSpeed+0x8e>
	if (target_speed == motor->target_speed) return;
 8001fc0:	bf00      	nop
}
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	ffffe0c0 	.word	0xffffe0c0
 8001fcc:	fffffc19 	.word	0xfffffc19

08001fd0 <Motor_SetPwm>:


void Motor_SetPwm(Motor *motor, int16_t duty_cycle) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]

	if(duty_cycle > PWM_MAX_VAL) duty_cycle = PWM_MAX_VAL;
 8001fdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fe4:	dd03      	ble.n	8001fee <Motor_SetPwm+0x1e>
 8001fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	e005      	b.n	8001ffa <Motor_SetPwm+0x2a>
	else if(duty_cycle < 0) duty_cycle = 0;
 8001fee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da01      	bge.n	8001ffa <Motor_SetPwm+0x2a>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	807b      	strh	r3, [r7, #2]

	motor->pid.pwmVal = duty_cycle;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	887a      	ldrh	r2, [r7, #2]
 8001ffe:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_A_IDX], motor->pid.pwmVal);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002006:	2b00      	cmp	r3, #0
 8002008:	d107      	bne.n	800201a <Motor_SetPwm+0x4a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	635a      	str	r2, [r3, #52]	@ 0x34
 8002018:	e03b      	b.n	8002092 <Motor_SetPwm+0xc2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800201e:	2b04      	cmp	r3, #4
 8002020:	d108      	bne.n	8002034 <Motor_SetPwm+0x64>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	460b      	mov	r3, r1
 8002030:	6393      	str	r3, [r2, #56]	@ 0x38
 8002032:	e02e      	b.n	8002092 <Motor_SetPwm+0xc2>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002038:	2b08      	cmp	r3, #8
 800203a:	d108      	bne.n	800204e <Motor_SetPwm+0x7e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	460b      	mov	r3, r1
 800204a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800204c:	e021      	b.n	8002092 <Motor_SetPwm+0xc2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d108      	bne.n	8002068 <Motor_SetPwm+0x98>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	460b      	mov	r3, r1
 8002064:	6413      	str	r3, [r2, #64]	@ 0x40
 8002066:	e014      	b.n	8002092 <Motor_SetPwm+0xc2>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800206c:	2b10      	cmp	r3, #16
 800206e:	d108      	bne.n	8002082 <Motor_SetPwm+0xb2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	460b      	mov	r3, r1
 800207e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002080:	e007      	b.n	8002092 <Motor_SetPwm+0xc2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	460b      	mov	r3, r1
 8002090:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_B_IDX], motor->pid.pwmVal);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d107      	bne.n	80020aa <Motor_SetPwm+0xda>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a8:	e03b      	b.n	8002122 <Motor_SetPwm+0x152>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d108      	bne.n	80020c4 <Motor_SetPwm+0xf4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	460b      	mov	r3, r1
 80020c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80020c2:	e02e      	b.n	8002122 <Motor_SetPwm+0x152>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d108      	bne.n	80020de <Motor_SetPwm+0x10e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	460b      	mov	r3, r1
 80020da:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80020dc:	e021      	b.n	8002122 <Motor_SetPwm+0x152>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d108      	bne.n	80020f8 <Motor_SetPwm+0x128>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	460b      	mov	r3, r1
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	e014      	b.n	8002122 <Motor_SetPwm+0x152>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d108      	bne.n	8002112 <Motor_SetPwm+0x142>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	460b      	mov	r3, r1
 800210e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002110:	e007      	b.n	8002122 <Motor_SetPwm+0x152>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	460b      	mov	r3, r1
 8002120:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_C_IDX], motor->pid.pwmVal);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002126:	2b00      	cmp	r3, #0
 8002128:	d107      	bne.n	800213a <Motor_SetPwm+0x16a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	635a      	str	r2, [r3, #52]	@ 0x34
 8002138:	e03b      	b.n	80021b2 <Motor_SetPwm+0x1e2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800213e:	2b04      	cmp	r3, #4
 8002140:	d108      	bne.n	8002154 <Motor_SetPwm+0x184>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	460b      	mov	r3, r1
 8002150:	6393      	str	r3, [r2, #56]	@ 0x38
 8002152:	e02e      	b.n	80021b2 <Motor_SetPwm+0x1e2>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002158:	2b08      	cmp	r3, #8
 800215a:	d108      	bne.n	800216e <Motor_SetPwm+0x19e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	460b      	mov	r3, r1
 800216a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800216c:	e021      	b.n	80021b2 <Motor_SetPwm+0x1e2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d108      	bne.n	8002188 <Motor_SetPwm+0x1b8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	460b      	mov	r3, r1
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	e014      	b.n	80021b2 <Motor_SetPwm+0x1e2>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800218c:	2b10      	cmp	r3, #16
 800218e:	d108      	bne.n	80021a2 <Motor_SetPwm+0x1d2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	460b      	mov	r3, r1
 800219e:	6493      	str	r3, [r2, #72]	@ 0x48
 80021a0:	e007      	b.n	80021b2 <Motor_SetPwm+0x1e2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	460b      	mov	r3, r1
 80021b0:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if(motor->pid.lastPwmVal == 0 && motor->pid.lastPwmVal != motor->pid.pwmVal)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <Motor_SetPwm+0x202>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	@ 0x82
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d002      	beq.n	80021d2 <Motor_SetPwm+0x202>
		Motor_Update(motor);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fc43 	bl	8002a58 <Motor_Update>
	motor->pid.lastPwmVal = motor->pid.pwmVal;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <Motor_Stop>:

// Stop a motor
void Motor_Stop(Motor *motor) {
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
    // Set speed to zero to stop the motor
    Motor_SetSpeed(motor, 0);
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fe9c 	bl	8001f34 <Motor_SetSpeed>
    SetPhase(motor, PHASE_A_IDX, false, false);
 80021fc:	2300      	movs	r3, #0
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fcee 	bl	8002be4 <SetPhase>
    SetPhase(motor, PHASE_B_IDX, false, false);
 8002208:	2300      	movs	r3, #0
 800220a:	2200      	movs	r2, #0
 800220c:	2101      	movs	r1, #1
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fce8 	bl	8002be4 <SetPhase>
    SetPhase(motor, PHASE_C_IDX, false, false);
 8002214:	2300      	movs	r3, #0
 8002216:	2200      	movs	r2, #0
 8002218:	2102      	movs	r1, #2
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fce2 	bl	8002be4 <SetPhase>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <Motor_Calculate>:

void Motor_Calculate(Motor *motor) {
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	b0d7      	sub	sp, #348	@ 0x15c
 800222e:	af00      	add	r7, sp, #0
 8002230:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
	uint32_t currentTime = HAL_GetTick(); // Get the current time in milliseconds
 8002234:	f001 fec6 	bl	8003fc4 <HAL_GetTick>
 8002238:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
	if(Motor_GetFaultStatus(motor)) {
 800223c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002240:	f000 fe08 	bl	8002e54 <Motor_GetFaultStatus>

	}
	// Update PID every certain time cycle
	if ((currentTime - motor->pid.lastUpdateTime) >= PID_CALC_TIMING) {
 8002244:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002248:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800224c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	2b13      	cmp	r3, #19
 8002254:	f240 83f5 	bls.w	8002a42 <Motor_Calculate+0x81a>

		if(motor->faultRecovery) {
 8002258:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800225c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <Motor_Calculate+0x46>
			Motor_CurrFaultHandler(motor);
 8002264:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002268:	f000 fe19 	bl	8002e9e <Motor_CurrFaultHandler>
			return;
 800226c:	e3e9      	b.n	8002a42 <Motor_Calculate+0x81a>
		}
		CalculateDistance(motor);
 800226e:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002272:	f000 fd99 	bl	8002da8 <CalculateDistance>
		if(motor->pid.set_speed > motor->target_speed) {
 8002276:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800227a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800227e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002282:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002286:	4282      	cmp	r2, r0
 8002288:	418b      	sbcs	r3, r1
 800228a:	da78      	bge.n	800237e <Motor_Calculate+0x156>
			if(motor->pid.set_speed > 0 && motor->pid.set_speed - motor->acceleration < 0 && motor->target_speed < 0) {
 800228c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002290:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002294:	2a01      	cmp	r2, #1
 8002296:	f173 0300 	sbcs.w	r3, r3, #0
 800229a:	db35      	blt.n	8002308 <Motor_Calculate+0xe0>
 800229c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022a0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80022a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022a8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80022ac:	1a84      	subs	r4, r0, r2
 80022ae:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80022b2:	eb61 0303 	sbc.w	r3, r1, r3
 80022b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80022ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da22      	bge.n	8002308 <Motor_Calculate+0xe0>
 80022c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022c6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da1c      	bge.n	8002308 <Motor_Calculate+0xe0>
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 80022ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022d2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80022d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022da:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80022de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022e2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80022e6:	eb10 0802 	adds.w	r8, r0, r2
 80022ea:	eb41 0903 	adc.w	r9, r1, r3
 80022ee:	45a0      	cmp	r8, r4
 80022f0:	eb79 0305 	sbcs.w	r3, r9, r5
 80022f4:	db3a      	blt.n	800236c <Motor_Calculate+0x144>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 80022f6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 8002306:	e031      	b.n	800236c <Motor_Calculate+0x144>
				}
			}
			else if(motor->pid.set_speed - motor->acceleration <= motor->target_speed) {
 8002308:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800230c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002310:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002314:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002318:	ebb0 0a02 	subs.w	sl, r0, r2
 800231c:	eb61 0b03 	sbc.w	fp, r1, r3
 8002320:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002324:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002328:	4552      	cmp	r2, sl
 800232a:	eb73 030b 	sbcs.w	r3, r3, fp
 800232e:	db08      	blt.n	8002342 <Motor_Calculate+0x11a>
				motor->pid.set_speed = motor->target_speed;
 8002330:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002334:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002338:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800233c:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8002340:	e014      	b.n	800236c <Motor_Calculate+0x144>
			}
			else {
				motor->pid.set_speed -= motor->acceleration;
 8002342:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002346:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800234a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800234e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002352:	1a84      	subs	r4, r0, r2
 8002354:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8002358:	eb61 0303 	sbc.w	r3, r1, r3
 800235c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002360:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002364:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002368:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 800236c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 800237c:	e08d      	b.n	800249a <Motor_Calculate+0x272>
		} else if(motor->pid.set_speed < motor->target_speed) {
 800237e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002382:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002386:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800238a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800238e:	4290      	cmp	r0, r2
 8002390:	eb71 0303 	sbcs.w	r3, r1, r3
 8002394:	f280 8081 	bge.w	800249a <Motor_Calculate+0x272>
			if(motor->pid.set_speed < 0 && motor->pid.set_speed + motor->acceleration > 0 && motor->target_speed > 0) {
 8002398:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800239c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da3a      	bge.n	800241a <Motor_Calculate+0x1f2>
 80023a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023a8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80023ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023b0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80023b4:	1884      	adds	r4, r0, r2
 80023b6:	eb41 0503 	adc.w	r5, r1, r3
 80023ba:	2c01      	cmp	r4, #1
 80023bc:	f175 0300 	sbcs.w	r3, r5, #0
 80023c0:	db2b      	blt.n	800241a <Motor_Calculate+0x1f2>
 80023c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023c6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80023ca:	2a01      	cmp	r2, #1
 80023cc:	f173 0300 	sbcs.w	r3, r3, #0
 80023d0:	db23      	blt.n	800241a <Motor_Calculate+0x1f2>
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 80023d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023d6:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80023da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023de:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80023e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023e6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80023ea:	1a86      	subs	r6, r0, r2
 80023ec:	f8c7 60e0 	str.w	r6, [r7, #224]	@ 0xe0
 80023f0:	eb61 0303 	sbc.w	r3, r1, r3
 80023f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80023fc:	460b      	mov	r3, r1
 80023fe:	429c      	cmp	r4, r3
 8002400:	4613      	mov	r3, r2
 8002402:	eb75 0303 	sbcs.w	r3, r5, r3
 8002406:	db40      	blt.n	800248a <Motor_Calculate+0x262>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 8002408:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 8002418:	e037      	b.n	800248a <Motor_Calculate+0x262>
				}
			}
			else if(motor->pid.set_speed + motor->acceleration >= motor->target_speed) {
 800241a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800241e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002422:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002426:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800242a:	1884      	adds	r4, r0, r2
 800242c:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8002430:	eb41 0303 	adc.w	r3, r1, r3
 8002434:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002438:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800243c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002440:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002444:	4621      	mov	r1, r4
 8002446:	4291      	cmp	r1, r2
 8002448:	4629      	mov	r1, r5
 800244a:	4199      	sbcs	r1, r3
 800244c:	db08      	blt.n	8002460 <Motor_Calculate+0x238>
				motor->pid.set_speed = motor->target_speed;
 800244e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002452:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002456:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800245a:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 800245e:	e014      	b.n	800248a <Motor_Calculate+0x262>
			}
			else {
				motor->pid.set_speed += motor->acceleration;
 8002460:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002464:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002468:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800246c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002470:	1884      	adds	r4, r0, r2
 8002472:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8002476:	eb41 0303 	adc.w	r3, r1, r3
 800247a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800247e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002482:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002486:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 800248a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		}

		//set motor direction based the sign of the set_speed variable
		if(motor->pid.set_speed < 0) {
 800249a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800249e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da05      	bge.n	80024b2 <Motor_Calculate+0x28a>
			motor->direction = false;
 80024a6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80024aa:	2300      	movs	r3, #0
 80024ac:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
 80024b0:	e004      	b.n	80024bc <Motor_Calculate+0x294>
		}
		else
		{
			motor->direction = true;
 80024b2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80024b6:	2301      	movs	r3, #1
 80024b8:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
		}

		// Calculate current speed
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 80024bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024c0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80024c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80024cc:	1a84      	subs	r4, r0, r2
 80024ce:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 80024d2:	eb61 0303 	sbc.w	r3, r1, r3
 80024d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				* ( 1000 * 1000 * 60 / ((int64_t)motor->pid.totalHallTime))/SPEED_CALC_HALL_TO_REV; // speed in counts per minute
 80024da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024e6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024ea:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80024ee:	4822      	ldr	r0, [pc, #136]	@ (8002578 <Motor_Calculate+0x350>)
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	f7fd fe90 	bl	8000218 <__aeabi_ldivmod>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002500:	4629      	mov	r1, r5
 8002502:	fb02 f001 	mul.w	r0, r2, r1
 8002506:	4621      	mov	r1, r4
 8002508:	fb01 f103 	mul.w	r1, r1, r3
 800250c:	4401      	add	r1, r0
 800250e:	4620      	mov	r0, r4
 8002510:	fba0 2302 	umull	r2, r3, r0, r2
 8002514:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002518:	4613      	mov	r3, r2
 800251a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800251e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002522:	18cb      	adds	r3, r1, r3
 8002524:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002528:	f04f 0207 	mov.w	r2, #7
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8002534:	f7fd fe70 	bl	8000218 <__aeabi_ldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 8002540:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002544:	e9c3 0114 	strd	r0, r1, [r3, #80]	@ 0x50

		motor->pid.totalHallTime = 0;
 8002548:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800254c:	2300      	movs	r3, #0
 800254e:	6753      	str	r3, [r2, #116]	@ 0x74
		motor->pid.lastHallCount = motor->pid.hallCount;
 8002550:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002554:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8002558:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800255c:	e9c3 011a 	strd	r0, r1, [r3, #104]	@ 0x68

		//do no calculations if speed is set to 0
		if(motor->pid.set_speed == 0) {
 8002560:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002564:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002568:	4313      	orrs	r3, r2
 800256a:	d107      	bne.n	800257c <Motor_Calculate+0x354>
			Motor_SetPwm(motor,0);
 800256c:	2100      	movs	r1, #0
 800256e:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002572:	f7ff fd2d 	bl	8001fd0 <Motor_SetPwm>
			return;
 8002576:	e264      	b.n	8002a42 <Motor_Calculate+0x81a>
 8002578:	03938700 	.word	0x03938700
		}

		// Calculate error
		int64_t error = (motor->pid.set_speed - motor->current_speed);
 800257c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002580:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002584:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002588:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800258c:	1a84      	subs	r4, r0, r2
 800258e:	653c      	str	r4, [r7, #80]	@ 0x50
 8002590:	eb61 0303 	sbc.w	r3, r1, r3
 8002594:	657b      	str	r3, [r7, #84]	@ 0x54
 8002596:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800259a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		// PID calculations
		motor->pid.integral += error * PID_CALC_TIMING/1000; // Integral term, scaled for 50ms
 800259e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025a2:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	@ 0x88
 80025a6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80025aa:	f04f 0232 	mov.w	r2, #50	@ 0x32
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	f7fd fe31 	bl	8000218 <__aeabi_ldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	18a1      	adds	r1, r4, r2
 80025bc:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80025c0:	eb45 0303 	adc.w	r3, r5, r3
 80025c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80025c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025cc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80025d0:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//clamp integral term to avoid integral windup
		if(motor->pid.integral > motor->pid.maxIntegral) motor->pid.integral = motor->pid.maxIntegral;
 80025d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025d8:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80025dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025e0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80025e4:	4282      	cmp	r2, r0
 80025e6:	418b      	sbcs	r3, r1
 80025e8:	da07      	bge.n	80025fa <Motor_Calculate+0x3d2>
 80025ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025ee:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 80025f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025f6:	e9c3 0122 	strd	r0, r1, [r3, #136]	@ 0x88
		if(motor->pid.integral < -1*motor->pid.maxIntegral) motor->pid.integral = -1*motor->pid.maxIntegral;
 80025fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025fe:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002602:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002606:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800260a:	2400      	movs	r4, #0
 800260c:	4255      	negs	r5, r2
 800260e:	f8c7 50b0 	str.w	r5, [r7, #176]	@ 0xb0
 8002612:	eb64 0303 	sbc.w	r3, r4, r3
 8002616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800261a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800261e:	4623      	mov	r3, r4
 8002620:	4298      	cmp	r0, r3
 8002622:	462b      	mov	r3, r5
 8002624:	eb71 0303 	sbcs.w	r3, r1, r3
 8002628:	da11      	bge.n	800264e <Motor_Calculate+0x426>
 800262a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800262e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002632:	2100      	movs	r1, #0
 8002634:	4250      	negs	r0, r2
 8002636:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 800263a:	eb61 0303 	sbc.w	r3, r1, r3
 800263e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002642:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002646:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800264a:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//use derivitave filter to calculate derivative term
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 800264e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002652:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8002656:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800265a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800265e:	fb02 f501 	mul.w	r5, r2, r1
 8002662:	fb00 f403 	mul.w	r4, r0, r3
 8002666:	442c      	add	r4, r5
 8002668:	fba0 2302 	umull	r2, r3, r0, r2
 800266c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002670:	4613      	mov	r3, r2
 8002672:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002676:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800267a:	18e3      	adds	r3, r4, r3
 800267c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002680:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800268c:	f7fd fdc4 	bl	8000218 <__aeabi_ldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4614      	mov	r4, r2
 8002696:	461d      	mov	r5, r3
								+ (100-motor->pid.filterGain)*(error - motor->pid.previousError)/100;
 8002698:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800269c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80026a0:	2100      	movs	r1, #0
 80026a2:	f1d2 0064 	rsbs	r0, r2, #100	@ 0x64
 80026a6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 80026aa:	eb61 0303 	sbc.w	r3, r1, r3
 80026ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80026b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026b6:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 80026ba:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80026be:	1a16      	subs	r6, r2, r0
 80026c0:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 80026c4:	eb63 0301 	sbc.w	r3, r3, r1
 80026c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026d0:	464b      	mov	r3, r9
 80026d2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80026d6:	4652      	mov	r2, sl
 80026d8:	fb02 f203 	mul.w	r2, r2, r3
 80026dc:	465b      	mov	r3, fp
 80026de:	4641      	mov	r1, r8
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	4642      	mov	r2, r8
 80026e8:	4651      	mov	r1, sl
 80026ea:	fba2 1201 	umull	r1, r2, r2, r1
 80026ee:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80026f2:	460a      	mov	r2, r1
 80026f4:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 80026f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80026fc:	4413      	add	r3, r2
 80026fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002702:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800270e:	f7fd fd83 	bl	8000218 <__aeabi_ldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 8002716:	18a1      	adds	r1, r4, r2
 8002718:	64b9      	str	r1, [r7, #72]	@ 0x48
 800271a:	eb45 0303 	adc.w	r3, r5, r3
 800271e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002720:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002724:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

		int64_t derivative = (currentFilter) * 1000/PID_CALC_TIMING; // Derivative term
 8002728:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	1894      	adds	r4, r2, r2
 8002732:	643c      	str	r4, [r7, #64]	@ 0x40
 8002734:	415b      	adcs	r3, r3
 8002736:	647b      	str	r3, [r7, #68]	@ 0x44
 8002738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800273c:	1814      	adds	r4, r2, r0
 800273e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002740:	414b      	adcs	r3, r1
 8002742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 8002750:	4634      	mov	r4, r6
 8002752:	00e3      	lsls	r3, r4, #3
 8002754:	462c      	mov	r4, r5
 8002756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800275a:	462c      	mov	r4, r5
 800275c:	00e2      	lsls	r2, r4, #3
 800275e:	4614      	mov	r4, r2
 8002760:	461d      	mov	r5, r3
 8002762:	4623      	mov	r3, r4
 8002764:	181b      	adds	r3, r3, r0
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
 8002768:	462b      	mov	r3, r5
 800276a:	eb41 0303 	adc.w	r3, r1, r3
 800276e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002770:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002774:	460b      	mov	r3, r1
 8002776:	18db      	adds	r3, r3, r3
 8002778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800277a:	4613      	mov	r3, r2
 800277c:	eb42 0303 	adc.w	r3, r2, r3
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002782:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002786:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		motor->pid.previousFilter = currentFilter;
 800278a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800278e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002792:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		motor->pid.previousError = error;
 8002796:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800279a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800279e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		// Compute the new PWM value using the PID formula
		int64_t output = motor->pid.Kp * error + motor->pid.Ki * motor->pid.integral + motor->pid.Kd * derivative;
 80027a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027aa:	17da      	asrs	r2, r3, #31
 80027ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80027b8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027bc:	462a      	mov	r2, r5
 80027be:	fb02 f203 	mul.w	r2, r2, r3
 80027c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80027c6:	4621      	mov	r1, r4
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	441a      	add	r2, r3
 80027ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80027d2:	4621      	mov	r1, r4
 80027d4:	fba3 1301 	umull	r1, r3, r3, r1
 80027d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027dc:	460b      	mov	r3, r1
 80027de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027e6:	18d3      	adds	r3, r2, r3
 80027e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027f4:	17da      	asrs	r2, r3, #31
 80027f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027fa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002802:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002806:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800280a:	4629      	mov	r1, r5
 800280c:	fb02 f001 	mul.w	r0, r2, r1
 8002810:	4621      	mov	r1, r4
 8002812:	fb01 f103 	mul.w	r1, r1, r3
 8002816:	4401      	add	r1, r0
 8002818:	4620      	mov	r0, r4
 800281a:	fba0 2302 	umull	r2, r3, r0, r2
 800281e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002822:	4613      	mov	r3, r2
 8002824:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800282c:	18cb      	adds	r3, r1, r3
 800282e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002832:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8002836:	4623      	mov	r3, r4
 8002838:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 800283c:	4602      	mov	r2, r0
 800283e:	189b      	adds	r3, r3, r2
 8002840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002844:	460b      	mov	r3, r1
 8002846:	462a      	mov	r2, r5
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002850:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002854:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002858:	17da      	asrs	r2, r3, #31
 800285a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800285c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800285e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002862:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002866:	462a      	mov	r2, r5
 8002868:	fb02 f203 	mul.w	r2, r2, r3
 800286c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002870:	4621      	mov	r1, r4
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	441a      	add	r2, r3
 8002878:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800287c:	4621      	mov	r1, r4
 800287e:	fba3 1301 	umull	r1, r3, r3, r1
 8002882:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002886:	460b      	mov	r3, r1
 8002888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800288c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002896:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800289a:	4623      	mov	r3, r4
 800289c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80028a0:	4602      	mov	r2, r0
 80028a2:	189b      	adds	r3, r3, r2
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	460b      	mov	r3, r1
 80028a8:	462a      	mov	r2, r5
 80028aa:	eb42 0303 	adc.w	r3, r2, r3
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80028b4:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150

		// Clamp the output to the valid PWM range
		if(motor->pid.set_speed > 0) {
 80028b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028bc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80028c0:	2a01      	cmp	r2, #1
 80028c2:	f173 0300 	sbcs.w	r3, r3, #0
 80028c6:	db16      	blt.n	80028f6 <Motor_Calculate+0x6ce>
			if (output > OUTPUT_MAX_VAL) output = OUTPUT_MAX_VAL;
 80028c8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80028cc:	495f      	ldr	r1, [pc, #380]	@ (8002a4c <Motor_Calculate+0x824>)
 80028ce:	428a      	cmp	r2, r1
 80028d0:	f173 0300 	sbcs.w	r3, r3, #0
 80028d4:	db04      	blt.n	80028e0 <Motor_Calculate+0x6b8>
 80028d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a50 <Motor_Calculate+0x828>)
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output < 0) output = 0;
 80028e0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da37      	bge.n	8002958 <Motor_Calculate+0x730>
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 80028f4:	e030      	b.n	8002958 <Motor_Calculate+0x730>
		}
		else if(motor->pid.set_speed < 0) {
 80028f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028fa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da24      	bge.n	800294c <Motor_Calculate+0x724>
			if (output < -OUTPUT_MAX_VAL) output = -OUTPUT_MAX_VAL;
 8002902:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002906:	4953      	ldr	r1, [pc, #332]	@ (8002a54 <Motor_Calculate+0x82c>)
 8002908:	428a      	cmp	r2, r1
 800290a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800290e:	da04      	bge.n	800291a <Motor_Calculate+0x6f2>
 8002910:	4a50      	ldr	r2, [pc, #320]	@ (8002a54 <Motor_Calculate+0x82c>)
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output > 0) output = 0;
 800291a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800291e:	2a01      	cmp	r2, #1
 8002920:	f173 0300 	sbcs.w	r3, r3, #0
 8002924:	db05      	blt.n	8002932 <Motor_Calculate+0x70a>
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			output*=-1;
 8002932:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002936:	2100      	movs	r1, #0
 8002938:	4250      	negs	r0, r2
 800293a:	61b8      	str	r0, [r7, #24]
 800293c:	eb61 0303 	sbc.w	r3, r1, r3
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002946:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 800294a:	e005      	b.n	8002958 <Motor_Calculate+0x730>
		}
		else {
			output = 0;
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		}

		//shift the output itself to avoid the deadband range of the motor.
		//output is also divided by a factor to allow for more granular kp, ki, and kd values
		output = output/OUTPUT_TO_PWM_MULT + PWM_MIN_VAL;
 8002958:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800295c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f7fd fc58 	bl	8000218 <__aeabi_ldivmod>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	f112 01af 	adds.w	r1, r2, #175	@ 0xaf
 8002970:	6139      	str	r1, [r7, #16]
 8002972:	f143 0300 	adc.w	r3, r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800297c:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(output - motor->pid.pwmVal > PWM_MAX_CHANGE) output = motor->pid.pwmVal + PWM_MAX_CHANGE;
 8002980:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002984:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002988:	b21b      	sxth	r3, r3
 800298a:	17da      	asrs	r2, r3, #31
 800298c:	673b      	str	r3, [r7, #112]	@ 0x70
 800298e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002990:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002994:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002998:	4621      	mov	r1, r4
 800299a:	1a51      	subs	r1, r2, r1
 800299c:	66b9      	str	r1, [r7, #104]	@ 0x68
 800299e:	4629      	mov	r1, r5
 80029a0:	eb63 0301 	sbc.w	r3, r3, r1
 80029a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029a6:	f240 3321 	movw	r3, #801	@ 0x321
 80029aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029ae:	4602      	mov	r2, r0
 80029b0:	429a      	cmp	r2, r3
 80029b2:	460b      	mov	r3, r1
 80029b4:	f173 0300 	sbcs.w	r3, r3, #0
 80029b8:	db0c      	blt.n	80029d4 <Motor_Calculate+0x7ac>
 80029ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029be:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80029c2:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80029c6:	17da      	asrs	r2, r3, #31
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	60fa      	str	r2, [r7, #12]
 80029cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80029d0:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(motor->pid.pwmVal - output > PWM_MAX_CHANGE) output = motor->pid.pwmVal - PWM_MAX_CHANGE;
 80029d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029d8:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80029dc:	b21b      	sxth	r3, r3
 80029de:	17da      	asrs	r2, r3, #31
 80029e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80029e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80029e4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80029e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029ec:	4621      	mov	r1, r4
 80029ee:	1a89      	subs	r1, r1, r2
 80029f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029f2:	4629      	mov	r1, r5
 80029f4:	eb61 0303 	sbc.w	r3, r1, r3
 80029f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029fa:	f240 3321 	movw	r3, #801	@ 0x321
 80029fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002a02:	4602      	mov	r2, r0
 8002a04:	429a      	cmp	r2, r3
 8002a06:	460b      	mov	r3, r1
 8002a08:	f173 0300 	sbcs.w	r3, r3, #0
 8002a0c:	db0c      	blt.n	8002a28 <Motor_Calculate+0x800>
 8002a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a12:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002a16:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002a1a:	17da      	asrs	r2, r3, #31
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002a24:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		// Apply the PWM value
		Motor_SetPwm(motor, (int16_t)output);
 8002a28:	f9b7 3150 	ldrsh.w	r3, [r7, #336]	@ 0x150
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002a32:	f7ff facd 	bl	8001fd0 <Motor_SetPwm>

		// Update the last update time
		motor->pid.lastUpdateTime = currentTime;
 8002a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a3a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002a3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
}
 8002a42:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a4c:	000c96a9 	.word	0x000c96a9
 8002a50:	000c96a8 	.word	0x000c96a8
 8002a54:	fff36958 	.word	0xfff36958

08002a58 <Motor_Update>:

// Update the motor state (optional, e.g., for monitoring or control logic)
void Motor_Update(Motor *motor) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

	CalculateHallTiming(motor);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f944 	bl	8002cee <CalculateHallTiming>

	ReadHallSensors(motor);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f911 	bl	8002c8e <ReadHallSensors>

	bool direction = motor->isDirInverted ? !motor->direction : motor->direction;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00e      	beq.n	8002a94 <Motor_Update+0x3c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e007      	b.n	8002aa4 <Motor_Update+0x4c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf14      	ite	ne
 8002a9e:	2301      	movne	r3, #1
 8002aa0:	2300      	moveq	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	73fb      	strb	r3, [r7, #15]

	if(motor->hallState == motor->commutationOrder[0]) {
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d106      	bne.n	8002ac4 <Motor_Update+0x6c>
		SetPhases(motor, PHASE_A_IDX, PHASE_C_IDX, direction);
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	2100      	movs	r1, #0
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f84f 	bl	8002b60 <SetPhases>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
	}
	else if(motor->hallState == motor->commutationOrder[5]) {
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
	}
}
 8002ac2:	e049      	b.n	8002b58 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[1]) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d106      	bne.n	8002ae2 <Motor_Update+0x8a>
		SetPhases(motor, PHASE_A_IDX, PHASE_B_IDX, direction);
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2100      	movs	r1, #0
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f840 	bl	8002b60 <SetPhases>
}
 8002ae0:	e03a      	b.n	8002b58 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[2]) {
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d106      	bne.n	8002b00 <Motor_Update+0xa8>
		SetPhases(motor, PHASE_C_IDX, PHASE_B_IDX, direction);
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2201      	movs	r2, #1
 8002af6:	2102      	movs	r1, #2
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f831 	bl	8002b60 <SetPhases>
}
 8002afe:	e02b      	b.n	8002b58 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[3]) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d106      	bne.n	8002b1e <Motor_Update+0xc6>
		SetPhases(motor, PHASE_C_IDX, PHASE_A_IDX, direction);
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2102      	movs	r1, #2
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f822 	bl	8002b60 <SetPhases>
}
 8002b1c:	e01c      	b.n	8002b58 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[4]) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d106      	bne.n	8002b3c <Motor_Update+0xe4>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2101      	movs	r1, #1
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f813 	bl	8002b60 <SetPhases>
}
 8002b3a:	e00d      	b.n	8002b58 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[5]) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d105      	bne.n	8002b58 <Motor_Update+0x100>
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	2101      	movs	r1, #1
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f804 	bl	8002b60 <SetPhases>
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <SetPhases>:

void SetPhases(Motor *motor, uint8_t highPhase, uint8_t lowPhase, bool direction) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	70fb      	strb	r3, [r7, #3]
 8002b72:	460b      	mov	r3, r1
 8002b74:	70bb      	strb	r3, [r7, #2]
 8002b76:	4613      	mov	r3, r2
 8002b78:	707b      	strb	r3, [r7, #1]
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d82b      	bhi.n	8002bd8 <SetPhases+0x78>
 8002b80:	78bb      	ldrb	r3, [r7, #2]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d828      	bhi.n	8002bd8 <SetPhases+0x78>
	if(highPhase == lowPhase) return;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	78bb      	ldrb	r3, [r7, #2]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d026      	beq.n	8002bdc <SetPhases+0x7c>

	uint8_t extraPhase = PHASE_A_IDX + PHASE_B_IDX + PHASE_C_IDX - highPhase - lowPhase;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	78bb      	ldrb	r3, [r7, #2]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f1c3 0303 	rsb	r3, r3, #3
 8002b9a:	73fb      	strb	r3, [r7, #15]

	SetPhase(motor, extraPhase, false, false);
 8002b9c:	7bf9      	ldrb	r1, [r7, #15]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f81e 	bl	8002be4 <SetPhase>

	SetPhase(motor, highPhase, true, direction);
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	78f9      	ldrb	r1, [r7, #3]
 8002bac:	2201      	movs	r2, #1
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f818 	bl	8002be4 <SetPhase>
	SetPhase(motor, lowPhase, true, !direction);
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f083 0301 	eor.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	78b9      	ldrb	r1, [r7, #2]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f807 	bl	8002be4 <SetPhase>
 8002bd6:	e002      	b.n	8002bde <SetPhases+0x7e>
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <SetPhases+0x7e>
	if(highPhase == lowPhase) return;
 8002bdc:	bf00      	nop

}
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <SetPhase>:

void SetPhase(Motor *motor, uint8_t phase,  bool OnorOff, bool HighOrLow) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	70fb      	strb	r3, [r7, #3]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	70bb      	strb	r3, [r7, #2]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	707b      	strb	r3, [r7, #1]
	if(OnorOff) {
 8002bfe:	78bb      	ldrb	r3, [r7, #2]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d02c      	beq.n	8002c5e <SetPhase+0x7a>
		if(HighOrLow) {
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d014      	beq.n	8002c34 <SetPhase+0x50>
			HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3218      	adds	r2, #24
 8002c14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f007 fea3 	bl	800a964 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(motor->Timer, motor->phaseChannel[phase]);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3218      	adds	r2, #24
 8002c28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f006 f82b 	bl	8008c88 <HAL_TIM_PWM_Start>
		}
	} else {
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
	}
}
 8002c32:	e028      	b.n	8002c86 <SetPhase+0xa2>
			HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3218      	adds	r2, #24
 8002c3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c42:	4619      	mov	r1, r3
 8002c44:	f006 f932 	bl	8008eac <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(motor->Timer, motor->phaseChannel[phase]);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3218      	adds	r2, #24
 8002c52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f007 fdc2 	bl	800a7e0 <HAL_TIMEx_PWMN_Start>
}
 8002c5c:	e013      	b.n	8002c86 <SetPhase+0xa2>
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3218      	adds	r2, #24
 8002c68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f006 f91d 	bl	8008eac <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3218      	adds	r2, #24
 8002c7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f007 fe6f 	bl	800a964 <HAL_TIMEx_PWMN_Stop>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <ReadHallSensors>:

void ReadHallSensors(Motor *motor) {
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8a9b      	ldrh	r3, [r3, #20]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f004 f921 	bl	8006ee8 <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall2_Port, motor->Hall2_Pin)) << 1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8b9b      	ldrh	r3, [r3, #28]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f004 f917 	bl	8006ee8 <HAL_GPIO_ReadPin>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	4323      	orrs	r3, r4
 8002cc2:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall3_Port, motor->Hall3_Pin) << 2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f004 f90a 	bl	8006ee8 <HAL_GPIO_ReadPin>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	4323      	orrs	r3, r4
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	b2da      	uxtb	r2, r3
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd90      	pop	{r4, r7, pc}

08002cee <CalculateHallTiming>:


void CalculateHallTiming(Motor *motor) {
 8002cee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	uint32_t currentMicroTime = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]

	if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	7f1b      	ldrb	r3, [r3, #28]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d109      	bne.n	8002d1a <CalculateHallTiming+0x2c>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall1_Channel);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f006 ff2f 	bl	8009b74 <HAL_TIM_ReadCapturedValue>
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	e01c      	b.n	8002d54 <CalculateHallTiming+0x66>
	} else if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1e:	7f1b      	ldrb	r3, [r3, #28]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d109      	bne.n	8002d38 <CalculateHallTiming+0x4a>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall2_Channel);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	885b      	ldrh	r3, [r3, #2]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f006 ff20 	bl	8009b74 <HAL_TIM_ReadCapturedValue>
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	e00d      	b.n	8002d54 <CalculateHallTiming+0x66>
	} else if (motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	7f1b      	ldrb	r3, [r3, #28]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d108      	bne.n	8002d54 <CalculateHallTiming+0x66>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall3_Channel);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	889b      	ldrh	r3, [r3, #4]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f006 ff11 	bl	8009b74 <HAL_TIM_ReadCapturedValue>
 8002d52:	60f8      	str	r0, [r7, #12]
	}

	motor->pid.totalHallTime += currentMicroTime - motor->pid.lastHallTime;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5c:	68f9      	ldr	r1, [r7, #12]
 8002d5e:	1acb      	subs	r3, r1, r3
 8002d60:	441a      	add	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	675a      	str	r2, [r3, #116]	@ 0x74

	motor->pid.lastHallTime = currentMicroTime;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	671a      	str	r2, [r3, #112]	@ 0x70

	if(motor->direction) motor->pid.hallCount++;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <CalculateHallTiming+0x9e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002d7c:	f112 0801 	adds.w	r8, r2, #1
 8002d80:	f143 0900 	adc.w	r9, r3, #0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	e9c3 8918 	strd	r8, r9, [r3, #96]	@ 0x60
	else motor->pid.hallCount--;
}
 8002d8a:	e008      	b.n	8002d9e <CalculateHallTiming+0xb0>
	else motor->pid.hallCount--;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002d92:	1e54      	subs	r4, r2, #1
 8002d94:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	e9c3 4518 	strd	r4, r5, [r3, #96]	@ 0x60
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002da8 <CalculateDistance>:

void CalculateDistance(Motor *motor) {
 8002da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
	motor->distance = (int16_t)(motor->pid.hallCount * RPM_INPUT_DIVISOR / HALL_TICKS_PER_REV);
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	e9d1 4518 	ldrd	r4, r5, [r1, #96]	@ 0x60
 8002db8:	4620      	mov	r0, r4
 8002dba:	4629      	mov	r1, r5
 8002dbc:	1806      	adds	r6, r0, r0
 8002dbe:	603e      	str	r6, [r7, #0]
 8002dc0:	4149      	adcs	r1, r1
 8002dc2:	6079      	str	r1, [r7, #4]
 8002dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc8:	1902      	adds	r2, r0, r4
 8002dca:	eb41 0305 	adc.w	r3, r1, r5
 8002dce:	f04f 0000 	mov.w	r0, #0
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	0159      	lsls	r1, r3, #5
 8002dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ddc:	0150      	lsls	r0, r2, #5
 8002dde:	eb12 0800 	adds.w	r8, r2, r0
 8002de2:	eb43 0901 	adc.w	r9, r3, r1
 8002de6:	eb18 0a04 	adds.w	sl, r8, r4
 8002dea:	eb49 0b05 	adc.w	fp, r9, r5
 8002dee:	f44f 7246 	mov.w	r2, #792	@ 0x318
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	4650      	mov	r0, sl
 8002df8:	4659      	mov	r1, fp
 8002dfa:	f7fd fa0d 	bl	8000218 <__aeabi_ldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	b212      	sxth	r2, r2
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e12 <Motor_GetDistance>:

void Motor_GetDistance(Motor *motor, int16_t *distance) {
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
	*distance = motor->distance;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	801a      	strh	r2, [r3, #0]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <Motor_GetSpeed>:

void Motor_GetSpeed(Motor *motor, int16_t *speed) {
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
	*speed = motor->current_speed;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002e42:	b212      	sxth	r2, r2
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	801a      	strh	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <Motor_GetFaultStatus>:

bool Motor_GetFaultStatus(Motor *motor) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	motor->isFault = !HAL_GPIO_ReadPin(motor->Fault_Port, motor->Fault_Pin);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	899b      	ldrh	r3, [r3, #12]
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f004 f83e 	bl	8006ee8 <HAL_GPIO_ReadPin>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	if(motor->isFault) motor->faultRecovery = true;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <Motor_GetFaultStatus+0x3c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return motor->isFault;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <Motor_CurrFaultHandler>:

void Motor_CurrFaultHandler(Motor *motor) {
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
	if(motor->faultRecovery) {
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <Motor_CurrFaultHandler+0x1a>
		//do some stuff. right now. going to just reset and continue normally.
		motor->faultRecovery = false;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <RobotSystem_Init>:

#include "robot_system.h"

// Initialize the robot system with configurations for the left and right motors

void RobotSystem_Init(RobotSystem *robotSystem, Motor leftMotorConfig, Motor rightMotorConfig) {
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	f107 0110 	add.w	r1, r7, #16
 8002ed2:	e881 000c 	stmia.w	r1, {r2, r3}
    // Copy configurations into the robot system
    robotSystem->leftWheel = leftMotorConfig;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	22c0      	movs	r2, #192	@ 0xc0
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f009 fc51 	bl	800c788 <memcpy>
    robotSystem->rightWheel = rightMotorConfig;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	33c0      	adds	r3, #192	@ 0xc0
 8002eea:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8002eee:	22c0      	movs	r2, #192	@ 0xc0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f009 fc49 	bl	800c788 <memcpy>

    HAL_DAC_Start(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f002 fabd 	bl	8005484 <HAL_DAC_Start>

    RobotSystem_SetCurrentLimit(robotSystem, MAX_CURRENT_LIMIT);
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f927 	bl	8003160 <RobotSystem_SetCurrentLimit>

    // Initialize the left and right motors
    Motor_Init(&robotSystem->leftWheel);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe ff95 	bl	8001e44 <Motor_Init>
    Motor_Init(&robotSystem->rightWheel);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	33c0      	adds	r3, #192	@ 0xc0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe ff90 	bl	8001e44 <Motor_Init>

    RobotSystem_Enable(robotSystem);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f8d4 	bl	80030d2 <RobotSystem_Enable>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f34:	b002      	add	sp, #8
 8002f36:	4770      	bx	lr

08002f38 <RobotSystem_SetSpeed>:

// Set the speeds of the left and right motors
void RobotSystem_SetSpeed(RobotSystem *robotSystem, int16_t leftSpeed, int16_t rightSpeed) {
 8002f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	807b      	strh	r3, [r7, #2]
 8002f46:	4613      	mov	r3, r2
 8002f48:	803b      	strh	r3, [r7, #0]
	if(robotSystem->motorsEnabled) {
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d017      	beq.n	8002f84 <RobotSystem_SetSpeed+0x4c>
		Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f5a:	17da      	asrs	r2, r3, #31
 8002f5c:	4698      	mov	r8, r3
 8002f5e:	4691      	mov	r9, r2
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	4608      	mov	r0, r1
 8002f66:	f7fe ffe5 	bl	8001f34 <Motor_SetSpeed>
		Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002f70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f74:	17da      	asrs	r2, r3, #31
 8002f76:	461c      	mov	r4, r3
 8002f78:	4615      	mov	r5, r2
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	4608      	mov	r0, r1
 8002f80:	f7fe ffd8 	bl	8001f34 <Motor_SetSpeed>
	}
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002f8e <RobotSystem_SetLeftSpeed>:

void RobotSystem_SetLeftSpeed(RobotSystem *robotSystem, int16_t leftSpeed) {
 8002f8e:	b5b0      	push	{r4, r5, r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	807b      	strh	r3, [r7, #2]
	if(robotSystem->motorsEnabled) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <RobotSystem_SetLeftSpeed+0x2c>
		Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002faa:	17da      	asrs	r2, r3, #31
 8002fac:	461c      	mov	r4, r3
 8002fae:	4615      	mov	r5, r2
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	462b      	mov	r3, r5
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	f7fe ffbd 	bl	8001f34 <Motor_SetSpeed>
	}
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}

08002fc2 <RobotSystem_SetRightSpeed>:

void RobotSystem_SetRightSpeed(RobotSystem *robotSystem, int16_t rightSpeed) {
 8002fc2:	b5b0      	push	{r4, r5, r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	807b      	strh	r3, [r7, #2]
	if(robotSystem->motorsEnabled) {
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <RobotSystem_SetRightSpeed+0x30>
		Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002fde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fe2:	17da      	asrs	r2, r3, #31
 8002fe4:	461c      	mov	r4, r3
 8002fe6:	4615      	mov	r5, r2
 8002fe8:	4622      	mov	r2, r4
 8002fea:	462b      	mov	r3, r5
 8002fec:	4608      	mov	r0, r1
 8002fee:	f7fe ffa1 	bl	8001f34 <Motor_SetSpeed>
	}
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdb0      	pop	{r4, r5, r7, pc}

08002ffa <RobotSystem_Stop>:

// Stop both motors in the robot system
void RobotSystem_Stop(RobotSystem *robotSystem) {
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
    Motor_Stop(&robotSystem->leftWheel);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f8ee 	bl	80021e6 <Motor_Stop>
    Motor_Stop(&robotSystem->rightWheel);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	33c0      	adds	r3, #192	@ 0xc0
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f8e9 	bl	80021e6 <Motor_Stop>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <RobotSystem_GetMotorPosition>:

void RobotSystem_GetMotorPosition(RobotSystem *robotSystem, int16_t *leftPos, int16_t *rightPos) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
	Motor_GetDistance(&robotSystem->leftWheel, leftPos);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fef0 	bl	8002e12 <Motor_GetDistance>
	Motor_GetDistance(&robotSystem->rightWheel, rightPos);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	33c0      	adds	r3, #192	@ 0xc0
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff feea 	bl	8002e12 <Motor_GetDistance>
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <RobotSystem_GetMotorSpeed>:

void RobotSystem_GetMotorSpeed(RobotSystem *robotSystem, int16_t *leftSpeed, int16_t *rightSpeed) {
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
	Motor_GetSpeed(&robotSystem->leftWheel, leftSpeed);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff feeb 	bl	8002e32 <Motor_GetSpeed>
	Motor_GetSpeed(&robotSystem->rightWheel, rightSpeed);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	33c0      	adds	r3, #192	@ 0xc0
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fee5 	bl	8002e32 <Motor_GetSpeed>
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <RobotSystem_Calculate>:

void RobotSystem_Calculate(RobotSystem *robotSystem) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	Motor_Calculate(&robotSystem->leftWheel);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff f8d4 	bl	8002228 <Motor_Calculate>
	Motor_Calculate(&robotSystem->rightWheel);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	33c0      	adds	r3, #192	@ 0xc0
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f8cf 	bl	8002228 <Motor_Calculate>
	RobotSystem_WheelFaultHandler(robotSystem);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8a4 	bl	80031d8 <RobotSystem_WheelFaultHandler>
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <RobotSystem_InterruptHandler>:

void RobotSystem_InterruptHandler(RobotSystem *robotSystem, TIM_HandleTypeDef *htim) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
	if (htim == robotSystem->leftWheel.HallTimer) {
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d103      	bne.n	80030b4 <RobotSystem_InterruptHandler+0x1c>
		Motor_Update(&robotSystem->leftWheel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fcd2 	bl	8002a58 <Motor_Update>
	}

	if (htim == robotSystem->rightWheel.HallTimer) {
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d104      	bne.n	80030ca <RobotSystem_InterruptHandler+0x32>
		Motor_Update(&robotSystem->rightWheel);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	33c0      	adds	r3, #192	@ 0xc0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fcc7 	bl	8002a58 <Motor_Update>
	}
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <RobotSystem_Enable>:

void RobotSystem_Enable (RobotSystem *robotSystem) {
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
	robotSystem->motorsEnabled = true;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	RobotSystem_SetEnablePin(robotSystem, true);
 80030e2:	2101      	movs	r1, #1
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f81d 	bl	8003124 <RobotSystem_SetEnablePin>
	HAL_Delay(20);
 80030ea:	2014      	movs	r0, #20
 80030ec:	f000 ff76 	bl	8003fdc <HAL_Delay>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <RobotSystem_Disable>:

void RobotSystem_Disable (RobotSystem *robotSystem) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	robotSystem->motorsEnabled = false;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	RobotSystem_Stop(robotSystem);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff76 	bl	8002ffa <RobotSystem_Stop>
	RobotSystem_SetEnablePin(robotSystem, false);
 800310e:	2100      	movs	r1, #0
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f807 	bl	8003124 <RobotSystem_SetEnablePin>

	HAL_Delay(20);
 8003116:	2014      	movs	r0, #20
 8003118:	f000 ff60 	bl	8003fdc <HAL_Delay>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <RobotSystem_SetEnablePin>:

void RobotSystem_SetEnablePin(RobotSystem *robotSystem, bool onOrOff) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
	bool setValue = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
	if(onOrOff) setValue = true;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <RobotSystem_SetEnablePin+0x1c>
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	e001      	b.n	8003144 <RobotSystem_SetEnablePin+0x20>
	else setValue = false;
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(robotSystem->Enable_Port, robotSystem->Enable_Pin, setValue);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	4619      	mov	r1, r3
 8003154:	f003 fee0 	bl	8006f18 <HAL_GPIO_WritePin>
	//__HAL_TIM_SET_COMPARE(robotSystem->FaultTimer, TIM_CHANNEL_1, setValue);
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <RobotSystem_SetCurrentLimit>:

void RobotSystem_SetCurrentLimit(RobotSystem *robotSystem, uint16_t currentLimit) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
	if(currentLimit > MAX_CURRENT_LIMIT) {
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d901      	bls.n	8003176 <RobotSystem_SetCurrentLimit+0x16>
		currentLimit = MAX_CURRENT_LIMIT;
 8003172:	2305      	movs	r3, #5
 8003174:	807b      	strh	r3, [r7, #2]
	}
	robotSystem->currentLimit = currentLimit;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	f8a3 218e 	strh.w	r2, [r3, #398]	@ 0x18e

	uint32_t voltage = currentLimit * SHUNT_RESISTOR * RESISTORS / RESISTOR2;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	f245 32fc 	movw	r2, #21500	@ 0x53fc
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <RobotSystem_SetCurrentLimit+0x70>)
 800318a:	fb82 1203 	smull	r1, r2, r2, r3
 800318e:	10d2      	asrs	r2, r2, #3
 8003190:	17db      	asrs	r3, r3, #31
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	60fb      	str	r3, [r7, #12]
	uint32_t dac_value = 4095 * voltage / 3300; // Convert voltage to digital value
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	031b      	lsls	r3, r3, #12
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <RobotSystem_SetCurrentLimit+0x74>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel, DAC_ALIGN_12B_R, dac_value);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 0188 	ldr.w	r0, [r3, #392]	@ 0x188
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 80031b6:	4619      	mov	r1, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f002 f9ce 	bl	800555c <HAL_DAC_SetValue>
	HAL_Delay(25);
 80031c0:	2019      	movs	r0, #25
 80031c2:	f000 ff0b 	bl	8003fdc <HAL_Delay>
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	1b4e81b5 	.word	0x1b4e81b5
 80031d4:	09ee009f 	.word	0x09ee009f

080031d8 <RobotSystem_WheelFaultHandler>:

void RobotSystem_WheelFaultHandler(RobotSystem *robotSystem) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	if(Motor_GetFaultStatus(&robotSystem->leftWheel)) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fe36 	bl	8002e54 <Motor_GetFaultStatus>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <RobotSystem_WheelFaultHandler+0x1c>
		RobotSystem_ResetEnablePin(robotSystem);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f80f 	bl	8003212 <RobotSystem_ResetEnablePin>
		//RobotSystem_SetLeftSpeed(robotSystem, 0);
	}

	if(Motor_GetFaultStatus(&robotSystem->rightWheel)) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	33c0      	adds	r3, #192	@ 0xc0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fe2b 	bl	8002e54 <Motor_GetFaultStatus>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <RobotSystem_WheelFaultHandler+0x32>
		RobotSystem_ResetEnablePin(robotSystem);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f804 	bl	8003212 <RobotSystem_ResetEnablePin>
		//RobotSystem_SetRightSpeed(robotSystem, 0);
	}
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <RobotSystem_ResetEnablePin>:

void RobotSystem_ResetEnablePin(RobotSystem *robotSystem) {
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
	if(robotSystem->motorsEnabled) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <RobotSystem_ResetEnablePin+0x34>
		RobotSystem_SetEnablePin(robotSystem, false);
 8003224:	2100      	movs	r1, #0
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff7c 	bl	8003124 <RobotSystem_SetEnablePin>

		for(uint16_t i = 0; i < 10; i++) {
 800322c:	2300      	movs	r3, #0
 800322e:	81fb      	strh	r3, [r7, #14]
 8003230:	e002      	b.n	8003238 <RobotSystem_ResetEnablePin+0x26>
 8003232:	89fb      	ldrh	r3, [r7, #14]
 8003234:	3301      	adds	r3, #1
 8003236:	81fb      	strh	r3, [r7, #14]
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	2b09      	cmp	r3, #9
 800323c:	d9f9      	bls.n	8003232 <RobotSystem_ResetEnablePin+0x20>

		}
		// Optional: Stop the timer if you want to halt further operation
		RobotSystem_SetEnablePin(robotSystem, true);
 800323e:	2101      	movs	r1, #1
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff6f 	bl	8003124 <RobotSystem_SetEnablePin>
	}
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003254:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <MX_SPI1_Init+0x74>)
 8003256:	4a1c      	ldr	r2, [pc, #112]	@ (80032c8 <MX_SPI1_Init+0x78>)
 8003258:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800325a:	4b1a      	ldr	r3, [pc, #104]	@ (80032c4 <MX_SPI1_Init+0x74>)
 800325c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003260:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003262:	4b18      	ldr	r3, [pc, #96]	@ (80032c4 <MX_SPI1_Init+0x74>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003268:	4b16      	ldr	r3, [pc, #88]	@ (80032c4 <MX_SPI1_Init+0x74>)
 800326a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800326e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003270:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <MX_SPI1_Init+0x74>)
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003276:	4b13      	ldr	r3, [pc, #76]	@ (80032c4 <MX_SPI1_Init+0x74>)
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800327c:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <MX_SPI1_Init+0x74>)
 800327e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003282:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003284:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <MX_SPI1_Init+0x74>)
 8003286:	2218      	movs	r2, #24
 8003288:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800328a:	4b0e      	ldr	r3, [pc, #56]	@ (80032c4 <MX_SPI1_Init+0x74>)
 800328c:	2200      	movs	r2, #0
 800328e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <MX_SPI1_Init+0x74>)
 8003292:	2200      	movs	r2, #0
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <MX_SPI1_Init+0x74>)
 8003298:	2200      	movs	r2, #0
 800329a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <MX_SPI1_Init+0x74>)
 800329e:	2207      	movs	r2, #7
 80032a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032a2:	4b08      	ldr	r3, [pc, #32]	@ (80032c4 <MX_SPI1_Init+0x74>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032a8:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <MX_SPI1_Init+0x74>)
 80032aa:	2208      	movs	r2, #8
 80032ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032ae:	4805      	ldr	r0, [pc, #20]	@ (80032c4 <MX_SPI1_Init+0x74>)
 80032b0:	f004 fe8e 	bl	8007fd0 <HAL_SPI_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032ba:	f7fe fdbd 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000708 	.word	0x20000708
 80032c8:	40013000 	.word	0x40013000

080032cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a17      	ldr	r2, [pc, #92]	@ (8003348 <HAL_SPI_MspInit+0x7c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d127      	bne.n	800333e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ee:	4b17      	ldr	r3, [pc, #92]	@ (800334c <HAL_SPI_MspInit+0x80>)
 80032f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f2:	4a16      	ldr	r2, [pc, #88]	@ (800334c <HAL_SPI_MspInit+0x80>)
 80032f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80032fa:	4b14      	ldr	r3, [pc, #80]	@ (800334c <HAL_SPI_MspInit+0x80>)
 80032fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003306:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_SPI_MspInit+0x80>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	4a10      	ldr	r2, [pc, #64]	@ (800334c <HAL_SPI_MspInit+0x80>)
 800330c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <HAL_SPI_MspInit+0x80>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800331e:	231c      	movs	r3, #28
 8003320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800332e:	2305      	movs	r3, #5
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	4619      	mov	r1, r3
 8003338:	4805      	ldr	r0, [pc, #20]	@ (8003350 <HAL_SPI_MspInit+0x84>)
 800333a:	f003 fc53 	bl	8006be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800333e:	bf00      	nop
 8003340:	3728      	adds	r7, #40	@ 0x28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40013000 	.word	0x40013000
 800334c:	40021000 	.word	0x40021000
 8003350:	48001800 	.word	0x48001800

08003354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <HAL_MspInit+0x44>)
 800335c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335e:	4a0e      	ldr	r2, [pc, #56]	@ (8003398 <HAL_MspInit+0x44>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6613      	str	r3, [r2, #96]	@ 0x60
 8003366:	4b0c      	ldr	r3, [pc, #48]	@ (8003398 <HAL_MspInit+0x44>)
 8003368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <HAL_MspInit+0x44>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <HAL_MspInit+0x44>)
 8003378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337c:	6593      	str	r3, [r2, #88]	@ 0x58
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_MspInit+0x44>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800338a:	f003 fe99 	bl	80070c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000

0800339c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <NMI_Handler+0x4>

080033a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <HardFault_Handler+0x4>

080033ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b0:	bf00      	nop
 80033b2:	e7fd      	b.n	80033b0 <MemManage_Handler+0x4>

080033b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033b8:	bf00      	nop
 80033ba:	e7fd      	b.n	80033b8 <BusFault_Handler+0x4>

080033bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <UsageFault_Handler+0x4>

080033c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033f2:	f000 fdd5 	bl	8003fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}

080033fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 80033fe:	2001      	movs	r0, #1
 8003400:	f003 fda2 	bl	8006f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800340c:	4802      	ldr	r0, [pc, #8]	@ (8003418 <DMA1_Channel1_IRQHandler+0x10>)
 800340e:	f002 fc70 	bl	8005cf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000930 	.word	0x20000930

0800341c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003420:	4802      	ldr	r0, [pc, #8]	@ (800342c <FDCAN1_IT0_IRQHandler+0x10>)
 8003422:	f003 f969 	bl	80066f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200004b4 	.word	0x200004b4

08003430 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003434:	4802      	ldr	r0, [pc, #8]	@ (8003440 <TIM2_IRQHandler+0x10>)
 8003436:	f005 ff87 	bl	8009348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200007b8 	.word	0x200007b8

08003444 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003448:	4802      	ldr	r0, [pc, #8]	@ (8003454 <USART2_IRQHandler+0x10>)
 800344a:	f007 fd5d 	bl	800af08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	2000089c 	.word	0x2000089c

08003458 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <TIM5_IRQHandler+0x10>)
 800345e:	f005 ff73 	bl	8009348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000804 	.word	0x20000804

0800346c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <SystemInit+0x20>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003476:	4a05      	ldr	r2, [pc, #20]	@ (800348c <SystemInit+0x20>)
 8003478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800347c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b09c      	sub	sp, #112	@ 0x70
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003496:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	615a      	str	r2, [r3, #20]
 80034c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	2234      	movs	r2, #52	@ 0x34
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f009 f930 	bl	800c730 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034d0:	4b51      	ldr	r3, [pc, #324]	@ (8003618 <MX_TIM1_Init+0x188>)
 80034d2:	4a52      	ldr	r2, [pc, #328]	@ (800361c <MX_TIM1_Init+0x18c>)
 80034d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80034d6:	4b50      	ldr	r3, [pc, #320]	@ (8003618 <MX_TIM1_Init+0x188>)
 80034d8:	2210      	movs	r2, #16
 80034da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003618 <MX_TIM1_Init+0x188>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80034e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003618 <MX_TIM1_Init+0x188>)
 80034e4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80034e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003618 <MX_TIM1_Init+0x188>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034f0:	4b49      	ldr	r3, [pc, #292]	@ (8003618 <MX_TIM1_Init+0x188>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f6:	4b48      	ldr	r3, [pc, #288]	@ (8003618 <MX_TIM1_Init+0x188>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034fc:	4846      	ldr	r0, [pc, #280]	@ (8003618 <MX_TIM1_Init+0x188>)
 80034fe:	f005 fb0b 	bl	8008b18 <HAL_TIM_Base_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003508:	f7fe fc96 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800350c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003510:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003512:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003516:	4619      	mov	r1, r3
 8003518:	483f      	ldr	r0, [pc, #252]	@ (8003618 <MX_TIM1_Init+0x188>)
 800351a:	f006 fa15 	bl	8009948 <HAL_TIM_ConfigClockSource>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003524:	f7fe fc88 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003528:	483b      	ldr	r0, [pc, #236]	@ (8003618 <MX_TIM1_Init+0x188>)
 800352a:	f005 fb4c 	bl	8008bc6 <HAL_TIM_PWM_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003534:	f7fe fc80 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003538:	2300      	movs	r3, #0
 800353a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800353c:	2300      	movs	r3, #0
 800353e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003544:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003548:	4619      	mov	r1, r3
 800354a:	4833      	ldr	r0, [pc, #204]	@ (8003618 <MX_TIM1_Init+0x188>)
 800354c:	f007 fa68 	bl	800aa20 <HAL_TIMEx_MasterConfigSynchronization>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003556:	f7fe fc6f 	bl	8001e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800355a:	2360      	movs	r3, #96	@ 0x60
 800355c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003562:	2300      	movs	r3, #0
 8003564:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003566:	2300      	movs	r3, #0
 8003568:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356a:	2300      	movs	r3, #0
 800356c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003576:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800357a:	2200      	movs	r2, #0
 800357c:	4619      	mov	r1, r3
 800357e:	4826      	ldr	r0, [pc, #152]	@ (8003618 <MX_TIM1_Init+0x188>)
 8003580:	f006 f8ce 	bl	8009720 <HAL_TIM_PWM_ConfigChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800358a:	f7fe fc55 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800358e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003592:	2204      	movs	r2, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4820      	ldr	r0, [pc, #128]	@ (8003618 <MX_TIM1_Init+0x188>)
 8003598:	f006 f8c2 	bl	8009720 <HAL_TIM_PWM_ConfigChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80035a2:	f7fe fc49 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035aa:	2208      	movs	r2, #8
 80035ac:	4619      	mov	r1, r3
 80035ae:	481a      	ldr	r0, [pc, #104]	@ (8003618 <MX_TIM1_Init+0x188>)
 80035b0:	f006 f8b6 	bl	8009720 <HAL_TIM_PWM_ConfigChannel>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80035ba:	f7fe fc3d 	bl	8001e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80035e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80035ee:	2300      	movs	r3, #0
 80035f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4807      	ldr	r0, [pc, #28]	@ (8003618 <MX_TIM1_Init+0x188>)
 80035fc:	f007 faa6 	bl	800ab4c <HAL_TIMEx_ConfigBreakDeadTime>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8003606:	f7fe fc17 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800360a:	4803      	ldr	r0, [pc, #12]	@ (8003618 <MX_TIM1_Init+0x188>)
 800360c:	f000 fa8a 	bl	8003b24 <HAL_TIM_MspPostInit>

}
 8003610:	bf00      	nop
 8003612:	3770      	adds	r7, #112	@ 0x70
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	2000076c 	.word	0x2000076c
 800361c:	40012c00 	.word	0x40012c00

08003620 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	@ 0x30
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003626:	f107 0320 	add.w	r3, r7, #32
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800364c:	4b36      	ldr	r3, [pc, #216]	@ (8003728 <MX_TIM2_Init+0x108>)
 800364e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003652:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8003654:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <MX_TIM2_Init+0x108>)
 8003656:	22a9      	movs	r2, #169	@ 0xa9
 8003658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365a:	4b33      	ldr	r3, [pc, #204]	@ (8003728 <MX_TIM2_Init+0x108>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003660:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <MX_TIM2_Init+0x108>)
 8003662:	f04f 32ff 	mov.w	r2, #4294967295
 8003666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003668:	4b2f      	ldr	r3, [pc, #188]	@ (8003728 <MX_TIM2_Init+0x108>)
 800366a:	2200      	movs	r2, #0
 800366c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800366e:	4b2e      	ldr	r3, [pc, #184]	@ (8003728 <MX_TIM2_Init+0x108>)
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003674:	482c      	ldr	r0, [pc, #176]	@ (8003728 <MX_TIM2_Init+0x108>)
 8003676:	f005 fa4f 	bl	8008b18 <HAL_TIM_Base_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003680:	f7fe fbda 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003688:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800368a:	f107 0320 	add.w	r3, r7, #32
 800368e:	4619      	mov	r1, r3
 8003690:	4825      	ldr	r0, [pc, #148]	@ (8003728 <MX_TIM2_Init+0x108>)
 8003692:	f006 f959 	bl	8009948 <HAL_TIM_ConfigClockSource>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800369c:	f7fe fbcc 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80036a0:	4821      	ldr	r0, [pc, #132]	@ (8003728 <MX_TIM2_Init+0x108>)
 80036a2:	f005 fc9f 	bl	8008fe4 <HAL_TIM_IC_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80036ac:	f7fe fbc4 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4619      	mov	r1, r3
 80036be:	481a      	ldr	r0, [pc, #104]	@ (8003728 <MX_TIM2_Init+0x108>)
 80036c0:	f007 f9ae 	bl	800aa20 <HAL_TIMEx_MasterConfigSynchronization>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80036ca:	f7fe fbb5 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80036ce:	230a      	movs	r3, #10
 80036d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036d2:	2301      	movs	r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	2200      	movs	r2, #0
 80036e2:	4619      	mov	r1, r3
 80036e4:	4810      	ldr	r0, [pc, #64]	@ (8003728 <MX_TIM2_Init+0x108>)
 80036e6:	f005 ff7e 	bl	80095e6 <HAL_TIM_IC_ConfigChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80036f0:	f7fe fba2 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036f4:	1d3b      	adds	r3, r7, #4
 80036f6:	2204      	movs	r2, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	480b      	ldr	r0, [pc, #44]	@ (8003728 <MX_TIM2_Init+0x108>)
 80036fc:	f005 ff73 	bl	80095e6 <HAL_TIM_IC_ConfigChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8003706:	f7fe fb97 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	2208      	movs	r2, #8
 800370e:	4619      	mov	r1, r3
 8003710:	4805      	ldr	r0, [pc, #20]	@ (8003728 <MX_TIM2_Init+0x108>)
 8003712:	f005 ff68 	bl	80095e6 <HAL_TIM_IC_ConfigChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 800371c:	f7fe fb8c 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003720:	bf00      	nop
 8003722:	3730      	adds	r7, #48	@ 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200007b8 	.word	0x200007b8

0800372c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	@ 0x30
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003732:	f107 0320 	add.w	r3, r7, #32
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003758:	4b36      	ldr	r3, [pc, #216]	@ (8003834 <MX_TIM5_Init+0x108>)
 800375a:	4a37      	ldr	r2, [pc, #220]	@ (8003838 <MX_TIM5_Init+0x10c>)
 800375c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 800375e:	4b35      	ldr	r3, [pc, #212]	@ (8003834 <MX_TIM5_Init+0x108>)
 8003760:	22a9      	movs	r2, #169	@ 0xa9
 8003762:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003764:	4b33      	ldr	r3, [pc, #204]	@ (8003834 <MX_TIM5_Init+0x108>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800376a:	4b32      	ldr	r3, [pc, #200]	@ (8003834 <MX_TIM5_Init+0x108>)
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003772:	4b30      	ldr	r3, [pc, #192]	@ (8003834 <MX_TIM5_Init+0x108>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003778:	4b2e      	ldr	r3, [pc, #184]	@ (8003834 <MX_TIM5_Init+0x108>)
 800377a:	2200      	movs	r2, #0
 800377c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800377e:	482d      	ldr	r0, [pc, #180]	@ (8003834 <MX_TIM5_Init+0x108>)
 8003780:	f005 f9ca 	bl	8008b18 <HAL_TIM_Base_Init>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800378a:	f7fe fb55 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800378e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003792:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003794:	f107 0320 	add.w	r3, r7, #32
 8003798:	4619      	mov	r1, r3
 800379a:	4826      	ldr	r0, [pc, #152]	@ (8003834 <MX_TIM5_Init+0x108>)
 800379c:	f006 f8d4 	bl	8009948 <HAL_TIM_ConfigClockSource>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80037a6:	f7fe fb47 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80037aa:	4822      	ldr	r0, [pc, #136]	@ (8003834 <MX_TIM5_Init+0x108>)
 80037ac:	f005 fc1a 	bl	8008fe4 <HAL_TIM_IC_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80037b6:	f7fe fb3f 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	481a      	ldr	r0, [pc, #104]	@ (8003834 <MX_TIM5_Init+0x108>)
 80037ca:	f007 f929 	bl	800aa20 <HAL_TIMEx_MasterConfigSynchronization>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80037d4:	f7fe fb30 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80037d8:	230a      	movs	r3, #10
 80037da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80037dc:	2301      	movs	r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	2200      	movs	r2, #0
 80037ec:	4619      	mov	r1, r3
 80037ee:	4811      	ldr	r0, [pc, #68]	@ (8003834 <MX_TIM5_Init+0x108>)
 80037f0:	f005 fef9 	bl	80095e6 <HAL_TIM_IC_ConfigChannel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80037fa:	f7fe fb1d 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	2204      	movs	r2, #4
 8003802:	4619      	mov	r1, r3
 8003804:	480b      	ldr	r0, [pc, #44]	@ (8003834 <MX_TIM5_Init+0x108>)
 8003806:	f005 feee 	bl	80095e6 <HAL_TIM_IC_ConfigChannel>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8003810:	f7fe fb12 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	2208      	movs	r2, #8
 8003818:	4619      	mov	r1, r3
 800381a:	4806      	ldr	r0, [pc, #24]	@ (8003834 <MX_TIM5_Init+0x108>)
 800381c:	f005 fee3 	bl	80095e6 <HAL_TIM_IC_ConfigChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 8003826:	f7fe fb07 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800382a:	bf00      	nop
 800382c:	3730      	adds	r7, #48	@ 0x30
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000804 	.word	0x20000804
 8003838:	40000c00 	.word	0x40000c00

0800383c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b09c      	sub	sp, #112	@ 0x70
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003842:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003850:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800385c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	611a      	str	r2, [r3, #16]
 800386c:	615a      	str	r2, [r3, #20]
 800386e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	2234      	movs	r2, #52	@ 0x34
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f008 ff5a 	bl	800c730 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800387c:	4b51      	ldr	r3, [pc, #324]	@ (80039c4 <MX_TIM8_Init+0x188>)
 800387e:	4a52      	ldr	r2, [pc, #328]	@ (80039c8 <MX_TIM8_Init+0x18c>)
 8003880:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 8003882:	4b50      	ldr	r3, [pc, #320]	@ (80039c4 <MX_TIM8_Init+0x188>)
 8003884:	2210      	movs	r2, #16
 8003886:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003888:	4b4e      	ldr	r3, [pc, #312]	@ (80039c4 <MX_TIM8_Init+0x188>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 800388e:	4b4d      	ldr	r3, [pc, #308]	@ (80039c4 <MX_TIM8_Init+0x188>)
 8003890:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003894:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003896:	4b4b      	ldr	r3, [pc, #300]	@ (80039c4 <MX_TIM8_Init+0x188>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800389c:	4b49      	ldr	r3, [pc, #292]	@ (80039c4 <MX_TIM8_Init+0x188>)
 800389e:	2200      	movs	r2, #0
 80038a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a2:	4b48      	ldr	r3, [pc, #288]	@ (80039c4 <MX_TIM8_Init+0x188>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80038a8:	4846      	ldr	r0, [pc, #280]	@ (80039c4 <MX_TIM8_Init+0x188>)
 80038aa:	f005 f935 	bl	8008b18 <HAL_TIM_Base_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80038b4:	f7fe fac0 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80038be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038c2:	4619      	mov	r1, r3
 80038c4:	483f      	ldr	r0, [pc, #252]	@ (80039c4 <MX_TIM8_Init+0x188>)
 80038c6:	f006 f83f 	bl	8009948 <HAL_TIM_ConfigClockSource>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80038d0:	f7fe fab2 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80038d4:	483b      	ldr	r0, [pc, #236]	@ (80039c4 <MX_TIM8_Init+0x188>)
 80038d6:	f005 f976 	bl	8008bc6 <HAL_TIM_PWM_Init>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80038e0:	f7fe faaa 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e4:	2300      	movs	r3, #0
 80038e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80038e8:	2300      	movs	r3, #0
 80038ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038f4:	4619      	mov	r1, r3
 80038f6:	4833      	ldr	r0, [pc, #204]	@ (80039c4 <MX_TIM8_Init+0x188>)
 80038f8:	f007 f892 	bl	800aa20 <HAL_TIMEx_MasterConfigSynchronization>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003902:	f7fe fa99 	bl	8001e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003906:	2360      	movs	r3, #96	@ 0x60
 8003908:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800390e:	2300      	movs	r3, #0
 8003910:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003912:	2300      	movs	r3, #0
 8003914:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800391a:	2300      	movs	r3, #0
 800391c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003922:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003926:	2200      	movs	r2, #0
 8003928:	4619      	mov	r1, r3
 800392a:	4826      	ldr	r0, [pc, #152]	@ (80039c4 <MX_TIM8_Init+0x188>)
 800392c:	f005 fef8 	bl	8009720 <HAL_TIM_PWM_ConfigChannel>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003936:	f7fe fa7f 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800393a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800393e:	2204      	movs	r2, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4820      	ldr	r0, [pc, #128]	@ (80039c4 <MX_TIM8_Init+0x188>)
 8003944:	f005 feec 	bl	8009720 <HAL_TIM_PWM_ConfigChannel>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800394e:	f7fe fa73 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003952:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003956:	2208      	movs	r2, #8
 8003958:	4619      	mov	r1, r3
 800395a:	481a      	ldr	r0, [pc, #104]	@ (80039c4 <MX_TIM8_Init+0x188>)
 800395c:	f005 fee0 	bl	8009720 <HAL_TIM_PWM_ConfigChannel>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003966:	f7fe fa67 	bl	8001e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800397e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003982:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003988:	2300      	movs	r3, #0
 800398a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003990:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003994:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800399a:	2300      	movs	r3, #0
 800399c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800399e:	2300      	movs	r3, #0
 80039a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80039a2:	1d3b      	adds	r3, r7, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4807      	ldr	r0, [pc, #28]	@ (80039c4 <MX_TIM8_Init+0x188>)
 80039a8:	f007 f8d0 	bl	800ab4c <HAL_TIMEx_ConfigBreakDeadTime>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 80039b2:	f7fe fa41 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80039b6:	4803      	ldr	r0, [pc, #12]	@ (80039c4 <MX_TIM8_Init+0x188>)
 80039b8:	f000 f8b4 	bl	8003b24 <HAL_TIM_MspPostInit>

}
 80039bc:	bf00      	nop
 80039be:	3770      	adds	r7, #112	@ 0x70
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000850 	.word	0x20000850
 80039c8:	40013400 	.word	0x40013400

080039cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08e      	sub	sp, #56	@ 0x38
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a48      	ldr	r2, [pc, #288]	@ (8003b0c <HAL_TIM_Base_MspInit+0x140>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10c      	bne.n	8003a08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ee:	4b48      	ldr	r3, [pc, #288]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 80039f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f2:	4a47      	ldr	r2, [pc, #284]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 80039f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80039fa:	4b45      	ldr	r3, [pc, #276]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a02:	623b      	str	r3, [r7, #32]
 8003a04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003a06:	e07d      	b.n	8003b04 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a10:	d130      	bne.n	8003a74 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a12:	4b3f      	ldr	r3, [pc, #252]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	4a3e      	ldr	r2, [pc, #248]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2a:	4b39      	ldr	r3, [pc, #228]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	4a38      	ldr	r2, [pc, #224]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a30:	f043 0308 	orr.w	r3, r3, #8
 8003a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a36:	4b36      	ldr	r3, [pc, #216]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LMC_HALL1_Pin|LMC_HALL2_Pin|LMC_HALL3_Pin;
 8003a42:	2398      	movs	r3, #152	@ 0x98
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003a52:	2302      	movs	r3, #2
 8003a54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	482d      	ldr	r0, [pc, #180]	@ (8003b14 <HAL_TIM_Base_MspInit+0x148>)
 8003a5e:	f003 f8c1 	bl	8006be4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2102      	movs	r1, #2
 8003a66:	201c      	movs	r0, #28
 8003a68:	f001 fcb5 	bl	80053d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a6c:	201c      	movs	r0, #28
 8003a6e:	f001 fccc 	bl	800540a <HAL_NVIC_EnableIRQ>
}
 8003a72:	e047      	b.n	8003b04 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM5)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a27      	ldr	r2, [pc, #156]	@ (8003b18 <HAL_TIM_Base_MspInit+0x14c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d131      	bne.n	8003ae2 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	4a23      	ldr	r2, [pc, #140]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a8a:	4b21      	ldr	r3, [pc, #132]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a96:	4b1e      	ldr	r3, [pc, #120]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003a9c:	f043 0320 	orr.w	r3, r3, #32
 8003aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RMC_HALL2_Pin|RMC_HALL3_Pin|RMC_HALL1_Pin;
 8003aae:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8003ac0:	2306      	movs	r3, #6
 8003ac2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4814      	ldr	r0, [pc, #80]	@ (8003b1c <HAL_TIM_Base_MspInit+0x150>)
 8003acc:	f003 f88a 	bl	8006be4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	2032      	movs	r0, #50	@ 0x32
 8003ad6:	f001 fc7e 	bl	80053d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003ada:	2032      	movs	r0, #50	@ 0x32
 8003adc:	f001 fc95 	bl	800540a <HAL_NVIC_EnableIRQ>
}
 8003ae0:	e010      	b.n	8003b04 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b20 <HAL_TIM_Base_MspInit+0x154>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10b      	bne.n	8003b04 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003aec:	4b08      	ldr	r3, [pc, #32]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af0:	4a07      	ldr	r2, [pc, #28]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003af2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003af6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_TIM_Base_MspInit+0x144>)
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3738      	adds	r7, #56	@ 0x38
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40021000 	.word	0x40021000
 8003b14:	48000c00 	.word	0x48000c00
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	48001400 	.word	0x48001400
 8003b20:	40013400 	.word	0x40013400

08003b24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	@ 0x30
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 031c 	add.w	r3, r7, #28
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a64      	ldr	r2, [pc, #400]	@ (8003cd4 <HAL_TIM_MspPostInit+0x1b0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d166      	bne.n	8003c14 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b46:	4b64      	ldr	r3, [pc, #400]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4a:	4a63      	ldr	r2, [pc, #396]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b52:	4b61      	ldr	r3, [pc, #388]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b76:	4b58      	ldr	r3, [pc, #352]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b7c:	f043 0310 	orr.w	r3, r3, #16
 8003b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b82:	4b55      	ldr	r3, [pc, #340]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_AL_RMC_Pin;
 8003b8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b94:	2302      	movs	r3, #2
 8003b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	4619      	mov	r1, r3
 8003baa:	484c      	ldr	r0, [pc, #304]	@ (8003cdc <HAL_TIM_MspPostInit+0x1b8>)
 8003bac:	f003 f81a 	bl	8006be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_AH_RMC_Pin|PWM_BH_RMC_Pin|PWM_CH_RMC_Pin;
 8003bb0:	2307      	movs	r3, #7
 8003bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc4:	f107 031c 	add.w	r3, r7, #28
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4844      	ldr	r0, [pc, #272]	@ (8003cdc <HAL_TIM_MspPostInit+0x1b8>)
 8003bcc:	f003 f80a 	bl	8006be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_BL_RMC_Pin;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003be0:	2306      	movs	r3, #6
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_BL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003be4:	f107 031c 	add.w	r3, r7, #28
 8003be8:	4619      	mov	r1, r3
 8003bea:	483d      	ldr	r0, [pc, #244]	@ (8003ce0 <HAL_TIM_MspPostInit+0x1bc>)
 8003bec:	f002 fffa 	bl	8006be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_CL_RMC_Pin;
 8003bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c02:	2302      	movs	r3, #2
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003c06:	f107 031c 	add.w	r3, r7, #28
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4835      	ldr	r0, [pc, #212]	@ (8003ce4 <HAL_TIM_MspPostInit+0x1c0>)
 8003c0e:	f002 ffe9 	bl	8006be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003c12:	e05a      	b.n	8003cca <HAL_TIM_MspPostInit+0x1a6>
  else if(timHandle->Instance==TIM8)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a33      	ldr	r2, [pc, #204]	@ (8003ce8 <HAL_TIM_MspPostInit+0x1c4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d155      	bne.n	8003cca <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c22:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c36:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3a:	4a27      	ldr	r2, [pc, #156]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c42:	4b25      	ldr	r3, [pc, #148]	@ (8003cd8 <HAL_TIM_MspPostInit+0x1b4>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_LMC_Pin|PWM_AL_LMC_Pin|PWM_BL_LMC_Pin|PWM_CL_LMC_Pin;
 8003c4e:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 8003c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	2302      	movs	r3, #2
 8003c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003c60:	2304      	movs	r3, #4
 8003c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c64:	f107 031c 	add.w	r3, r7, #28
 8003c68:	4619      	mov	r1, r3
 8003c6a:	481c      	ldr	r0, [pc, #112]	@ (8003cdc <HAL_TIM_MspPostInit+0x1b8>)
 8003c6c:	f002 ffba 	bl	8006be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AH_LMC_Pin;
 8003c70:	2340      	movs	r3, #64	@ 0x40
 8003c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8003c80:	2305      	movs	r3, #5
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4815      	ldr	r0, [pc, #84]	@ (8003ce0 <HAL_TIM_MspPostInit+0x1bc>)
 8003c8c:	f002 ffaa 	bl	8006be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_CH_LMC_Pin;
 8003c90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003ca6:	f107 031c 	add.w	r3, r7, #28
 8003caa:	4619      	mov	r1, r3
 8003cac:	480c      	ldr	r0, [pc, #48]	@ (8003ce0 <HAL_TIM_MspPostInit+0x1bc>)
 8003cae:	f002 ff99 	bl	8006be4 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cec <HAL_TIM_MspPostInit+0x1c8>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <HAL_TIM_MspPostInit+0x1c8>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbc:	6053      	str	r3, [r2, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_TIM_MspPostInit+0x1c8>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cec <HAL_TIM_MspPostInit+0x1c8>)
 8003cc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cc8:	6053      	str	r3, [r2, #4]
}
 8003cca:	bf00      	nop
 8003ccc:	3730      	adds	r7, #48	@ 0x30
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	48000800 	.word	0x48000800
 8003ce0:	48000400 	.word	0x48000400
 8003ce4:	48001000 	.word	0x48001000
 8003ce8:	40013400 	.word	0x40013400
 8003cec:	40010000 	.word	0x40010000

08003cf0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cf4:	4b22      	ldr	r3, [pc, #136]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003cf6:	4a23      	ldr	r2, [pc, #140]	@ (8003d84 <MX_USART2_UART_Init+0x94>)
 8003cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8003cfa:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003cfc:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8003d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d02:	4b1f      	ldr	r3, [pc, #124]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d14:	4b1a      	ldr	r3, [pc, #104]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d16:	220c      	movs	r2, #12
 8003d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d1a:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d20:	4b17      	ldr	r3, [pc, #92]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d26:	4b16      	ldr	r3, [pc, #88]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d2c:	4b14      	ldr	r3, [pc, #80]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d32:	4b13      	ldr	r3, [pc, #76]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d38:	4811      	ldr	r0, [pc, #68]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d3a:	f007 f806 	bl	800ad4a <HAL_UART_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003d44:	f7fe f878 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d48:	2100      	movs	r1, #0
 8003d4a:	480d      	ldr	r0, [pc, #52]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d4c:	f008 fbd2 	bl	800c4f4 <HAL_UARTEx_SetTxFifoThreshold>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003d56:	f7fe f86f 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4808      	ldr	r0, [pc, #32]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d5e:	f008 fc07 	bl	800c570 <HAL_UARTEx_SetRxFifoThreshold>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003d68:	f7fe f866 	bl	8001e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003d6c:	4804      	ldr	r0, [pc, #16]	@ (8003d80 <MX_USART2_UART_Init+0x90>)
 8003d6e:	f008 fb88 	bl	800c482 <HAL_UARTEx_DisableFifoMode>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003d78:	f7fe f85e 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	2000089c 	.word	0x2000089c
 8003d84:	40004400 	.word	0x40004400

08003d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b09e      	sub	sp, #120	@ 0x78
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003da0:	f107 0310 	add.w	r3, r7, #16
 8003da4:	2254      	movs	r2, #84	@ 0x54
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f008 fcc1 	bl	800c730 <memset>
  if(uartHandle->Instance==USART2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a38      	ldr	r2, [pc, #224]	@ (8003e94 <HAL_UART_MspInit+0x10c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d168      	bne.n	8003e8a <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003db8:	2302      	movs	r3, #2
 8003dba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dc0:	f107 0310 	add.w	r3, r7, #16
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 feb5 	bl	8007b34 <HAL_RCCEx_PeriphCLKConfig>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003dd0:	f7fe f832 	bl	8001e38 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003dd4:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <HAL_UART_MspInit+0x110>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8003e98 <HAL_UART_MspInit+0x110>)
 8003dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e98 <HAL_UART_MspInit+0x110>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dec:	4b2a      	ldr	r3, [pc, #168]	@ (8003e98 <HAL_UART_MspInit+0x110>)
 8003dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df0:	4a29      	ldr	r2, [pc, #164]	@ (8003e98 <HAL_UART_MspInit+0x110>)
 8003df2:	f043 0308 	orr.w	r3, r3, #8
 8003df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <HAL_UART_MspInit+0x110>)
 8003dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = AUX2_TX_Pin|AUX2_RX_Pin;
 8003e04:	2360      	movs	r3, #96	@ 0x60
 8003e06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e14:	2307      	movs	r3, #7
 8003e16:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	481f      	ldr	r0, [pc, #124]	@ (8003e9c <HAL_UART_MspInit+0x114>)
 8003e20:	f002 fee0 	bl	8006be4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003e24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea4 <HAL_UART_MspInit+0x11c>)
 8003e28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e2c:	221a      	movs	r2, #26
 8003e2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e3e:	2280      	movs	r2, #128	@ 0x80
 8003e40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e42:	4b17      	ldr	r3, [pc, #92]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e48:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e54:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e56:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003e5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e5c:	4810      	ldr	r0, [pc, #64]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e5e:	f001 fd65 	bl	800592c <HAL_DMA_Init>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003e68:	f7fd ffe6 	bl	8001e38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003e74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea0 <HAL_UART_MspInit+0x118>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2026      	movs	r0, #38	@ 0x26
 8003e80:	f001 faa9 	bl	80053d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e84:	2026      	movs	r0, #38	@ 0x26
 8003e86:	f001 fac0 	bl	800540a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3778      	adds	r7, #120	@ 0x78
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40004400 	.word	0x40004400
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	48000c00 	.word	0x48000c00
 8003ea0:	20000930 	.word	0x20000930
 8003ea4:	40020008 	.word	0x40020008

08003ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ea8:	480d      	ldr	r0, [pc, #52]	@ (8003ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eaa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003eac:	f7ff fade 	bl	800346c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003eb0:	480c      	ldr	r0, [pc, #48]	@ (8003ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003eb2:	490d      	ldr	r1, [pc, #52]	@ (8003ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003eec <LoopForever+0xe>)
  movs r3, #0
 8003eb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003eb8:	e002      	b.n	8003ec0 <LoopCopyDataInit>

08003eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ebe:	3304      	adds	r3, #4

08003ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ec4:	d3f9      	bcc.n	8003eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ef4 <LoopForever+0x16>)
  movs r3, #0
 8003eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ecc:	e001      	b.n	8003ed2 <LoopFillZerobss>

08003ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed0:	3204      	adds	r2, #4

08003ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ed4:	d3fb      	bcc.n	8003ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ed6:	f008 fc33 	bl	800c740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eda:	f7fd fe87 	bl	8001bec <main>

08003ede <LoopForever>:

LoopForever:
    b LoopForever
 8003ede:	e7fe      	b.n	8003ede <LoopForever>
  ldr   r0, =_estack
 8003ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ee8:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 8003eec:	0800c81c 	.word	0x0800c81c
  ldr r2, =_sbss
 8003ef0:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 8003ef4:	20000994 	.word	0x20000994

08003ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ef8:	e7fe      	b.n	8003ef8 <ADC1_2_IRQHandler>

08003efa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f04:	2003      	movs	r0, #3
 8003f06:	f001 fa5b 	bl	80053c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f0a:	200f      	movs	r0, #15
 8003f0c:	f000 f80e 	bl	8003f2c <HAL_InitTick>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	71fb      	strb	r3, [r7, #7]
 8003f1a:	e001      	b.n	8003f20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f1c:	f7ff fa1a 	bl	8003354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f20:	79fb      	ldrb	r3, [r7, #7]

}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f38:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <HAL_InitTick+0x68>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d022      	beq.n	8003f86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f40:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <HAL_InitTick+0x6c>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b13      	ldr	r3, [pc, #76]	@ (8003f94 <HAL_InitTick+0x68>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 fa66 	bl	8005426 <HAL_SYSTICK_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b0f      	cmp	r3, #15
 8003f64:	d809      	bhi.n	8003f7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f66:	2200      	movs	r2, #0
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	f001 fa32 	bl	80053d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f72:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <HAL_InitTick+0x70>)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	e007      	b.n	8003f8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	e004      	b.n	8003f8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e001      	b.n	8003f8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000390 	.word	0x20000390
 8003f98:	20000388 	.word	0x20000388
 8003f9c:	2000038c 	.word	0x2000038c

08003fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	@ (8003fbc <HAL_IncTick+0x1c>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_IncTick+0x20>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4413      	add	r3, r2
 8003fae:	4a03      	ldr	r2, [pc, #12]	@ (8003fbc <HAL_IncTick+0x1c>)
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20000990 	.word	0x20000990
 8003fc0:	20000390 	.word	0x20000390

08003fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <HAL_GetTick+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000990 	.word	0x20000990

08003fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7ff ffee 	bl	8003fc4 <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d004      	beq.n	8004000 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <HAL_Delay+0x40>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004000:	bf00      	nop
 8004002:	f7ff ffdf 	bl	8003fc4 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	429a      	cmp	r2, r3
 8004010:	d8f7      	bhi.n	8004002 <HAL_Delay+0x26>
  {
  }
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000390 	.word	0x20000390

08004020 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3360      	adds	r3, #96	@ 0x60
 800409a:	461a      	mov	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b08      	ldr	r3, [pc, #32]	@ (80040cc <LL_ADC_SetOffset+0x44>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	03fff000 	.word	0x03fff000

080040d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3360      	adds	r3, #96	@ 0x60
 80040de:	461a      	mov	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3360      	adds	r3, #96	@ 0x60
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	431a      	orrs	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004132:	b480      	push	{r7}
 8004134:	b087      	sub	sp, #28
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3360      	adds	r3, #96	@ 0x60
 8004142:	461a      	mov	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	431a      	orrs	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3360      	adds	r3, #96	@ 0x60
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	431a      	orrs	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	615a      	str	r2, [r3, #20]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3330      	adds	r3, #48	@ 0x30
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	4413      	add	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	211f      	movs	r1, #31
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	401a      	ands	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	0e9b      	lsrs	r3, r3, #26
 80041fc:	f003 011f 	and.w	r1, r3, #31
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	431a      	orrs	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3314      	adds	r3, #20
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	0e5b      	lsrs	r3, r3, #25
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	4413      	add	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	0d1b      	lsrs	r3, r3, #20
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2107      	movs	r1, #7
 800424a:	fa01 f303 	lsl.w	r3, r1, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	401a      	ands	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	0d1b      	lsrs	r3, r3, #20
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	431a      	orrs	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428c:	43db      	mvns	r3, r3
 800428e:	401a      	ands	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 0318 	and.w	r3, r3, #24
 8004296:	4908      	ldr	r1, [pc, #32]	@ (80042b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004298:	40d9      	lsrs	r1, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	400b      	ands	r3, r1
 800429e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	0007ffff 	.word	0x0007ffff

080042bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80042cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6093      	str	r3, [r2, #8]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f4:	d101      	bne.n	80042fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800431c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004344:	d101      	bne.n	800434a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <LL_ADC_IsEnabled+0x18>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_ADC_IsEnabled+0x1a>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d101      	bne.n	8004396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d101      	bne.n	80043bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b089      	sub	sp, #36	@ 0x24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e1a9      	b.n	800473a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fc ff0b 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff67 	bl	80042e0 <LL_ADC_IsDeepPowerDownEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff4d 	bl	80042bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ff82 	bl	8004330 <LL_ADC_IsInternalRegulatorEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d115      	bne.n	800445e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff66 	bl	8004308 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800443c:	4b9c      	ldr	r3, [pc, #624]	@ (80046b0 <HAL_ADC_Init+0x2e4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	4a9c      	ldr	r2, [pc, #624]	@ (80046b4 <HAL_ADC_Init+0x2e8>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	3301      	adds	r3, #1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004450:	e002      	b.n	8004458 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3b01      	subs	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f9      	bne.n	8004452 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff64 	bl	8004330 <LL_ADC_IsInternalRegulatorEnabled>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	f043 0210 	orr.w	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447e:	f043 0201 	orr.w	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ff75 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 8004494:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 8142 	bne.w	8004728 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 813e 	bne.w	8004728 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80044b4:	f043 0202 	orr.w	r2, r3, #2
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff49 	bl	8004358 <LL_ADC_IsEnabled>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d141      	bne.n	8004550 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044d4:	d004      	beq.n	80044e0 <HAL_ADC_Init+0x114>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a77      	ldr	r2, [pc, #476]	@ (80046b8 <HAL_ADC_Init+0x2ec>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10f      	bne.n	8004500 <HAL_ADC_Init+0x134>
 80044e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044e4:	f7ff ff38 	bl	8004358 <LL_ADC_IsEnabled>
 80044e8:	4604      	mov	r4, r0
 80044ea:	4873      	ldr	r0, [pc, #460]	@ (80046b8 <HAL_ADC_Init+0x2ec>)
 80044ec:	f7ff ff34 	bl	8004358 <LL_ADC_IsEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4323      	orrs	r3, r4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e012      	b.n	8004526 <HAL_ADC_Init+0x15a>
 8004500:	486e      	ldr	r0, [pc, #440]	@ (80046bc <HAL_ADC_Init+0x2f0>)
 8004502:	f7ff ff29 	bl	8004358 <LL_ADC_IsEnabled>
 8004506:	4604      	mov	r4, r0
 8004508:	486d      	ldr	r0, [pc, #436]	@ (80046c0 <HAL_ADC_Init+0x2f4>)
 800450a:	f7ff ff25 	bl	8004358 <LL_ADC_IsEnabled>
 800450e:	4603      	mov	r3, r0
 8004510:	431c      	orrs	r4, r3
 8004512:	486c      	ldr	r0, [pc, #432]	@ (80046c4 <HAL_ADC_Init+0x2f8>)
 8004514:	f7ff ff20 	bl	8004358 <LL_ADC_IsEnabled>
 8004518:	4603      	mov	r3, r0
 800451a:	4323      	orrs	r3, r4
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d012      	beq.n	8004550 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004532:	d004      	beq.n	800453e <HAL_ADC_Init+0x172>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a5f      	ldr	r2, [pc, #380]	@ (80046b8 <HAL_ADC_Init+0x2ec>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d101      	bne.n	8004542 <HAL_ADC_Init+0x176>
 800453e:	4a62      	ldr	r2, [pc, #392]	@ (80046c8 <HAL_ADC_Init+0x2fc>)
 8004540:	e000      	b.n	8004544 <HAL_ADC_Init+0x178>
 8004542:	4a62      	ldr	r2, [pc, #392]	@ (80046cc <HAL_ADC_Init+0x300>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f7ff fd68 	bl	8004020 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	7f5b      	ldrb	r3, [r3, #29]
 8004554:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800455a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004560:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004566:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800456e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800457a:	2b01      	cmp	r3, #1
 800457c:	d106      	bne.n	800458c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004582:	3b01      	subs	r3, #1
 8004584:	045b      	lsls	r3, r3, #17
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	4b48      	ldr	r3, [pc, #288]	@ (80046d0 <HAL_ADC_Init+0x304>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fee4 	bl	80043a4 <LL_ADC_INJ_IsConversionOngoing>
 80045dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d17f      	bne.n	80046e4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d17c      	bne.n	80046e4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045ee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004606:	f023 0302 	bic.w	r3, r3, #2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	430b      	orrs	r3, r1
 8004612:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d017      	beq.n	800464c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800462a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004634:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6911      	ldr	r1, [r2, #16]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	430b      	orrs	r3, r1
 8004646:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800464a:	e013      	b.n	8004674 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800465a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800466c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004670:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800467a:	2b01      	cmp	r3, #1
 800467c:	d12a      	bne.n	80046d4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800469a:	4311      	orrs	r1, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046a0:	430a      	orrs	r2, r1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	611a      	str	r2, [r3, #16]
 80046ae:	e019      	b.n	80046e4 <HAL_ADC_Init+0x318>
 80046b0:	20000388 	.word	0x20000388
 80046b4:	053e2d63 	.word	0x053e2d63
 80046b8:	50000100 	.word	0x50000100
 80046bc:	50000400 	.word	0x50000400
 80046c0:	50000500 	.word	0x50000500
 80046c4:	50000600 	.word	0x50000600
 80046c8:	50000300 	.word	0x50000300
 80046cc:	50000700 	.word	0x50000700
 80046d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10c      	bne.n	8004706 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	f023 010f 	bic.w	r1, r3, #15
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
 8004704:	e007      	b.n	8004716 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 020f 	bic.w	r2, r2, #15
 8004714:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004726:	e007      	b.n	8004738 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472c:	f043 0210 	orr.w	r2, r3, #16
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004738:	7ffb      	ldrb	r3, [r7, #31]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3724      	adds	r7, #36	@ 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	bf00      	nop

08004744 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b0b6      	sub	sp, #216	@ 0xd8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800475e:	2b01      	cmp	r3, #1
 8004760:	d102      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x24>
 8004762:	2302      	movs	r3, #2
 8004764:	f000 bc13 	b.w	8004f8e <HAL_ADC_ConfigChannel+0x84a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fe02 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 83f3 	bne.w	8004f68 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7ff fd18 	bl	80041c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fdf0 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 800479e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fdfc 	bl	80043a4 <LL_ADC_INJ_IsConversionOngoing>
 80047ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 81d9 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 81d4 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047cc:	d10f      	bne.n	80047ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	4619      	mov	r1, r3
 80047da:	f7ff fd1f 	bl	800421c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fcd9 	bl	800419e <LL_ADC_SetSamplingTimeCommonConfig>
 80047ec:	e00e      	b.n	800480c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f7ff fd0e 	bl	800421c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fcc9 	bl	800419e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d022      	beq.n	8004874 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6919      	ldr	r1, [r3, #16]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800483e:	f7ff fc23 	bl	8004088 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6919      	ldr	r1, [r3, #16]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	461a      	mov	r2, r3
 8004850:	f7ff fc6f 	bl	8004132 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004860:	2b01      	cmp	r3, #1
 8004862:	d102      	bne.n	800486a <HAL_ADC_ConfigChannel+0x126>
 8004864:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004868:	e000      	b.n	800486c <HAL_ADC_ConfigChannel+0x128>
 800486a:	2300      	movs	r3, #0
 800486c:	461a      	mov	r2, r3
 800486e:	f7ff fc7b 	bl	8004168 <LL_ADC_SetOffsetSaturation>
 8004872:	e17b      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fc28 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004880:	4603      	mov	r3, r0
 8004882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x15c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fc1d 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004896:	4603      	mov	r3, r0
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	f003 021f 	and.w	r2, r3, #31
 800489e:	e01e      	b.n	80048de <HAL_ADC_ConfigChannel+0x19a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fc12 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80048ce:	2320      	movs	r3, #32
 80048d0:	e004      	b.n	80048dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80048d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x1b2>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	0e9b      	lsrs	r3, r3, #26
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	e018      	b.n	8004928 <HAL_ADC_ConfigChannel+0x1e4>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800490a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800490e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800491a:	2320      	movs	r3, #32
 800491c:	e004      	b.n	8004928 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800491e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004928:	429a      	cmp	r2, r3
 800492a:	d106      	bne.n	800493a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fbe1 	bl	80040fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2101      	movs	r1, #1
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fbc5 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004946:	4603      	mov	r3, r0
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x222>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fbba 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 800495c:	4603      	mov	r3, r0
 800495e:	0e9b      	lsrs	r3, r3, #26
 8004960:	f003 021f 	and.w	r2, r3, #31
 8004964:	e01e      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x260>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2101      	movs	r1, #1
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fbaf 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004972:	4603      	mov	r3, r0
 8004974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004984:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004988:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800498c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004994:	2320      	movs	r3, #32
 8004996:	e004      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x278>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	e018      	b.n	80049ee <HAL_ADC_ConfigChannel+0x2aa>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80049d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80049d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e004      	b.n	80049ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80049e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d106      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fb7e 	bl	80040fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2102      	movs	r1, #2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fb62 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x2e8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fb57 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	0e9b      	lsrs	r3, r3, #26
 8004a26:	f003 021f 	and.w	r2, r3, #31
 8004a2a:	e01e      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x326>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2102      	movs	r1, #2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fb4c 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	e004      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x33e>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	0e9b      	lsrs	r3, r3, #26
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	e016      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x36c>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	e004      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d106      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2102      	movs	r1, #2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fb1d 	bl	80040fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2103      	movs	r1, #3
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff fb01 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x3aa>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2103      	movs	r1, #3
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff faf6 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	0e9b      	lsrs	r3, r3, #26
 8004ae8:	f003 021f 	and.w	r2, r3, #31
 8004aec:	e017      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x3da>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2103      	movs	r1, #3
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff faeb 	bl	80040d0 <LL_ADC_GetOffsetChannel>
 8004afa:	4603      	mov	r3, r0
 8004afc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b08:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004b10:	2320      	movs	r3, #32
 8004b12:	e003      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x3f2>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0e9b      	lsrs	r3, r3, #26
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	e011      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x416>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e003      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d106      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2103      	movs	r1, #3
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fac8 	bl	80040fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fbf1 	bl	8004358 <LL_ADC_IsEnabled>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f040 813d 	bne.w	8004df8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7ff fb72 	bl	8004274 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4aa2      	ldr	r2, [pc, #648]	@ (8004e20 <HAL_ADC_ConfigChannel+0x6dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f040 812e 	bne.w	8004df8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x480>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0e9b      	lsrs	r3, r3, #26
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2b09      	cmp	r3, #9
 8004bba:	bf94      	ite	ls
 8004bbc:	2301      	movls	r3, #1
 8004bbe:	2300      	movhi	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e019      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x4b4>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bd4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004bdc:	2320      	movs	r3, #32
 8004bde:	e003      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2b09      	cmp	r3, #9
 8004bf0:	bf94      	ite	ls
 8004bf2:	2301      	movls	r3, #1
 8004bf4:	2300      	movhi	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d079      	beq.n	8004cf0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d107      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x4d4>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	0e9b      	lsrs	r3, r3, #26
 8004c0e:	3301      	adds	r3, #1
 8004c10:	069b      	lsls	r3, r3, #26
 8004c12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c16:	e015      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x500>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004c30:	2320      	movs	r3, #32
 8004c32:	e003      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	069b      	lsls	r3, r3, #26
 8004c40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x520>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0e9b      	lsrs	r3, r3, #26
 8004c56:	3301      	adds	r3, #1
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	e017      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x550>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c74:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e003      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	ea42 0103 	orr.w	r1, r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x576>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0e9b      	lsrs	r3, r3, #26
 8004caa:	3301      	adds	r3, #1
 8004cac:	f003 021f 	and.w	r2, r3, #31
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	051b      	lsls	r3, r3, #20
 8004cb8:	e018      	b.n	8004cec <HAL_ADC_ConfigChannel+0x5a8>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	e003      	b.n	8004cde <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cec:	430b      	orrs	r3, r1
 8004cee:	e07e      	b.n	8004dee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x5c8>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0e9b      	lsrs	r3, r3, #26
 8004d02:	3301      	adds	r3, #1
 8004d04:	069b      	lsls	r3, r3, #26
 8004d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d0a:	e015      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x5f4>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004d24:	2320      	movs	r3, #32
 8004d26:	e003      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	069b      	lsls	r3, r3, #26
 8004d34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x614>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	e017      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x644>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	fa93 f3a3 	rbit	r3, r3
 8004d64:	61fb      	str	r3, [r7, #28]
  return result;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d70:	2320      	movs	r3, #32
 8004d72:	e003      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2101      	movs	r1, #1
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	ea42 0103 	orr.w	r1, r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x670>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	0e9b      	lsrs	r3, r3, #26
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	3b1e      	subs	r3, #30
 8004dac:	051b      	lsls	r3, r3, #20
 8004dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004db2:	e01b      	b.n	8004dec <HAL_ADC_ConfigChannel+0x6a8>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	fa93 f3a3 	rbit	r3, r3
 8004dc0:	613b      	str	r3, [r7, #16]
  return result;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004dcc:	2320      	movs	r3, #32
 8004dce:	e003      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f003 021f 	and.w	r2, r3, #31
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	3b1e      	subs	r3, #30
 8004de6:	051b      	lsls	r3, r3, #20
 8004de8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df2:	4619      	mov	r1, r3
 8004df4:	f7ff fa12 	bl	800421c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <HAL_ADC_ConfigChannel+0x6e0>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80be 	beq.w	8004f82 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0e:	d004      	beq.n	8004e1a <HAL_ADC_ConfigChannel+0x6d6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a04      	ldr	r2, [pc, #16]	@ (8004e28 <HAL_ADC_ConfigChannel+0x6e4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d10a      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x6ec>
 8004e1a:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <HAL_ADC_ConfigChannel+0x6e8>)
 8004e1c:	e009      	b.n	8004e32 <HAL_ADC_ConfigChannel+0x6ee>
 8004e1e:	bf00      	nop
 8004e20:	407f0000 	.word	0x407f0000
 8004e24:	80080000 	.word	0x80080000
 8004e28:	50000100 	.word	0x50000100
 8004e2c:	50000300 	.word	0x50000300
 8004e30:	4b59      	ldr	r3, [pc, #356]	@ (8004f98 <HAL_ADC_ConfigChannel+0x854>)
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff f91a 	bl	800406c <LL_ADC_GetCommonPathInternalCh>
 8004e38:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a56      	ldr	r2, [pc, #344]	@ (8004f9c <HAL_ADC_ConfigChannel+0x858>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_ADC_ConfigChannel+0x70c>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a55      	ldr	r2, [pc, #340]	@ (8004fa0 <HAL_ADC_ConfigChannel+0x85c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d13a      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d134      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e64:	d005      	beq.n	8004e72 <HAL_ADC_ConfigChannel+0x72e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a4e      	ldr	r2, [pc, #312]	@ (8004fa4 <HAL_ADC_ConfigChannel+0x860>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f040 8085 	bne.w	8004f7c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e7a:	d004      	beq.n	8004e86 <HAL_ADC_ConfigChannel+0x742>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a49      	ldr	r2, [pc, #292]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <HAL_ADC_ConfigChannel+0x746>
 8004e86:	4a49      	ldr	r2, [pc, #292]	@ (8004fac <HAL_ADC_ConfigChannel+0x868>)
 8004e88:	e000      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x748>
 8004e8a:	4a43      	ldr	r2, [pc, #268]	@ (8004f98 <HAL_ADC_ConfigChannel+0x854>)
 8004e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f7ff f8d5 	bl	8004046 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e9c:	4b44      	ldr	r3, [pc, #272]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x86c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	099b      	lsrs	r3, r3, #6
 8004ea2:	4a44      	ldr	r2, [pc, #272]	@ (8004fb4 <HAL_ADC_ConfigChannel+0x870>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	099b      	lsrs	r3, r3, #6
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004eb6:	e002      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f9      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ec4:	e05a      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a3b      	ldr	r2, [pc, #236]	@ (8004fb8 <HAL_ADC_ConfigChannel+0x874>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d125      	bne.n	8004f1c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11f      	bne.n	8004f1c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a31      	ldr	r2, [pc, #196]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d104      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x7ac>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a34      	ldr	r2, [pc, #208]	@ (8004fbc <HAL_ADC_ConfigChannel+0x878>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d047      	beq.n	8004f80 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ef8:	d004      	beq.n	8004f04 <HAL_ADC_ConfigChannel+0x7c0>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d101      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x7c4>
 8004f04:	4a29      	ldr	r2, [pc, #164]	@ (8004fac <HAL_ADC_ConfigChannel+0x868>)
 8004f06:	e000      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x7c6>
 8004f08:	4a23      	ldr	r2, [pc, #140]	@ (8004f98 <HAL_ADC_ConfigChannel+0x854>)
 8004f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f7ff f896 	bl	8004046 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f1a:	e031      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a27      	ldr	r2, [pc, #156]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x87c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d12d      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d127      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f44:	d004      	beq.n	8004f50 <HAL_ADC_ConfigChannel+0x80c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a17      	ldr	r2, [pc, #92]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x864>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x810>
 8004f50:	4a16      	ldr	r2, [pc, #88]	@ (8004fac <HAL_ADC_ConfigChannel+0x868>)
 8004f52:	e000      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x812>
 8004f54:	4a10      	ldr	r2, [pc, #64]	@ (8004f98 <HAL_ADC_ConfigChannel+0x854>)
 8004f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f7ff f870 	bl	8004046 <LL_ADC_SetCommonPathInternalCh>
 8004f66:	e00c      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6c:	f043 0220 	orr.w	r2, r3, #32
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f7a:	e002      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f7c:	bf00      	nop
 8004f7e:	e000      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	37d8      	adds	r7, #216	@ 0xd8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	50000700 	.word	0x50000700
 8004f9c:	c3210000 	.word	0xc3210000
 8004fa0:	90c00010 	.word	0x90c00010
 8004fa4:	50000600 	.word	0x50000600
 8004fa8:	50000100 	.word	0x50000100
 8004fac:	50000300 	.word	0x50000300
 8004fb0:	20000388 	.word	0x20000388
 8004fb4:	053e2d63 	.word	0x053e2d63
 8004fb8:	c7520000 	.word	0xc7520000
 8004fbc:	50000500 	.word	0x50000500
 8004fc0:	cb840000 	.word	0xcb840000

08004fc4 <LL_ADC_IsEnabled>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <LL_ADC_IsEnabled+0x18>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <LL_ADC_IsEnabled+0x1a>
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <LL_ADC_REG_IsConversionOngoing>:
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d101      	bne.n	8005002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b0a1      	sub	sp, #132	@ 0x84
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800502a:	2302      	movs	r3, #2
 800502c:	e0e7      	b.n	80051fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005036:	2300      	movs	r3, #0
 8005038:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800503a:	2300      	movs	r3, #0
 800503c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005046:	d102      	bne.n	800504e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005048:	4b6f      	ldr	r3, [pc, #444]	@ (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	e009      	b.n	8005062 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6e      	ldr	r2, [pc, #440]	@ (800520c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d102      	bne.n	800505e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005058:	4b6d      	ldr	r3, [pc, #436]	@ (8005210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	e001      	b.n	8005062 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800505e:	2300      	movs	r3, #0
 8005060:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0be      	b.n	80051fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff ffb1 	bl	8004fea <LL_ADC_REG_IsConversionOngoing>
 8005088:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ffab 	bl	8004fea <LL_ADC_REG_IsConversionOngoing>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 80a0 	bne.w	80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800509c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 809c 	bne.w	80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ac:	d004      	beq.n	80050b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a55      	ldr	r2, [pc, #340]	@ (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80050b8:	4b56      	ldr	r3, [pc, #344]	@ (8005214 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80050ba:	e000      	b.n	80050be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80050bc:	4b56      	ldr	r3, [pc, #344]	@ (8005218 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80050be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d04b      	beq.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050da:	035b      	lsls	r3, r3, #13
 80050dc:	430b      	orrs	r3, r1
 80050de:	431a      	orrs	r2, r3
 80050e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ec:	d004      	beq.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a45      	ldr	r2, [pc, #276]	@ (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d10f      	bne.n	8005118 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80050f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050fc:	f7ff ff62 	bl	8004fc4 <LL_ADC_IsEnabled>
 8005100:	4604      	mov	r4, r0
 8005102:	4841      	ldr	r0, [pc, #260]	@ (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005104:	f7ff ff5e 	bl	8004fc4 <LL_ADC_IsEnabled>
 8005108:	4603      	mov	r3, r0
 800510a:	4323      	orrs	r3, r4
 800510c:	2b00      	cmp	r3, #0
 800510e:	bf0c      	ite	eq
 8005110:	2301      	moveq	r3, #1
 8005112:	2300      	movne	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e012      	b.n	800513e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005118:	483c      	ldr	r0, [pc, #240]	@ (800520c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800511a:	f7ff ff53 	bl	8004fc4 <LL_ADC_IsEnabled>
 800511e:	4604      	mov	r4, r0
 8005120:	483b      	ldr	r0, [pc, #236]	@ (8005210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005122:	f7ff ff4f 	bl	8004fc4 <LL_ADC_IsEnabled>
 8005126:	4603      	mov	r3, r0
 8005128:	431c      	orrs	r4, r3
 800512a:	483c      	ldr	r0, [pc, #240]	@ (800521c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800512c:	f7ff ff4a 	bl	8004fc4 <LL_ADC_IsEnabled>
 8005130:	4603      	mov	r3, r0
 8005132:	4323      	orrs	r3, r4
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d056      	beq.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800514a:	f023 030f 	bic.w	r3, r3, #15
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	6811      	ldr	r1, [r2, #0]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	430a      	orrs	r2, r1
 8005158:	431a      	orrs	r2, r3
 800515a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800515c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800515e:	e047      	b.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005160:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800516a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005174:	d004      	beq.n	8005180 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a23      	ldr	r2, [pc, #140]	@ (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10f      	bne.n	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005180:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005184:	f7ff ff1e 	bl	8004fc4 <LL_ADC_IsEnabled>
 8005188:	4604      	mov	r4, r0
 800518a:	481f      	ldr	r0, [pc, #124]	@ (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800518c:	f7ff ff1a 	bl	8004fc4 <LL_ADC_IsEnabled>
 8005190:	4603      	mov	r3, r0
 8005192:	4323      	orrs	r3, r4
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf0c      	ite	eq
 8005198:	2301      	moveq	r3, #1
 800519a:	2300      	movne	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e012      	b.n	80051c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80051a0:	481a      	ldr	r0, [pc, #104]	@ (800520c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051a2:	f7ff ff0f 	bl	8004fc4 <LL_ADC_IsEnabled>
 80051a6:	4604      	mov	r4, r0
 80051a8:	4819      	ldr	r0, [pc, #100]	@ (8005210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051aa:	f7ff ff0b 	bl	8004fc4 <LL_ADC_IsEnabled>
 80051ae:	4603      	mov	r3, r0
 80051b0:	431c      	orrs	r4, r3
 80051b2:	481a      	ldr	r0, [pc, #104]	@ (800521c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051b4:	f7ff ff06 	bl	8004fc4 <LL_ADC_IsEnabled>
 80051b8:	4603      	mov	r3, r0
 80051ba:	4323      	orrs	r3, r4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bf0c      	ite	eq
 80051c0:	2301      	moveq	r3, #1
 80051c2:	2300      	movne	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d012      	beq.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051d2:	f023 030f 	bic.w	r3, r3, #15
 80051d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80051d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051da:	e009      	b.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80051ee:	e000      	b.n	80051f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3784      	adds	r7, #132	@ 0x84
 8005202:	46bd      	mov	sp, r7
 8005204:	bd90      	pop	{r4, r7, pc}
 8005206:	bf00      	nop
 8005208:	50000100 	.word	0x50000100
 800520c:	50000400 	.word	0x50000400
 8005210:	50000500 	.word	0x50000500
 8005214:	50000300 	.word	0x50000300
 8005218:	50000700 	.word	0x50000700
 800521c:	50000600 	.word	0x50000600

08005220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005230:	4b0c      	ldr	r3, [pc, #48]	@ (8005264 <__NVIC_SetPriorityGrouping+0x44>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800523c:	4013      	ands	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800524c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005252:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <__NVIC_SetPriorityGrouping+0x44>)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	60d3      	str	r3, [r2, #12]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800526c:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <__NVIC_GetPriorityGrouping+0x18>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	0a1b      	lsrs	r3, r3, #8
 8005272:	f003 0307 	and.w	r3, r3, #7
}
 8005276:	4618      	mov	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	e000ed00 	.word	0xe000ed00

08005284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	2b00      	cmp	r3, #0
 8005294:	db0b      	blt.n	80052ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	f003 021f 	and.w	r2, r3, #31
 800529c:	4907      	ldr	r1, [pc, #28]	@ (80052bc <__NVIC_EnableIRQ+0x38>)
 800529e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2001      	movs	r0, #1
 80052a6:	fa00 f202 	lsl.w	r2, r0, r2
 80052aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	e000e100 	.word	0xe000e100

080052c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	6039      	str	r1, [r7, #0]
 80052ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	db0a      	blt.n	80052ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	490c      	ldr	r1, [pc, #48]	@ (800530c <__NVIC_SetPriority+0x4c>)
 80052da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052de:	0112      	lsls	r2, r2, #4
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	440b      	add	r3, r1
 80052e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052e8:	e00a      	b.n	8005300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	4908      	ldr	r1, [pc, #32]	@ (8005310 <__NVIC_SetPriority+0x50>)
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	3b04      	subs	r3, #4
 80052f8:	0112      	lsls	r2, r2, #4
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	440b      	add	r3, r1
 80052fe:	761a      	strb	r2, [r3, #24]
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	e000e100 	.word	0xe000e100
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005314:	b480      	push	{r7}
 8005316:	b089      	sub	sp, #36	@ 0x24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f1c3 0307 	rsb	r3, r3, #7
 800532e:	2b04      	cmp	r3, #4
 8005330:	bf28      	it	cs
 8005332:	2304      	movcs	r3, #4
 8005334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	3304      	adds	r3, #4
 800533a:	2b06      	cmp	r3, #6
 800533c:	d902      	bls.n	8005344 <NVIC_EncodePriority+0x30>
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3b03      	subs	r3, #3
 8005342:	e000      	b.n	8005346 <NVIC_EncodePriority+0x32>
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	43da      	mvns	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	401a      	ands	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800535c:	f04f 31ff 	mov.w	r1, #4294967295
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	fa01 f303 	lsl.w	r3, r1, r3
 8005366:	43d9      	mvns	r1, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800536c:	4313      	orrs	r3, r2
         );
}
 800536e:	4618      	mov	r0, r3
 8005370:	3724      	adds	r7, #36	@ 0x24
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3b01      	subs	r3, #1
 8005388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800538c:	d301      	bcc.n	8005392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800538e:	2301      	movs	r3, #1
 8005390:	e00f      	b.n	80053b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005392:	4a0a      	ldr	r2, [pc, #40]	@ (80053bc <SysTick_Config+0x40>)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3b01      	subs	r3, #1
 8005398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800539a:	210f      	movs	r1, #15
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	f7ff ff8e 	bl	80052c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a4:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <SysTick_Config+0x40>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053aa:	4b04      	ldr	r3, [pc, #16]	@ (80053bc <SysTick_Config+0x40>)
 80053ac:	2207      	movs	r2, #7
 80053ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	e000e010 	.word	0xe000e010

080053c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ff29 	bl	8005220 <__NVIC_SetPriorityGrouping>
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b086      	sub	sp, #24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	4603      	mov	r3, r0
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
 80053e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053e4:	f7ff ff40 	bl	8005268 <__NVIC_GetPriorityGrouping>
 80053e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	f7ff ff90 	bl	8005314 <NVIC_EncodePriority>
 80053f4:	4602      	mov	r2, r0
 80053f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff ff5f 	bl	80052c0 <__NVIC_SetPriority>
}
 8005402:	bf00      	nop
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	4603      	mov	r3, r0
 8005412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff ff33 	bl	8005284 <__NVIC_EnableIRQ>
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff ffa4 	bl	800537c <SysTick_Config>
 8005434:	4603      	mov	r3, r0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e014      	b.n	800547a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	791b      	ldrb	r3, [r3, #4]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7fc f9a7 	bl	80017b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2202      	movs	r2, #2
 800546a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e056      	b.n	8005546 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	795b      	ldrb	r3, [r3, #5]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_DAC_Start+0x20>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e050      	b.n	8005546 <HAL_DAC_Start+0xc2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6819      	ldr	r1, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054c8:	4b22      	ldr	r3, [pc, #136]	@ (8005554 <HAL_DAC_Start+0xd0>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	099b      	lsrs	r3, r3, #6
 80054ce:	4a22      	ldr	r2, [pc, #136]	@ (8005558 <HAL_DAC_Start+0xd4>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	099b      	lsrs	r3, r3, #6
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80054da:	e002      	b.n	80054e2 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b01      	subs	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f9      	bne.n	80054dc <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d11d      	bne.n	8005538 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	605a      	str	r2, [r3, #4]
 800550c:	e014      	b.n	8005538 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2102      	movs	r1, #2
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	429a      	cmp	r2, r3
 8005526:	d107      	bne.n	8005538 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0202 	orr.w	r2, r2, #2
 8005536:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000388 	.word	0x20000388
 8005558:	053e2d63 	.word	0x053e2d63

0800555c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e018      	b.n	80055aa <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d105      	bne.n	8005596 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4413      	add	r3, r2
 8005590:	3308      	adds	r3, #8
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e004      	b.n	80055a0 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4413      	add	r3, r2
 800559c:	3314      	adds	r3, #20
 800559e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	461a      	mov	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_DAC_ConfigChannel+0x1c>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e1a1      	b.n	800591c <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	795b      	ldrb	r3, [r3, #5]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_DAC_ConfigChannel+0x32>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e198      	b.n	800591c <HAL_DAC_ConfigChannel+0x364>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2202      	movs	r2, #2
 80055f4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d17a      	bne.n	80056f4 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80055fe:	f7fe fce1 	bl	8003fc4 <HAL_GetTick>
 8005602:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d13d      	bne.n	8005686 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800560a:	e018      	b.n	800563e <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800560c:	f7fe fcda 	bl	8003fc4 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d911      	bls.n	800563e <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f043 0208 	orr.w	r2, r3, #8
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2203      	movs	r2, #3
 8005638:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e16e      	b.n	800591c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1df      	bne.n	800560c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40
 8005656:	e020      	b.n	800569a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005658:	f7fe fcb4 	bl	8003fc4 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d90f      	bls.n	8005686 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566c:	2b00      	cmp	r3, #0
 800566e:	da0a      	bge.n	8005686 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f043 0208 	orr.w	r2, r3, #8
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2203      	movs	r2, #3
 8005680:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e14a      	b.n	800591c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	dbe3      	blt.n	8005658 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005698:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	43db      	mvns	r3, r3
 80056b0:	ea02 0103 	and.w	r1, r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	21ff      	movs	r1, #255	@ 0xff
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	ea02 0103 	and.w	r1, r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	409a      	lsls	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d11d      	bne.n	8005738 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	221f      	movs	r2, #31
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005714:	4013      	ands	r3, r2
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800572c:	4313      	orrs	r3, r2
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005736:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2207      	movs	r2, #7
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005750:	4013      	ands	r3, r2
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d102      	bne.n	8005762 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800575c:	2300      	movs	r3, #0
 800575e:	623b      	str	r3, [r7, #32]
 8005760:	e00f      	b.n	8005782 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d102      	bne.n	8005770 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800576a:	2301      	movs	r3, #1
 800576c:	623b      	str	r3, [r7, #32]
 800576e:	e008      	b.n	8005782 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005778:	2301      	movs	r3, #1
 800577a:	623b      	str	r3, [r7, #32]
 800577c:	e001      	b.n	8005782 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800577e:	2300      	movs	r3, #0
 8005780:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	6a3a      	ldr	r2, [r7, #32]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	43db      	mvns	r3, r3
 80057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a4:	4013      	ands	r3, r2
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	791b      	ldrb	r3, [r3, #4]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d102      	bne.n	80057b6 <HAL_DAC_ConfigChannel+0x1fe>
 80057b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057b4:	e000      	b.n	80057b8 <HAL_DAC_ConfigChannel+0x200>
 80057b6:	2300      	movs	r3, #0
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d0:	4013      	ands	r3, r2
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	795b      	ldrb	r3, [r3, #5]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d102      	bne.n	80057e2 <HAL_DAC_ConfigChannel+0x22a>
 80057dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057e0:	e000      	b.n	80057e4 <HAL_DAC_ConfigChannel+0x22c>
 80057e2:	2300      	movs	r3, #0
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d114      	bne.n	8005824 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80057fa:	f002 f91f 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 80057fe:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4a48      	ldr	r2, [pc, #288]	@ (8005924 <HAL_DAC_ConfigChannel+0x36c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d904      	bls.n	8005812 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005810:	e00f      	b.n	8005832 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4a44      	ldr	r2, [pc, #272]	@ (8005928 <HAL_DAC_ConfigChannel+0x370>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d90a      	bls.n	8005830 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
 8005822:	e006      	b.n	8005832 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582a:	4313      	orrs	r3, r2
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
 800582e:	e000      	b.n	8005832 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005830:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005840:	4313      	orrs	r3, r2
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800584a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6819      	ldr	r1, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43da      	mvns	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	400a      	ands	r2, r1
 8005868:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	43db      	mvns	r3, r3
 8005882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005884:	4013      	ands	r3, r2
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589c:	4313      	orrs	r3, r2
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6819      	ldr	r1, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	22c0      	movs	r2, #192	@ 0xc0
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43da      	mvns	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	400a      	ands	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	089b      	lsrs	r3, r3, #2
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80058f2:	fa01 f303 	lsl.w	r3, r1, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	ea02 0103 	and.w	r1, r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	409a      	lsls	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800591a:	7ffb      	ldrb	r3, [r7, #31]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3728      	adds	r7, #40	@ 0x28
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	09896800 	.word	0x09896800
 8005928:	04c4b400 	.word	0x04c4b400

0800592c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e08d      	b.n	8005a5a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	4b47      	ldr	r3, [pc, #284]	@ (8005a64 <HAL_DMA_Init+0x138>)
 8005946:	429a      	cmp	r2, r3
 8005948:	d80f      	bhi.n	800596a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	4b45      	ldr	r3, [pc, #276]	@ (8005a68 <HAL_DMA_Init+0x13c>)
 8005952:	4413      	add	r3, r2
 8005954:	4a45      	ldr	r2, [pc, #276]	@ (8005a6c <HAL_DMA_Init+0x140>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	009a      	lsls	r2, r3, #2
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a42      	ldr	r2, [pc, #264]	@ (8005a70 <HAL_DMA_Init+0x144>)
 8005966:	641a      	str	r2, [r3, #64]	@ 0x40
 8005968:	e00e      	b.n	8005988 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	4b40      	ldr	r3, [pc, #256]	@ (8005a74 <HAL_DMA_Init+0x148>)
 8005972:	4413      	add	r3, r2
 8005974:	4a3d      	ldr	r2, [pc, #244]	@ (8005a6c <HAL_DMA_Init+0x140>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	091b      	lsrs	r3, r3, #4
 800597c:	009a      	lsls	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a3c      	ldr	r2, [pc, #240]	@ (8005a78 <HAL_DMA_Init+0x14c>)
 8005986:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa76 	bl	8005ecc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059e8:	d102      	bne.n	80059f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a04:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d010      	beq.n	8005a30 <HAL_DMA_Init+0x104>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d80c      	bhi.n	8005a30 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa96 	bl	8005f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	e008      	b.n	8005a42 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40020407 	.word	0x40020407
 8005a68:	bffdfff8 	.word	0xbffdfff8
 8005a6c:	cccccccd 	.word	0xcccccccd
 8005a70:	40020000 	.word	0x40020000
 8005a74:	bffdfbf8 	.word	0xbffdfbf8
 8005a78:	40020400 	.word	0x40020400

08005a7c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_DMA_Start_IT+0x20>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e066      	b.n	8005b6a <HAL_DMA_Start_IT+0xee>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d155      	bne.n	8005b5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f9bb 	bl	8005e50 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 020e 	orr.w	r2, r2, #14
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e00f      	b.n	8005b14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0204 	bic.w	r2, r2, #4
 8005b02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 020a 	orr.w	r2, r2, #10
 8005b12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b30:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e005      	b.n	8005b68 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
 8005b66:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d005      	beq.n	8005b96 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	e037      	b.n	8005c06 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 020e 	bic.w	r2, r2, #14
 8005ba4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bb4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bca:	f003 021f 	and.w	r2, r3, #31
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005be2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00c      	beq.n	8005c06 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bfa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c04:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d00d      	beq.n	8005c58 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2204      	movs	r2, #4
 8005c40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
 8005c56:	e047      	b.n	8005ce8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 020e 	bic.w	r2, r2, #14
 8005c66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8c:	f003 021f 	and.w	r2, r3, #31
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	2101      	movs	r1, #1
 8005c96:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ca4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00c      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
    }
  }
  return status;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2204      	movs	r2, #4
 8005d14:	409a      	lsls	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d026      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x7a>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d021      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d107      	bne.n	8005d46 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0204 	bic.w	r2, r2, #4
 8005d44:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	f003 021f 	and.w	r2, r3, #31
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	2104      	movs	r1, #4
 8005d54:	fa01 f202 	lsl.w	r2, r1, r2
 8005d58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d071      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d6a:	e06c      	b.n	8005e46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2202      	movs	r2, #2
 8005d76:	409a      	lsls	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02e      	beq.n	8005dde <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d029      	beq.n	8005dde <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 020a 	bic.w	r2, r2, #10
 8005da6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db4:	f003 021f 	and.w	r2, r3, #31
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d038      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ddc:	e033      	b.n	8005e46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2208      	movs	r2, #8
 8005de8:	409a      	lsls	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02a      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d025      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 020e 	bic.w	r2, r2, #14
 8005e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	f003 021f 	and.w	r2, r3, #31
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e18:	2101      	movs	r1, #1
 8005e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
}
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e66:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e78:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7e:	f003 021f 	and.w	r2, r3, #31
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	2101      	movs	r1, #1
 8005e88:	fa01 f202 	lsl.w	r2, r1, r2
 8005e8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d108      	bne.n	8005eb0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005eae:	e007      	b.n	8005ec0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b16      	ldr	r3, [pc, #88]	@ (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d802      	bhi.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ee0:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e001      	b.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005ee6:	4b15      	ldr	r3, [pc, #84]	@ (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ee8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	3b08      	subs	r3, #8
 8005ef6:	4a12      	ldr	r2, [pc, #72]	@ (8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	009a      	lsls	r2, r3, #2
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a0b      	ldr	r2, [pc, #44]	@ (8005f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005f16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f003 031f 	and.w	r3, r3, #31
 8005f1e:	2201      	movs	r2, #1
 8005f20:	409a      	lsls	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40020407 	.word	0x40020407
 8005f38:	40020800 	.word	0x40020800
 8005f3c:	40020820 	.word	0x40020820
 8005f40:	cccccccd 	.word	0xcccccccd
 8005f44:	40020880 	.word	0x40020880

08005f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	461a      	mov	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a08      	ldr	r2, [pc, #32]	@ (8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f6a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2201      	movs	r2, #1
 8005f76:	409a      	lsls	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	1000823f 	.word	0x1000823f
 8005f8c:	40020940 	.word	0x40020940

08005f90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e147      	b.n	8006232 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fb fcaa 	bl	8001910 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0210 	bic.w	r2, r2, #16
 8005fca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fcc:	f7fd fffa 	bl	8003fc4 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fd2:	e012      	b.n	8005ffa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fd4:	f7fd fff6 	bl	8003fc4 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b0a      	cmp	r3, #10
 8005fe0:	d90b      	bls.n	8005ffa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe6:	f043 0201 	orr.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e11b      	b.n	8006232 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b08      	cmp	r3, #8
 8006006:	d0e5      	beq.n	8005fd4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006018:	f7fd ffd4 	bl	8003fc4 <HAL_GetTick>
 800601c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800601e:	e012      	b.n	8006046 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006020:	f7fd ffd0 	bl	8003fc4 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b0a      	cmp	r3, #10
 800602c:	d90b      	bls.n	8006046 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006032:	f043 0201 	orr.w	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2203      	movs	r2, #3
 800603e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0f5      	b.n	8006232 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0e5      	beq.n	8006020 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0202 	orr.w	r2, r2, #2
 8006062:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a74      	ldr	r2, [pc, #464]	@ (800623c <HAL_FDCAN_Init+0x2ac>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d103      	bne.n	8006076 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800606e:	4a74      	ldr	r2, [pc, #464]	@ (8006240 <HAL_FDCAN_Init+0x2b0>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7c1b      	ldrb	r3, [r3, #16]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d108      	bne.n	8006090 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800608c:	619a      	str	r2, [r3, #24]
 800608e:	e007      	b.n	80060a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800609e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	7c5b      	ldrb	r3, [r3, #17]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d108      	bne.n	80060ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b6:	619a      	str	r2, [r3, #24]
 80060b8:	e007      	b.n	80060ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7c9b      	ldrb	r3, [r3, #18]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d108      	bne.n	80060e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699a      	ldr	r2, [r3, #24]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060e0:	619a      	str	r2, [r3, #24]
 80060e2:	e007      	b.n	80060f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006118:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0210 	bic.w	r2, r2, #16
 8006128:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d108      	bne.n	8006144 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0204 	orr.w	r2, r2, #4
 8006140:	619a      	str	r2, [r3, #24]
 8006142:	e02c      	b.n	800619e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d028      	beq.n	800619e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d01c      	beq.n	800618e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006162:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0210 	orr.w	r2, r2, #16
 8006172:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d110      	bne.n	800619e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0220 	orr.w	r2, r2, #32
 800618a:	619a      	str	r2, [r3, #24]
 800618c:	e007      	b.n	800619e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0220 	orr.w	r2, r2, #32
 800619c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80061b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	3b01      	subs	r3, #1
 80061c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061d2:	d115      	bne.n	8006200 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	3b01      	subs	r3, #1
 80061e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e8:	3b01      	subs	r3, #1
 80061ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	3b01      	subs	r3, #1
 80061f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fbfc 	bl	8006a14 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40006400 	.word	0x40006400
 8006240:	40006500 	.word	0x40006500

08006244 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	d110      	bne.n	800627a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e006      	b.n	8006288 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627e:	f043 0204 	orr.w	r2, r3, #4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
  }
}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d12c      	bne.n	8006306 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80062b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e023      	b.n	8006314 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fc02 	bl	8006aec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2101      	movs	r1, #1
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	fa01 f202 	lsl.w	r2, r1, r2
 80062f4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80062f8:	2201      	movs	r2, #1
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	409a      	lsls	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	e006      	b.n	8006314 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800630a:	f043 0208 	orr.w	r2, r3, #8
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
  }
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800631c:	b480      	push	{r7}
 800631e:	b08b      	sub	sp, #44	@ 0x2c
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006334:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006336:	7efb      	ldrb	r3, [r7, #27]
 8006338:	2b02      	cmp	r3, #2
 800633a:	f040 80e8 	bne.w	800650e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b40      	cmp	r3, #64	@ 0x40
 8006342:	d137      	bne.n	80063b4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	2b00      	cmp	r3, #0
 8006352:	d107      	bne.n	8006364 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006358:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0db      	b.n	800651c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636c:	0e1b      	lsrs	r3, r3, #24
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d10a      	bne.n	800638c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800637e:	0a5b      	lsrs	r3, r3, #9
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006388:	2301      	movs	r3, #1
 800638a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	4613      	mov	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4413      	add	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	440b      	add	r3, r1
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b2:	e036      	b.n	8006422 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d107      	bne.n	80063d4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0a3      	b.n	800651c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063dc:	0e1b      	lsrs	r3, r3, #24
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10a      	bne.n	80063fc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80063f8:	2301      	movs	r3, #1
 80063fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006404:	0a1b      	lsrs	r3, r3, #8
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	4613      	mov	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	440b      	add	r3, r1
 8006420:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d107      	bne.n	8006446 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	0c9b      	lsrs	r3, r3, #18
 800643c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	e005      	b.n	8006452 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	3304      	adds	r3, #4
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	b29a      	uxth	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	0c1b      	lsrs	r3, r3, #16
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	0e1b      	lsrs	r3, r3, #24
 80064a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	0fda      	lsrs	r2, r3, #31
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	3304      	adds	r3, #4
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	e00a      	b.n	80064de <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	441a      	add	r2, r3
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	440b      	add	r3, r1
 80064d4:	7812      	ldrb	r2, [r2, #0]
 80064d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	3301      	adds	r3, #1
 80064dc:	623b      	str	r3, [r7, #32]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	4a11      	ldr	r2, [pc, #68]	@ (8006528 <HAL_FDCAN_GetRxMessage+0x20c>)
 80064e4:	5cd3      	ldrb	r3, [r2, r3]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d3ec      	bcc.n	80064c8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b40      	cmp	r3, #64	@ 0x40
 80064f2:	d105      	bne.n	8006500 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80064fe:	e004      	b.n	800650a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e006      	b.n	800651c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006512:	f043 0208 	orr.w	r2, r3, #8
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
  }
}
 800651c:	4618      	mov	r0, r3
 800651e:	372c      	adds	r7, #44	@ 0x2c
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	0800c7d4 	.word	0x0800c7d4

0800652c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800653e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d003      	beq.n	800654e <HAL_FDCAN_ActivateNotification+0x22>
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b02      	cmp	r3, #2
 800654a:	f040 80c8 	bne.w	80066de <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006554:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d03b      	beq.n	80065e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d031      	beq.n	80065e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d027      	beq.n	80065e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01d      	beq.n	80065e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d013      	beq.n	80065e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d107      	bne.n	80065f2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0201 	orr.w	r2, r2, #1
 80065f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d13b      	bne.n	800667e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d131      	bne.n	800667e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d127      	bne.n	800667e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11d      	bne.n	800667e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0310 	and.w	r3, r3, #16
 8006652:	2b00      	cmp	r3, #0
 8006654:	d113      	bne.n	800667e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0202 	orr.w	r2, r2, #2
 800668c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	e006      	b.n	80066ec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	f043 0202 	orr.w	r2, r3, #2
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
  }
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08c      	sub	sp, #48	@ 0x30
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006706:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800670a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006714:	4013      	ands	r3, r2
 8006716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800672c:	4013      	ands	r3, r2
 800672e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006736:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006744:	4013      	ands	r3, r2
 8006746:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800674e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006752:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	4013      	ands	r3, r2
 800675e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006766:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800676a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	4013      	ands	r3, r2
 8006776:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006786:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d006      	beq.n	80067aa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2240      	movs	r2, #64	@ 0x40
 80067a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f916 	bl	80069d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d019      	beq.n	80067e8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d014      	beq.n	80067e8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80067c6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4013      	ands	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80067e0:	6939      	ldr	r1, [r7, #16]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f8d8 	bl	8006998 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80067f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f8a2 	bl	8006942 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d007      	beq.n	8006814 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800680a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800680c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fb fafc 	bl	8001e0c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006820:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006822:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f897 	bl	8006958 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00c      	beq.n	800684e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006846:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f890 	bl	800696e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006854:	2b00      	cmp	r3, #0
 8006856:	d018      	beq.n	800688a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800685e:	2b00      	cmp	r3, #0
 8006860:	d013      	beq.n	800688a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800686a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4013      	ands	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2280      	movs	r2, #128	@ 0x80
 8006880:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f87c 	bl	8006982 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00c      	beq.n	80068ae <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f880 	bl	80069ae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00c      	beq.n	80068d2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80068ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f878 	bl	80069c2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00f      	beq.n	80068fc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80068ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d007      	beq.n	8006912 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800690a:	69f9      	ldr	r1, [r7, #28]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f876 	bl	80069fe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f858 	bl	80069ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800693a:	bf00      	nop
 800693c:	3730      	adds	r7, #48	@ 0x30
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006a1c:	4b30      	ldr	r3, [pc, #192]	@ (8006ae0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006a1e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a2f      	ldr	r2, [pc, #188]	@ (8006ae4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d103      	bne.n	8006a32 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a30:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d103      	bne.n	8006a44 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8006a42:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a52:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5a:	041a      	lsls	r2, r3, #16
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a78:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	061a      	lsls	r2, r3, #24
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e005      	b.n	8006ac6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d3f3      	bcc.n	8006aba <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	4000a400 	.word	0x4000a400
 8006ae4:	40006800 	.word	0x40006800
 8006ae8:	40006c00 	.word	0x40006c00

08006aec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b089      	sub	sp, #36	@ 0x24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006b0a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b12:	4313      	orrs	r3, r2
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	e00a      	b.n	8006b2e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006b20:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006b26:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b2c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b38:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006b3e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006b44:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	4613      	mov	r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	440b      	add	r3, r1
 8006b60:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	3304      	adds	r3, #4
 8006b78:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	e020      	b.n	8006bc2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3303      	adds	r3, #3
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	4413      	add	r3, r2
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	3302      	adds	r3, #2
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	440b      	add	r3, r1
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b98:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	440b      	add	r3, r1
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006ba6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	440a      	add	r2, r1
 8006bae:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006bb0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	4a06      	ldr	r2, [pc, #24]	@ (8006be0 <FDCAN_CopyMessageToRAM+0xf4>)
 8006bc8:	5cd3      	ldrb	r3, [r2, r3]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d3d6      	bcc.n	8006b80 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	3724      	adds	r7, #36	@ 0x24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	0800c7d4 	.word	0x0800c7d4

08006be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bf2:	e15a      	b.n	8006eaa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006c00:	4013      	ands	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 814c 	beq.w	8006ea4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d005      	beq.n	8006c24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d130      	bne.n	8006c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	2203      	movs	r2, #3
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	43db      	mvns	r3, r3
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	fa02 f303 	lsl.w	r3, r2, r3
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43db      	mvns	r3, r3
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4013      	ands	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	091b      	lsrs	r3, r3, #4
 8006c70:	f003 0201 	and.w	r2, r3, #1
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d017      	beq.n	8006cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d123      	bne.n	8006d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	08da      	lsrs	r2, r3, #3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3208      	adds	r2, #8
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	220f      	movs	r2, #15
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	43db      	mvns	r3, r3
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	08da      	lsrs	r2, r3, #3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3208      	adds	r2, #8
 8006d10:	6939      	ldr	r1, [r7, #16]
 8006d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	2203      	movs	r2, #3
 8006d22:	fa02 f303 	lsl.w	r3, r2, r3
 8006d26:	43db      	mvns	r3, r3
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f003 0203 	and.w	r2, r3, #3
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80a6 	beq.w	8006ea4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d58:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec8 <HAL_GPIO_Init+0x2e4>)
 8006d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ec8 <HAL_GPIO_Init+0x2e4>)
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	6613      	str	r3, [r2, #96]	@ 0x60
 8006d64:	4b58      	ldr	r3, [pc, #352]	@ (8006ec8 <HAL_GPIO_Init+0x2e4>)
 8006d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	60bb      	str	r3, [r7, #8]
 8006d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d70:	4a56      	ldr	r2, [pc, #344]	@ (8006ecc <HAL_GPIO_Init+0x2e8>)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	089b      	lsrs	r3, r3, #2
 8006d76:	3302      	adds	r3, #2
 8006d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	220f      	movs	r2, #15
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4013      	ands	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006d9a:	d01f      	beq.n	8006ddc <HAL_GPIO_Init+0x1f8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8006ed0 <HAL_GPIO_Init+0x2ec>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d019      	beq.n	8006dd8 <HAL_GPIO_Init+0x1f4>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a4b      	ldr	r2, [pc, #300]	@ (8006ed4 <HAL_GPIO_Init+0x2f0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d013      	beq.n	8006dd4 <HAL_GPIO_Init+0x1f0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a4a      	ldr	r2, [pc, #296]	@ (8006ed8 <HAL_GPIO_Init+0x2f4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00d      	beq.n	8006dd0 <HAL_GPIO_Init+0x1ec>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a49      	ldr	r2, [pc, #292]	@ (8006edc <HAL_GPIO_Init+0x2f8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d007      	beq.n	8006dcc <HAL_GPIO_Init+0x1e8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a48      	ldr	r2, [pc, #288]	@ (8006ee0 <HAL_GPIO_Init+0x2fc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d101      	bne.n	8006dc8 <HAL_GPIO_Init+0x1e4>
 8006dc4:	2305      	movs	r3, #5
 8006dc6:	e00a      	b.n	8006dde <HAL_GPIO_Init+0x1fa>
 8006dc8:	2306      	movs	r3, #6
 8006dca:	e008      	b.n	8006dde <HAL_GPIO_Init+0x1fa>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	e006      	b.n	8006dde <HAL_GPIO_Init+0x1fa>
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e004      	b.n	8006dde <HAL_GPIO_Init+0x1fa>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e002      	b.n	8006dde <HAL_GPIO_Init+0x1fa>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e000      	b.n	8006dde <HAL_GPIO_Init+0x1fa>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	f002 0203 	and.w	r2, r2, #3
 8006de4:	0092      	lsls	r2, r2, #2
 8006de6:	4093      	lsls	r3, r2
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dee:	4937      	ldr	r1, [pc, #220]	@ (8006ecc <HAL_GPIO_Init+0x2e8>)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	089b      	lsrs	r3, r3, #2
 8006df4:	3302      	adds	r3, #2
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006dfc:	4b39      	ldr	r3, [pc, #228]	@ (8006ee4 <HAL_GPIO_Init+0x300>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	43db      	mvns	r3, r3
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e20:	4a30      	ldr	r2, [pc, #192]	@ (8006ee4 <HAL_GPIO_Init+0x300>)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006e26:	4b2f      	ldr	r3, [pc, #188]	@ (8006ee4 <HAL_GPIO_Init+0x300>)
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	43db      	mvns	r3, r3
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4013      	ands	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e4a:	4a26      	ldr	r2, [pc, #152]	@ (8006ee4 <HAL_GPIO_Init+0x300>)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006e50:	4b24      	ldr	r3, [pc, #144]	@ (8006ee4 <HAL_GPIO_Init+0x300>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee4 <HAL_GPIO_Init+0x300>)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <HAL_GPIO_Init+0x300>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	43db      	mvns	r3, r3
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4013      	ands	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e9e:	4a11      	ldr	r2, [pc, #68]	@ (8006ee4 <HAL_GPIO_Init+0x300>)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f47f ae9d 	bne.w	8006bf4 <HAL_GPIO_Init+0x10>
  }
}
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	40010000 	.word	0x40010000
 8006ed0:	48000400 	.word	0x48000400
 8006ed4:	48000800 	.word	0x48000800
 8006ed8:	48000c00 	.word	0x48000c00
 8006edc:	48001000 	.word	0x48001000
 8006ee0:	48001400 	.word	0x48001400
 8006ee4:	40010400 	.word	0x40010400

08006ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	887b      	ldrh	r3, [r7, #2]
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
 8006f04:	e001      	b.n	8006f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	807b      	strh	r3, [r7, #2]
 8006f24:	4613      	mov	r3, r2
 8006f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f28:	787b      	ldrb	r3, [r7, #1]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f2e:	887a      	ldrh	r2, [r7, #2]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f34:	e002      	b.n	8006f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f52:	4b08      	ldr	r3, [pc, #32]	@ (8006f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d006      	beq.n	8006f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f5e:	4a05      	ldr	r2, [pc, #20]	@ (8006f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fa ff2e 	bl	8001dc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40010400 	.word	0x40010400

08006f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d141      	bne.n	800700a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f86:	4b4b      	ldr	r3, [pc, #300]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f92:	d131      	bne.n	8006ff8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f94:	4b47      	ldr	r3, [pc, #284]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f9a:	4a46      	ldr	r2, [pc, #280]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006fa4:	4b43      	ldr	r3, [pc, #268]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006fac:	4a41      	ldr	r2, [pc, #260]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006fb4:	4b40      	ldr	r3, [pc, #256]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2232      	movs	r2, #50	@ 0x32
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80070bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc4:	0c9b      	lsrs	r3, r3, #18
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fca:	e002      	b.n	8006fd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fd2:	4b38      	ldr	r3, [pc, #224]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fde:	d102      	bne.n	8006fe6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f2      	bne.n	8006fcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fe6:	4b33      	ldr	r3, [pc, #204]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff2:	d158      	bne.n	80070a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e057      	b.n	80070a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007004:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007008:	e04d      	b.n	80070a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007010:	d141      	bne.n	8007096 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007012:	4b28      	ldr	r3, [pc, #160]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800701a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800701e:	d131      	bne.n	8007084 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007020:	4b24      	ldr	r3, [pc, #144]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007026:	4a23      	ldr	r2, [pc, #140]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800702c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007030:	4b20      	ldr	r3, [pc, #128]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007038:	4a1e      	ldr	r2, [pc, #120]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800703a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800703e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007040:	4b1d      	ldr	r3, [pc, #116]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2232      	movs	r2, #50	@ 0x32
 8007046:	fb02 f303 	mul.w	r3, r2, r3
 800704a:	4a1c      	ldr	r2, [pc, #112]	@ (80070bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800704c:	fba2 2303 	umull	r2, r3, r2, r3
 8007050:	0c9b      	lsrs	r3, r3, #18
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007056:	e002      	b.n	800705e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3b01      	subs	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800705e:	4b15      	ldr	r3, [pc, #84]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706a:	d102      	bne.n	8007072 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1f2      	bne.n	8007058 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007072:	4b10      	ldr	r3, [pc, #64]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800707a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800707e:	d112      	bne.n	80070a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e011      	b.n	80070a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007084:	4b0b      	ldr	r3, [pc, #44]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800708a:	4a0a      	ldr	r2, [pc, #40]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007094:	e007      	b.n	80070a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007096:	4b07      	ldr	r3, [pc, #28]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800709e:	4a05      	ldr	r2, [pc, #20]	@ (80070b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80070a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40007000 	.word	0x40007000
 80070b8:	20000388 	.word	0x20000388
 80070bc:	431bde83 	.word	0x431bde83

080070c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80070c4:	4b05      	ldr	r3, [pc, #20]	@ (80070dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4a04      	ldr	r2, [pc, #16]	@ (80070dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070ce:	6093      	str	r3, [r2, #8]
}
 80070d0:	bf00      	nop
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40007000 	.word	0x40007000

080070e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e2fe      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d075      	beq.n	80071ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070fe:	4b97      	ldr	r3, [pc, #604]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007108:	4b94      	ldr	r3, [pc, #592]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b0c      	cmp	r3, #12
 8007116:	d102      	bne.n	800711e <HAL_RCC_OscConfig+0x3e>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b03      	cmp	r3, #3
 800711c:	d002      	beq.n	8007124 <HAL_RCC_OscConfig+0x44>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b08      	cmp	r3, #8
 8007122:	d10b      	bne.n	800713c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007124:	4b8d      	ldr	r3, [pc, #564]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d05b      	beq.n	80071e8 <HAL_RCC_OscConfig+0x108>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d157      	bne.n	80071e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e2d9      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007144:	d106      	bne.n	8007154 <HAL_RCC_OscConfig+0x74>
 8007146:	4b85      	ldr	r3, [pc, #532]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a84      	ldr	r2, [pc, #528]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800714c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	e01d      	b.n	8007190 <HAL_RCC_OscConfig+0xb0>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800715c:	d10c      	bne.n	8007178 <HAL_RCC_OscConfig+0x98>
 800715e:	4b7f      	ldr	r3, [pc, #508]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a7e      	ldr	r2, [pc, #504]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	4b7c      	ldr	r3, [pc, #496]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a7b      	ldr	r2, [pc, #492]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e00b      	b.n	8007190 <HAL_RCC_OscConfig+0xb0>
 8007178:	4b78      	ldr	r3, [pc, #480]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a77      	ldr	r2, [pc, #476]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800717e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	4b75      	ldr	r3, [pc, #468]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a74      	ldr	r2, [pc, #464]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800718a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800718e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d013      	beq.n	80071c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007198:	f7fc ff14 	bl	8003fc4 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071a0:	f7fc ff10 	bl	8003fc4 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b64      	cmp	r3, #100	@ 0x64
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e29e      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071b2:	4b6a      	ldr	r3, [pc, #424]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0f0      	beq.n	80071a0 <HAL_RCC_OscConfig+0xc0>
 80071be:	e014      	b.n	80071ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c0:	f7fc ff00 	bl	8003fc4 <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071c8:	f7fc fefc 	bl	8003fc4 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b64      	cmp	r3, #100	@ 0x64
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e28a      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071da:	4b60      	ldr	r3, [pc, #384]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f0      	bne.n	80071c8 <HAL_RCC_OscConfig+0xe8>
 80071e6:	e000      	b.n	80071ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d075      	beq.n	80072e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071f6:	4b59      	ldr	r3, [pc, #356]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 030c 	and.w	r3, r3, #12
 80071fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007200:	4b56      	ldr	r3, [pc, #344]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b0c      	cmp	r3, #12
 800720e:	d102      	bne.n	8007216 <HAL_RCC_OscConfig+0x136>
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d002      	beq.n	800721c <HAL_RCC_OscConfig+0x13c>
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b04      	cmp	r3, #4
 800721a:	d11f      	bne.n	800725c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800721c:	4b4f      	ldr	r3, [pc, #316]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <HAL_RCC_OscConfig+0x154>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e25d      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007234:	4b49      	ldr	r3, [pc, #292]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	061b      	lsls	r3, r3, #24
 8007242:	4946      	ldr	r1, [pc, #280]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007244:	4313      	orrs	r3, r2
 8007246:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007248:	4b45      	ldr	r3, [pc, #276]	@ (8007360 <HAL_RCC_OscConfig+0x280>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f7fc fe6d 	bl	8003f2c <HAL_InitTick>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d043      	beq.n	80072e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e249      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d023      	beq.n	80072ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007264:	4b3d      	ldr	r3, [pc, #244]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a3c      	ldr	r2, [pc, #240]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800726a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800726e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fc fea8 	bl	8003fc4 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007278:	f7fc fea4 	bl	8003fc4 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e232      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800728a:	4b34      	ldr	r3, [pc, #208]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f0      	beq.n	8007278 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007296:	4b31      	ldr	r3, [pc, #196]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	061b      	lsls	r3, r3, #24
 80072a4:	492d      	ldr	r1, [pc, #180]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	604b      	str	r3, [r1, #4]
 80072aa:	e01a      	b.n	80072e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ac:	4b2b      	ldr	r3, [pc, #172]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a2a      	ldr	r2, [pc, #168]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80072b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b8:	f7fc fe84 	bl	8003fc4 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072c0:	f7fc fe80 	bl	8003fc4 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e20e      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072d2:	4b22      	ldr	r3, [pc, #136]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0x1e0>
 80072de:	e000      	b.n	80072e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0308 	and.w	r3, r3, #8
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d041      	beq.n	8007372 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d01c      	beq.n	8007330 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072f6:	4b19      	ldr	r3, [pc, #100]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80072f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072fc:	4a17      	ldr	r2, [pc, #92]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007306:	f7fc fe5d 	bl	8003fc4 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800730c:	e008      	b.n	8007320 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800730e:	f7fc fe59 	bl	8003fc4 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e1e7      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007320:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0ef      	beq.n	800730e <HAL_RCC_OscConfig+0x22e>
 800732e:	e020      	b.n	8007372 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007336:	4a09      	ldr	r2, [pc, #36]	@ (800735c <HAL_RCC_OscConfig+0x27c>)
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007340:	f7fc fe40 	bl	8003fc4 <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007346:	e00d      	b.n	8007364 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007348:	f7fc fe3c 	bl	8003fc4 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b02      	cmp	r3, #2
 8007354:	d906      	bls.n	8007364 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e1ca      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
 800735a:	bf00      	nop
 800735c:	40021000 	.word	0x40021000
 8007360:	2000038c 	.word	0x2000038c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007364:	4b8c      	ldr	r3, [pc, #560]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1ea      	bne.n	8007348 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80a6 	beq.w	80074cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007380:	2300      	movs	r3, #0
 8007382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007384:	4b84      	ldr	r3, [pc, #528]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_RCC_OscConfig+0x2b4>
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <HAL_RCC_OscConfig+0x2b6>
 8007394:	2300      	movs	r3, #0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739a:	4b7f      	ldr	r3, [pc, #508]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 800739c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739e:	4a7e      	ldr	r2, [pc, #504]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 80073a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80073a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 80073a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80073b2:	2301      	movs	r3, #1
 80073b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073b6:	4b79      	ldr	r3, [pc, #484]	@ (800759c <HAL_RCC_OscConfig+0x4bc>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d118      	bne.n	80073f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073c2:	4b76      	ldr	r3, [pc, #472]	@ (800759c <HAL_RCC_OscConfig+0x4bc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a75      	ldr	r2, [pc, #468]	@ (800759c <HAL_RCC_OscConfig+0x4bc>)
 80073c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ce:	f7fc fdf9 	bl	8003fc4 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073d4:	e008      	b.n	80073e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073d6:	f7fc fdf5 	bl	8003fc4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e183      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073e8:	4b6c      	ldr	r3, [pc, #432]	@ (800759c <HAL_RCC_OscConfig+0x4bc>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0f0      	beq.n	80073d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d108      	bne.n	800740e <HAL_RCC_OscConfig+0x32e>
 80073fc:	4b66      	ldr	r3, [pc, #408]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007402:	4a65      	ldr	r2, [pc, #404]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800740c:	e024      	b.n	8007458 <HAL_RCC_OscConfig+0x378>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b05      	cmp	r3, #5
 8007414:	d110      	bne.n	8007438 <HAL_RCC_OscConfig+0x358>
 8007416:	4b60      	ldr	r3, [pc, #384]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741c:	4a5e      	ldr	r2, [pc, #376]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 800741e:	f043 0304 	orr.w	r3, r3, #4
 8007422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007426:	4b5c      	ldr	r3, [pc, #368]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742c:	4a5a      	ldr	r2, [pc, #360]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 800742e:	f043 0301 	orr.w	r3, r3, #1
 8007432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007436:	e00f      	b.n	8007458 <HAL_RCC_OscConfig+0x378>
 8007438:	4b57      	ldr	r3, [pc, #348]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743e:	4a56      	ldr	r2, [pc, #344]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007440:	f023 0301 	bic.w	r3, r3, #1
 8007444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007448:	4b53      	ldr	r3, [pc, #332]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744e:	4a52      	ldr	r2, [pc, #328]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d016      	beq.n	800748e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007460:	f7fc fdb0 	bl	8003fc4 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007466:	e00a      	b.n	800747e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007468:	f7fc fdac 	bl	8003fc4 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007476:	4293      	cmp	r3, r2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e138      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800747e:	4b46      	ldr	r3, [pc, #280]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0ed      	beq.n	8007468 <HAL_RCC_OscConfig+0x388>
 800748c:	e015      	b.n	80074ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748e:	f7fc fd99 	bl	8003fc4 <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007494:	e00a      	b.n	80074ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f7fc fd95 	bl	8003fc4 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e121      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074ac:	4b3a      	ldr	r3, [pc, #232]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1ed      	bne.n	8007496 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074ba:	7ffb      	ldrb	r3, [r7, #31]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d105      	bne.n	80074cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c0:	4b35      	ldr	r3, [pc, #212]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 80074c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c4:	4a34      	ldr	r2, [pc, #208]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 80074c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d03c      	beq.n	8007552 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01c      	beq.n	800751a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 80074e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 80074e8:	f043 0301 	orr.w	r3, r3, #1
 80074ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f0:	f7fc fd68 	bl	8003fc4 <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074f8:	f7fc fd64 	bl	8003fc4 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e0f2      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800750a:	4b23      	ldr	r3, [pc, #140]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 800750c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0ef      	beq.n	80074f8 <HAL_RCC_OscConfig+0x418>
 8007518:	e01b      	b.n	8007552 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800751a:	4b1f      	ldr	r3, [pc, #124]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 800751c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007520:	4a1d      	ldr	r2, [pc, #116]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007522:	f023 0301 	bic.w	r3, r3, #1
 8007526:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752a:	f7fc fd4b 	bl	8003fc4 <HAL_GetTick>
 800752e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007530:	e008      	b.n	8007544 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007532:	f7fc fd47 	bl	8003fc4 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e0d5      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007544:	4b14      	ldr	r3, [pc, #80]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007546:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1ef      	bne.n	8007532 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80c9 	beq.w	80076ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800755c:	4b0e      	ldr	r3, [pc, #56]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 030c 	and.w	r3, r3, #12
 8007564:	2b0c      	cmp	r3, #12
 8007566:	f000 8083 	beq.w	8007670 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	2b02      	cmp	r3, #2
 8007570:	d15e      	bne.n	8007630 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007572:	4b09      	ldr	r3, [pc, #36]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a08      	ldr	r2, [pc, #32]	@ (8007598 <HAL_RCC_OscConfig+0x4b8>)
 8007578:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800757c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757e:	f7fc fd21 	bl	8003fc4 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007584:	e00c      	b.n	80075a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007586:	f7fc fd1d 	bl	8003fc4 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d905      	bls.n	80075a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e0ab      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
 8007598:	40021000 	.word	0x40021000
 800759c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075a0:	4b55      	ldr	r3, [pc, #340]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1ec      	bne.n	8007586 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075ac:	4b52      	ldr	r3, [pc, #328]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	4b52      	ldr	r3, [pc, #328]	@ (80076fc <HAL_RCC_OscConfig+0x61c>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6a11      	ldr	r1, [r2, #32]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075bc:	3a01      	subs	r2, #1
 80075be:	0112      	lsls	r2, r2, #4
 80075c0:	4311      	orrs	r1, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80075c6:	0212      	lsls	r2, r2, #8
 80075c8:	4311      	orrs	r1, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80075ce:	0852      	lsrs	r2, r2, #1
 80075d0:	3a01      	subs	r2, #1
 80075d2:	0552      	lsls	r2, r2, #21
 80075d4:	4311      	orrs	r1, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80075da:	0852      	lsrs	r2, r2, #1
 80075dc:	3a01      	subs	r2, #1
 80075de:	0652      	lsls	r2, r2, #25
 80075e0:	4311      	orrs	r1, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80075e6:	06d2      	lsls	r2, r2, #27
 80075e8:	430a      	orrs	r2, r1
 80075ea:	4943      	ldr	r1, [pc, #268]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075f0:	4b41      	ldr	r3, [pc, #260]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a40      	ldr	r2, [pc, #256]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 80075f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075fc:	4b3e      	ldr	r3, [pc, #248]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	4a3d      	ldr	r2, [pc, #244]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 8007602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007606:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fc fcdc 	bl	8003fc4 <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007610:	f7fc fcd8 	bl	8003fc4 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e066      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007622:	4b35      	ldr	r3, [pc, #212]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <HAL_RCC_OscConfig+0x530>
 800762e:	e05e      	b.n	80076ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007630:	4b31      	ldr	r3, [pc, #196]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a30      	ldr	r2, [pc, #192]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 8007636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800763a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763c:	f7fc fcc2 	bl	8003fc4 <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007644:	f7fc fcbe 	bl	8003fc4 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e04c      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007656:	4b28      	ldr	r3, [pc, #160]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007662:	4b25      	ldr	r3, [pc, #148]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	4924      	ldr	r1, [pc, #144]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 8007668:	4b25      	ldr	r3, [pc, #148]	@ (8007700 <HAL_RCC_OscConfig+0x620>)
 800766a:	4013      	ands	r3, r2
 800766c:	60cb      	str	r3, [r1, #12]
 800766e:	e03e      	b.n	80076ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e039      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800767c:	4b1e      	ldr	r3, [pc, #120]	@ (80076f8 <HAL_RCC_OscConfig+0x618>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f003 0203 	and.w	r2, r3, #3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	429a      	cmp	r2, r3
 800768e:	d12c      	bne.n	80076ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769a:	3b01      	subs	r3, #1
 800769c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800769e:	429a      	cmp	r2, r3
 80076a0:	d123      	bne.n	80076ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d11b      	bne.n	80076ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076be:	429a      	cmp	r2, r3
 80076c0:	d113      	bne.n	80076ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	3b01      	subs	r3, #1
 80076d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d109      	bne.n	80076ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	3b01      	subs	r3, #1
 80076e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d001      	beq.n	80076ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	40021000 	.word	0x40021000
 80076fc:	019f800c 	.word	0x019f800c
 8007700:	feeefffc 	.word	0xfeeefffc

08007704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e11e      	b.n	800795a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800771c:	4b91      	ldr	r3, [pc, #580]	@ (8007964 <HAL_RCC_ClockConfig+0x260>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d910      	bls.n	800774c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800772a:	4b8e      	ldr	r3, [pc, #568]	@ (8007964 <HAL_RCC_ClockConfig+0x260>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f023 020f 	bic.w	r2, r3, #15
 8007732:	498c      	ldr	r1, [pc, #560]	@ (8007964 <HAL_RCC_ClockConfig+0x260>)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	4313      	orrs	r3, r2
 8007738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800773a:	4b8a      	ldr	r3, [pc, #552]	@ (8007964 <HAL_RCC_ClockConfig+0x260>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d001      	beq.n	800774c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e106      	b.n	800795a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d073      	beq.n	8007840 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b03      	cmp	r3, #3
 800775e:	d129      	bne.n	80077b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007760:	4b81      	ldr	r3, [pc, #516]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0f4      	b.n	800795a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007770:	f000 f99c 	bl	8007aac <RCC_GetSysClockFreqFromPLLSource>
 8007774:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	4a7c      	ldr	r2, [pc, #496]	@ (800796c <HAL_RCC_ClockConfig+0x268>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d93f      	bls.n	80077fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800777e:	4b7a      	ldr	r3, [pc, #488]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d009      	beq.n	800779e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007792:	2b00      	cmp	r3, #0
 8007794:	d033      	beq.n	80077fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800779a:	2b00      	cmp	r3, #0
 800779c:	d12f      	bne.n	80077fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800779e:	4b72      	ldr	r3, [pc, #456]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077a6:	4a70      	ldr	r2, [pc, #448]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 80077a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80077ae:	2380      	movs	r3, #128	@ 0x80
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	e024      	b.n	80077fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d107      	bne.n	80077cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0c6      	b.n	800795a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077cc:	4b66      	ldr	r3, [pc, #408]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e0be      	b.n	800795a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80077dc:	f000 f8ce 	bl	800797c <HAL_RCC_GetSysClockFreq>
 80077e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4a61      	ldr	r2, [pc, #388]	@ (800796c <HAL_RCC_ClockConfig+0x268>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d909      	bls.n	80077fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077ea:	4b5f      	ldr	r3, [pc, #380]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077f2:	4a5d      	ldr	r2, [pc, #372]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 80077f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80077fa:	2380      	movs	r3, #128	@ 0x80
 80077fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077fe:	4b5a      	ldr	r3, [pc, #360]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f023 0203 	bic.w	r2, r3, #3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	4957      	ldr	r1, [pc, #348]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800780c:	4313      	orrs	r3, r2
 800780e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007810:	f7fc fbd8 	bl	8003fc4 <HAL_GetTick>
 8007814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007816:	e00a      	b.n	800782e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007818:	f7fc fbd4 	bl	8003fc4 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007826:	4293      	cmp	r3, r2
 8007828:	d901      	bls.n	800782e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e095      	b.n	800795a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800782e:	4b4e      	ldr	r3, [pc, #312]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 020c 	and.w	r2, r3, #12
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	429a      	cmp	r2, r3
 800783e:	d1eb      	bne.n	8007818 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d023      	beq.n	8007894 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007858:	4b43      	ldr	r3, [pc, #268]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	4a42      	ldr	r2, [pc, #264]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800785e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007862:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b00      	cmp	r3, #0
 800786e:	d007      	beq.n	8007880 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007870:	4b3d      	ldr	r3, [pc, #244]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007878:	4a3b      	ldr	r2, [pc, #236]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800787a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800787e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007880:	4b39      	ldr	r3, [pc, #228]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4936      	ldr	r1, [pc, #216]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800788e:	4313      	orrs	r3, r2
 8007890:	608b      	str	r3, [r1, #8]
 8007892:	e008      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b80      	cmp	r3, #128	@ 0x80
 8007898:	d105      	bne.n	80078a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800789a:	4b33      	ldr	r3, [pc, #204]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	4a32      	ldr	r2, [pc, #200]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 80078a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007964 <HAL_RCC_ClockConfig+0x260>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d21d      	bcs.n	80078f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007964 <HAL_RCC_ClockConfig+0x260>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f023 020f 	bic.w	r2, r3, #15
 80078bc:	4929      	ldr	r1, [pc, #164]	@ (8007964 <HAL_RCC_ClockConfig+0x260>)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80078c4:	f7fc fb7e 	bl	8003fc4 <HAL_GetTick>
 80078c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ca:	e00a      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078cc:	f7fc fb7a 	bl	8003fc4 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078da:	4293      	cmp	r3, r2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e03b      	b.n	800795a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e2:	4b20      	ldr	r3, [pc, #128]	@ (8007964 <HAL_RCC_ClockConfig+0x260>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d1ed      	bne.n	80078cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	4917      	ldr	r1, [pc, #92]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800790a:	4313      	orrs	r3, r2
 800790c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d009      	beq.n	800792e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800791a:	4b13      	ldr	r3, [pc, #76]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	490f      	ldr	r1, [pc, #60]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 800792a:	4313      	orrs	r3, r2
 800792c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800792e:	f000 f825 	bl	800797c <HAL_RCC_GetSysClockFreq>
 8007932:	4602      	mov	r2, r0
 8007934:	4b0c      	ldr	r3, [pc, #48]	@ (8007968 <HAL_RCC_ClockConfig+0x264>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	091b      	lsrs	r3, r3, #4
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	490c      	ldr	r1, [pc, #48]	@ (8007970 <HAL_RCC_ClockConfig+0x26c>)
 8007940:	5ccb      	ldrb	r3, [r1, r3]
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	fa22 f303 	lsr.w	r3, r2, r3
 800794a:	4a0a      	ldr	r2, [pc, #40]	@ (8007974 <HAL_RCC_ClockConfig+0x270>)
 800794c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800794e:	4b0a      	ldr	r3, [pc, #40]	@ (8007978 <HAL_RCC_ClockConfig+0x274>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f7fc faea 	bl	8003f2c <HAL_InitTick>
 8007958:	4603      	mov	r3, r0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40022000 	.word	0x40022000
 8007968:	40021000 	.word	0x40021000
 800796c:	04c4b400 	.word	0x04c4b400
 8007970:	0800c7bc 	.word	0x0800c7bc
 8007974:	20000388 	.word	0x20000388
 8007978:	2000038c 	.word	0x2000038c

0800797c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007982:	4b2c      	ldr	r3, [pc, #176]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 030c 	and.w	r3, r3, #12
 800798a:	2b04      	cmp	r3, #4
 800798c:	d102      	bne.n	8007994 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800798e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	e047      	b.n	8007a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007994:	4b27      	ldr	r3, [pc, #156]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 030c 	and.w	r3, r3, #12
 800799c:	2b08      	cmp	r3, #8
 800799e:	d102      	bne.n	80079a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079a0:	4b25      	ldr	r3, [pc, #148]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	e03e      	b.n	8007a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80079a6:	4b23      	ldr	r3, [pc, #140]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 030c 	and.w	r3, r3, #12
 80079ae:	2b0c      	cmp	r3, #12
 80079b0:	d136      	bne.n	8007a20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079b2:	4b20      	ldr	r3, [pc, #128]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	091b      	lsrs	r3, r3, #4
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	3301      	adds	r3, #1
 80079c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d10c      	bne.n	80079ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079d0:	4a19      	ldr	r2, [pc, #100]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d8:	4a16      	ldr	r2, [pc, #88]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079da:	68d2      	ldr	r2, [r2, #12]
 80079dc:	0a12      	lsrs	r2, r2, #8
 80079de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
 80079e6:	617b      	str	r3, [r7, #20]
      break;
 80079e8:	e00c      	b.n	8007a04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079ea:	4a13      	ldr	r2, [pc, #76]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f2:	4a10      	ldr	r2, [pc, #64]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079f4:	68d2      	ldr	r2, [r2, #12]
 80079f6:	0a12      	lsrs	r2, r2, #8
 80079f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079fc:	fb02 f303 	mul.w	r3, r2, r3
 8007a00:	617b      	str	r3, [r7, #20]
      break;
 8007a02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a04:	4b0b      	ldr	r3, [pc, #44]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	0e5b      	lsrs	r3, r3, #25
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	3301      	adds	r3, #1
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	e001      	b.n	8007a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007a24:	693b      	ldr	r3, [r7, #16]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40021000 	.word	0x40021000
 8007a38:	00f42400 	.word	0x00f42400

08007a3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a40:	4b03      	ldr	r3, [pc, #12]	@ (8007a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a42:	681b      	ldr	r3, [r3, #0]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000388 	.word	0x20000388

08007a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a58:	f7ff fff0 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	0a1b      	lsrs	r3, r3, #8
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	4904      	ldr	r1, [pc, #16]	@ (8007a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a6a:	5ccb      	ldrb	r3, [r1, r3]
 8007a6c:	f003 031f 	and.w	r3, r3, #31
 8007a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40021000 	.word	0x40021000
 8007a7c:	0800c7cc 	.word	0x0800c7cc

08007a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a84:	f7ff ffda 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	0adb      	lsrs	r3, r3, #11
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	4904      	ldr	r1, [pc, #16]	@ (8007aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a96:	5ccb      	ldrb	r3, [r1, r3]
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40021000 	.word	0x40021000
 8007aa8:	0800c7cc 	.word	0x0800c7cc

08007aac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007abc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	091b      	lsrs	r3, r3, #4
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d10c      	bne.n	8007aea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ad0:	4a17      	ldr	r2, [pc, #92]	@ (8007b30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad8:	4a14      	ldr	r2, [pc, #80]	@ (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ada:	68d2      	ldr	r2, [r2, #12]
 8007adc:	0a12      	lsrs	r2, r2, #8
 8007ade:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ae2:	fb02 f303 	mul.w	r3, r2, r3
 8007ae6:	617b      	str	r3, [r7, #20]
    break;
 8007ae8:	e00c      	b.n	8007b04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007aea:	4a11      	ldr	r2, [pc, #68]	@ (8007b30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	4a0e      	ldr	r2, [pc, #56]	@ (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007af4:	68d2      	ldr	r2, [r2, #12]
 8007af6:	0a12      	lsrs	r2, r2, #8
 8007af8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	617b      	str	r3, [r7, #20]
    break;
 8007b02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b04:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	0e5b      	lsrs	r3, r3, #25
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	3301      	adds	r3, #1
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007b1e:	687b      	ldr	r3, [r7, #4]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	00f42400 	.word	0x00f42400

08007b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b40:	2300      	movs	r3, #0
 8007b42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8098 	beq.w	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b52:	2300      	movs	r3, #0
 8007b54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b56:	4b43      	ldr	r3, [pc, #268]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10d      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b62:	4b40      	ldr	r3, [pc, #256]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b66:	4a3f      	ldr	r2, [pc, #252]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b76:	60bb      	str	r3, [r7, #8]
 8007b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a39      	ldr	r2, [pc, #228]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b8a:	f7fc fa1b 	bl	8003fc4 <HAL_GetTick>
 8007b8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b90:	e009      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b92:	f7fc fa17 	bl	8003fc4 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d902      	bls.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	74fb      	strb	r3, [r7, #19]
        break;
 8007ba4:	e005      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ba6:	4b30      	ldr	r3, [pc, #192]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0ef      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007bb2:	7cfb      	ldrb	r3, [r7, #19]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d159      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d01e      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d019      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bd4:	4b23      	ldr	r3, [pc, #140]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007be0:	4b20      	ldr	r3, [pc, #128]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c00:	4a18      	ldr	r2, [pc, #96]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d016      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c12:	f7fc f9d7 	bl	8003fc4 <HAL_GetTick>
 8007c16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c18:	e00b      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c1a:	f7fc f9d3 	bl	8003fc4 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d902      	bls.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	74fb      	strb	r3, [r7, #19]
            break;
 8007c30:	e006      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c32:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0ec      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c40:	7cfb      	ldrb	r3, [r7, #19]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c46:	4b07      	ldr	r3, [pc, #28]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c54:	4903      	ldr	r1, [pc, #12]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007c5c:	e008      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c5e:	7cfb      	ldrb	r3, [r7, #19]
 8007c60:	74bb      	strb	r3, [r7, #18]
 8007c62:	e005      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c64:	40021000 	.word	0x40021000
 8007c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6c:	7cfb      	ldrb	r3, [r7, #19]
 8007c6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c70:	7c7b      	ldrb	r3, [r7, #17]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c76:	4ba7      	ldr	r3, [pc, #668]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7a:	4aa6      	ldr	r2, [pc, #664]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c8e:	4ba1      	ldr	r3, [pc, #644]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c94:	f023 0203 	bic.w	r2, r3, #3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	499d      	ldr	r1, [pc, #628]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cb0:	4b98      	ldr	r3, [pc, #608]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb6:	f023 020c 	bic.w	r2, r3, #12
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	4995      	ldr	r1, [pc, #596]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cd2:	4b90      	ldr	r3, [pc, #576]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	498c      	ldr	r1, [pc, #560]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cf4:	4b87      	ldr	r3, [pc, #540]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	4984      	ldr	r1, [pc, #528]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d16:	4b7f      	ldr	r3, [pc, #508]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	497b      	ldr	r1, [pc, #492]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d38:	4b76      	ldr	r3, [pc, #472]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	4973      	ldr	r1, [pc, #460]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	496a      	ldr	r1, [pc, #424]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d7c:	4b65      	ldr	r3, [pc, #404]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	4962      	ldr	r1, [pc, #392]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dac:	4959      	ldr	r1, [pc, #356]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dc0:	4b54      	ldr	r3, [pc, #336]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dc6:	f023 0203 	bic.w	r2, r3, #3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dce:	4951      	ldr	r1, [pc, #324]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00a      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007de2:	4b4c      	ldr	r3, [pc, #304]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df0:	4948      	ldr	r1, [pc, #288]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d015      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e04:	4b43      	ldr	r3, [pc, #268]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	4940      	ldr	r1, [pc, #256]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e22:	d105      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e24:	4b3b      	ldr	r3, [pc, #236]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	4a3a      	ldr	r2, [pc, #232]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d015      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e3c:	4b35      	ldr	r3, [pc, #212]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4a:	4932      	ldr	r1, [pc, #200]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e5a:	d105      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	4a2c      	ldr	r2, [pc, #176]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d015      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e74:	4b27      	ldr	r3, [pc, #156]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e82:	4924      	ldr	r1, [pc, #144]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e92:	d105      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e94:	4b1f      	ldr	r3, [pc, #124]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	4a1e      	ldr	r2, [pc, #120]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d015      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eac:	4b19      	ldr	r3, [pc, #100]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eba:	4916      	ldr	r1, [pc, #88]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eca:	d105      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ecc:	4b11      	ldr	r3, [pc, #68]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	4a10      	ldr	r2, [pc, #64]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ed6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d019      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	4908      	ldr	r1, [pc, #32]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f02:	d109      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f04:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	4a02      	ldr	r2, [pc, #8]	@ (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f0e:	60d3      	str	r3, [r2, #12]
 8007f10:	e002      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007f12:	bf00      	nop
 8007f14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d015      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f24:	4b29      	ldr	r3, [pc, #164]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f32:	4926      	ldr	r1, [pc, #152]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f42:	d105      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f44:	4b21      	ldr	r3, [pc, #132]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	4a20      	ldr	r2, [pc, #128]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d015      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f6a:	4918      	ldr	r1, [pc, #96]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f7a:	d105      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f7c:	4b13      	ldr	r3, [pc, #76]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	4a12      	ldr	r2, [pc, #72]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d015      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f94:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa2:	490a      	ldr	r1, [pc, #40]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fb2:	d105      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fb4:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	4a04      	ldr	r2, [pc, #16]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40021000 	.word	0x40021000

08007fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e09d      	b.n	800811e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d108      	bne.n	8007ffc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ff2:	d009      	beq.n	8008008 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	61da      	str	r2, [r3, #28]
 8007ffa:	e005      	b.n	8008008 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7fb f952 	bl	80032cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800803e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008048:	d902      	bls.n	8008050 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e002      	b.n	8008056 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008054:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800805e:	d007      	beq.n	8008070 <HAL_SPI_Init+0xa0>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008068:	d002      	beq.n	8008070 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b2:	ea42 0103 	orr.w	r1, r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	0c1b      	lsrs	r3, r3, #16
 80080cc:	f003 0204 	and.w	r2, r3, #4
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	431a      	orrs	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80080ec:	ea42 0103 	orr.w	r1, r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800810c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b088      	sub	sp, #32
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	603b      	str	r3, [r7, #0]
 8008132:	4613      	mov	r3, r2
 8008134:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008136:	f7fb ff45 	bl	8003fc4 <HAL_GetTick>
 800813a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800813c:	88fb      	ldrh	r3, [r7, #6]
 800813e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d001      	beq.n	8008150 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800814c:	2302      	movs	r3, #2
 800814e:	e15c      	b.n	800840a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HAL_SPI_Transmit+0x36>
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e154      	b.n	800840a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_SPI_Transmit+0x48>
 800816a:	2302      	movs	r3, #2
 800816c:	e14d      	b.n	800840a <HAL_SPI_Transmit+0x2e4>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2203      	movs	r2, #3
 800817a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	88fa      	ldrh	r2, [r7, #6]
 8008194:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081c0:	d10f      	bne.n	80081e2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ec:	2b40      	cmp	r3, #64	@ 0x40
 80081ee:	d007      	beq.n	8008200 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008208:	d952      	bls.n	80082b0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <HAL_SPI_Transmit+0xf2>
 8008212:	8b7b      	ldrh	r3, [r7, #26]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d145      	bne.n	80082a4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821c:	881a      	ldrh	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	1c9a      	adds	r2, r3, #2
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008232:	b29b      	uxth	r3, r3
 8008234:	3b01      	subs	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800823c:	e032      	b.n	80082a4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b02      	cmp	r3, #2
 800824a:	d112      	bne.n	8008272 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008250:	881a      	ldrh	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825c:	1c9a      	adds	r2, r3, #2
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008266:	b29b      	uxth	r3, r3
 8008268:	3b01      	subs	r3, #1
 800826a:	b29a      	uxth	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008270:	e018      	b.n	80082a4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008272:	f7fb fea7 	bl	8003fc4 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	429a      	cmp	r2, r3
 8008280:	d803      	bhi.n	800828a <HAL_SPI_Transmit+0x164>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d102      	bne.n	8008290 <HAL_SPI_Transmit+0x16a>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e0b2      	b.n	800840a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1c7      	bne.n	800823e <HAL_SPI_Transmit+0x118>
 80082ae:	e083      	b.n	80083b8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <HAL_SPI_Transmit+0x198>
 80082b8:	8b7b      	ldrh	r3, [r7, #26]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d177      	bne.n	80083ae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d912      	bls.n	80082ee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082cc:	881a      	ldrh	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	1c9a      	adds	r2, r3, #2
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b02      	subs	r3, #2
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082ec:	e05f      	b.n	80083ae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	330c      	adds	r3, #12
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800830a:	b29b      	uxth	r3, r3
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008314:	e04b      	b.n	80083ae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b02      	cmp	r3, #2
 8008322:	d12b      	bne.n	800837c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008328:	b29b      	uxth	r3, r3
 800832a:	2b01      	cmp	r3, #1
 800832c:	d912      	bls.n	8008354 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008332:	881a      	ldrh	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833e:	1c9a      	adds	r2, r3, #2
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b02      	subs	r3, #2
 800834c:	b29a      	uxth	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008352:	e02c      	b.n	80083ae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	7812      	ldrb	r2, [r2, #0]
 8008360:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008370:	b29b      	uxth	r3, r3
 8008372:	3b01      	subs	r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800837a:	e018      	b.n	80083ae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800837c:	f7fb fe22 	bl	8003fc4 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d803      	bhi.n	8008394 <HAL_SPI_Transmit+0x26e>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008392:	d102      	bne.n	800839a <HAL_SPI_Transmit+0x274>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e02d      	b.n	800840a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1ae      	bne.n	8008316 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fb65 	bl	8008a8c <SPI_EndRxTxTransaction>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083d6:	2300      	movs	r3, #0
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e000      	b.n	800840a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008408:	2300      	movs	r3, #0
  }
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b08a      	sub	sp, #40	@ 0x28
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008420:	2301      	movs	r3, #1
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008424:	f7fb fdce 	bl	8003fc4 <HAL_GetTick>
 8008428:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008430:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008438:	887b      	ldrh	r3, [r7, #2]
 800843a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800843c:	887b      	ldrh	r3, [r7, #2]
 800843e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008440:	7ffb      	ldrb	r3, [r7, #31]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d00c      	beq.n	8008460 <HAL_SPI_TransmitReceive+0x4e>
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800844c:	d106      	bne.n	800845c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <HAL_SPI_TransmitReceive+0x4a>
 8008456:	7ffb      	ldrb	r3, [r7, #31]
 8008458:	2b04      	cmp	r3, #4
 800845a:	d001      	beq.n	8008460 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
 800845e:	e1f3      	b.n	8008848 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <HAL_SPI_TransmitReceive+0x60>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <HAL_SPI_TransmitReceive+0x60>
 800846c:	887b      	ldrh	r3, [r7, #2]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e1e8      	b.n	8008848 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_SPI_TransmitReceive+0x72>
 8008480:	2302      	movs	r3, #2
 8008482:	e1e1      	b.n	8008848 <HAL_SPI_TransmitReceive+0x436>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b04      	cmp	r3, #4
 8008496:	d003      	beq.n	80084a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2205      	movs	r2, #5
 800849c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	887a      	ldrh	r2, [r7, #2]
 80084b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	887a      	ldrh	r2, [r7, #2]
 80084b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	887a      	ldrh	r2, [r7, #2]
 80084c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	887a      	ldrh	r2, [r7, #2]
 80084cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084e2:	d802      	bhi.n	80084ea <HAL_SPI_TransmitReceive+0xd8>
 80084e4:	8abb      	ldrh	r3, [r7, #20]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d908      	bls.n	80084fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80084f8:	605a      	str	r2, [r3, #4]
 80084fa:	e007      	b.n	800850c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800850a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008516:	2b40      	cmp	r3, #64	@ 0x40
 8008518:	d007      	beq.n	800852a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008532:	f240 8083 	bls.w	800863c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <HAL_SPI_TransmitReceive+0x132>
 800853e:	8afb      	ldrh	r3, [r7, #22]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d16f      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008548:	881a      	ldrh	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008554:	1c9a      	adds	r2, r3, #2
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800855e:	b29b      	uxth	r3, r3
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008568:	e05c      	b.n	8008624 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b02      	cmp	r3, #2
 8008576:	d11b      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x19e>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800857c:	b29b      	uxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d016      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x19e>
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	2b01      	cmp	r3, #1
 8008586:	d113      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858c:	881a      	ldrh	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	1c9a      	adds	r2, r3, #2
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d11c      	bne.n	80085f8 <HAL_SPI_TransmitReceive+0x1e6>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d016      	beq.n	80085f8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d4:	b292      	uxth	r2, r2
 80085d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085dc:	1c9a      	adds	r2, r3, #2
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085f4:	2301      	movs	r3, #1
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80085f8:	f7fb fce4 	bl	8003fc4 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008604:	429a      	cmp	r2, r3
 8008606:	d80d      	bhi.n	8008624 <HAL_SPI_TransmitReceive+0x212>
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860e:	d009      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e111      	b.n	8008848 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d19d      	bne.n	800856a <HAL_SPI_TransmitReceive+0x158>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d197      	bne.n	800856a <HAL_SPI_TransmitReceive+0x158>
 800863a:	e0e5      	b.n	8008808 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_SPI_TransmitReceive+0x23a>
 8008644:	8afb      	ldrh	r3, [r7, #22]
 8008646:	2b01      	cmp	r3, #1
 8008648:	f040 80d1 	bne.w	80087ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b01      	cmp	r3, #1
 8008654:	d912      	bls.n	800867c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865a:	881a      	ldrh	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008666:	1c9a      	adds	r2, r3, #2
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b02      	subs	r3, #2
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800867a:	e0b8      	b.n	80087ee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	7812      	ldrb	r2, [r2, #0]
 8008688:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086a2:	e0a4      	b.n	80087ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d134      	bne.n	800871c <HAL_SPI_TransmitReceive+0x30a>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d02f      	beq.n	800871c <HAL_SPI_TransmitReceive+0x30a>
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d12c      	bne.n	800871c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d912      	bls.n	80086f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d0:	881a      	ldrh	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	1c9a      	adds	r2, r3, #2
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b02      	subs	r3, #2
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086f0:	e012      	b.n	8008718 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	330c      	adds	r3, #12
 80086fc:	7812      	ldrb	r2, [r2, #0]
 80086fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800870e:	b29b      	uxth	r3, r3
 8008710:	3b01      	subs	r3, #1
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b01      	cmp	r3, #1
 8008728:	d148      	bne.n	80087bc <HAL_SPI_TransmitReceive+0x3aa>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d042      	beq.n	80087bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800873c:	b29b      	uxth	r3, r3
 800873e:	2b01      	cmp	r3, #1
 8008740:	d923      	bls.n	800878a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874c:	b292      	uxth	r2, r2
 800874e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008754:	1c9a      	adds	r2, r3, #2
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008760:	b29b      	uxth	r3, r3
 8008762:	3b02      	subs	r3, #2
 8008764:	b29a      	uxth	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008772:	b29b      	uxth	r3, r3
 8008774:	2b01      	cmp	r3, #1
 8008776:	d81f      	bhi.n	80087b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008786:	605a      	str	r2, [r3, #4]
 8008788:	e016      	b.n	80087b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f103 020c 	add.w	r2, r3, #12
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087b8:	2301      	movs	r3, #1
 80087ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087bc:	f7fb fc02 	bl	8003fc4 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d803      	bhi.n	80087d4 <HAL_SPI_TransmitReceive+0x3c2>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d2:	d102      	bne.n	80087da <HAL_SPI_TransmitReceive+0x3c8>
 80087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d109      	bne.n	80087ee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e02c      	b.n	8008848 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f47f af55 	bne.w	80086a4 <HAL_SPI_TransmitReceive+0x292>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	f47f af4e 	bne.w	80086a4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008808:	6a3a      	ldr	r2, [r7, #32]
 800880a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f93d 	bl	8008a8c <SPI_EndRxTxTransaction>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d008      	beq.n	800882a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2220      	movs	r2, #32
 800881c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e00e      	b.n	8008848 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008846:	2300      	movs	r3, #0
  }
}
 8008848:	4618      	mov	r0, r3
 800884a:	3728      	adds	r7, #40	@ 0x28
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008860:	f7fb fbb0 	bl	8003fc4 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	4413      	add	r3, r2
 800886e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008870:	f7fb fba8 	bl	8003fc4 <HAL_GetTick>
 8008874:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008876:	4b39      	ldr	r3, [pc, #228]	@ (800895c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	015b      	lsls	r3, r3, #5
 800887c:	0d1b      	lsrs	r3, r3, #20
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	fb02 f303 	mul.w	r3, r2, r3
 8008884:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008886:	e054      	b.n	8008932 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888e:	d050      	beq.n	8008932 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008890:	f7fb fb98 	bl	8003fc4 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	429a      	cmp	r2, r3
 800889e:	d902      	bls.n	80088a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d13d      	bne.n	8008922 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80088b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088be:	d111      	bne.n	80088e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088c8:	d004      	beq.n	80088d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088d2:	d107      	bne.n	80088e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ec:	d10f      	bne.n	800890e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800890c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e017      	b.n	8008952 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	3b01      	subs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4013      	ands	r3, r2
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	429a      	cmp	r2, r3
 8008940:	bf0c      	ite	eq
 8008942:	2301      	moveq	r3, #1
 8008944:	2300      	movne	r3, #0
 8008946:	b2db      	uxtb	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	429a      	cmp	r2, r3
 800894e:	d19b      	bne.n	8008888 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3720      	adds	r7, #32
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	20000388 	.word	0x20000388

08008960 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b08a      	sub	sp, #40	@ 0x28
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008972:	f7fb fb27 	bl	8003fc4 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	4413      	add	r3, r2
 8008980:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008982:	f7fb fb1f 	bl	8003fc4 <HAL_GetTick>
 8008986:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	330c      	adds	r3, #12
 800898e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008990:	4b3d      	ldr	r3, [pc, #244]	@ (8008a88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	00da      	lsls	r2, r3, #3
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	0d1b      	lsrs	r3, r3, #20
 80089a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089a2:	fb02 f303 	mul.w	r3, r2, r3
 80089a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80089a8:	e060      	b.n	8008a6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80089b0:	d107      	bne.n	80089c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d050      	beq.n	8008a6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089ca:	f7fb fafb 	bl	8003fc4 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d902      	bls.n	80089e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d13d      	bne.n	8008a5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089f8:	d111      	bne.n	8008a1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a02:	d004      	beq.n	8008a0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a0c:	d107      	bne.n	8008a1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a26:	d10f      	bne.n	8008a48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e010      	b.n	8008a7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	4013      	ands	r3, r2
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d196      	bne.n	80089aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3728      	adds	r7, #40	@ 0x28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000388 	.word	0x20000388

08008a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7ff ff5b 	bl	8008960 <SPI_WaitFifoStateUntilTimeout>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d007      	beq.n	8008ac0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ab4:	f043 0220 	orr.w	r2, r3, #32
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e027      	b.n	8008b10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2180      	movs	r1, #128	@ 0x80
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7ff fec0 	bl	8008850 <SPI_WaitFlagStateUntilTimeout>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d007      	beq.n	8008ae6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ada:	f043 0220 	orr.w	r2, r3, #32
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e014      	b.n	8008b10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f7ff ff34 	bl	8008960 <SPI_WaitFifoStateUntilTimeout>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b02:	f043 0220 	orr.w	r2, r3, #32
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e000      	b.n	8008b10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e049      	b.n	8008bbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fa ff44 	bl	80039cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3304      	adds	r3, #4
 8008b54:	4619      	mov	r1, r3
 8008b56:	4610      	mov	r0, r2
 8008b58:	f001 f878 	bl	8009c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e049      	b.n	8008c6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f841 	bl	8008c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3304      	adds	r3, #4
 8008c02:	4619      	mov	r1, r3
 8008c04:	4610      	mov	r0, r2
 8008c06:	f001 f821 	bl	8009c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d109      	bne.n	8008cac <HAL_TIM_PWM_Start+0x24>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	bf14      	ite	ne
 8008ca4:	2301      	movne	r3, #1
 8008ca6:	2300      	moveq	r3, #0
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	e03c      	b.n	8008d26 <HAL_TIM_PWM_Start+0x9e>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d109      	bne.n	8008cc6 <HAL_TIM_PWM_Start+0x3e>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	bf14      	ite	ne
 8008cbe:	2301      	movne	r3, #1
 8008cc0:	2300      	moveq	r3, #0
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	e02f      	b.n	8008d26 <HAL_TIM_PWM_Start+0x9e>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d109      	bne.n	8008ce0 <HAL_TIM_PWM_Start+0x58>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	bf14      	ite	ne
 8008cd8:	2301      	movne	r3, #1
 8008cda:	2300      	moveq	r3, #0
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	e022      	b.n	8008d26 <HAL_TIM_PWM_Start+0x9e>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b0c      	cmp	r3, #12
 8008ce4:	d109      	bne.n	8008cfa <HAL_TIM_PWM_Start+0x72>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	bf14      	ite	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	2300      	moveq	r3, #0
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	e015      	b.n	8008d26 <HAL_TIM_PWM_Start+0x9e>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b10      	cmp	r3, #16
 8008cfe:	d109      	bne.n	8008d14 <HAL_TIM_PWM_Start+0x8c>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	bf14      	ite	ne
 8008d0c:	2301      	movne	r3, #1
 8008d0e:	2300      	moveq	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	e008      	b.n	8008d26 <HAL_TIM_PWM_Start+0x9e>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	bf14      	ite	ne
 8008d20:	2301      	movne	r3, #1
 8008d22:	2300      	moveq	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e0a6      	b.n	8008e7c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <HAL_TIM_PWM_Start+0xb6>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d3c:	e023      	b.n	8008d86 <HAL_TIM_PWM_Start+0xfe>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	d104      	bne.n	8008d4e <HAL_TIM_PWM_Start+0xc6>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d4c:	e01b      	b.n	8008d86 <HAL_TIM_PWM_Start+0xfe>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d104      	bne.n	8008d5e <HAL_TIM_PWM_Start+0xd6>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d5c:	e013      	b.n	8008d86 <HAL_TIM_PWM_Start+0xfe>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b0c      	cmp	r3, #12
 8008d62:	d104      	bne.n	8008d6e <HAL_TIM_PWM_Start+0xe6>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d6c:	e00b      	b.n	8008d86 <HAL_TIM_PWM_Start+0xfe>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b10      	cmp	r3, #16
 8008d72:	d104      	bne.n	8008d7e <HAL_TIM_PWM_Start+0xf6>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d7c:	e003      	b.n	8008d86 <HAL_TIM_PWM_Start+0xfe>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2202      	movs	r2, #2
 8008d82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 fd00 	bl	800a794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a3a      	ldr	r2, [pc, #232]	@ (8008e84 <HAL_TIM_PWM_Start+0x1fc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d018      	beq.n	8008dd0 <HAL_TIM_PWM_Start+0x148>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a39      	ldr	r2, [pc, #228]	@ (8008e88 <HAL_TIM_PWM_Start+0x200>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d013      	beq.n	8008dd0 <HAL_TIM_PWM_Start+0x148>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a37      	ldr	r2, [pc, #220]	@ (8008e8c <HAL_TIM_PWM_Start+0x204>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00e      	beq.n	8008dd0 <HAL_TIM_PWM_Start+0x148>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a36      	ldr	r2, [pc, #216]	@ (8008e90 <HAL_TIM_PWM_Start+0x208>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d009      	beq.n	8008dd0 <HAL_TIM_PWM_Start+0x148>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a34      	ldr	r2, [pc, #208]	@ (8008e94 <HAL_TIM_PWM_Start+0x20c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d004      	beq.n	8008dd0 <HAL_TIM_PWM_Start+0x148>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a33      	ldr	r2, [pc, #204]	@ (8008e98 <HAL_TIM_PWM_Start+0x210>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d101      	bne.n	8008dd4 <HAL_TIM_PWM_Start+0x14c>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <HAL_TIM_PWM_Start+0x14e>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d007      	beq.n	8008dea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008de8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a25      	ldr	r2, [pc, #148]	@ (8008e84 <HAL_TIM_PWM_Start+0x1fc>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d022      	beq.n	8008e3a <HAL_TIM_PWM_Start+0x1b2>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dfc:	d01d      	beq.n	8008e3a <HAL_TIM_PWM_Start+0x1b2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a26      	ldr	r2, [pc, #152]	@ (8008e9c <HAL_TIM_PWM_Start+0x214>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d018      	beq.n	8008e3a <HAL_TIM_PWM_Start+0x1b2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a24      	ldr	r2, [pc, #144]	@ (8008ea0 <HAL_TIM_PWM_Start+0x218>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d013      	beq.n	8008e3a <HAL_TIM_PWM_Start+0x1b2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a23      	ldr	r2, [pc, #140]	@ (8008ea4 <HAL_TIM_PWM_Start+0x21c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00e      	beq.n	8008e3a <HAL_TIM_PWM_Start+0x1b2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a19      	ldr	r2, [pc, #100]	@ (8008e88 <HAL_TIM_PWM_Start+0x200>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d009      	beq.n	8008e3a <HAL_TIM_PWM_Start+0x1b2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a18      	ldr	r2, [pc, #96]	@ (8008e8c <HAL_TIM_PWM_Start+0x204>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d004      	beq.n	8008e3a <HAL_TIM_PWM_Start+0x1b2>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a18      	ldr	r2, [pc, #96]	@ (8008e98 <HAL_TIM_PWM_Start+0x210>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d115      	bne.n	8008e66 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	4b19      	ldr	r3, [pc, #100]	@ (8008ea8 <HAL_TIM_PWM_Start+0x220>)
 8008e42:	4013      	ands	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b06      	cmp	r3, #6
 8008e4a:	d015      	beq.n	8008e78 <HAL_TIM_PWM_Start+0x1f0>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e52:	d011      	beq.n	8008e78 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0201 	orr.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e64:	e008      	b.n	8008e78 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f042 0201 	orr.w	r2, r2, #1
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	e000      	b.n	8008e7a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	40012c00 	.word	0x40012c00
 8008e88:	40013400 	.word	0x40013400
 8008e8c:	40014000 	.word	0x40014000
 8008e90:	40014400 	.word	0x40014400
 8008e94:	40014800 	.word	0x40014800
 8008e98:	40015000 	.word	0x40015000
 8008e9c:	40000400 	.word	0x40000400
 8008ea0:	40000800 	.word	0x40000800
 8008ea4:	40000c00 	.word	0x40000c00
 8008ea8:	00010007 	.word	0x00010007

08008eac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fc68 	bl	800a794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a40      	ldr	r2, [pc, #256]	@ (8008fcc <HAL_TIM_PWM_Stop+0x120>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d018      	beq.n	8008f00 <HAL_TIM_PWM_Stop+0x54>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8008fd0 <HAL_TIM_PWM_Stop+0x124>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d013      	beq.n	8008f00 <HAL_TIM_PWM_Stop+0x54>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a3d      	ldr	r2, [pc, #244]	@ (8008fd4 <HAL_TIM_PWM_Stop+0x128>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d00e      	beq.n	8008f00 <HAL_TIM_PWM_Stop+0x54>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8008fd8 <HAL_TIM_PWM_Stop+0x12c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d009      	beq.n	8008f00 <HAL_TIM_PWM_Stop+0x54>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8008fdc <HAL_TIM_PWM_Stop+0x130>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d004      	beq.n	8008f00 <HAL_TIM_PWM_Stop+0x54>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a39      	ldr	r2, [pc, #228]	@ (8008fe0 <HAL_TIM_PWM_Stop+0x134>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d101      	bne.n	8008f04 <HAL_TIM_PWM_Stop+0x58>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <HAL_TIM_PWM_Stop+0x5a>
 8008f04:	2300      	movs	r3, #0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d017      	beq.n	8008f3a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6a1a      	ldr	r2, [r3, #32]
 8008f10:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f14:	4013      	ands	r3, r2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10f      	bne.n	8008f3a <HAL_TIM_PWM_Stop+0x8e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6a1a      	ldr	r2, [r3, #32]
 8008f20:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008f24:	4013      	ands	r3, r2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d107      	bne.n	8008f3a <HAL_TIM_PWM_Stop+0x8e>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6a1a      	ldr	r2, [r3, #32]
 8008f40:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f44:	4013      	ands	r3, r2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10f      	bne.n	8008f6a <HAL_TIM_PWM_Stop+0xbe>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6a1a      	ldr	r2, [r3, #32]
 8008f50:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008f54:	4013      	ands	r3, r2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d107      	bne.n	8008f6a <HAL_TIM_PWM_Stop+0xbe>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0201 	bic.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d104      	bne.n	8008f7a <HAL_TIM_PWM_Stop+0xce>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f78:	e023      	b.n	8008fc2 <HAL_TIM_PWM_Stop+0x116>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d104      	bne.n	8008f8a <HAL_TIM_PWM_Stop+0xde>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f88:	e01b      	b.n	8008fc2 <HAL_TIM_PWM_Stop+0x116>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d104      	bne.n	8008f9a <HAL_TIM_PWM_Stop+0xee>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f98:	e013      	b.n	8008fc2 <HAL_TIM_PWM_Stop+0x116>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b0c      	cmp	r3, #12
 8008f9e:	d104      	bne.n	8008faa <HAL_TIM_PWM_Stop+0xfe>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fa8:	e00b      	b.n	8008fc2 <HAL_TIM_PWM_Stop+0x116>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b10      	cmp	r3, #16
 8008fae:	d104      	bne.n	8008fba <HAL_TIM_PWM_Stop+0x10e>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fb8:	e003      	b.n	8008fc2 <HAL_TIM_PWM_Stop+0x116>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40012c00 	.word	0x40012c00
 8008fd0:	40013400 	.word	0x40013400
 8008fd4:	40014000 	.word	0x40014000
 8008fd8:	40014400 	.word	0x40014400
 8008fdc:	40014800 	.word	0x40014800
 8008fe0:	40015000 	.word	0x40015000

08008fe4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e049      	b.n	800908a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f841 	bl	8009092 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3304      	adds	r3, #4
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f000 fe12 	bl	8009c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <HAL_TIM_IC_Start_IT+0x1e>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	e023      	b.n	800910e <HAL_TIM_IC_Start_IT+0x66>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d104      	bne.n	80090d6 <HAL_TIM_IC_Start_IT+0x2e>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	e01b      	b.n	800910e <HAL_TIM_IC_Start_IT+0x66>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d104      	bne.n	80090e6 <HAL_TIM_IC_Start_IT+0x3e>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	e013      	b.n	800910e <HAL_TIM_IC_Start_IT+0x66>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b0c      	cmp	r3, #12
 80090ea:	d104      	bne.n	80090f6 <HAL_TIM_IC_Start_IT+0x4e>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	e00b      	b.n	800910e <HAL_TIM_IC_Start_IT+0x66>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b10      	cmp	r3, #16
 80090fa:	d104      	bne.n	8009106 <HAL_TIM_IC_Start_IT+0x5e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009102:	b2db      	uxtb	r3, r3
 8009104:	e003      	b.n	800910e <HAL_TIM_IC_Start_IT+0x66>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800910c:	b2db      	uxtb	r3, r3
 800910e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d104      	bne.n	8009120 <HAL_TIM_IC_Start_IT+0x78>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800911c:	b2db      	uxtb	r3, r3
 800911e:	e013      	b.n	8009148 <HAL_TIM_IC_Start_IT+0xa0>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b04      	cmp	r3, #4
 8009124:	d104      	bne.n	8009130 <HAL_TIM_IC_Start_IT+0x88>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800912c:	b2db      	uxtb	r3, r3
 800912e:	e00b      	b.n	8009148 <HAL_TIM_IC_Start_IT+0xa0>
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b08      	cmp	r3, #8
 8009134:	d104      	bne.n	8009140 <HAL_TIM_IC_Start_IT+0x98>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800913c:	b2db      	uxtb	r3, r3
 800913e:	e003      	b.n	8009148 <HAL_TIM_IC_Start_IT+0xa0>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009146:	b2db      	uxtb	r3, r3
 8009148:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d102      	bne.n	8009156 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009150:	7b7b      	ldrb	r3, [r7, #13]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d001      	beq.n	800915a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e0e2      	b.n	8009320 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <HAL_TIM_IC_Start_IT+0xc2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009168:	e023      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x10a>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b04      	cmp	r3, #4
 800916e:	d104      	bne.n	800917a <HAL_TIM_IC_Start_IT+0xd2>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009178:	e01b      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x10a>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b08      	cmp	r3, #8
 800917e:	d104      	bne.n	800918a <HAL_TIM_IC_Start_IT+0xe2>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009188:	e013      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x10a>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b0c      	cmp	r3, #12
 800918e:	d104      	bne.n	800919a <HAL_TIM_IC_Start_IT+0xf2>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009198:	e00b      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x10a>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b10      	cmp	r3, #16
 800919e:	d104      	bne.n	80091aa <HAL_TIM_IC_Start_IT+0x102>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091a8:	e003      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x10a>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2202      	movs	r2, #2
 80091ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d104      	bne.n	80091c2 <HAL_TIM_IC_Start_IT+0x11a>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091c0:	e013      	b.n	80091ea <HAL_TIM_IC_Start_IT+0x142>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d104      	bne.n	80091d2 <HAL_TIM_IC_Start_IT+0x12a>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091d0:	e00b      	b.n	80091ea <HAL_TIM_IC_Start_IT+0x142>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d104      	bne.n	80091e2 <HAL_TIM_IC_Start_IT+0x13a>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091e0:	e003      	b.n	80091ea <HAL_TIM_IC_Start_IT+0x142>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2202      	movs	r2, #2
 80091e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	2b0c      	cmp	r3, #12
 80091ee:	d841      	bhi.n	8009274 <HAL_TIM_IC_Start_IT+0x1cc>
 80091f0:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <HAL_TIM_IC_Start_IT+0x150>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	0800922d 	.word	0x0800922d
 80091fc:	08009275 	.word	0x08009275
 8009200:	08009275 	.word	0x08009275
 8009204:	08009275 	.word	0x08009275
 8009208:	0800923f 	.word	0x0800923f
 800920c:	08009275 	.word	0x08009275
 8009210:	08009275 	.word	0x08009275
 8009214:	08009275 	.word	0x08009275
 8009218:	08009251 	.word	0x08009251
 800921c:	08009275 	.word	0x08009275
 8009220:	08009275 	.word	0x08009275
 8009224:	08009275 	.word	0x08009275
 8009228:	08009263 	.word	0x08009263
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0202 	orr.w	r2, r2, #2
 800923a:	60da      	str	r2, [r3, #12]
      break;
 800923c:	e01d      	b.n	800927a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f042 0204 	orr.w	r2, r2, #4
 800924c:	60da      	str	r2, [r3, #12]
      break;
 800924e:	e014      	b.n	800927a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f042 0208 	orr.w	r2, r2, #8
 800925e:	60da      	str	r2, [r3, #12]
      break;
 8009260:	e00b      	b.n	800927a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f042 0210 	orr.w	r2, r2, #16
 8009270:	60da      	str	r2, [r3, #12]
      break;
 8009272:	e002      	b.n	800927a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	73fb      	strb	r3, [r7, #15]
      break;
 8009278:	bf00      	nop
  }

  if (status == HAL_OK)
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d14e      	bne.n	800931e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2201      	movs	r2, #1
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f001 fa83 	bl	800a794 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a25      	ldr	r2, [pc, #148]	@ (8009328 <HAL_TIM_IC_Start_IT+0x280>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d022      	beq.n	80092de <HAL_TIM_IC_Start_IT+0x236>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092a0:	d01d      	beq.n	80092de <HAL_TIM_IC_Start_IT+0x236>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a21      	ldr	r2, [pc, #132]	@ (800932c <HAL_TIM_IC_Start_IT+0x284>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d018      	beq.n	80092de <HAL_TIM_IC_Start_IT+0x236>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a1f      	ldr	r2, [pc, #124]	@ (8009330 <HAL_TIM_IC_Start_IT+0x288>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d013      	beq.n	80092de <HAL_TIM_IC_Start_IT+0x236>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009334 <HAL_TIM_IC_Start_IT+0x28c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00e      	beq.n	80092de <HAL_TIM_IC_Start_IT+0x236>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009338 <HAL_TIM_IC_Start_IT+0x290>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d009      	beq.n	80092de <HAL_TIM_IC_Start_IT+0x236>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a1b      	ldr	r2, [pc, #108]	@ (800933c <HAL_TIM_IC_Start_IT+0x294>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d004      	beq.n	80092de <HAL_TIM_IC_Start_IT+0x236>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a19      	ldr	r2, [pc, #100]	@ (8009340 <HAL_TIM_IC_Start_IT+0x298>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d115      	bne.n	800930a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	4b17      	ldr	r3, [pc, #92]	@ (8009344 <HAL_TIM_IC_Start_IT+0x29c>)
 80092e6:	4013      	ands	r3, r2
 80092e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b06      	cmp	r3, #6
 80092ee:	d015      	beq.n	800931c <HAL_TIM_IC_Start_IT+0x274>
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092f6:	d011      	beq.n	800931c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f042 0201 	orr.w	r2, r2, #1
 8009306:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009308:	e008      	b.n	800931c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f042 0201 	orr.w	r2, r2, #1
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	e000      	b.n	800931e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800931c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	40012c00 	.word	0x40012c00
 800932c:	40000400 	.word	0x40000400
 8009330:	40000800 	.word	0x40000800
 8009334:	40000c00 	.word	0x40000c00
 8009338:	40013400 	.word	0x40013400
 800933c:	40014000 	.word	0x40014000
 8009340:	40015000 	.word	0x40015000
 8009344:	00010007 	.word	0x00010007

08009348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d020      	beq.n	80093ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d01b      	beq.n	80093ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f06f 0202 	mvn.w	r2, #2
 800937c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7f8 fd0a 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8009398:	e005      	b.n	80093a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fc38 	bl	8009c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fc3f 	bl	8009c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d020      	beq.n	80093f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d01b      	beq.n	80093f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f06f 0204 	mvn.w	r2, #4
 80093c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2202      	movs	r2, #2
 80093ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7f8 fce4 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 80093e4:	e005      	b.n	80093f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fc12 	bl	8009c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fc19 	bl	8009c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f003 0308 	and.w	r3, r3, #8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d020      	beq.n	8009444 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f003 0308 	and.w	r3, r3, #8
 8009408:	2b00      	cmp	r3, #0
 800940a:	d01b      	beq.n	8009444 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f06f 0208 	mvn.w	r2, #8
 8009414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2204      	movs	r2, #4
 800941a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f8 fcbe 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8009430:	e005      	b.n	800943e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fbec 	bl	8009c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fbf3 	bl	8009c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f003 0310 	and.w	r3, r3, #16
 800944a:	2b00      	cmp	r3, #0
 800944c:	d020      	beq.n	8009490 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f003 0310 	and.w	r3, r3, #16
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01b      	beq.n	8009490 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0210 	mvn.w	r2, #16
 8009460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2208      	movs	r2, #8
 8009466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7f8 fc98 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 800947c:	e005      	b.n	800948a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fbc6 	bl	8009c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fbcd 	bl	8009c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00c      	beq.n	80094b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d007      	beq.n	80094b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0201 	mvn.w	r2, #1
 80094ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fba4 	bl	8009bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d104      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00c      	beq.n	80094e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d007      	beq.n	80094e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80094da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fbd3 	bl	800ac88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00c      	beq.n	8009506 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fbcb 	bl	800ac9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00c      	beq.n	800952a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009516:	2b00      	cmp	r3, #0
 8009518:	d007      	beq.n	800952a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fb87 	bl	8009c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d007      	beq.n	800954e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f06f 0220 	mvn.w	r2, #32
 8009546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fb93 	bl	800ac74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00c      	beq.n	8009572 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d007      	beq.n	8009572 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800956a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 fb9f 	bl	800acb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00c      	beq.n	8009596 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d007      	beq.n	8009596 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800958e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 fb97 	bl	800acc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00c      	beq.n	80095ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d007      	beq.n	80095ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80095b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 fb8f 	bl	800acd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00c      	beq.n	80095de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80095d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fb87 	bl	800acec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095de:	bf00      	nop
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b086      	sub	sp, #24
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	60b9      	str	r1, [r7, #8]
 80095f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d101      	bne.n	8009604 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009600:	2302      	movs	r3, #2
 8009602:	e088      	b.n	8009716 <HAL_TIM_IC_ConfigChannel+0x130>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d11b      	bne.n	800964a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009622:	f000 fef1 	bl	800a408 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	699a      	ldr	r2, [r3, #24]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 020c 	bic.w	r2, r2, #12
 8009634:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6999      	ldr	r1, [r3, #24]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	430a      	orrs	r2, r1
 8009646:	619a      	str	r2, [r3, #24]
 8009648:	e060      	b.n	800970c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b04      	cmp	r3, #4
 800964e:	d11c      	bne.n	800968a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009660:	f000 ff75 	bl	800a54e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009672:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6999      	ldr	r1, [r3, #24]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	021a      	lsls	r2, r3, #8
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	619a      	str	r2, [r3, #24]
 8009688:	e040      	b.n	800970c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b08      	cmp	r3, #8
 800968e:	d11b      	bne.n	80096c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80096a0:	f000 ffc2 	bl	800a628 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	69da      	ldr	r2, [r3, #28]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f022 020c 	bic.w	r2, r2, #12
 80096b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	69d9      	ldr	r1, [r3, #28]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	61da      	str	r2, [r3, #28]
 80096c6:	e021      	b.n	800970c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b0c      	cmp	r3, #12
 80096cc:	d11c      	bne.n	8009708 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80096de:	f000 ffdf 	bl	800a6a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69da      	ldr	r2, [r3, #28]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80096f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69d9      	ldr	r1, [r3, #28]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	021a      	lsls	r2, r3, #8
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	61da      	str	r2, [r3, #28]
 8009706:	e001      	b.n	800970c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009714:	7dfb      	ldrb	r3, [r7, #23]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3718      	adds	r7, #24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009736:	2b01      	cmp	r3, #1
 8009738:	d101      	bne.n	800973e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800973a:	2302      	movs	r3, #2
 800973c:	e0ff      	b.n	800993e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b14      	cmp	r3, #20
 800974a:	f200 80f0 	bhi.w	800992e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800974e:	a201      	add	r2, pc, #4	@ (adr r2, 8009754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009754:	080097a9 	.word	0x080097a9
 8009758:	0800992f 	.word	0x0800992f
 800975c:	0800992f 	.word	0x0800992f
 8009760:	0800992f 	.word	0x0800992f
 8009764:	080097e9 	.word	0x080097e9
 8009768:	0800992f 	.word	0x0800992f
 800976c:	0800992f 	.word	0x0800992f
 8009770:	0800992f 	.word	0x0800992f
 8009774:	0800982b 	.word	0x0800982b
 8009778:	0800992f 	.word	0x0800992f
 800977c:	0800992f 	.word	0x0800992f
 8009780:	0800992f 	.word	0x0800992f
 8009784:	0800986b 	.word	0x0800986b
 8009788:	0800992f 	.word	0x0800992f
 800978c:	0800992f 	.word	0x0800992f
 8009790:	0800992f 	.word	0x0800992f
 8009794:	080098ad 	.word	0x080098ad
 8009798:	0800992f 	.word	0x0800992f
 800979c:	0800992f 	.word	0x0800992f
 80097a0:	0800992f 	.word	0x0800992f
 80097a4:	080098ed 	.word	0x080098ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fb00 	bl	8009db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	699a      	ldr	r2, [r3, #24]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0208 	orr.w	r2, r2, #8
 80097c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	699a      	ldr	r2, [r3, #24]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0204 	bic.w	r2, r2, #4
 80097d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6999      	ldr	r1, [r3, #24]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	691a      	ldr	r2, [r3, #16]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	619a      	str	r2, [r3, #24]
      break;
 80097e6:	e0a5      	b.n	8009934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68b9      	ldr	r1, [r7, #8]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fb7a 	bl	8009ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	699a      	ldr	r2, [r3, #24]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6999      	ldr	r1, [r3, #24]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	021a      	lsls	r2, r3, #8
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	619a      	str	r2, [r3, #24]
      break;
 8009828:	e084      	b.n	8009934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68b9      	ldr	r1, [r7, #8]
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fbed 	bl	800a010 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69da      	ldr	r2, [r3, #28]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f042 0208 	orr.w	r2, r2, #8
 8009844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69da      	ldr	r2, [r3, #28]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0204 	bic.w	r2, r2, #4
 8009854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69d9      	ldr	r1, [r3, #28]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	691a      	ldr	r2, [r3, #16]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	430a      	orrs	r2, r1
 8009866:	61da      	str	r2, [r3, #28]
      break;
 8009868:	e064      	b.n	8009934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68b9      	ldr	r1, [r7, #8]
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fc5f 	bl	800a134 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	69da      	ldr	r2, [r3, #28]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69d9      	ldr	r1, [r3, #28]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	021a      	lsls	r2, r3, #8
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	61da      	str	r2, [r3, #28]
      break;
 80098aa:	e043      	b.n	8009934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68b9      	ldr	r1, [r7, #8]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 fcd2 	bl	800a25c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f042 0208 	orr.w	r2, r2, #8
 80098c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 0204 	bic.w	r2, r2, #4
 80098d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	691a      	ldr	r2, [r3, #16]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80098ea:	e023      	b.n	8009934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fd1c 	bl	800a330 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009906:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009916:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	021a      	lsls	r2, r3, #8
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800992c:	e002      	b.n	8009934 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	75fb      	strb	r3, [r7, #23]
      break;
 8009932:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800993c:	7dfb      	ldrb	r3, [r7, #23]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop

08009948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800995c:	2b01      	cmp	r3, #1
 800995e:	d101      	bne.n	8009964 <HAL_TIM_ConfigClockSource+0x1c>
 8009960:	2302      	movs	r3, #2
 8009962:	e0f6      	b.n	8009b52 <HAL_TIM_ConfigClockSource+0x20a>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009982:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800998e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a6f      	ldr	r2, [pc, #444]	@ (8009b5c <HAL_TIM_ConfigClockSource+0x214>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	f000 80c1 	beq.w	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 80099a4:	4a6d      	ldr	r2, [pc, #436]	@ (8009b5c <HAL_TIM_ConfigClockSource+0x214>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	f200 80c6 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 80099ac:	4a6c      	ldr	r2, [pc, #432]	@ (8009b60 <HAL_TIM_ConfigClockSource+0x218>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	f000 80b9 	beq.w	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 80099b4:	4a6a      	ldr	r2, [pc, #424]	@ (8009b60 <HAL_TIM_ConfigClockSource+0x218>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	f200 80be 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 80099bc:	4a69      	ldr	r2, [pc, #420]	@ (8009b64 <HAL_TIM_ConfigClockSource+0x21c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	f000 80b1 	beq.w	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 80099c4:	4a67      	ldr	r2, [pc, #412]	@ (8009b64 <HAL_TIM_ConfigClockSource+0x21c>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	f200 80b6 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 80099cc:	4a66      	ldr	r2, [pc, #408]	@ (8009b68 <HAL_TIM_ConfigClockSource+0x220>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	f000 80a9 	beq.w	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 80099d4:	4a64      	ldr	r2, [pc, #400]	@ (8009b68 <HAL_TIM_ConfigClockSource+0x220>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	f200 80ae 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 80099dc:	4a63      	ldr	r2, [pc, #396]	@ (8009b6c <HAL_TIM_ConfigClockSource+0x224>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	f000 80a1 	beq.w	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 80099e4:	4a61      	ldr	r2, [pc, #388]	@ (8009b6c <HAL_TIM_ConfigClockSource+0x224>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	f200 80a6 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 80099ec:	4a60      	ldr	r2, [pc, #384]	@ (8009b70 <HAL_TIM_ConfigClockSource+0x228>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	f000 8099 	beq.w	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 80099f4:	4a5e      	ldr	r2, [pc, #376]	@ (8009b70 <HAL_TIM_ConfigClockSource+0x228>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	f200 809e 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 80099fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009a00:	f000 8091 	beq.w	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 8009a04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009a08:	f200 8096 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a10:	f000 8089 	beq.w	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 8009a14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a18:	f200 808e 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a20:	d03e      	beq.n	8009aa0 <HAL_TIM_ConfigClockSource+0x158>
 8009a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a26:	f200 8087 	bhi.w	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a2e:	f000 8086 	beq.w	8009b3e <HAL_TIM_ConfigClockSource+0x1f6>
 8009a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a36:	d87f      	bhi.n	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a38:	2b70      	cmp	r3, #112	@ 0x70
 8009a3a:	d01a      	beq.n	8009a72 <HAL_TIM_ConfigClockSource+0x12a>
 8009a3c:	2b70      	cmp	r3, #112	@ 0x70
 8009a3e:	d87b      	bhi.n	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a40:	2b60      	cmp	r3, #96	@ 0x60
 8009a42:	d050      	beq.n	8009ae6 <HAL_TIM_ConfigClockSource+0x19e>
 8009a44:	2b60      	cmp	r3, #96	@ 0x60
 8009a46:	d877      	bhi.n	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a48:	2b50      	cmp	r3, #80	@ 0x50
 8009a4a:	d03c      	beq.n	8009ac6 <HAL_TIM_ConfigClockSource+0x17e>
 8009a4c:	2b50      	cmp	r3, #80	@ 0x50
 8009a4e:	d873      	bhi.n	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a50:	2b40      	cmp	r3, #64	@ 0x40
 8009a52:	d058      	beq.n	8009b06 <HAL_TIM_ConfigClockSource+0x1be>
 8009a54:	2b40      	cmp	r3, #64	@ 0x40
 8009a56:	d86f      	bhi.n	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a58:	2b30      	cmp	r3, #48	@ 0x30
 8009a5a:	d064      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 8009a5c:	2b30      	cmp	r3, #48	@ 0x30
 8009a5e:	d86b      	bhi.n	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a60:	2b20      	cmp	r3, #32
 8009a62:	d060      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d867      	bhi.n	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d05c      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 8009a6c:	2b10      	cmp	r3, #16
 8009a6e:	d05a      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0x1de>
 8009a70:	e062      	b.n	8009b38 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a82:	f000 fe67 	bl	800a754 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	609a      	str	r2, [r3, #8]
      break;
 8009a9e:	e04f      	b.n	8009b40 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ab0:	f000 fe50 	bl	800a754 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689a      	ldr	r2, [r3, #8]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ac2:	609a      	str	r2, [r3, #8]
      break;
 8009ac4:	e03c      	b.n	8009b40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f000 fd0c 	bl	800a4f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2150      	movs	r1, #80	@ 0x50
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fe1b 	bl	800a71a <TIM_ITRx_SetConfig>
      break;
 8009ae4:	e02c      	b.n	8009b40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009af2:	461a      	mov	r2, r3
 8009af4:	f000 fd68 	bl	800a5c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2160      	movs	r1, #96	@ 0x60
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 fe0b 	bl	800a71a <TIM_ITRx_SetConfig>
      break;
 8009b04:	e01c      	b.n	8009b40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b12:	461a      	mov	r2, r3
 8009b14:	f000 fcec 	bl	800a4f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2140      	movs	r1, #64	@ 0x40
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fdfb 	bl	800a71a <TIM_ITRx_SetConfig>
      break;
 8009b24:	e00c      	b.n	8009b40 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4610      	mov	r0, r2
 8009b32:	f000 fdf2 	bl	800a71a <TIM_ITRx_SetConfig>
      break;
 8009b36:	e003      	b.n	8009b40 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b3c:	e000      	b.n	8009b40 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	00100070 	.word	0x00100070
 8009b60:	00100060 	.word	0x00100060
 8009b64:	00100050 	.word	0x00100050
 8009b68:	00100040 	.word	0x00100040
 8009b6c:	00100030 	.word	0x00100030
 8009b70:	00100020 	.word	0x00100020

08009b74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b0c      	cmp	r3, #12
 8009b86:	d831      	bhi.n	8009bec <HAL_TIM_ReadCapturedValue+0x78>
 8009b88:	a201      	add	r2, pc, #4	@ (adr r2, 8009b90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009bc5 	.word	0x08009bc5
 8009b94:	08009bed 	.word	0x08009bed
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009bed 	.word	0x08009bed
 8009ba0:	08009bcf 	.word	0x08009bcf
 8009ba4:	08009bed 	.word	0x08009bed
 8009ba8:	08009bed 	.word	0x08009bed
 8009bac:	08009bed 	.word	0x08009bed
 8009bb0:	08009bd9 	.word	0x08009bd9
 8009bb4:	08009bed 	.word	0x08009bed
 8009bb8:	08009bed 	.word	0x08009bed
 8009bbc:	08009bed 	.word	0x08009bed
 8009bc0:	08009be3 	.word	0x08009be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bca:	60fb      	str	r3, [r7, #12]

      break;
 8009bcc:	e00f      	b.n	8009bee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd4:	60fb      	str	r3, [r7, #12]

      break;
 8009bd6:	e00a      	b.n	8009bee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bde:	60fb      	str	r3, [r7, #12]

      break;
 8009be0:	e005      	b.n	8009bee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be8:	60fb      	str	r3, [r7, #12]

      break;
 8009bea:	e000      	b.n	8009bee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009bec:	bf00      	nop
  }

  return tmpreg;
 8009bee:	68fb      	ldr	r3, [r7, #12]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a4c      	ldr	r2, [pc, #304]	@ (8009d90 <TIM_Base_SetConfig+0x144>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d017      	beq.n	8009c94 <TIM_Base_SetConfig+0x48>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c6a:	d013      	beq.n	8009c94 <TIM_Base_SetConfig+0x48>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a49      	ldr	r2, [pc, #292]	@ (8009d94 <TIM_Base_SetConfig+0x148>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d00f      	beq.n	8009c94 <TIM_Base_SetConfig+0x48>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a48      	ldr	r2, [pc, #288]	@ (8009d98 <TIM_Base_SetConfig+0x14c>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d00b      	beq.n	8009c94 <TIM_Base_SetConfig+0x48>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a47      	ldr	r2, [pc, #284]	@ (8009d9c <TIM_Base_SetConfig+0x150>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d007      	beq.n	8009c94 <TIM_Base_SetConfig+0x48>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a46      	ldr	r2, [pc, #280]	@ (8009da0 <TIM_Base_SetConfig+0x154>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d003      	beq.n	8009c94 <TIM_Base_SetConfig+0x48>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a45      	ldr	r2, [pc, #276]	@ (8009da4 <TIM_Base_SetConfig+0x158>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d108      	bne.n	8009ca6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a39      	ldr	r2, [pc, #228]	@ (8009d90 <TIM_Base_SetConfig+0x144>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d023      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cb4:	d01f      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a36      	ldr	r2, [pc, #216]	@ (8009d94 <TIM_Base_SetConfig+0x148>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d01b      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a35      	ldr	r2, [pc, #212]	@ (8009d98 <TIM_Base_SetConfig+0x14c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d017      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a34      	ldr	r2, [pc, #208]	@ (8009d9c <TIM_Base_SetConfig+0x150>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d013      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a33      	ldr	r2, [pc, #204]	@ (8009da0 <TIM_Base_SetConfig+0x154>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00f      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a33      	ldr	r2, [pc, #204]	@ (8009da8 <TIM_Base_SetConfig+0x15c>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00b      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a32      	ldr	r2, [pc, #200]	@ (8009dac <TIM_Base_SetConfig+0x160>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d007      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a31      	ldr	r2, [pc, #196]	@ (8009db0 <TIM_Base_SetConfig+0x164>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d003      	beq.n	8009cf6 <TIM_Base_SetConfig+0xaa>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8009da4 <TIM_Base_SetConfig+0x158>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d108      	bne.n	8009d08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a18      	ldr	r2, [pc, #96]	@ (8009d90 <TIM_Base_SetConfig+0x144>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d013      	beq.n	8009d5c <TIM_Base_SetConfig+0x110>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a1a      	ldr	r2, [pc, #104]	@ (8009da0 <TIM_Base_SetConfig+0x154>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00f      	beq.n	8009d5c <TIM_Base_SetConfig+0x110>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009da8 <TIM_Base_SetConfig+0x15c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00b      	beq.n	8009d5c <TIM_Base_SetConfig+0x110>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a19      	ldr	r2, [pc, #100]	@ (8009dac <TIM_Base_SetConfig+0x160>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d007      	beq.n	8009d5c <TIM_Base_SetConfig+0x110>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a18      	ldr	r2, [pc, #96]	@ (8009db0 <TIM_Base_SetConfig+0x164>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d003      	beq.n	8009d5c <TIM_Base_SetConfig+0x110>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a13      	ldr	r2, [pc, #76]	@ (8009da4 <TIM_Base_SetConfig+0x158>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d103      	bne.n	8009d64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	691a      	ldr	r2, [r3, #16]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d105      	bne.n	8009d82 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f023 0201 	bic.w	r2, r3, #1
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	611a      	str	r2, [r3, #16]
  }
}
 8009d82:	bf00      	nop
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	40012c00 	.word	0x40012c00
 8009d94:	40000400 	.word	0x40000400
 8009d98:	40000800 	.word	0x40000800
 8009d9c:	40000c00 	.word	0x40000c00
 8009da0:	40013400 	.word	0x40013400
 8009da4:	40015000 	.word	0x40015000
 8009da8:	40014000 	.word	0x40014000
 8009dac:	40014400 	.word	0x40014400
 8009db0:	40014800 	.word	0x40014800

08009db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	f023 0201 	bic.w	r2, r3, #1
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0303 	bic.w	r3, r3, #3
 8009dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f023 0302 	bic.w	r3, r3, #2
 8009e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a30      	ldr	r2, [pc, #192]	@ (8009ed0 <TIM_OC1_SetConfig+0x11c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d013      	beq.n	8009e3c <TIM_OC1_SetConfig+0x88>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a2f      	ldr	r2, [pc, #188]	@ (8009ed4 <TIM_OC1_SetConfig+0x120>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d00f      	beq.n	8009e3c <TIM_OC1_SetConfig+0x88>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a2e      	ldr	r2, [pc, #184]	@ (8009ed8 <TIM_OC1_SetConfig+0x124>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d00b      	beq.n	8009e3c <TIM_OC1_SetConfig+0x88>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a2d      	ldr	r2, [pc, #180]	@ (8009edc <TIM_OC1_SetConfig+0x128>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d007      	beq.n	8009e3c <TIM_OC1_SetConfig+0x88>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8009ee0 <TIM_OC1_SetConfig+0x12c>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d003      	beq.n	8009e3c <TIM_OC1_SetConfig+0x88>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a2b      	ldr	r2, [pc, #172]	@ (8009ee4 <TIM_OC1_SetConfig+0x130>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d10c      	bne.n	8009e56 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f023 0308 	bic.w	r3, r3, #8
 8009e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f023 0304 	bic.w	r3, r3, #4
 8009e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a1d      	ldr	r2, [pc, #116]	@ (8009ed0 <TIM_OC1_SetConfig+0x11c>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d013      	beq.n	8009e86 <TIM_OC1_SetConfig+0xd2>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed4 <TIM_OC1_SetConfig+0x120>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d00f      	beq.n	8009e86 <TIM_OC1_SetConfig+0xd2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a1b      	ldr	r2, [pc, #108]	@ (8009ed8 <TIM_OC1_SetConfig+0x124>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00b      	beq.n	8009e86 <TIM_OC1_SetConfig+0xd2>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a1a      	ldr	r2, [pc, #104]	@ (8009edc <TIM_OC1_SetConfig+0x128>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d007      	beq.n	8009e86 <TIM_OC1_SetConfig+0xd2>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a19      	ldr	r2, [pc, #100]	@ (8009ee0 <TIM_OC1_SetConfig+0x12c>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d003      	beq.n	8009e86 <TIM_OC1_SetConfig+0xd2>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a18      	ldr	r2, [pc, #96]	@ (8009ee4 <TIM_OC1_SetConfig+0x130>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d111      	bne.n	8009eaa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	621a      	str	r2, [r3, #32]
}
 8009ec4:	bf00      	nop
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	40012c00 	.word	0x40012c00
 8009ed4:	40013400 	.word	0x40013400
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	40014400 	.word	0x40014400
 8009ee0:	40014800 	.word	0x40014800
 8009ee4:	40015000 	.word	0x40015000

08009ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	f023 0210 	bic.w	r2, r3, #16
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	021b      	lsls	r3, r3, #8
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f023 0320 	bic.w	r3, r3, #32
 8009f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a2c      	ldr	r2, [pc, #176]	@ (8009ff8 <TIM_OC2_SetConfig+0x110>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d007      	beq.n	8009f5c <TIM_OC2_SetConfig+0x74>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a2b      	ldr	r2, [pc, #172]	@ (8009ffc <TIM_OC2_SetConfig+0x114>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d003      	beq.n	8009f5c <TIM_OC2_SetConfig+0x74>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a2a      	ldr	r2, [pc, #168]	@ (800a000 <TIM_OC2_SetConfig+0x118>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d10d      	bne.n	8009f78 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	011b      	lsls	r3, r3, #4
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ff8 <TIM_OC2_SetConfig+0x110>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d013      	beq.n	8009fa8 <TIM_OC2_SetConfig+0xc0>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a1e      	ldr	r2, [pc, #120]	@ (8009ffc <TIM_OC2_SetConfig+0x114>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d00f      	beq.n	8009fa8 <TIM_OC2_SetConfig+0xc0>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a1e      	ldr	r2, [pc, #120]	@ (800a004 <TIM_OC2_SetConfig+0x11c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d00b      	beq.n	8009fa8 <TIM_OC2_SetConfig+0xc0>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a1d      	ldr	r2, [pc, #116]	@ (800a008 <TIM_OC2_SetConfig+0x120>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d007      	beq.n	8009fa8 <TIM_OC2_SetConfig+0xc0>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800a00c <TIM_OC2_SetConfig+0x124>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d003      	beq.n	8009fa8 <TIM_OC2_SetConfig+0xc0>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a17      	ldr	r2, [pc, #92]	@ (800a000 <TIM_OC2_SetConfig+0x118>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d113      	bne.n	8009fd0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	621a      	str	r2, [r3, #32]
}
 8009fea:	bf00      	nop
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40012c00 	.word	0x40012c00
 8009ffc:	40013400 	.word	0x40013400
 800a000:	40015000 	.word	0x40015000
 800a004:	40014000 	.word	0x40014000
 800a008:	40014400 	.word	0x40014400
 800a00c:	40014800 	.word	0x40014800

0800a010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a010:	b480      	push	{r7}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a03e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f023 0303 	bic.w	r3, r3, #3
 800a04a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a05c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	021b      	lsls	r3, r3, #8
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	4313      	orrs	r3, r2
 800a068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a2b      	ldr	r2, [pc, #172]	@ (800a11c <TIM_OC3_SetConfig+0x10c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d007      	beq.n	800a082 <TIM_OC3_SetConfig+0x72>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a2a      	ldr	r2, [pc, #168]	@ (800a120 <TIM_OC3_SetConfig+0x110>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d003      	beq.n	800a082 <TIM_OC3_SetConfig+0x72>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a29      	ldr	r2, [pc, #164]	@ (800a124 <TIM_OC3_SetConfig+0x114>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d10d      	bne.n	800a09e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	021b      	lsls	r3, r3, #8
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	4313      	orrs	r3, r2
 800a094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a09c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a1e      	ldr	r2, [pc, #120]	@ (800a11c <TIM_OC3_SetConfig+0x10c>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d013      	beq.n	800a0ce <TIM_OC3_SetConfig+0xbe>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a120 <TIM_OC3_SetConfig+0x110>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d00f      	beq.n	800a0ce <TIM_OC3_SetConfig+0xbe>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a128 <TIM_OC3_SetConfig+0x118>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00b      	beq.n	800a0ce <TIM_OC3_SetConfig+0xbe>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a1c      	ldr	r2, [pc, #112]	@ (800a12c <TIM_OC3_SetConfig+0x11c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d007      	beq.n	800a0ce <TIM_OC3_SetConfig+0xbe>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a130 <TIM_OC3_SetConfig+0x120>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d003      	beq.n	800a0ce <TIM_OC3_SetConfig+0xbe>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a16      	ldr	r2, [pc, #88]	@ (800a124 <TIM_OC3_SetConfig+0x114>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d113      	bne.n	800a0f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	011b      	lsls	r3, r3, #4
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	621a      	str	r2, [r3, #32]
}
 800a110:	bf00      	nop
 800a112:	371c      	adds	r7, #28
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	40012c00 	.word	0x40012c00
 800a120:	40013400 	.word	0x40013400
 800a124:	40015000 	.word	0x40015000
 800a128:	40014000 	.word	0x40014000
 800a12c:	40014400 	.word	0x40014400
 800a130:	40014800 	.word	0x40014800

0800a134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a1b      	ldr	r3, [r3, #32]
 800a148:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	021b      	lsls	r3, r3, #8
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4313      	orrs	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	031b      	lsls	r3, r3, #12
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a2c      	ldr	r2, [pc, #176]	@ (800a244 <TIM_OC4_SetConfig+0x110>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d007      	beq.n	800a1a8 <TIM_OC4_SetConfig+0x74>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a2b      	ldr	r2, [pc, #172]	@ (800a248 <TIM_OC4_SetConfig+0x114>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_OC4_SetConfig+0x74>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a24c <TIM_OC4_SetConfig+0x118>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d10d      	bne.n	800a1c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	031b      	lsls	r3, r3, #12
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a1f      	ldr	r2, [pc, #124]	@ (800a244 <TIM_OC4_SetConfig+0x110>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d013      	beq.n	800a1f4 <TIM_OC4_SetConfig+0xc0>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a248 <TIM_OC4_SetConfig+0x114>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d00f      	beq.n	800a1f4 <TIM_OC4_SetConfig+0xc0>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a250 <TIM_OC4_SetConfig+0x11c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00b      	beq.n	800a1f4 <TIM_OC4_SetConfig+0xc0>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a1d      	ldr	r2, [pc, #116]	@ (800a254 <TIM_OC4_SetConfig+0x120>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d007      	beq.n	800a1f4 <TIM_OC4_SetConfig+0xc0>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a258 <TIM_OC4_SetConfig+0x124>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d003      	beq.n	800a1f4 <TIM_OC4_SetConfig+0xc0>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a17      	ldr	r2, [pc, #92]	@ (800a24c <TIM_OC4_SetConfig+0x118>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d113      	bne.n	800a21c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a202:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	019b      	lsls	r3, r3, #6
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	019b      	lsls	r3, r3, #6
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	4313      	orrs	r3, r2
 800a21a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	621a      	str	r2, [r3, #32]
}
 800a236:	bf00      	nop
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	40012c00 	.word	0x40012c00
 800a248:	40013400 	.word	0x40013400
 800a24c:	40015000 	.word	0x40015000
 800a250:	40014000 	.word	0x40014000
 800a254:	40014400 	.word	0x40014400
 800a258:	40014800 	.word	0x40014800

0800a25c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a28a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a2a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a19      	ldr	r2, [pc, #100]	@ (800a318 <TIM_OC5_SetConfig+0xbc>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d013      	beq.n	800a2de <TIM_OC5_SetConfig+0x82>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a18      	ldr	r2, [pc, #96]	@ (800a31c <TIM_OC5_SetConfig+0xc0>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00f      	beq.n	800a2de <TIM_OC5_SetConfig+0x82>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a17      	ldr	r2, [pc, #92]	@ (800a320 <TIM_OC5_SetConfig+0xc4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00b      	beq.n	800a2de <TIM_OC5_SetConfig+0x82>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a16      	ldr	r2, [pc, #88]	@ (800a324 <TIM_OC5_SetConfig+0xc8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d007      	beq.n	800a2de <TIM_OC5_SetConfig+0x82>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a15      	ldr	r2, [pc, #84]	@ (800a328 <TIM_OC5_SetConfig+0xcc>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d003      	beq.n	800a2de <TIM_OC5_SetConfig+0x82>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a14      	ldr	r2, [pc, #80]	@ (800a32c <TIM_OC5_SetConfig+0xd0>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d109      	bne.n	800a2f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	021b      	lsls	r3, r3, #8
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	621a      	str	r2, [r3, #32]
}
 800a30c:	bf00      	nop
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	40012c00 	.word	0x40012c00
 800a31c:	40013400 	.word	0x40013400
 800a320:	40014000 	.word	0x40014000
 800a324:	40014400 	.word	0x40014400
 800a328:	40014800 	.word	0x40014800
 800a32c:	40015000 	.word	0x40015000

0800a330 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a35e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	051b      	lsls	r3, r3, #20
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a1a      	ldr	r2, [pc, #104]	@ (800a3f0 <TIM_OC6_SetConfig+0xc0>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d013      	beq.n	800a3b4 <TIM_OC6_SetConfig+0x84>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a19      	ldr	r2, [pc, #100]	@ (800a3f4 <TIM_OC6_SetConfig+0xc4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d00f      	beq.n	800a3b4 <TIM_OC6_SetConfig+0x84>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a18      	ldr	r2, [pc, #96]	@ (800a3f8 <TIM_OC6_SetConfig+0xc8>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d00b      	beq.n	800a3b4 <TIM_OC6_SetConfig+0x84>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a17      	ldr	r2, [pc, #92]	@ (800a3fc <TIM_OC6_SetConfig+0xcc>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d007      	beq.n	800a3b4 <TIM_OC6_SetConfig+0x84>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a16      	ldr	r2, [pc, #88]	@ (800a400 <TIM_OC6_SetConfig+0xd0>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d003      	beq.n	800a3b4 <TIM_OC6_SetConfig+0x84>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a15      	ldr	r2, [pc, #84]	@ (800a404 <TIM_OC6_SetConfig+0xd4>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d109      	bne.n	800a3c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	029b      	lsls	r3, r3, #10
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	621a      	str	r2, [r3, #32]
}
 800a3e2:	bf00      	nop
 800a3e4:	371c      	adds	r7, #28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	40012c00 	.word	0x40012c00
 800a3f4:	40013400 	.word	0x40013400
 800a3f8:	40014000 	.word	0x40014000
 800a3fc:	40014400 	.word	0x40014400
 800a400:	40014800 	.word	0x40014800
 800a404:	40015000 	.word	0x40015000

0800a408 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	f023 0201 	bic.w	r2, r3, #1
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4a28      	ldr	r2, [pc, #160]	@ (800a4d4 <TIM_TI1_SetConfig+0xcc>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d01b      	beq.n	800a46e <TIM_TI1_SetConfig+0x66>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a43c:	d017      	beq.n	800a46e <TIM_TI1_SetConfig+0x66>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4a25      	ldr	r2, [pc, #148]	@ (800a4d8 <TIM_TI1_SetConfig+0xd0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d013      	beq.n	800a46e <TIM_TI1_SetConfig+0x66>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4a24      	ldr	r2, [pc, #144]	@ (800a4dc <TIM_TI1_SetConfig+0xd4>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d00f      	beq.n	800a46e <TIM_TI1_SetConfig+0x66>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4a23      	ldr	r2, [pc, #140]	@ (800a4e0 <TIM_TI1_SetConfig+0xd8>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d00b      	beq.n	800a46e <TIM_TI1_SetConfig+0x66>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4a22      	ldr	r2, [pc, #136]	@ (800a4e4 <TIM_TI1_SetConfig+0xdc>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d007      	beq.n	800a46e <TIM_TI1_SetConfig+0x66>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4a21      	ldr	r2, [pc, #132]	@ (800a4e8 <TIM_TI1_SetConfig+0xe0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d003      	beq.n	800a46e <TIM_TI1_SetConfig+0x66>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4a20      	ldr	r2, [pc, #128]	@ (800a4ec <TIM_TI1_SetConfig+0xe4>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d101      	bne.n	800a472 <TIM_TI1_SetConfig+0x6a>
 800a46e:	2301      	movs	r3, #1
 800a470:	e000      	b.n	800a474 <TIM_TI1_SetConfig+0x6c>
 800a472:	2300      	movs	r3, #0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d008      	beq.n	800a48a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4313      	orrs	r3, r2
 800a486:	617b      	str	r3, [r7, #20]
 800a488:	e003      	b.n	800a492 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	011b      	lsls	r3, r3, #4
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f023 030a 	bic.w	r3, r3, #10
 800a4ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f003 030a 	and.w	r3, r3, #10
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	621a      	str	r2, [r3, #32]
}
 800a4c6:	bf00      	nop
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	40012c00 	.word	0x40012c00
 800a4d8:	40000400 	.word	0x40000400
 800a4dc:	40000800 	.word	0x40000800
 800a4e0:	40000c00 	.word	0x40000c00
 800a4e4:	40013400 	.word	0x40013400
 800a4e8:	40014000 	.word	0x40014000
 800a4ec:	40015000 	.word	0x40015000

0800a4f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	f023 0201 	bic.w	r2, r3, #1
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a51a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	4313      	orrs	r3, r2
 800a524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f023 030a 	bic.w	r3, r3, #10
 800a52c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4313      	orrs	r3, r2
 800a534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	621a      	str	r2, [r3, #32]
}
 800a542:	bf00      	nop
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a54e:	b480      	push	{r7}
 800a550:	b087      	sub	sp, #28
 800a552:	af00      	add	r7, sp, #0
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	60b9      	str	r1, [r7, #8]
 800a558:	607a      	str	r2, [r7, #4]
 800a55a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	f023 0210 	bic.w	r2, r3, #16
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a57a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4313      	orrs	r3, r2
 800a584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a58c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	031b      	lsls	r3, r3, #12
 800a592:	b29b      	uxth	r3, r3
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	4313      	orrs	r3, r2
 800a598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	011b      	lsls	r3, r3, #4
 800a5a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	621a      	str	r2, [r3, #32]
}
 800a5bc:	bf00      	nop
 800a5be:	371c      	adds	r7, #28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f023 0210 	bic.w	r2, r3, #16
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	031b      	lsls	r3, r3, #12
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a604:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	621a      	str	r2, [r3, #32]
}
 800a61c:	bf00      	nop
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f023 0303 	bic.w	r3, r3, #3
 800a654:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a664:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	011b      	lsls	r3, r3, #4
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a678:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	021b      	lsls	r3, r3, #8
 800a67e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	4313      	orrs	r3, r2
 800a686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	621a      	str	r2, [r3, #32]
}
 800a694:	bf00      	nop
 800a696:	371c      	adds	r7, #28
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a1b      	ldr	r3, [r3, #32]
 800a6b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	021b      	lsls	r3, r3, #8
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a6de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	031b      	lsls	r3, r3, #12
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a6f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	031b      	lsls	r3, r3, #12
 800a6f8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	621a      	str	r2, [r3, #32]
}
 800a70e:	bf00      	nop
 800a710:	371c      	adds	r7, #28
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	f043 0307 	orr.w	r3, r3, #7
 800a740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	609a      	str	r2, [r3, #8]
}
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a76e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	021a      	lsls	r2, r3, #8
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	431a      	orrs	r2, r3
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	609a      	str	r2, [r3, #8]
}
 800a788:	bf00      	nop
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f003 031f 	and.w	r3, r3, #31
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6a1a      	ldr	r2, [r3, #32]
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	43db      	mvns	r3, r3
 800a7b6:	401a      	ands	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a1a      	ldr	r2, [r3, #32]
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f003 031f 	and.w	r3, r3, #31
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a7cc:	431a      	orrs	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	621a      	str	r2, [r3, #32]
}
 800a7d2:	bf00      	nop
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
	...

0800a7e0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d109      	bne.n	800a804 <HAL_TIMEx_PWMN_Start+0x24>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	bf14      	ite	ne
 800a7fc:	2301      	movne	r3, #1
 800a7fe:	2300      	moveq	r3, #0
 800a800:	b2db      	uxtb	r3, r3
 800a802:	e022      	b.n	800a84a <HAL_TIMEx_PWMN_Start+0x6a>
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b04      	cmp	r3, #4
 800a808:	d109      	bne.n	800a81e <HAL_TIMEx_PWMN_Start+0x3e>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b01      	cmp	r3, #1
 800a814:	bf14      	ite	ne
 800a816:	2301      	movne	r3, #1
 800a818:	2300      	moveq	r3, #0
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	e015      	b.n	800a84a <HAL_TIMEx_PWMN_Start+0x6a>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b08      	cmp	r3, #8
 800a822:	d109      	bne.n	800a838 <HAL_TIMEx_PWMN_Start+0x58>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	bf14      	ite	ne
 800a830:	2301      	movne	r3, #1
 800a832:	2300      	moveq	r3, #0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	e008      	b.n	800a84a <HAL_TIMEx_PWMN_Start+0x6a>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b01      	cmp	r3, #1
 800a842:	bf14      	ite	ne
 800a844:	2301      	movne	r3, #1
 800a846:	2300      	moveq	r3, #0
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e073      	b.n	800a93a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d104      	bne.n	800a862 <HAL_TIMEx_PWMN_Start+0x82>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a860:	e013      	b.n	800a88a <HAL_TIMEx_PWMN_Start+0xaa>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b04      	cmp	r3, #4
 800a866:	d104      	bne.n	800a872 <HAL_TIMEx_PWMN_Start+0x92>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2202      	movs	r2, #2
 800a86c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a870:	e00b      	b.n	800a88a <HAL_TIMEx_PWMN_Start+0xaa>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b08      	cmp	r3, #8
 800a876:	d104      	bne.n	800a882 <HAL_TIMEx_PWMN_Start+0xa2>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2202      	movs	r2, #2
 800a87c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a880:	e003      	b.n	800a88a <HAL_TIMEx_PWMN_Start+0xaa>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2202      	movs	r2, #2
 800a886:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2204      	movs	r2, #4
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	4618      	mov	r0, r3
 800a894:	f000 fa34 	bl	800ad00 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a8a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a25      	ldr	r2, [pc, #148]	@ (800a944 <HAL_TIMEx_PWMN_Start+0x164>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d022      	beq.n	800a8f8 <HAL_TIMEx_PWMN_Start+0x118>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ba:	d01d      	beq.n	800a8f8 <HAL_TIMEx_PWMN_Start+0x118>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a21      	ldr	r2, [pc, #132]	@ (800a948 <HAL_TIMEx_PWMN_Start+0x168>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d018      	beq.n	800a8f8 <HAL_TIMEx_PWMN_Start+0x118>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a20      	ldr	r2, [pc, #128]	@ (800a94c <HAL_TIMEx_PWMN_Start+0x16c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d013      	beq.n	800a8f8 <HAL_TIMEx_PWMN_Start+0x118>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1e      	ldr	r2, [pc, #120]	@ (800a950 <HAL_TIMEx_PWMN_Start+0x170>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_TIMEx_PWMN_Start+0x118>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a1d      	ldr	r2, [pc, #116]	@ (800a954 <HAL_TIMEx_PWMN_Start+0x174>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d009      	beq.n	800a8f8 <HAL_TIMEx_PWMN_Start+0x118>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a958 <HAL_TIMEx_PWMN_Start+0x178>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d004      	beq.n	800a8f8 <HAL_TIMEx_PWMN_Start+0x118>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a1a      	ldr	r2, [pc, #104]	@ (800a95c <HAL_TIMEx_PWMN_Start+0x17c>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d115      	bne.n	800a924 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689a      	ldr	r2, [r3, #8]
 800a8fe:	4b18      	ldr	r3, [pc, #96]	@ (800a960 <HAL_TIMEx_PWMN_Start+0x180>)
 800a900:	4013      	ands	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b06      	cmp	r3, #6
 800a908:	d015      	beq.n	800a936 <HAL_TIMEx_PWMN_Start+0x156>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a910:	d011      	beq.n	800a936 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f042 0201 	orr.w	r2, r2, #1
 800a920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a922:	e008      	b.n	800a936 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f042 0201 	orr.w	r2, r2, #1
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	e000      	b.n	800a938 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	40012c00 	.word	0x40012c00
 800a948:	40000400 	.word	0x40000400
 800a94c:	40000800 	.word	0x40000800
 800a950:	40000c00 	.word	0x40000c00
 800a954:	40013400 	.word	0x40013400
 800a958:	40014000 	.word	0x40014000
 800a95c:	40015000 	.word	0x40015000
 800a960:	00010007 	.word	0x00010007

0800a964 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2200      	movs	r2, #0
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f9c2 	bl	800ad00 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6a1a      	ldr	r2, [r3, #32]
 800a982:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a986:	4013      	ands	r3, r2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10f      	bne.n	800a9ac <HAL_TIMEx_PWMN_Stop+0x48>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a1a      	ldr	r2, [r3, #32]
 800a992:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a996:	4013      	ands	r3, r2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d107      	bne.n	800a9ac <HAL_TIMEx_PWMN_Stop+0x48>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a9aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a1a      	ldr	r2, [r3, #32]
 800a9b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10f      	bne.n	800a9dc <HAL_TIMEx_PWMN_Stop+0x78>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6a1a      	ldr	r2, [r3, #32]
 800a9c2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d107      	bne.n	800a9dc <HAL_TIMEx_PWMN_Stop+0x78>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0201 	bic.w	r2, r2, #1
 800a9da:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d104      	bne.n	800a9ec <HAL_TIMEx_PWMN_Stop+0x88>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9ea:	e013      	b.n	800aa14 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d104      	bne.n	800a9fc <HAL_TIMEx_PWMN_Stop+0x98>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9fa:	e00b      	b.n	800aa14 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2b08      	cmp	r3, #8
 800aa00:	d104      	bne.n	800aa0c <HAL_TIMEx_PWMN_Stop+0xa8>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa0a:	e003      	b.n	800aa14 <HAL_TIMEx_PWMN_Stop+0xb0>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d101      	bne.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa34:	2302      	movs	r3, #2
 800aa36:	e074      	b.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a34      	ldr	r2, [pc, #208]	@ (800ab30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d009      	beq.n	800aa76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a33      	ldr	r2, [pc, #204]	@ (800ab34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d004      	beq.n	800aa76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a31      	ldr	r2, [pc, #196]	@ (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d108      	bne.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aa7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aa8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a21      	ldr	r2, [pc, #132]	@ (800ab30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d022      	beq.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aab8:	d01d      	beq.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a1f      	ldr	r2, [pc, #124]	@ (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d018      	beq.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d013      	beq.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a1c      	ldr	r2, [pc, #112]	@ (800ab44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d00e      	beq.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a15      	ldr	r2, [pc, #84]	@ (800ab34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d009      	beq.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a18      	ldr	r2, [pc, #96]	@ (800ab48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d004      	beq.n	800aaf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a11      	ldr	r2, [pc, #68]	@ (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d10c      	bne.n	800ab10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aafc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40012c00 	.word	0x40012c00
 800ab34:	40013400 	.word	0x40013400
 800ab38:	40015000 	.word	0x40015000
 800ab3c:	40000400 	.word	0x40000400
 800ab40:	40000800 	.word	0x40000800
 800ab44:	40000c00 	.word	0x40000c00
 800ab48:	40014000 	.word	0x40014000

0800ab4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d101      	bne.n	800ab68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab64:	2302      	movs	r3, #2
 800ab66:	e078      	b.n	800ac5a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abce:	4313      	orrs	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	041b      	lsls	r3, r3, #16
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a1c      	ldr	r2, [pc, #112]	@ (800ac68 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d009      	beq.n	800ac0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a1b      	ldr	r2, [pc, #108]	@ (800ac6c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d004      	beq.n	800ac0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a19      	ldr	r2, [pc, #100]	@ (800ac70 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d11c      	bne.n	800ac48 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac18:	051b      	lsls	r3, r3, #20
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac44:	4313      	orrs	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	40012c00 	.word	0x40012c00
 800ac6c:	40013400 	.word	0x40013400
 800ac70:	40015000 	.word	0x40015000

0800ac74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f003 030f 	and.w	r3, r3, #15
 800ad12:	2204      	movs	r2, #4
 800ad14:	fa02 f303 	lsl.w	r3, r2, r3
 800ad18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6a1a      	ldr	r2, [r3, #32]
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	43db      	mvns	r3, r3
 800ad22:	401a      	ands	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6a1a      	ldr	r2, [r3, #32]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	f003 030f 	and.w	r3, r3, #15
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	fa01 f303 	lsl.w	r3, r1, r3
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	621a      	str	r2, [r3, #32]
}
 800ad3e:	bf00      	nop
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d101      	bne.n	800ad5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e042      	b.n	800ade2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d106      	bne.n	800ad74 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7f9 f80a 	bl	8003d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2224      	movs	r2, #36	@ 0x24
 800ad78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0201 	bic.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 ff1d 	bl	800bbd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fc1e 	bl	800b5dc <UART_SetConfig>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d101      	bne.n	800adaa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e01b      	b.n	800ade2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f042 0201 	orr.w	r2, r2, #1
 800add8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 ff9c 	bl	800bd18 <UART_CheckIdleState>
 800ade0:	4603      	mov	r3, r0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b08a      	sub	sp, #40	@ 0x28
 800adee:	af02      	add	r7, sp, #8
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	60b9      	str	r1, [r7, #8]
 800adf4:	603b      	str	r3, [r7, #0]
 800adf6:	4613      	mov	r3, r2
 800adf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae00:	2b20      	cmp	r3, #32
 800ae02:	d17b      	bne.n	800aefc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d002      	beq.n	800ae10 <HAL_UART_Transmit+0x26>
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e074      	b.n	800aefe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2221      	movs	r2, #33	@ 0x21
 800ae20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae24:	f7f9 f8ce 	bl	8003fc4 <HAL_GetTick>
 800ae28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	88fa      	ldrh	r2, [r7, #6]
 800ae2e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	88fa      	ldrh	r2, [r7, #6]
 800ae36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae42:	d108      	bne.n	800ae56 <HAL_UART_Transmit+0x6c>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d104      	bne.n	800ae56 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	61bb      	str	r3, [r7, #24]
 800ae54:	e003      	b.n	800ae5e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae5e:	e030      	b.n	800aec2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2200      	movs	r2, #0
 800ae68:	2180      	movs	r1, #128	@ 0x80
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f000 fffe 	bl	800be6c <UART_WaitOnFlagUntilTimeout>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2220      	movs	r2, #32
 800ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e03d      	b.n	800aefe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10b      	bne.n	800aea0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	3302      	adds	r3, #2
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	e007      	b.n	800aeb0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	781a      	ldrb	r2, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	3301      	adds	r3, #1
 800aeae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1c8      	bne.n	800ae60 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2200      	movs	r2, #0
 800aed6:	2140      	movs	r1, #64	@ 0x40
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 ffc7 	bl	800be6c <UART_WaitOnFlagUntilTimeout>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d005      	beq.n	800aef0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e006      	b.n	800aefe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2220      	movs	r2, #32
 800aef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e000      	b.n	800aefe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aefc:	2302      	movs	r3, #2
  }
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3720      	adds	r7, #32
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b0ba      	sub	sp, #232	@ 0xe8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800af32:	f640 030f 	movw	r3, #2063	@ 0x80f
 800af36:	4013      	ands	r3, r2
 800af38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800af3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af40:	2b00      	cmp	r3, #0
 800af42:	d11b      	bne.n	800af7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af48:	f003 0320 	and.w	r3, r3, #32
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d015      	beq.n	800af7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af54:	f003 0320 	and.w	r3, r3, #32
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d105      	bne.n	800af68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af64:	2b00      	cmp	r3, #0
 800af66:	d009      	beq.n	800af7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 8300 	beq.w	800b572 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	4798      	blx	r3
      }
      return;
 800af7a:	e2fa      	b.n	800b572 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 8123 	beq.w	800b1cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800af8a:	4b8d      	ldr	r3, [pc, #564]	@ (800b1c0 <HAL_UART_IRQHandler+0x2b8>)
 800af8c:	4013      	ands	r3, r2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800af96:	4b8b      	ldr	r3, [pc, #556]	@ (800b1c4 <HAL_UART_IRQHandler+0x2bc>)
 800af98:	4013      	ands	r3, r2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 8116 	beq.w	800b1cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d011      	beq.n	800afd0 <HAL_UART_IRQHandler+0xc8>
 800afac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00b      	beq.n	800afd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2201      	movs	r2, #1
 800afbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc6:	f043 0201 	orr.w	r2, r3, #1
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afd4:	f003 0302 	and.w	r3, r3, #2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d011      	beq.n	800b000 <HAL_UART_IRQHandler+0xf8>
 800afdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2202      	movs	r2, #2
 800afee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aff6:	f043 0204 	orr.w	r2, r3, #4
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b004:	f003 0304 	and.w	r3, r3, #4
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d011      	beq.n	800b030 <HAL_UART_IRQHandler+0x128>
 800b00c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2204      	movs	r2, #4
 800b01e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b026:	f043 0202 	orr.w	r2, r3, #2
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b034:	f003 0308 	and.w	r3, r3, #8
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d017      	beq.n	800b06c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b040:	f003 0320 	and.w	r3, r3, #32
 800b044:	2b00      	cmp	r3, #0
 800b046:	d105      	bne.n	800b054 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b048:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b04c:	4b5c      	ldr	r3, [pc, #368]	@ (800b1c0 <HAL_UART_IRQHandler+0x2b8>)
 800b04e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00b      	beq.n	800b06c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2208      	movs	r2, #8
 800b05a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b062:	f043 0208 	orr.w	r2, r3, #8
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b074:	2b00      	cmp	r3, #0
 800b076:	d012      	beq.n	800b09e <HAL_UART_IRQHandler+0x196>
 800b078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b07c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00c      	beq.n	800b09e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b08c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b094:	f043 0220 	orr.w	r2, r3, #32
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8266 	beq.w	800b576 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0ae:	f003 0320 	and.w	r3, r3, #32
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d013      	beq.n	800b0de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d105      	bne.n	800b0ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d007      	beq.n	800b0de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0f2:	2b40      	cmp	r3, #64	@ 0x40
 800b0f4:	d005      	beq.n	800b102 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b0f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b0fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d054      	beq.n	800b1ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f001 f807 	bl	800c116 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b112:	2b40      	cmp	r3, #64	@ 0x40
 800b114:	d146      	bne.n	800b1a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	3308      	adds	r3, #8
 800b11c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b124:	e853 3f00 	ldrex	r3, [r3]
 800b128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b12c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3308      	adds	r3, #8
 800b13e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b142:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b146:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b14e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b15a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1d9      	bne.n	800b116 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d017      	beq.n	800b19c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b172:	4a15      	ldr	r2, [pc, #84]	@ (800b1c8 <HAL_UART_IRQHandler+0x2c0>)
 800b174:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fa fd51 	bl	8005c24 <HAL_DMA_Abort_IT>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d019      	beq.n	800b1bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b196:	4610      	mov	r0, r2
 800b198:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b19a:	e00f      	b.n	800b1bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fa13 	bl	800b5c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1a2:	e00b      	b.n	800b1bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fa0f 	bl	800b5c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1aa:	e007      	b.n	800b1bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fa0b 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b1ba:	e1dc      	b.n	800b576 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1bc:	bf00      	nop
    return;
 800b1be:	e1da      	b.n	800b576 <HAL_UART_IRQHandler+0x66e>
 800b1c0:	10000001 	.word	0x10000001
 800b1c4:	04000120 	.word	0x04000120
 800b1c8:	0800c3cd 	.word	0x0800c3cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	f040 8170 	bne.w	800b4b6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1da:	f003 0310 	and.w	r3, r3, #16
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 8169 	beq.w	800b4b6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e8:	f003 0310 	and.w	r3, r3, #16
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 8162 	beq.w	800b4b6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2210      	movs	r2, #16
 800b1f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b204:	2b40      	cmp	r3, #64	@ 0x40
 800b206:	f040 80d8 	bne.w	800b3ba <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b218:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 80af 	beq.w	800b380 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b22c:	429a      	cmp	r2, r3
 800b22e:	f080 80a7 	bcs.w	800b380 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b238:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0320 	and.w	r3, r3, #32
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f040 8087 	bne.w	800b35e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b26c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b27a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b27e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b282:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b286:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1da      	bne.n	800b250 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b2aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2ac:	f023 0301 	bic.w	r3, r3, #1
 800b2b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b2be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b2c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b2c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b2ca:	e841 2300 	strex	r3, r2, [r1]
 800b2ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b2d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e1      	bne.n	800b29a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3308      	adds	r3, #8
 800b2dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2e0:	e853 3f00 	ldrex	r3, [r3]
 800b2e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b2e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b2fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b2fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b300:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e3      	bne.n	800b2d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2220      	movs	r2, #32
 800b312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b324:	e853 3f00 	ldrex	r3, [r3]
 800b328:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b32a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b32c:	f023 0310 	bic.w	r3, r3, #16
 800b330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	461a      	mov	r2, r3
 800b33a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b33e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b340:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b342:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b346:	e841 2300 	strex	r3, r2, [r1]
 800b34a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b34c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1e4      	bne.n	800b31c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fa fc0a 	bl	8005b72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2202      	movs	r2, #2
 800b362:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b370:	b29b      	uxth	r3, r3
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	b29b      	uxth	r3, r3
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7f6 fd35 	bl	8001de8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b37e:	e0fc      	b.n	800b57a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b38a:	429a      	cmp	r2, r3
 800b38c:	f040 80f5 	bne.w	800b57a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 0320 	and.w	r3, r3, #32
 800b39e:	2b20      	cmp	r3, #32
 800b3a0:	f040 80eb 	bne.w	800b57a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7f6 fd18 	bl	8001de8 <HAL_UARTEx_RxEventCallback>
      return;
 800b3b8:	e0df      	b.n	800b57a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f000 80d1 	beq.w	800b57e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b3dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 80cc 	beq.w	800b57e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b408:	647b      	str	r3, [r7, #68]	@ 0x44
 800b40a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b40e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b410:	e841 2300 	strex	r3, r2, [r1]
 800b414:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1e4      	bne.n	800b3e6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3308      	adds	r3, #8
 800b422:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b426:	e853 3f00 	ldrex	r3, [r3]
 800b42a:	623b      	str	r3, [r7, #32]
   return(result);
 800b42c:	6a3b      	ldr	r3, [r7, #32]
 800b42e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b432:	f023 0301 	bic.w	r3, r3, #1
 800b436:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3308      	adds	r3, #8
 800b440:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b444:	633a      	str	r2, [r7, #48]	@ 0x30
 800b446:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b448:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b44c:	e841 2300 	strex	r3, r2, [r1]
 800b450:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e1      	bne.n	800b41c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2220      	movs	r2, #32
 800b45c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	60fb      	str	r3, [r7, #12]
   return(result);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f023 0310 	bic.w	r3, r3, #16
 800b480:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b48e:	61fb      	str	r3, [r7, #28]
 800b490:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	69b9      	ldr	r1, [r7, #24]
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	617b      	str	r3, [r7, #20]
   return(result);
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e4      	bne.n	800b46c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7f6 fc9a 	bl	8001de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4b4:	e063      	b.n	800b57e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00e      	beq.n	800b4e0 <HAL_UART_IRQHandler+0x5d8>
 800b4c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d008      	beq.n	800b4e0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b4d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 ffb4 	bl	800c446 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4de:	e051      	b.n	800b584 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d014      	beq.n	800b516 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d105      	bne.n	800b504 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b4f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d008      	beq.n	800b516 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d03a      	beq.n	800b582 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	4798      	blx	r3
    }
    return;
 800b514:	e035      	b.n	800b582 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b51a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d009      	beq.n	800b536 <HAL_UART_IRQHandler+0x62e>
 800b522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 ff5e 	bl	800c3f0 <UART_EndTransmit_IT>
    return;
 800b534:	e026      	b.n	800b584 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b53a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d009      	beq.n	800b556 <HAL_UART_IRQHandler+0x64e>
 800b542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b546:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 ff8d 	bl	800c46e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b554:	e016      	b.n	800b584 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b55a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d010      	beq.n	800b584 <HAL_UART_IRQHandler+0x67c>
 800b562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b566:	2b00      	cmp	r3, #0
 800b568:	da0c      	bge.n	800b584 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 ff75 	bl	800c45a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b570:	e008      	b.n	800b584 <HAL_UART_IRQHandler+0x67c>
      return;
 800b572:	bf00      	nop
 800b574:	e006      	b.n	800b584 <HAL_UART_IRQHandler+0x67c>
    return;
 800b576:	bf00      	nop
 800b578:	e004      	b.n	800b584 <HAL_UART_IRQHandler+0x67c>
      return;
 800b57a:	bf00      	nop
 800b57c:	e002      	b.n	800b584 <HAL_UART_IRQHandler+0x67c>
      return;
 800b57e:	bf00      	nop
 800b580:	e000      	b.n	800b584 <HAL_UART_IRQHandler+0x67c>
    return;
 800b582:	bf00      	nop
  }
}
 800b584:	37e8      	adds	r7, #232	@ 0xe8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop

0800b58c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5e0:	b08c      	sub	sp, #48	@ 0x30
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	689a      	ldr	r2, [r3, #8]
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	4313      	orrs	r3, r2
 800b602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4baa      	ldr	r3, [pc, #680]	@ (800b8b4 <UART_SetConfig+0x2d8>)
 800b60c:	4013      	ands	r3, r2
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	6812      	ldr	r2, [r2, #0]
 800b612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b614:	430b      	orrs	r3, r1
 800b616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a9f      	ldr	r2, [pc, #636]	@ (800b8b8 <UART_SetConfig+0x2dc>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d004      	beq.n	800b648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b644:	4313      	orrs	r3, r2
 800b646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b652:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	6812      	ldr	r2, [r2, #0]
 800b65a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b65c:	430b      	orrs	r3, r1
 800b65e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b666:	f023 010f 	bic.w	r1, r3, #15
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	430a      	orrs	r2, r1
 800b674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a90      	ldr	r2, [pc, #576]	@ (800b8bc <UART_SetConfig+0x2e0>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d125      	bne.n	800b6cc <UART_SetConfig+0xf0>
 800b680:	4b8f      	ldr	r3, [pc, #572]	@ (800b8c0 <UART_SetConfig+0x2e4>)
 800b682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b686:	f003 0303 	and.w	r3, r3, #3
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d81a      	bhi.n	800b6c4 <UART_SetConfig+0xe8>
 800b68e:	a201      	add	r2, pc, #4	@ (adr r2, 800b694 <UART_SetConfig+0xb8>)
 800b690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b694:	0800b6a5 	.word	0x0800b6a5
 800b698:	0800b6b5 	.word	0x0800b6b5
 800b69c:	0800b6ad 	.word	0x0800b6ad
 800b6a0:	0800b6bd 	.word	0x0800b6bd
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6aa:	e116      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6b2:	e112      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ba:	e10e      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b6bc:	2308      	movs	r3, #8
 800b6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6c2:	e10a      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ca:	e106      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a7c      	ldr	r2, [pc, #496]	@ (800b8c4 <UART_SetConfig+0x2e8>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d138      	bne.n	800b748 <UART_SetConfig+0x16c>
 800b6d6:	4b7a      	ldr	r3, [pc, #488]	@ (800b8c0 <UART_SetConfig+0x2e4>)
 800b6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6dc:	f003 030c 	and.w	r3, r3, #12
 800b6e0:	2b0c      	cmp	r3, #12
 800b6e2:	d82d      	bhi.n	800b740 <UART_SetConfig+0x164>
 800b6e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b6ec <UART_SetConfig+0x110>)
 800b6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ea:	bf00      	nop
 800b6ec:	0800b721 	.word	0x0800b721
 800b6f0:	0800b741 	.word	0x0800b741
 800b6f4:	0800b741 	.word	0x0800b741
 800b6f8:	0800b741 	.word	0x0800b741
 800b6fc:	0800b731 	.word	0x0800b731
 800b700:	0800b741 	.word	0x0800b741
 800b704:	0800b741 	.word	0x0800b741
 800b708:	0800b741 	.word	0x0800b741
 800b70c:	0800b729 	.word	0x0800b729
 800b710:	0800b741 	.word	0x0800b741
 800b714:	0800b741 	.word	0x0800b741
 800b718:	0800b741 	.word	0x0800b741
 800b71c:	0800b739 	.word	0x0800b739
 800b720:	2300      	movs	r3, #0
 800b722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b726:	e0d8      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b728:	2302      	movs	r3, #2
 800b72a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b72e:	e0d4      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b730:	2304      	movs	r3, #4
 800b732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b736:	e0d0      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b738:	2308      	movs	r3, #8
 800b73a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b73e:	e0cc      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b740:	2310      	movs	r3, #16
 800b742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b746:	e0c8      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a5e      	ldr	r2, [pc, #376]	@ (800b8c8 <UART_SetConfig+0x2ec>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d125      	bne.n	800b79e <UART_SetConfig+0x1c2>
 800b752:	4b5b      	ldr	r3, [pc, #364]	@ (800b8c0 <UART_SetConfig+0x2e4>)
 800b754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b758:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b75c:	2b30      	cmp	r3, #48	@ 0x30
 800b75e:	d016      	beq.n	800b78e <UART_SetConfig+0x1b2>
 800b760:	2b30      	cmp	r3, #48	@ 0x30
 800b762:	d818      	bhi.n	800b796 <UART_SetConfig+0x1ba>
 800b764:	2b20      	cmp	r3, #32
 800b766:	d00a      	beq.n	800b77e <UART_SetConfig+0x1a2>
 800b768:	2b20      	cmp	r3, #32
 800b76a:	d814      	bhi.n	800b796 <UART_SetConfig+0x1ba>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <UART_SetConfig+0x19a>
 800b770:	2b10      	cmp	r3, #16
 800b772:	d008      	beq.n	800b786 <UART_SetConfig+0x1aa>
 800b774:	e00f      	b.n	800b796 <UART_SetConfig+0x1ba>
 800b776:	2300      	movs	r3, #0
 800b778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b77c:	e0ad      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b77e:	2302      	movs	r3, #2
 800b780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b784:	e0a9      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b786:	2304      	movs	r3, #4
 800b788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b78c:	e0a5      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b78e:	2308      	movs	r3, #8
 800b790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b794:	e0a1      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b796:	2310      	movs	r3, #16
 800b798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b79c:	e09d      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a4a      	ldr	r2, [pc, #296]	@ (800b8cc <UART_SetConfig+0x2f0>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d125      	bne.n	800b7f4 <UART_SetConfig+0x218>
 800b7a8:	4b45      	ldr	r3, [pc, #276]	@ (800b8c0 <UART_SetConfig+0x2e4>)
 800b7aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b7b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7b4:	d016      	beq.n	800b7e4 <UART_SetConfig+0x208>
 800b7b6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7b8:	d818      	bhi.n	800b7ec <UART_SetConfig+0x210>
 800b7ba:	2b80      	cmp	r3, #128	@ 0x80
 800b7bc:	d00a      	beq.n	800b7d4 <UART_SetConfig+0x1f8>
 800b7be:	2b80      	cmp	r3, #128	@ 0x80
 800b7c0:	d814      	bhi.n	800b7ec <UART_SetConfig+0x210>
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <UART_SetConfig+0x1f0>
 800b7c6:	2b40      	cmp	r3, #64	@ 0x40
 800b7c8:	d008      	beq.n	800b7dc <UART_SetConfig+0x200>
 800b7ca:	e00f      	b.n	800b7ec <UART_SetConfig+0x210>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7d2:	e082      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7da:	e07e      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b7dc:	2304      	movs	r3, #4
 800b7de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7e2:	e07a      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b7e4:	2308      	movs	r3, #8
 800b7e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ea:	e076      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b7ec:	2310      	movs	r3, #16
 800b7ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7f2:	e072      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a35      	ldr	r2, [pc, #212]	@ (800b8d0 <UART_SetConfig+0x2f4>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d12a      	bne.n	800b854 <UART_SetConfig+0x278>
 800b7fe:	4b30      	ldr	r3, [pc, #192]	@ (800b8c0 <UART_SetConfig+0x2e4>)
 800b800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b804:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b80c:	d01a      	beq.n	800b844 <UART_SetConfig+0x268>
 800b80e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b812:	d81b      	bhi.n	800b84c <UART_SetConfig+0x270>
 800b814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b818:	d00c      	beq.n	800b834 <UART_SetConfig+0x258>
 800b81a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b81e:	d815      	bhi.n	800b84c <UART_SetConfig+0x270>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <UART_SetConfig+0x250>
 800b824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b828:	d008      	beq.n	800b83c <UART_SetConfig+0x260>
 800b82a:	e00f      	b.n	800b84c <UART_SetConfig+0x270>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b832:	e052      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b834:	2302      	movs	r3, #2
 800b836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b83a:	e04e      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b83c:	2304      	movs	r3, #4
 800b83e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b842:	e04a      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b844:	2308      	movs	r3, #8
 800b846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b84a:	e046      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b84c:	2310      	movs	r3, #16
 800b84e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b852:	e042      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a17      	ldr	r2, [pc, #92]	@ (800b8b8 <UART_SetConfig+0x2dc>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d13a      	bne.n	800b8d4 <UART_SetConfig+0x2f8>
 800b85e:	4b18      	ldr	r3, [pc, #96]	@ (800b8c0 <UART_SetConfig+0x2e4>)
 800b860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b864:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b868:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b86c:	d01a      	beq.n	800b8a4 <UART_SetConfig+0x2c8>
 800b86e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b872:	d81b      	bhi.n	800b8ac <UART_SetConfig+0x2d0>
 800b874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b878:	d00c      	beq.n	800b894 <UART_SetConfig+0x2b8>
 800b87a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b87e:	d815      	bhi.n	800b8ac <UART_SetConfig+0x2d0>
 800b880:	2b00      	cmp	r3, #0
 800b882:	d003      	beq.n	800b88c <UART_SetConfig+0x2b0>
 800b884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b888:	d008      	beq.n	800b89c <UART_SetConfig+0x2c0>
 800b88a:	e00f      	b.n	800b8ac <UART_SetConfig+0x2d0>
 800b88c:	2300      	movs	r3, #0
 800b88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b892:	e022      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b894:	2302      	movs	r3, #2
 800b896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b89a:	e01e      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b89c:	2304      	movs	r3, #4
 800b89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8a2:	e01a      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b8a4:	2308      	movs	r3, #8
 800b8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8aa:	e016      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b8ac:	2310      	movs	r3, #16
 800b8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8b2:	e012      	b.n	800b8da <UART_SetConfig+0x2fe>
 800b8b4:	cfff69f3 	.word	0xcfff69f3
 800b8b8:	40008000 	.word	0x40008000
 800b8bc:	40013800 	.word	0x40013800
 800b8c0:	40021000 	.word	0x40021000
 800b8c4:	40004400 	.word	0x40004400
 800b8c8:	40004800 	.word	0x40004800
 800b8cc:	40004c00 	.word	0x40004c00
 800b8d0:	40005000 	.word	0x40005000
 800b8d4:	2310      	movs	r3, #16
 800b8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4aae      	ldr	r2, [pc, #696]	@ (800bb98 <UART_SetConfig+0x5bc>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	f040 8097 	bne.w	800ba14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b8e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8ea:	2b08      	cmp	r3, #8
 800b8ec:	d823      	bhi.n	800b936 <UART_SetConfig+0x35a>
 800b8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f4 <UART_SetConfig+0x318>)
 800b8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f4:	0800b919 	.word	0x0800b919
 800b8f8:	0800b937 	.word	0x0800b937
 800b8fc:	0800b921 	.word	0x0800b921
 800b900:	0800b937 	.word	0x0800b937
 800b904:	0800b927 	.word	0x0800b927
 800b908:	0800b937 	.word	0x0800b937
 800b90c:	0800b937 	.word	0x0800b937
 800b910:	0800b937 	.word	0x0800b937
 800b914:	0800b92f 	.word	0x0800b92f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b918:	f7fc f89c 	bl	8007a54 <HAL_RCC_GetPCLK1Freq>
 800b91c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b91e:	e010      	b.n	800b942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b920:	4b9e      	ldr	r3, [pc, #632]	@ (800bb9c <UART_SetConfig+0x5c0>)
 800b922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b924:	e00d      	b.n	800b942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b926:	f7fc f829 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800b92a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b92c:	e009      	b.n	800b942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b92e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b934:	e005      	b.n	800b942 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 8130 	beq.w	800bbaa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94e:	4a94      	ldr	r2, [pc, #592]	@ (800bba0 <UART_SetConfig+0x5c4>)
 800b950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b954:	461a      	mov	r2, r3
 800b956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b958:	fbb3 f3f2 	udiv	r3, r3, r2
 800b95c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	4613      	mov	r3, r2
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	4413      	add	r3, r2
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d305      	bcc.n	800b97a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b974:	69ba      	ldr	r2, [r7, #24]
 800b976:	429a      	cmp	r2, r3
 800b978:	d903      	bls.n	800b982 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b980:	e113      	b.n	800bbaa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b984:	2200      	movs	r2, #0
 800b986:	60bb      	str	r3, [r7, #8]
 800b988:	60fa      	str	r2, [r7, #12]
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b98e:	4a84      	ldr	r2, [pc, #528]	@ (800bba0 <UART_SetConfig+0x5c4>)
 800b990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b994:	b29b      	uxth	r3, r3
 800b996:	2200      	movs	r2, #0
 800b998:	603b      	str	r3, [r7, #0]
 800b99a:	607a      	str	r2, [r7, #4]
 800b99c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9a4:	f7f4 fc88 	bl	80002b8 <__aeabi_uldivmod>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	f04f 0200 	mov.w	r2, #0
 800b9b4:	f04f 0300 	mov.w	r3, #0
 800b9b8:	020b      	lsls	r3, r1, #8
 800b9ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9be:	0202      	lsls	r2, r0, #8
 800b9c0:	6979      	ldr	r1, [r7, #20]
 800b9c2:	6849      	ldr	r1, [r1, #4]
 800b9c4:	0849      	lsrs	r1, r1, #1
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	460c      	mov	r4, r1
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	eb12 0804 	adds.w	r8, r2, r4
 800b9d0:	eb43 0905 	adc.w	r9, r3, r5
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	469a      	mov	sl, r3
 800b9dc:	4693      	mov	fp, r2
 800b9de:	4652      	mov	r2, sl
 800b9e0:	465b      	mov	r3, fp
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fc67 	bl	80002b8 <__aeabi_uldivmod>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9f2:	6a3b      	ldr	r3, [r7, #32]
 800b9f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9f8:	d308      	bcc.n	800ba0c <UART_SetConfig+0x430>
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba00:	d204      	bcs.n	800ba0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	6a3a      	ldr	r2, [r7, #32]
 800ba08:	60da      	str	r2, [r3, #12]
 800ba0a:	e0ce      	b.n	800bbaa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba12:	e0ca      	b.n	800bbaa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba1c:	d166      	bne.n	800baec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ba1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba22:	2b08      	cmp	r3, #8
 800ba24:	d827      	bhi.n	800ba76 <UART_SetConfig+0x49a>
 800ba26:	a201      	add	r2, pc, #4	@ (adr r2, 800ba2c <UART_SetConfig+0x450>)
 800ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2c:	0800ba51 	.word	0x0800ba51
 800ba30:	0800ba59 	.word	0x0800ba59
 800ba34:	0800ba61 	.word	0x0800ba61
 800ba38:	0800ba77 	.word	0x0800ba77
 800ba3c:	0800ba67 	.word	0x0800ba67
 800ba40:	0800ba77 	.word	0x0800ba77
 800ba44:	0800ba77 	.word	0x0800ba77
 800ba48:	0800ba77 	.word	0x0800ba77
 800ba4c:	0800ba6f 	.word	0x0800ba6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba50:	f7fc f800 	bl	8007a54 <HAL_RCC_GetPCLK1Freq>
 800ba54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba56:	e014      	b.n	800ba82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba58:	f7fc f812 	bl	8007a80 <HAL_RCC_GetPCLK2Freq>
 800ba5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba5e:	e010      	b.n	800ba82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba60:	4b4e      	ldr	r3, [pc, #312]	@ (800bb9c <UART_SetConfig+0x5c0>)
 800ba62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba64:	e00d      	b.n	800ba82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba66:	f7fb ff89 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800ba6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba6c:	e009      	b.n	800ba82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba74:	e005      	b.n	800ba82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8090 	beq.w	800bbaa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba8e:	4a44      	ldr	r2, [pc, #272]	@ (800bba0 <UART_SetConfig+0x5c4>)
 800ba90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba94:	461a      	mov	r2, r3
 800ba96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba98:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba9c:	005a      	lsls	r2, r3, #1
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	085b      	lsrs	r3, r3, #1
 800baa4:	441a      	add	r2, r3
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800baae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bab0:	6a3b      	ldr	r3, [r7, #32]
 800bab2:	2b0f      	cmp	r3, #15
 800bab4:	d916      	bls.n	800bae4 <UART_SetConfig+0x508>
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800babc:	d212      	bcs.n	800bae4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	f023 030f 	bic.w	r3, r3, #15
 800bac6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	085b      	lsrs	r3, r3, #1
 800bacc:	b29b      	uxth	r3, r3
 800bace:	f003 0307 	and.w	r3, r3, #7
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	8bfb      	ldrh	r3, [r7, #30]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	8bfa      	ldrh	r2, [r7, #30]
 800bae0:	60da      	str	r2, [r3, #12]
 800bae2:	e062      	b.n	800bbaa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800baea:	e05e      	b.n	800bbaa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800baec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800baf0:	2b08      	cmp	r3, #8
 800baf2:	d828      	bhi.n	800bb46 <UART_SetConfig+0x56a>
 800baf4:	a201      	add	r2, pc, #4	@ (adr r2, 800bafc <UART_SetConfig+0x520>)
 800baf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafa:	bf00      	nop
 800bafc:	0800bb21 	.word	0x0800bb21
 800bb00:	0800bb29 	.word	0x0800bb29
 800bb04:	0800bb31 	.word	0x0800bb31
 800bb08:	0800bb47 	.word	0x0800bb47
 800bb0c:	0800bb37 	.word	0x0800bb37
 800bb10:	0800bb47 	.word	0x0800bb47
 800bb14:	0800bb47 	.word	0x0800bb47
 800bb18:	0800bb47 	.word	0x0800bb47
 800bb1c:	0800bb3f 	.word	0x0800bb3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb20:	f7fb ff98 	bl	8007a54 <HAL_RCC_GetPCLK1Freq>
 800bb24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb26:	e014      	b.n	800bb52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb28:	f7fb ffaa 	bl	8007a80 <HAL_RCC_GetPCLK2Freq>
 800bb2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb2e:	e010      	b.n	800bb52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb30:	4b1a      	ldr	r3, [pc, #104]	@ (800bb9c <UART_SetConfig+0x5c0>)
 800bb32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb34:	e00d      	b.n	800bb52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb36:	f7fb ff21 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800bb3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb3c:	e009      	b.n	800bb52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb44:	e005      	b.n	800bb52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb50:	bf00      	nop
    }

    if (pclk != 0U)
 800bb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d028      	beq.n	800bbaa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5c:	4a10      	ldr	r2, [pc, #64]	@ (800bba0 <UART_SetConfig+0x5c4>)
 800bb5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb62:	461a      	mov	r2, r3
 800bb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb66:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	085b      	lsrs	r3, r3, #1
 800bb70:	441a      	add	r2, r3
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	2b0f      	cmp	r3, #15
 800bb80:	d910      	bls.n	800bba4 <UART_SetConfig+0x5c8>
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb88:	d20c      	bcs.n	800bba4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	60da      	str	r2, [r3, #12]
 800bb94:	e009      	b.n	800bbaa <UART_SetConfig+0x5ce>
 800bb96:	bf00      	nop
 800bb98:	40008000 	.word	0x40008000
 800bb9c:	00f42400 	.word	0x00f42400
 800bba0:	0800c7e4 	.word	0x0800c7e4
      }
      else
      {
        ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bbc6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3730      	adds	r7, #48	@ 0x30
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bbd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe0:	f003 0308 	and.w	r3, r3, #8
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00a      	beq.n	800bbfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00a      	beq.n	800bc20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc24:	f003 0302 	and.w	r3, r3, #2
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00a      	beq.n	800bc42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc46:	f003 0304 	and.w	r3, r3, #4
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00a      	beq.n	800bc64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	430a      	orrs	r2, r1
 800bc62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc68:	f003 0310 	and.w	r3, r3, #16
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00a      	beq.n	800bc86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	430a      	orrs	r2, r1
 800bc84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc8a:	f003 0320 	and.w	r3, r3, #32
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01a      	beq.n	800bcea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcd2:	d10a      	bne.n	800bcea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00a      	beq.n	800bd0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	605a      	str	r2, [r3, #4]
  }
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b098      	sub	sp, #96	@ 0x60
 800bd1c:	af02      	add	r7, sp, #8
 800bd1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd28:	f7f8 f94c 	bl	8003fc4 <HAL_GetTick>
 800bd2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0308 	and.w	r3, r3, #8
 800bd38:	2b08      	cmp	r3, #8
 800bd3a:	d12f      	bne.n	800bd9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd44:	2200      	movs	r2, #0
 800bd46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f88e 	bl	800be6c <UART_WaitOnFlagUntilTimeout>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d022      	beq.n	800bd9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5e:	e853 3f00 	ldrex	r3, [r3]
 800bd62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd6a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	461a      	mov	r2, r3
 800bd72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd74:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd7c:	e841 2300 	strex	r3, r2, [r1]
 800bd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1e6      	bne.n	800bd56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2220      	movs	r2, #32
 800bd8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e063      	b.n	800be64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0304 	and.w	r3, r3, #4
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d149      	bne.n	800be3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdaa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 f857 	bl	800be6c <UART_WaitOnFlagUntilTimeout>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d03c      	beq.n	800be3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdcc:	e853 3f00 	ldrex	r3, [r3]
 800bdd0:	623b      	str	r3, [r7, #32]
   return(result);
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bde2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bde4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bde8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdea:	e841 2300 	strex	r3, r2, [r1]
 800bdee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1e6      	bne.n	800bdc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	60fb      	str	r3, [r7, #12]
   return(result);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f023 0301 	bic.w	r3, r3, #1
 800be0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3308      	adds	r3, #8
 800be14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be16:	61fa      	str	r2, [r7, #28]
 800be18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	69b9      	ldr	r1, [r7, #24]
 800be1c:	69fa      	ldr	r2, [r7, #28]
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	617b      	str	r3, [r7, #20]
   return(result);
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e5      	bne.n	800bdf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2220      	movs	r2, #32
 800be2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e012      	b.n	800be64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2220      	movs	r2, #32
 800be42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2220      	movs	r2, #32
 800be4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3758      	adds	r7, #88	@ 0x58
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	4613      	mov	r3, r2
 800be7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be7c:	e04f      	b.n	800bf1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be84:	d04b      	beq.n	800bf1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be86:	f7f8 f89d 	bl	8003fc4 <HAL_GetTick>
 800be8a:	4602      	mov	r2, r0
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	69ba      	ldr	r2, [r7, #24]
 800be92:	429a      	cmp	r2, r3
 800be94:	d302      	bcc.n	800be9c <UART_WaitOnFlagUntilTimeout+0x30>
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e04e      	b.n	800bf3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0304 	and.w	r3, r3, #4
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d037      	beq.n	800bf1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2b80      	cmp	r3, #128	@ 0x80
 800beb2:	d034      	beq.n	800bf1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b40      	cmp	r3, #64	@ 0x40
 800beb8:	d031      	beq.n	800bf1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	f003 0308 	and.w	r3, r3, #8
 800bec4:	2b08      	cmp	r3, #8
 800bec6:	d110      	bne.n	800beea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2208      	movs	r2, #8
 800bece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 f920 	bl	800c116 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2208      	movs	r2, #8
 800beda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	e029      	b.n	800bf3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	69db      	ldr	r3, [r3, #28]
 800bef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bef8:	d111      	bne.n	800bf1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 f906 	bl	800c116 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2220      	movs	r2, #32
 800bf0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e00f      	b.n	800bf3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	69da      	ldr	r2, [r3, #28]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4013      	ands	r3, r2
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	bf0c      	ite	eq
 800bf2e:	2301      	moveq	r3, #1
 800bf30:	2300      	movne	r3, #0
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	461a      	mov	r2, r3
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d0a0      	beq.n	800be7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b096      	sub	sp, #88	@ 0x58
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	4613      	mov	r3, r2
 800bf54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	88fa      	ldrh	r2, [r7, #6]
 800bf60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2222      	movs	r2, #34	@ 0x22
 800bf70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d02d      	beq.n	800bfda <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf84:	4a40      	ldr	r2, [pc, #256]	@ (800c088 <UART_Start_Receive_DMA+0x140>)
 800bf86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf8e:	4a3f      	ldr	r2, [pc, #252]	@ (800c08c <UART_Start_Receive_DMA+0x144>)
 800bf90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf98:	4a3d      	ldr	r2, [pc, #244]	@ (800c090 <UART_Start_Receive_DMA+0x148>)
 800bf9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3324      	adds	r3, #36	@ 0x24
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfb8:	461a      	mov	r2, r3
 800bfba:	88fb      	ldrh	r3, [r7, #6]
 800bfbc:	f7f9 fd5e 	bl	8005a7c <HAL_DMA_Start_IT>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d009      	beq.n	800bfda <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2210      	movs	r2, #16
 800bfca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2220      	movs	r2, #32
 800bfd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e051      	b.n	800c07e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d018      	beq.n	800c014 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfea:	e853 3f00 	ldrex	r3, [r3]
 800bfee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bff6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	461a      	mov	r2, r3
 800bffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c000:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c002:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c004:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c008:	e841 2300 	strex	r3, r2, [r1]
 800c00c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c00e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1e6      	bne.n	800bfe2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3308      	adds	r3, #8
 800c01a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01e:	e853 3f00 	ldrex	r3, [r3]
 800c022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c026:	f043 0301 	orr.w	r3, r3, #1
 800c02a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3308      	adds	r3, #8
 800c032:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c034:	637a      	str	r2, [r7, #52]	@ 0x34
 800c036:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c038:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c03a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c03c:	e841 2300 	strex	r3, r2, [r1]
 800c040:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e5      	bne.n	800c014 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3308      	adds	r3, #8
 800c04e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	e853 3f00 	ldrex	r3, [r3]
 800c056:	613b      	str	r3, [r7, #16]
   return(result);
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c05e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3308      	adds	r3, #8
 800c066:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c068:	623a      	str	r2, [r7, #32]
 800c06a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06c:	69f9      	ldr	r1, [r7, #28]
 800c06e:	6a3a      	ldr	r2, [r7, #32]
 800c070:	e841 2300 	strex	r3, r2, [r1]
 800c074:	61bb      	str	r3, [r7, #24]
   return(result);
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1e5      	bne.n	800c048 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3758      	adds	r7, #88	@ 0x58
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	0800c1e3 	.word	0x0800c1e3
 800c08c:	0800c30f 	.word	0x0800c30f
 800c090:	0800c34d 	.word	0x0800c34d

0800c094 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c094:	b480      	push	{r7}
 800c096:	b08f      	sub	sp, #60	@ 0x3c
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	6a3b      	ldr	r3, [r7, #32]
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e6      	bne.n	800c09c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	e853 3f00 	ldrex	r3, [r3]
 800c0dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c0e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ee:	61ba      	str	r2, [r7, #24]
 800c0f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f2:	6979      	ldr	r1, [r7, #20]
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	e841 2300 	strex	r3, r2, [r1]
 800c0fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1e5      	bne.n	800c0ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2220      	movs	r2, #32
 800c106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c10a:	bf00      	nop
 800c10c:	373c      	adds	r7, #60	@ 0x3c
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c116:	b480      	push	{r7}
 800c118:	b095      	sub	sp, #84	@ 0x54
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c126:	e853 3f00 	ldrex	r3, [r3]
 800c12a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	461a      	mov	r2, r3
 800c13a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c13c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c13e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c144:	e841 2300 	strex	r3, r2, [r1]
 800c148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1e6      	bne.n	800c11e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3308      	adds	r3, #8
 800c156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c166:	f023 0301 	bic.w	r3, r3, #1
 800c16a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	3308      	adds	r3, #8
 800c172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c174:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c176:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c17a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e3      	bne.n	800c150 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d118      	bne.n	800c1c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	e853 3f00 	ldrex	r3, [r3]
 800c19c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	f023 0310 	bic.w	r3, r3, #16
 800c1a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b2:	6979      	ldr	r1, [r7, #20]
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	e841 2300 	strex	r3, r2, [r1]
 800c1ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1e6      	bne.n	800c190 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2220      	movs	r2, #32
 800c1c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c1d6:	bf00      	nop
 800c1d8:	3754      	adds	r7, #84	@ 0x54
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b09c      	sub	sp, #112	@ 0x70
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 0320 	and.w	r3, r3, #32
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d171      	bne.n	800c2e2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c200:	2200      	movs	r2, #0
 800c202:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c20e:	e853 3f00 	ldrex	r3, [r3]
 800c212:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c21a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	461a      	mov	r2, r3
 800c222:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c224:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c226:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c22a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c22c:	e841 2300 	strex	r3, r2, [r1]
 800c230:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e6      	bne.n	800c206 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3308      	adds	r3, #8
 800c23e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c242:	e853 3f00 	ldrex	r3, [r3]
 800c246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c24a:	f023 0301 	bic.w	r3, r3, #1
 800c24e:	667b      	str	r3, [r7, #100]	@ 0x64
 800c250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3308      	adds	r3, #8
 800c256:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c258:	647a      	str	r2, [r7, #68]	@ 0x44
 800c25a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c25e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c260:	e841 2300 	strex	r3, r2, [r1]
 800c264:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1e5      	bne.n	800c238 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c26c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3308      	adds	r3, #8
 800c272:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	623b      	str	r3, [r7, #32]
   return(result);
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c282:	663b      	str	r3, [r7, #96]	@ 0x60
 800c284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3308      	adds	r3, #8
 800c28a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c28c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c28e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e5      	bne.n	800c26c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c2a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d118      	bne.n	800c2e2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	e853 3f00 	ldrex	r3, [r3]
 800c2bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f023 0310 	bic.w	r3, r3, #16
 800c2c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c2c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2ce:	61fb      	str	r3, [r7, #28]
 800c2d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d2:	69b9      	ldr	r1, [r7, #24]
 800c2d4:	69fa      	ldr	r2, [r7, #28]
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	617b      	str	r3, [r7, #20]
   return(result);
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e6      	bne.n	800c2b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d107      	bne.n	800c300 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c2fa:	f7f5 fd75 	bl	8001de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2fe:	e002      	b.n	800c306 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c300:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c302:	f7ff f94d 	bl	800b5a0 <HAL_UART_RxCpltCallback>
}
 800c306:	bf00      	nop
 800c308:	3770      	adds	r7, #112	@ 0x70
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c31a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2201      	movs	r2, #1
 800c320:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c326:	2b01      	cmp	r3, #1
 800c328:	d109      	bne.n	800c33e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c330:	085b      	lsrs	r3, r3, #1
 800c332:	b29b      	uxth	r3, r3
 800c334:	4619      	mov	r1, r3
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7f5 fd56 	bl	8001de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c33c:	e002      	b.n	800c344 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7ff f938 	bl	800b5b4 <HAL_UART_RxHalfCpltCallback>
}
 800c344:	bf00      	nop
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c358:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c360:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c368:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c374:	2b80      	cmp	r3, #128	@ 0x80
 800c376:	d109      	bne.n	800c38c <UART_DMAError+0x40>
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	2b21      	cmp	r3, #33	@ 0x21
 800c37c:	d106      	bne.n	800c38c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	2200      	movs	r2, #0
 800c382:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c386:	6978      	ldr	r0, [r7, #20]
 800c388:	f7ff fe84 	bl	800c094 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c396:	2b40      	cmp	r3, #64	@ 0x40
 800c398:	d109      	bne.n	800c3ae <UART_DMAError+0x62>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2b22      	cmp	r3, #34	@ 0x22
 800c39e:	d106      	bne.n	800c3ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c3a8:	6978      	ldr	r0, [r7, #20]
 800c3aa:	f7ff feb4 	bl	800c116 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3b4:	f043 0210 	orr.w	r2, r3, #16
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3be:	6978      	ldr	r0, [r7, #20]
 800c3c0:	f7ff f902 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3c4:	bf00      	nop
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f7ff f8f0 	bl	800b5c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3e8:	bf00      	nop
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	e853 3f00 	ldrex	r3, [r3]
 800c404:	60bb      	str	r3, [r7, #8]
   return(result);
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c40c:	61fb      	str	r3, [r7, #28]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	461a      	mov	r2, r3
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	61bb      	str	r3, [r7, #24]
 800c418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41a:	6979      	ldr	r1, [r7, #20]
 800c41c:	69ba      	ldr	r2, [r7, #24]
 800c41e:	e841 2300 	strex	r3, r2, [r1]
 800c422:	613b      	str	r3, [r7, #16]
   return(result);
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1e6      	bne.n	800c3f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2220      	movs	r2, #32
 800c42e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f7ff f8a7 	bl	800b58c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c43e:	bf00      	nop
 800c440:	3720      	adds	r7, #32
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c44e:	bf00      	nop
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c462:	bf00      	nop
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr

0800c46e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c46e:	b480      	push	{r7}
 800c470:	b083      	sub	sp, #12
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c482:	b480      	push	{r7}
 800c484:	b085      	sub	sp, #20
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c490:	2b01      	cmp	r3, #1
 800c492:	d101      	bne.n	800c498 <HAL_UARTEx_DisableFifoMode+0x16>
 800c494:	2302      	movs	r3, #2
 800c496:	e027      	b.n	800c4e8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2224      	movs	r2, #36	@ 0x24
 800c4a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f022 0201 	bic.w	r2, r2, #1
 800c4be:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c4c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c504:	2b01      	cmp	r3, #1
 800c506:	d101      	bne.n	800c50c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c508:	2302      	movs	r3, #2
 800c50a:	e02d      	b.n	800c568 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2224      	movs	r2, #36	@ 0x24
 800c518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 0201 	bic.w	r2, r2, #1
 800c532:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	430a      	orrs	r2, r1
 800c546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f8a3 	bl	800c694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2220      	movs	r2, #32
 800c55a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c580:	2b01      	cmp	r3, #1
 800c582:	d101      	bne.n	800c588 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c584:	2302      	movs	r3, #2
 800c586:	e02d      	b.n	800c5e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2224      	movs	r2, #36	@ 0x24
 800c594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 0201 	bic.w	r2, r2, #1
 800c5ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	430a      	orrs	r2, r1
 800c5c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 f865 	bl	800c694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b08c      	sub	sp, #48	@ 0x30
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c600:	2b20      	cmp	r3, #32
 800c602:	d142      	bne.n	800c68a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d002      	beq.n	800c610 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c60a:	88fb      	ldrh	r3, [r7, #6]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	e03b      	b.n	800c68c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2201      	movs	r2, #1
 800c618:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c620:	88fb      	ldrh	r3, [r7, #6]
 800c622:	461a      	mov	r2, r3
 800c624:	68b9      	ldr	r1, [r7, #8]
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f7ff fc8e 	bl	800bf48 <UART_Start_Receive_DMA>
 800c62c:	4603      	mov	r3, r0
 800c62e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c636:	2b00      	cmp	r3, #0
 800c638:	d124      	bne.n	800c684 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d11d      	bne.n	800c67e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2210      	movs	r2, #16
 800c648:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	e853 3f00 	ldrex	r3, [r3]
 800c656:	617b      	str	r3, [r7, #20]
   return(result);
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	f043 0310 	orr.w	r3, r3, #16
 800c65e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c668:	627b      	str	r3, [r7, #36]	@ 0x24
 800c66a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66c:	6a39      	ldr	r1, [r7, #32]
 800c66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c670:	e841 2300 	strex	r3, r2, [r1]
 800c674:	61fb      	str	r3, [r7, #28]
   return(result);
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1e6      	bne.n	800c64a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c67c:	e002      	b.n	800c684 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c684:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c688:	e000      	b.n	800c68c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c68a:	2302      	movs	r3, #2
  }
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3730      	adds	r7, #48	@ 0x30
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d108      	bne.n	800c6b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c6b4:	e031      	b.n	800c71a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c6b6:	2308      	movs	r3, #8
 800c6b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c6ba:	2308      	movs	r3, #8
 800c6bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	0e5b      	lsrs	r3, r3, #25
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	f003 0307 	and.w	r3, r3, #7
 800c6cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	0f5b      	lsrs	r3, r3, #29
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	f003 0307 	and.w	r3, r3, #7
 800c6dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6de:	7bbb      	ldrb	r3, [r7, #14]
 800c6e0:	7b3a      	ldrb	r2, [r7, #12]
 800c6e2:	4911      	ldr	r1, [pc, #68]	@ (800c728 <UARTEx_SetNbDataToProcess+0x94>)
 800c6e4:	5c8a      	ldrb	r2, [r1, r2]
 800c6e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6ea:	7b3a      	ldrb	r2, [r7, #12]
 800c6ec:	490f      	ldr	r1, [pc, #60]	@ (800c72c <UARTEx_SetNbDataToProcess+0x98>)
 800c6ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	7b7a      	ldrb	r2, [r7, #13]
 800c700:	4909      	ldr	r1, [pc, #36]	@ (800c728 <UARTEx_SetNbDataToProcess+0x94>)
 800c702:	5c8a      	ldrb	r2, [r1, r2]
 800c704:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c708:	7b7a      	ldrb	r2, [r7, #13]
 800c70a:	4908      	ldr	r1, [pc, #32]	@ (800c72c <UARTEx_SetNbDataToProcess+0x98>)
 800c70c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c70e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c712:	b29a      	uxth	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c71a:	bf00      	nop
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	0800c7fc 	.word	0x0800c7fc
 800c72c:	0800c804 	.word	0x0800c804

0800c730 <memset>:
 800c730:	4402      	add	r2, r0
 800c732:	4603      	mov	r3, r0
 800c734:	4293      	cmp	r3, r2
 800c736:	d100      	bne.n	800c73a <memset+0xa>
 800c738:	4770      	bx	lr
 800c73a:	f803 1b01 	strb.w	r1, [r3], #1
 800c73e:	e7f9      	b.n	800c734 <memset+0x4>

0800c740 <__libc_init_array>:
 800c740:	b570      	push	{r4, r5, r6, lr}
 800c742:	4d0d      	ldr	r5, [pc, #52]	@ (800c778 <__libc_init_array+0x38>)
 800c744:	4c0d      	ldr	r4, [pc, #52]	@ (800c77c <__libc_init_array+0x3c>)
 800c746:	1b64      	subs	r4, r4, r5
 800c748:	10a4      	asrs	r4, r4, #2
 800c74a:	2600      	movs	r6, #0
 800c74c:	42a6      	cmp	r6, r4
 800c74e:	d109      	bne.n	800c764 <__libc_init_array+0x24>
 800c750:	4d0b      	ldr	r5, [pc, #44]	@ (800c780 <__libc_init_array+0x40>)
 800c752:	4c0c      	ldr	r4, [pc, #48]	@ (800c784 <__libc_init_array+0x44>)
 800c754:	f000 f826 	bl	800c7a4 <_init>
 800c758:	1b64      	subs	r4, r4, r5
 800c75a:	10a4      	asrs	r4, r4, #2
 800c75c:	2600      	movs	r6, #0
 800c75e:	42a6      	cmp	r6, r4
 800c760:	d105      	bne.n	800c76e <__libc_init_array+0x2e>
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	f855 3b04 	ldr.w	r3, [r5], #4
 800c768:	4798      	blx	r3
 800c76a:	3601      	adds	r6, #1
 800c76c:	e7ee      	b.n	800c74c <__libc_init_array+0xc>
 800c76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c772:	4798      	blx	r3
 800c774:	3601      	adds	r6, #1
 800c776:	e7f2      	b.n	800c75e <__libc_init_array+0x1e>
 800c778:	0800c814 	.word	0x0800c814
 800c77c:	0800c814 	.word	0x0800c814
 800c780:	0800c814 	.word	0x0800c814
 800c784:	0800c818 	.word	0x0800c818

0800c788 <memcpy>:
 800c788:	440a      	add	r2, r1
 800c78a:	4291      	cmp	r1, r2
 800c78c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c790:	d100      	bne.n	800c794 <memcpy+0xc>
 800c792:	4770      	bx	lr
 800c794:	b510      	push	{r4, lr}
 800c796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c79a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c79e:	4291      	cmp	r1, r2
 800c7a0:	d1f9      	bne.n	800c796 <memcpy+0xe>
 800c7a2:	bd10      	pop	{r4, pc}

0800c7a4 <_init>:
 800c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a6:	bf00      	nop
 800c7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7aa:	bc08      	pop	{r3}
 800c7ac:	469e      	mov	lr, r3
 800c7ae:	4770      	bx	lr

0800c7b0 <_fini>:
 800c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b2:	bf00      	nop
 800c7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b6:	bc08      	pop	{r3}
 800c7b8:	469e      	mov	lr, r3
 800c7ba:	4770      	bx	lr
