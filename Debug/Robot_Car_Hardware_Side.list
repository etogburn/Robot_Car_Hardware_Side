
Robot_Car_Hardware_Side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2dc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800c4b4  0800c4b4  0000d4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c504  0800c504  0000e394  2**0
                  CONTENTS
  4 .ARM          00000008  0800c504  0800c504  0000d504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c50c  0800c50c  0000e394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c50c  0800c50c  0000d50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c510  0800c510  0000d510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000394  20000000  0800c514  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000394  0800c8a8  0000e394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800c8a8  0000e89c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e394  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ab6  00000000  00000000  0000e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a3c  00000000  00000000  00033e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000165c  00000000  00000000  0003a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c487  00000000  00000000  0003bc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e77  00000000  00000000  0006809b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e43e  00000000  00000000  0008cf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ab350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c00  00000000  00000000  001ab394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001b2f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000394 	.word	0x20000394
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c49c 	.word	0x0800c49c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000398 	.word	0x20000398
 8000214:	0800c49c 	.word	0x0800c49c

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b9b5 	b.w	80005a4 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f84d 	bl	80002e8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f840 	bl	80002e8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f82f 	bl	80002e8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f821 	bl	80002e8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_uldivmod>:
 80002b8:	b953      	cbnz	r3, 80002d0 <__aeabi_uldivmod+0x18>
 80002ba:	b94a      	cbnz	r2, 80002d0 <__aeabi_uldivmod+0x18>
 80002bc:	2900      	cmp	r1, #0
 80002be:	bf08      	it	eq
 80002c0:	2800      	cmpeq	r0, #0
 80002c2:	bf1c      	itt	ne
 80002c4:	f04f 31ff 	movne.w	r1, #4294967295
 80002c8:	f04f 30ff 	movne.w	r0, #4294967295
 80002cc:	f000 b96a 	b.w	80005a4 <__aeabi_idiv0>
 80002d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d8:	f000 f806 	bl	80002e8 <__udivmoddi4>
 80002dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e4:	b004      	add	sp, #16
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Coms_IncIdx>:
#ifdef HAS_USB_COMMS
#include "usbd_cdc_if.h"
#endif
#include "usart.h"

static void Coms_IncIdx(uint8_t *idx) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	(*idx)++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
	if(*idx >= FIFO_SIZE) (*idx) = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d902      	bls.n	80005ca <Coms_IncIdx+0x22>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <ComsHandler_PacketToBuf>:

static void ComsHandler_PacketToBuf(DecodedPacket_t *packet, StringBuffer_t *buffer) {
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]

	if(packet->invalid) return;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7adb      	ldrb	r3, [r3, #11]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14c      	bne.n	8000682 <ComsHandler_PacketToBuf+0xac>
	buffer->length = 5 + packet->length;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7a9b      	ldrb	r3, [r3, #10]
 80005ec:	3305      	adds	r3, #5
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	701a      	strb	r2, [r3, #0]

	buffer->data[0] = START_BYTE;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	22aa      	movs	r2, #170	@ 0xaa
 80005f8:	705a      	strb	r2, [r3, #1]
	buffer->data[1] = packet->length;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a9a      	ldrb	r2, [r3, #10]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	709a      	strb	r2, [r3, #2]
	buffer->data[2] = (packet->command & 0xFF00) >> 8;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	70da      	strb	r2, [r3, #3]
	buffer->data[3] = packet->command & 0x00FF;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 800061a:	2304      	movs	r3, #4
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e00c      	b.n	800063a <ComsHandler_PacketToBuf+0x64>
		buffer->data[i] = packet->data[i-4];
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	1f1a      	subs	r2, r3, #4
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	440a      	add	r2, r1
 800062a:	7891      	ldrb	r1, [r2, #2]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3301      	adds	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	429a      	cmp	r2, r3
 8000644:	dbec      	blt.n	8000620 <ComsHandler_PacketToBuf+0x4a>
	}

	uint8_t checksum = buffer->data[0];
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 800064c:	2301      	movs	r3, #1
 800064e:	737b      	strb	r3, [r7, #13]
 8000650:	e009      	b.n	8000666 <ComsHandler_PacketToBuf+0x90>
		checksum ^= buffer->data[i];
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	785a      	ldrb	r2, [r3, #1]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	4053      	eors	r3, r2
 800065e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 8000660:	7b7b      	ldrb	r3, [r7, #13]
 8000662:	3301      	adds	r3, #1
 8000664:	737b      	strb	r3, [r7, #13]
 8000666:	7b7a      	ldrb	r2, [r7, #13]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	429a      	cmp	r2, r3
 8000670:	dbef      	blt.n	8000652 <ComsHandler_PacketToBuf+0x7c>
	}

	buffer->data[buffer->length - 1] = checksum;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	4413      	add	r3, r2
 800067c:	7bba      	ldrb	r2, [r7, #14]
 800067e:	705a      	strb	r2, [r3, #1]
 8000680:	e000      	b.n	8000684 <ComsHandler_PacketToBuf+0xae>
	if(packet->invalid) return;
 8000682:	bf00      	nop
}
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <ComsHandler_BufToPacket>:

static void ComsHandler_BufToPacket(DecodedPacket_t *packet, void *buf) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]

	StringBuffer_t *buffer = (StringBuffer_t *)buf;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	60fb      	str	r3, [r7, #12]

	uint8_t length = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]

	memset(packet->data, 0, MAX_DATA_SIZE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3302      	adds	r3, #2
 80006a4:	2208      	movs	r2, #8
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00b febd 	bl	800c428 <memset>

	packet->invalid = false;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	72da      	strb	r2, [r3, #11]
	packet->isNew = true;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	731a      	strb	r2, [r3, #12]

    if (buffer->data[0] != START_BYTE) {
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	2baa      	cmp	r3, #170	@ 0xaa
 80006c0:	d002      	beq.n	80006c8 <ComsHandler_BufToPacket+0x3a>
    	packet->invalid = true; // Invalid start byte, discard packet
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	72da      	strb	r2, [r3, #11]
    }

    packet->length = buffer->data[1];
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	789a      	ldrb	r2, [r3, #2]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	729a      	strb	r2, [r3, #10]
    if (buffer->data[1] > MAX_DATA_SIZE) {
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d905      	bls.n	80006e4 <ComsHandler_BufToPacket+0x56>
		packet->invalid = true;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	72da      	strb	r2, [r3, #11]
		packet->length = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	729a      	strb	r2, [r3, #10]
	}

    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006e4:	230c      	movs	r3, #12
 80006e6:	75bb      	strb	r3, [r7, #22]
 80006e8:	e00b      	b.n	8000702 <ComsHandler_BufToPacket+0x74>
    	if(buffer->data[i] != 0) {
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <ComsHandler_BufToPacket+0x6e>
    		length = i;
 80006f6:	7dbb      	ldrb	r3, [r7, #22]
 80006f8:	75fb      	strb	r3, [r7, #23]
    		break;
 80006fa:	e005      	b.n	8000708 <ComsHandler_BufToPacket+0x7a>
    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	3b01      	subs	r3, #1
 8000700:	75bb      	strb	r3, [r7, #22]
 8000702:	7dbb      	ldrb	r3, [r7, #22]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d8f0      	bhi.n	80006ea <ComsHandler_BufToPacket+0x5c>
    	}
    }

    uint8_t checksum = buffer->data[0];
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 800070e:	2301      	movs	r3, #1
 8000710:	753b      	strb	r3, [r7, #20]
 8000712:	e009      	b.n	8000728 <ComsHandler_BufToPacket+0x9a>
		checksum ^= buffer->data[i];
 8000714:	7d3b      	ldrb	r3, [r7, #20]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	785a      	ldrb	r2, [r3, #1]
 800071c:	7d7b      	ldrb	r3, [r7, #21]
 800071e:	4053      	eors	r3, r2
 8000720:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 8000722:	7d3b      	ldrb	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	753b      	strb	r3, [r7, #20]
 8000728:	7d3a      	ldrb	r2, [r7, #20]
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	429a      	cmp	r2, r3
 800072e:	d3f1      	bcc.n	8000714 <ComsHandler_BufToPacket+0x86>
	}

	if(checksum != buffer->data[length]) {
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	4413      	add	r3, r2
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	7d7a      	ldrb	r2, [r7, #21]
 800073a:	429a      	cmp	r2, r3
 800073c:	d002      	beq.n	8000744 <ComsHandler_BufToPacket+0xb6>
		packet->invalid = true;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	72da      	strb	r2, [r3, #11]
	}

    // Populate the command structure
    packet->command = (buffer->data[2] << 8) | buffer->data[3];
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	78db      	ldrb	r3, [r3, #3]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	801a      	strh	r2, [r3, #0]

    if(packet->length != 0) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7a9b      	ldrb	r3, [r3, #10]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d014      	beq.n	800078e <ComsHandler_BufToPacket+0x100>
    	for(uint8_t i = 0; i < packet->length; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	74fb      	strb	r3, [r7, #19]
 8000768:	e00c      	b.n	8000784 <ComsHandler_BufToPacket+0xf6>
    		packet->data[i] = buffer->data[4+i];
 800076a:	7cfb      	ldrb	r3, [r7, #19]
 800076c:	1d1a      	adds	r2, r3, #4
 800076e:	7cfb      	ldrb	r3, [r7, #19]
 8000770:	68f9      	ldr	r1, [r7, #12]
 8000772:	440a      	add	r2, r1
 8000774:	7851      	ldrb	r1, [r2, #1]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	460a      	mov	r2, r1
 800077c:	709a      	strb	r2, [r3, #2]
    	for(uint8_t i = 0; i < packet->length; i++) {
 800077e:	7cfb      	ldrb	r3, [r7, #19]
 8000780:	3301      	adds	r3, #1
 8000782:	74fb      	strb	r3, [r7, #19]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a9b      	ldrb	r3, [r3, #10]
 8000788:	7cfa      	ldrb	r2, [r7, #19]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3ed      	bcc.n	800076a <ComsHandler_BufToPacket+0xdc>
    	}
    }
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <UART_Send>:

// UART Send Function
static HAL_StatusTypeDef UART_Send(void *config, DecodedPacket_t *packet)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b088      	sub	sp, #32
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)config;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	61fb      	str	r3, [r7, #28]

    StringBuffer_t buf;
    memset(buf.data, 0, MAX_BUF_SIZE);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	3301      	adds	r3, #1
 80007aa:	220d      	movs	r2, #13
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00b fe3a 	bl	800c428 <memset>
    ComsHandler_PacketToBuf(packet, &buf);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	6838      	ldr	r0, [r7, #0]
 80007bc:	f7ff ff0b 	bl	80005d6 <ComsHandler_PacketToBuf>

    return HAL_UART_Transmit(huart, buf.data, buf.length, HAL_MAX_DELAY);
 80007c0:	7b3b      	ldrb	r3, [r7, #12]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	1c59      	adds	r1, r3, #1
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	69f8      	ldr	r0, [r7, #28]
 80007d0:	f00a f987 	bl	800aae2 <HAL_UART_Transmit>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <UART_SetupReceive>:

// UART Receive Function
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer

static HAL_StatusTypeDef UART_SetupReceive(void *inst)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007f2:	60bb      	str	r3, [r7, #8]

    memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	3370      	adds	r3, #112	@ 0x70
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	3305      	adds	r3, #5
 800080a:	220d      	movs	r2, #13
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f00b fe0a 	bl	800c428 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->rxBuf[instance->rxIdx].data, MAX_BUF_SIZE);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	3370      	adds	r3, #112	@ 0x70
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	3305      	adds	r3, #5
 800082a:	220d      	movs	r2, #13
 800082c:	4619      	mov	r1, r3
 800082e:	68b8      	ldr	r0, [r7, #8]
 8000830:	f00b fd58 	bl	800c2e4 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(DMA_UART_HANDLE, DMA_IT_HT);
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <UART_SetupReceive+0x70>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <UART_SetupReceive+0x70>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f022 0204 	bic.w	r2, r2, #4
 8000842:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000838 	.word	0x20000838

08000854 <UART_Receive>:

static HAL_StatusTypeDef UART_Receive(void *inst, uint8_t *data, uint16_t length)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	4613      	mov	r3, r2
 8000860:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	617b      	str	r3, [r7, #20]
    //UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;

    instance->rxBuf[instance->rxIdx].length = length;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	b2d8      	uxtb	r0, r3
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	460b      	mov	r3, r1
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	1a5b      	subs	r3, r3, r1
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	3374      	adds	r3, #116	@ 0x74
 800087e:	4602      	mov	r2, r0
 8000880:	701a      	strb	r2, [r3, #0]

    Coms_IncIdx(&instance->rxIdx);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe8f 	bl	80005a8 <Coms_IncIdx>

    UART_SetupReceive(inst);
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff ffa8 	bl	80007e0 <UART_SetupReceive>
    //__HAL_DMA_DISABLE_IT(hdma_usart1_rx, DMA_IT_HT);

    return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <CAN_Send>:
}
#endif

// CAN Send Function
static HAL_StatusTypeDef CAN_Send(void *config, DecodedPacket_t *packet)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b08c      	sub	sp, #48	@ 0x30
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]

#ifdef FDCAN

    FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    FDCAN_TxHeaderTypeDef txHeader;
    txHeader.Identifier = packet->command;  //send command as packet ID
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	60bb      	str	r3, [r7, #8]
    txHeader.IdType = FDCAN_EXTENDED_ID;
 80008ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b2:	60fb      	str	r3, [r7, #12]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
    txHeader.DataLength = packet->length;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	7a9b      	ldrb	r3, [r3, #10]
 80008bc:	617b      	str	r3, [r7, #20]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.MessageMarker = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Only include data bytes 5 to N-1
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, packet->data);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	1c9a      	adds	r2, r3, #2
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80008de:	f005 fce3 	bl	80062a8 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008e2:	4603      	mov	r3, r0
#endif

	return HAL_OK;
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3730      	adds	r7, #48	@ 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CAN_Receive>:

// CAN Receive Function
//going to be handled in an interrupt as with the all receive functions
static HAL_StatusTypeDef CAN_Receive(void *inst, uint8_t *data, uint16_t length)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b092      	sub	sp, #72	@ 0x48
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]

#ifdef FDCAN
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
    FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)instance->config;
 80008fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
    uint8_t RxData[8];

	// Check if a new message is available

		// Retrieve the message from the FIFO
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, RxData) == HAL_OK)
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	f107 0218 	add.w	r2, r7, #24
 800090e:	2140      	movs	r1, #64	@ 0x40
 8000910:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000912:	f005 fd0d 	bl	8006330 <HAL_FDCAN_GetRxMessage>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d14d      	bne.n	80009b8 <CAN_Receive+0xcc>
		{
			// Process the received message
			instance->rxPacket[instance->processIdx].invalid = false;
 800091c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	4619      	mov	r1, r3
 8000922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000924:	460b      	mov	r3, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	330f      	adds	r3, #15
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
			instance->rxPacket[instance->processIdx].isNew = true;
 8000934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	4619      	mov	r1, r3
 800093a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800093c:	460b      	mov	r3, r1
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	3310      	adds	r3, #16
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
			instance->rxPacket[instance->processIdx].length = rxHeader.DataLength & 0xFF;
 800094c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800094e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	4619      	mov	r1, r3
 8000954:	b2d0      	uxtb	r0, r2
 8000956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000958:	460b      	mov	r3, r1
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	330e      	adds	r3, #14
 8000964:	4602      	mov	r2, r0
 8000966:	701a      	strb	r2, [r3, #0]
			memset(instance->rxPacket[instance->processIdx].data, 0, MAX_DATA_SIZE);
 8000968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	461a      	mov	r2, r3
 800096e:	4613      	mov	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000978:	4413      	add	r3, r2
 800097a:	3306      	adds	r3, #6
 800097c:	2208      	movs	r2, #8
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f00b fd51 	bl	800c428 <memset>
			memcpy(instance->rxPacket[instance->processIdx].data, RxData, MAX_DATA_SIZE);
 8000986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	461a      	mov	r2, r3
 800098c:	4613      	mov	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000996:	4413      	add	r3, r2
 8000998:	3306      	adds	r3, #6
 800099a:	461a      	mov	r2, r3
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	cb03      	ldmia	r3!, {r0, r1}
 80009a2:	6010      	str	r0, [r2, #0]
 80009a4:	6051      	str	r1, [r2, #4]

			Coms_IncIdx(&instance->rxIdx);
 80009a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdfd 	bl	80005a8 <Coms_IncIdx>
			Coms_IncIdx(&instance->processIdx);
 80009ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009b0:	3302      	adds	r3, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fdf8 	bl	80005a8 <Coms_IncIdx>
		{

		}

#endif
    return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3748      	adds	r7, #72	@ 0x48
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <CAN_SetupReceive>:

static HAL_StatusTypeDef CAN_SetupReceive(void *inst)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	617b      	str	r3, [r7, #20]
	FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)instance->config;
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d4:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status = HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	6938      	ldr	r0, [r7, #16]
 80009dc:	f005 fdb0 	bl	8006540 <HAL_FDCAN_ActivateNotification>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
//	uint32_t b = HAL_FDCAN_GetError(hfdcan);
    return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <Comm_Init>:

// Initialize Communication Instance
void Comm_Init(ComsInterface_t *instance, CommType type, void *config)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	460b      	mov	r3, r1
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	72fb      	strb	r3, [r7, #11]
    instance->type = type;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	7afa      	ldrb	r2, [r7, #11]
 8000a02:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    instance->config = config;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    instance->decodeIdx = 0;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2200      	movs	r2, #0
 8000a12:	705a      	strb	r2, [r3, #1]
    instance->rxIdx = 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
    instance->processIdx = 0;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	709a      	strb	r2, [r3, #2]

    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
 8000a24:	e016      	b.n	8000a54 <Comm_Init+0x64>
    	instance->rxPacket[i].invalid = true;
 8000a26:	7dfa      	ldrb	r2, [r7, #23]
 8000a28:	68f9      	ldr	r1, [r7, #12]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	440b      	add	r3, r1
 8000a34:	330f      	adds	r3, #15
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
    	instance->rxPacket[i].isNew = false;
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	440b      	add	r3, r1
 8000a48:	3310      	adds	r3, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	3301      	adds	r3, #1
 8000a52:	75fb      	strb	r3, [r7, #23]
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d9e5      	bls.n	8000a26 <Comm_Init+0x36>
    }

    if (type == COMM_UART) {
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10f      	bne.n	8000a80 <Comm_Init+0x90>
        instance->interface.Send = UART_Send;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <Comm_Init+0xb8>)
 8000a64:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = UART_Receive;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <Comm_Init+0xbc>)
 8000a6c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <Comm_Init+0xc0>)
 8000a74:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        UART_SetupReceive(instance);
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff feb1 	bl	80007e0 <UART_SetupReceive>
        FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;

        CAN_SetupReceive(hfdcan);

    }
}
 8000a7e:	e00f      	b.n	8000aa0 <Comm_Init+0xb0>
    else if (type == COMM_CAN) {
 8000a80:	7afb      	ldrb	r3, [r7, #11]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d10c      	bne.n	8000aa0 <Comm_Init+0xb0>
        instance->interface.Send = CAN_Send;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <Comm_Init+0xc4>)
 8000a8a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = CAN_Receive;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4a09      	ldr	r2, [pc, #36]	@ (8000ab8 <Comm_Init+0xc8>)
 8000a92:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        CAN_SetupReceive(hfdcan);
 8000a9a:	6938      	ldr	r0, [r7, #16]
 8000a9c:	f7ff ff91 	bl	80009c2 <CAN_SetupReceive>
}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08000797 	.word	0x08000797
 8000aac:	08000855 	.word	0x08000855
 8000ab0:	0800068f 	.word	0x0800068f
 8000ab4:	0800089b 	.word	0x0800089b
 8000ab8:	080008ed 	.word	0x080008ed

08000abc <Comm_Send>:

// Wrapper for Sending Data
HAL_StatusTypeDef Comm_Send(ComsInterface_t *instance, DecodedPacket_t *packet)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	if(packet->invalid) return HAL_ERROR;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	7adb      	ldrb	r3, [r3, #11]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <Comm_Send+0x16>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e009      	b.n	8000ae6 <Comm_Send+0x2a>

    return instance->interface.Send(instance->config, packet);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	4798      	blx	r3
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <Comm_Receive>:

// Wrapper for Receiving Data
HAL_StatusTypeDef Comm_Receive(ComsInterface_t *instance, uint8_t *data, uint16_t length)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	4613      	mov	r3, r2
 8000afa:	80fb      	strh	r3, [r7, #6]
    return instance->interface.Receive(instance, data, length);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b02:	88fa      	ldrh	r2, [r7, #6]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	4798      	blx	r3
 8000b0a:	4603      	mov	r3, r0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <Comm_Process>:

void Comm_Process(ComsInterface_t *instance) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	static uint32_t currentTime;
	static uint32_t lastTime;

	currentTime = HAL_GetTick();
 8000b1c:	f003 fa2a 	bl	8003f74 <HAL_GetTick>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <Comm_Process+0x98>)
 8000b24:	6013      	str	r3, [r2, #0]

	if(instance->type == COMM_UART) {
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d132      	bne.n	8000b96 <Comm_Process+0x82>
		if(currentTime - lastTime > 1000) {
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <Comm_Process+0x98>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b3e:	d92a      	bls.n	8000b96 <Comm_Process+0x82>
			UART_SetupReceive(instance);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fe4d 	bl	80007e0 <UART_SetupReceive>
			lastTime = currentTime;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <Comm_Process+0x98>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b4c:	6013      	str	r3, [r2, #0]
		}
	}

	while (instance->decodeIdx != instance->rxIdx) {
 8000b4e:	e022      	b.n	8000b96 <Comm_Process+0x82>
		instance->interface.ConvertToPacket(&instance->rxPacket[instance->decodeIdx], &instance->rxBuf[instance->decodeIdx]);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	440b      	add	r3, r1
 8000b68:	1d18      	adds	r0, r3, #4
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	460b      	mov	r3, r1
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	3370      	adds	r3, #112	@ 0x70
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3304      	adds	r3, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4790      	blx	r2
		Coms_IncIdx(&instance->decodeIdx);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd0d 	bl	80005a8 <Coms_IncIdx>
		lastTime = currentTime;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <Comm_Process+0x98>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b94:	6013      	str	r3, [r2, #0]
	while (instance->decodeIdx != instance->rxIdx) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	785a      	ldrb	r2, [r3, #1]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d1d6      	bne.n	8000b50 <Comm_Process+0x3c>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200003b0 	.word	0x200003b0
 8000bb0:	200003b4 	.word	0x200003b4

08000bb4 <Comm_GetPacket>:

DecodedPacket_t Comm_GetPacket(ComsInterface_t *instance) {
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	DecodedPacket_t packet = {
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	819a      	strh	r2, [r3, #12]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	74fb      	strb	r3, [r7, #19]
			.invalid = true,
			.isNew = false
	};

	if(instance->decodeIdx == instance->processIdx) {
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	785a      	ldrb	r2, [r3, #1]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d10a      	bne.n	8000bf2 <Comm_GetPacket+0x3e>
		return packet;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	461c      	mov	r4, r3
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000be6:	6020      	str	r0, [r4, #0]
 8000be8:	6061      	str	r1, [r4, #4]
 8000bea:	60a2      	str	r2, [r4, #8]
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	e029      	b.n	8000c46 <Comm_GetPacket+0x92>
	}

	uint8_t idx = instance->processIdx;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	789b      	ldrb	r3, [r3, #2]
 8000bf6:	75fb      	strb	r3, [r7, #23]

	Coms_IncIdx(&instance->processIdx);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fcd3 	bl	80005a8 <Coms_IncIdx>
	memcpy(&packet, &instance->rxPacket[idx], sizeof(instance->rxPacket[idx]));
 8000c02:	7dfa      	ldrb	r2, [r7, #23]
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	1d19      	adds	r1, r3, #4
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	220e      	movs	r2, #14
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f00b fc31 	bl	800c480 <memcpy>

	instance->rxPacket[idx].isNew = false;
 8000c1e:	7dfa      	ldrb	r2, [r7, #23]
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	440b      	add	r3, r1
 8000c2c:	3310      	adds	r3, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]

	return packet;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	461c      	mov	r4, r3
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c3c:	6020      	str	r0, [r4, #0]
 8000c3e:	6061      	str	r1, [r4, #4]
 8000c40:	60a2      	str	r2, [r4, #8]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	81a3      	strh	r3, [r4, #12]
}
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}

08000c4e <IMU_WriteRegister>:

#include "IMU.h"
#include <stdio.h> // For debugging with printf

// Internal helper function: Write a register
static HAL_StatusTypeDef IMU_WriteRegister(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t value) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = { reg, value };
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	733b      	strb	r3, [r7, #12]
 8000c62:	78bb      	ldrb	r3, [r7, #2]
 8000c64:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6858      	ldr	r0, [r3, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	891b      	ldrh	r3, [r3, #8]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	f005 ffcd 	bl	8006c10 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(imu->hspi, data, 2, HAL_MAX_DELAY);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f107 010c 	add.w	r1, r7, #12
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2202      	movs	r2, #2
 8000c84:	f007 f8cb 	bl	8007e1e <HAL_SPI_Transmit>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6858      	ldr	r0, [r3, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	891b      	ldrh	r3, [r3, #8]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	f005 ffba 	bl	8006c10 <HAL_GPIO_WritePin>

    return status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <IMU_BurstRead>:

// Internal helper function: Burst read
static HAL_StatusTypeDef IMU_BurstRead(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t *buffer, uint8_t length) {
 8000ca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000caa:	b08f      	sub	sp, #60	@ 0x3c
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6178      	str	r0, [r7, #20]
 8000cb0:	60fa      	str	r2, [r7, #12]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	74fb      	strb	r3, [r7, #19]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	74bb      	strb	r3, [r7, #18]
 8000cbc:	466b      	mov	r3, sp
 8000cbe:	461e      	mov	r6, r3

    uint8_t tx_data[length+1];
 8000cc0:	7cbb      	ldrb	r3, [r7, #18]
 8000cc2:	1c59      	adds	r1, r3, #1
 8000cc4:	1e4b      	subs	r3, r1, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc8:	460a      	mov	r2, r1
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603a      	str	r2, [r7, #0]
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	00c3      	lsls	r3, r0, #3
 8000cdc:	6838      	ldr	r0, [r7, #0]
 8000cde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	00c2      	lsls	r2, r0, #3
 8000ce6:	460a      	mov	r2, r1
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4692      	mov	sl, r2
 8000cec:	469b      	mov	fp, r3
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000cfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d02:	460b      	mov	r3, r1
 8000d04:	3307      	adds	r3, #7
 8000d06:	08db      	lsrs	r3, r3, #3
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000d0e:	ab02      	add	r3, sp, #8
 8000d10:	3300      	adds	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_data[length+1];
 8000d14:	7cbb      	ldrb	r3, [r7, #18]
 8000d16:	1c59      	adds	r1, r3, #1
 8000d18:	1e4b      	subs	r3, r1, #1
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	2300      	movs	r3, #0
 8000d20:	4690      	mov	r8, r2
 8000d22:	4699      	mov	r9, r3
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d38:	460a      	mov	r2, r1
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	4614      	mov	r4, r2
 8000d3e:	461d      	mov	r5, r3
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	00eb      	lsls	r3, r5, #3
 8000d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d4e:	00e2      	lsls	r2, r4, #3
 8000d50:	460b      	mov	r3, r1
 8000d52:	3307      	adds	r3, #7
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	ebad 0d03 	sub.w	sp, sp, r3
 8000d5c:	ab02      	add	r3, sp, #8
 8000d5e:	3300      	adds	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    tx_data[0] = reg | IMU_READ_BIT;
 8000d62:	7cfb      	ldrb	r3, [r7, #19]
 8000d64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= length; i++) {
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d74:	e00f      	b.n	8000d96 <IMU_BurstRead+0xf0>
    	tx_data[i] = (tx_data[i-1]+1);
 8000d76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d7e:	5cd2      	ldrb	r2, [r2, r3]
 8000d80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d84:	3201      	adds	r2, #1
 8000d86:	b2d1      	uxtb	r1, r2
 8000d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d8a:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 1; i <= length; i++) {
 8000d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d90:	3301      	adds	r3, #1
 8000d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d96:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000d9a:	7cbb      	ldrb	r3, [r7, #18]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d9ea      	bls.n	8000d76 <IMU_BurstRead+0xd0>
    }

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	6858      	ldr	r0, [r3, #4]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	891b      	ldrh	r3, [r3, #8]
 8000da8:	2200      	movs	r2, #0
 8000daa:	4619      	mov	r1, r3
 8000dac:	f005 ff30 	bl	8006c10 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx_data, rx_data, length + 1, HAL_MAX_DELAY);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	7cbb      	ldrb	r3, [r7, #18]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	9200      	str	r2, [sp, #0]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dc6:	f007 f9a0 	bl	800810a <HAL_SPI_TransmitReceive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	76fb      	strb	r3, [r7, #27]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	6858      	ldr	r0, [r3, #4]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	891b      	ldrh	r3, [r3, #8]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f005 ff19 	bl	8006c10 <HAL_GPIO_WritePin>

    for(uint8_t i = 1; i <= length; i++) {
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000de4:	e00e      	b.n	8000e04 <IMU_BurstRead+0x15e>
    	*(buffer+(i-1)) = rx_data[i];
 8000de6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000dea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000dee:	3b01      	subs	r3, #1
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	440b      	add	r3, r1
 8000df4:	69f9      	ldr	r1, [r7, #28]
 8000df6:	5c8a      	ldrb	r2, [r1, r2]
 8000df8:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= length; i++) {
 8000dfa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000e04:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d9eb      	bls.n	8000de6 <IMU_BurstRead+0x140>
	}


    return status;
 8000e0e:	7efb      	ldrb	r3, [r7, #27]
 8000e10:	46b5      	mov	sp, r6
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3734      	adds	r7, #52	@ 0x34
 8000e16:	46bd      	mov	sp, r7
 8000e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e1c <IMU_Init>:

// Initialize the IMU
HAL_StatusTypeDef IMU_Init(IMU_HandleTypeDef *imu) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
//
//    for(uint8_t i = 0; i < 14; i++) {
//    	data_buffer[i] = 0;
//    }

    if (IMU_WriteRegister(imu, 0x76, 0x00) != HAL_OK) { //userbank 0 select
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2176      	movs	r1, #118	@ 0x76
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff0e 	bl	8000c4e <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
	HAL_Delay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f003 f8aa 	bl	8003f8c <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_DEVICE_CONFIG_REG, IMU_DEVICE_CONFIG_RESET) != HAL_OK) {
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2111      	movs	r1, #17
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff06 	bl	8000c4e <IMU_WriteRegister>
    	//   return HAL_ERROR;
	}

    HAL_Delay(5);
 8000e42:	2005      	movs	r0, #5
 8000e44:	f003 f8a2 	bl	8003f8c <HAL_Delay>

    if (IMU_BurstRead(imu, IMU_WHO_AM_I_REG, &who_am_i, 1) != HAL_OK || who_am_i != IMU_WHO_AM_I_EXPECTED) {
 8000e48:	f107 020f 	add.w	r2, r7, #15
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2175      	movs	r1, #117	@ 0x75
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff28 	bl	8000ca6 <IMU_BurstRead>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f003 f896 	bl	8003f8c <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_PWR_MGMT_0, IMU_ENABLE_ACCEL_GYRO) != HAL_OK) {
 8000e60:	220f      	movs	r2, #15
 8000e62:	214e      	movs	r1, #78	@ 0x4e
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fef2 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f003 f88e 	bl	8003f8c <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_GYRO_CONFIG_REG, IMU_GYRO_CONFIG_DATA) != HAL_OK) {
 8000e70:	2248      	movs	r2, #72	@ 0x48
 8000e72:	214f      	movs	r1, #79	@ 0x4f
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff feea 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f003 f886 	bl	8003f8c <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_ACCEL_CONFIG_REG, IMU_ACCEL_CONFIG_DATA) != HAL_OK) {
 8000e80:	2248      	movs	r2, #72	@ 0x48
 8000e82:	2150      	movs	r1, #80	@ 0x50
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fee2 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f003 f87e 	bl	8003f8c <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG0_REG, IMU_INT_CONFIG0_DATA) != HAL_OK) {
 8000e90:	2220      	movs	r2, #32
 8000e92:	2163      	movs	r1, #99	@ 0x63
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff feda 	bl	8000c4e <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
    HAL_Delay(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f003 f876 	bl	8003f8c <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_SOURCE_REG, IMU_INT_ENABLE_DATA_RDY) != HAL_OK) {
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	2165      	movs	r1, #101	@ 0x65
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fed2 	bl	8000c4e <IMU_WriteRegister>
       // return HAL_ERROR;
    }
    HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f003 f86e 	bl	8003f8c <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG_REG, IMU_INT_ACTIVE_HIGH) != HAL_OK) {
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	2114      	movs	r1, #20
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff feca 	bl	8000c4e <IMU_WriteRegister>
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f003 f866 	bl	8003f8c <HAL_Delay>


    return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <IMU_ReadAll>:

    return HAL_OK;
}

// Read all data (accelerometer, gyroscope, and temperature)
HAL_StatusTypeDef IMU_ReadAll(IMU_HandleTypeDef *imu) {
 8000eca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	466b      	mov	r3, sp
 8000ed6:	461e      	mov	r6, r3
	uint8_t length = 14;
 8000ed8:	230e      	movs	r3, #14
 8000eda:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[length];
 8000edc:	7df9      	ldrb	r1, [r7, #23]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	b2cb      	uxtb	r3, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4698      	mov	r8, r3
 8000eea:	4691      	mov	r9, r2
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ef8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000efc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f00:	b2cb      	uxtb	r3, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	461c      	mov	r4, r3
 8000f06:	4615      	mov	r5, r2
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	00eb      	lsls	r3, r5, #3
 8000f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f16:	00e2      	lsls	r2, r4, #3
 8000f18:	460b      	mov	r3, r1
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	ebad 0d03 	sub.w	sp, sp, r3
 8000f24:	466b      	mov	r3, sp
 8000f26:	3300      	adds	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
    uint8_t intStatus = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	72fb      	strb	r3, [r7, #11]
    if (IMU_BurstRead(imu, IMU_TEMP_OUT_H, raw_data, length) != HAL_OK) {
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	211d      	movs	r1, #29
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff feb6 	bl	8000ca6 <IMU_BurstRead>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <IMU_ReadAll+0x7a>
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e059      	b.n	8000ff8 <IMU_ReadAll+0x12e>
    }

    imu->accel[0] = (raw_data[2] << 8) | raw_data[3];
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	78db      	ldrb	r3, [r3, #3]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	825a      	strh	r2, [r3, #18]
    imu->accel[1] = (raw_data[4] << 8) | raw_data[5];
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	795b      	ldrb	r3, [r3, #5]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	829a      	strh	r2, [r3, #20]
    imu->accel[2] = (raw_data[6] << 8) | raw_data[7];
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	799b      	ldrb	r3, [r3, #6]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	79db      	ldrb	r3, [r3, #7]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	82da      	strh	r2, [r3, #22]

    imu->temperature = (raw_data[0] << 8) | raw_data[1];
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	83da      	strh	r2, [r3, #30]

    imu->gyro[0] = (raw_data[8] << 8) | raw_data[9];
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	7a1b      	ldrb	r3, [r3, #8]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	7a5b      	ldrb	r3, [r3, #9]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	831a      	strh	r2, [r3, #24]
    imu->gyro[1] = (raw_data[10] << 8) | raw_data[11];
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	7a9b      	ldrb	r3, [r3, #10]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	7adb      	ldrb	r3, [r3, #11]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	835a      	strh	r2, [r3, #26]
    imu->gyro[2] = (raw_data[12] << 8) | raw_data[13];
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	7b1b      	ldrb	r3, [r3, #12]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	7b5b      	ldrb	r3, [r3, #13]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	839a      	strh	r2, [r3, #28]

    if (IMU_BurstRead(imu, IMU_INT_STATUS_REG, &intStatus, 1) != HAL_OK) {
 8000fde:	f107 020b 	add.w	r2, r7, #11
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	212d      	movs	r1, #45	@ 0x2d
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fe5d 	bl	8000ca6 <IMU_BurstRead>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <IMU_ReadAll+0x12c>
		return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <IMU_ReadAll+0x12e>
	}

    return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	46b5      	mov	sp, r6
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001004 <IMU_InterruptHandler>:

// Interrupt handler
void IMU_InterruptHandler(IMU_HandleTypeDef *imu, uint16_t GPIO_pin) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
    if (GPIO_pin != imu->int_pin) return;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	8a1b      	ldrh	r3, [r3, #16]
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	429a      	cmp	r2, r3
 8001018:	d103      	bne.n	8001022 <IMU_InterruptHandler+0x1e>

    if (IMU_ReadAll(imu) == HAL_OK) {
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff55 	bl	8000eca <IMU_ReadAll>
 8001020:	e000      	b.n	8001024 <IMU_InterruptHandler+0x20>
    if (GPIO_pin != imu->int_pin) return;
 8001022:	bf00      	nop
        // Data successfully read
    } else {
        // Handle read error
    }
}
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	@ 0x30
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2220      	movs	r2, #32
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00b f9ef 	bl	800c428 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800104a:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800104c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001050:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001054:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001058:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001066:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001074:	2204      	movs	r2, #4
 8001076:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107e:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001086:	2201      	movs	r2, #1
 8001088:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001098:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800109a:	2200      	movs	r2, #0
 800109c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	4817      	ldr	r0, [pc, #92]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010b6:	f003 f961 	bl	800437c <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c0:	f000 fe9c 	bl	8001dfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010d0:	f003 ff76 	bl	8004fc0 <HAL_ADCEx_MultiModeConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010da:	f000 fe8f 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_ADC1_Init+0xec>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2306      	movs	r3, #6
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ea:	237f      	movs	r3, #127	@ 0x7f
 80010ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010fc:	f003 fafa 	bl	80046f4 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001106:	f000 fe79 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3730      	adds	r7, #48	@ 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200003b8 	.word	0x200003b8
 8001118:	10c00010 	.word	0x10c00010

0800111c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	@ 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00b f977 	bl	800c428 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800113c:	4a31      	ldr	r2, [pc, #196]	@ (8001204 <MX_ADC3_Init+0xe8>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001140:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001142:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001146:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001162:	2204      	movs	r2, #4
 8001164:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001168:	2200      	movs	r2, #0
 800116a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800116e:	2200      	movs	r2, #0
 8001170:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001174:	2201      	movs	r2, #1
 8001176:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011a2:	4817      	ldr	r0, [pc, #92]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011a4:	f003 f8ea 	bl	800437c <HAL_ADC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011ae:	f000 fe25 	bl	8001dfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4810      	ldr	r0, [pc, #64]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011be:	f003 feff 	bl	8004fc0 <HAL_ADCEx_MultiModeConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011c8:	f000 fe18 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_ADC3_Init+0xec>)
 80011ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d0:	2306      	movs	r3, #6
 80011d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d8:	237f      	movs	r3, #127	@ 0x7f
 80011da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011dc:	2304      	movs	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011ea:	f003 fa83 	bl	80046f4 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80011f4:	f000 fe02 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	@ 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000424 	.word	0x20000424
 8001204:	50000400 	.word	0x50000400
 8001208:	1d500080 	.word	0x1d500080

0800120c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a2      	sub	sp, #136	@ 0x88
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2254      	movs	r2, #84	@ 0x54
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00b f8fb 	bl	800c428 <memset>
  if(adcHandle->Instance==ADC1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800123a:	d14e      	bne.n	80012da <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800123c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001240:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001242:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001246:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4618      	mov	r0, r3
 800124e:	f006 faed 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001258:	f000 fdd0 	bl	8001dfc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800125c:	4b4a      	ldr	r3, [pc, #296]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	4a49      	ldr	r2, [pc, #292]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001262:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001268:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	4a43      	ldr	r2, [pc, #268]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b3e      	ldr	r3, [pc, #248]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	4a3d      	ldr	r2, [pc, #244]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOARD_TEMP_Pin;
 80012a4:	2308      	movs	r3, #8
 80012a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(BOARD_TEMP_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ba:	f005 fb0f 	bl	80068dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMC_CURRSENSE_Pin;
 80012be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012d0:	4619      	mov	r1, r3
 80012d2:	482e      	ldr	r0, [pc, #184]	@ (800138c <HAL_ADC_MspInit+0x180>)
 80012d4:	f005 fb02 	bl	80068dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012d8:	e051      	b.n	800137e <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a2c      	ldr	r2, [pc, #176]	@ (8001390 <HAL_ADC_MspInit+0x184>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d14c      	bne.n	800137e <HAL_ADC_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 fa99 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 8001300:	f000 fd7c 	bl	8001dfc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LMC_CURRSENSE_Pin;
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <HAL_ADC_MspInit+0x188>)
 8001360:	f005 fabc 	bl	80068dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBAT_SW_DIAG_Pin;
 8001364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001368:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VBAT_SW_DIAG_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001376:	4619      	mov	r1, r3
 8001378:	4807      	ldr	r0, [pc, #28]	@ (8001398 <HAL_ADC_MspInit+0x18c>)
 800137a:	f005 faaf 	bl	80068dc <HAL_GPIO_Init>
}
 800137e:	bf00      	nop
 8001380:	3788      	adds	r7, #136	@ 0x88
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400
 8001390:	50000400 	.word	0x50000400
 8001394:	48001000 	.word	0x48001000
 8001398:	48000c00 	.word	0x48000c00

0800139c <SendResponse>:
		COMMAND_0x0181
};

// Function to initialize the Command Handler

static void SendResponse(ComsInterface_t *interface) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	Comm_Send(interface, &response);
 80013a4:	4903      	ldr	r1, [pc, #12]	@ (80013b4 <SendResponse+0x18>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fb88 	bl	8000abc <Comm_Send>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000490 	.word	0x20000490

080013b8 <SetResponse>:

static void SetResponse(uint16_t command, uint8_t length, uint8_t *data) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	603a      	str	r2, [r7, #0]
 80013c2:	80fb      	strh	r3, [r7, #6]
 80013c4:	460b      	mov	r3, r1
 80013c6:	717b      	strb	r3, [r7, #5]
	if(data == NULL) {
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <SetResponse+0x1e>
		response.length = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <SetResponse+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	729a      	strb	r2, [r3, #10]
 80013d4:	e00e      	b.n	80013f4 <SetResponse+0x3c>
	} else {
		response.length = sizeof(data);
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <SetResponse+0x50>)
 80013d8:	2204      	movs	r2, #4
 80013da:	729a      	strb	r2, [r3, #10]
		memset(response.data, 0, MAX_DATA_SIZE);
 80013dc:	2208      	movs	r2, #8
 80013de:	2100      	movs	r1, #0
 80013e0:	480a      	ldr	r0, [pc, #40]	@ (800140c <SetResponse+0x54>)
 80013e2:	f00b f821 	bl	800c428 <memset>
		memcpy(response.data, data, response.length);
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <SetResponse+0x50>)
 80013e8:	7a9b      	ldrb	r3, [r3, #10]
 80013ea:	461a      	mov	r2, r3
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <SetResponse+0x54>)
 80013f0:	f00b f846 	bl	800c480 <memcpy>
	}
	response.invalid = false;
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SetResponse+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	72da      	strb	r2, [r3, #11]
	response.command = command;
 80013fa:	4a03      	ldr	r2, [pc, #12]	@ (8001408 <SetResponse+0x50>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	8013      	strh	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000490 	.word	0x20000490
 800140c:	20000492 	.word	0x20000492

08001410 <Response_OK>:

static void Response_OK() {
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_OK, 0, NULL);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	20ff      	movs	r0, #255	@ 0xff
 800141a:	f7ff ffcd 	bl	80013b8 <SetResponse>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <Response_Invalid>:

static void Response_Invalid() {
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_INVALID, 0, NULL);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	20fe      	movs	r0, #254	@ 0xfe
 800142c:	f7ff ffc4 	bl	80013b8 <SetResponse>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <makeInt16_t>:

static int16_t makeInt16_t(uint8_t *val1, uint8_t *val2) {
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	return (*val1 << 8) | *val2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <int16_tToUint8_t>:

static void int16_tToUint8_t(int16_t *input, uint8_t *output) {
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	if(sizeof(input) != sizeof(output)) return;
	
	uint8_t maxLoop = sizeof(input)/2;
 8001466:	2302      	movs	r3, #2
 8001468:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = 0; i < maxLoop; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	e01d      	b.n	80014ac <int16_tToUint8_t+0x50>
		output[2*i] = (input[i] & 0xFF00) >> 8;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147c:	121a      	asrs	r2, r3, #8
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4619      	mov	r1, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	440b      	add	r3, r1
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
		output[2*i+1] = input[i] & 0xFF;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	3301      	adds	r3, #1
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < maxLoop; i++) {
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3301      	adds	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d3dd      	bcc.n	8001470 <int16_tToUint8_t+0x14>
	}

}
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <CommandHandler_ProcessCommand>:
void CommandHandler_Init(void) {
    // Initialize any peripherals or variables related to command handling
    // Example: GPIO, Timers, etc.
}
// Function to process a received command
void CommandHandler_ProcessCommand(ComsInterface_t *interface, RobotSystem *robot) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    // Check for NULL pointer
	DecodedPacket_t packet = Comm_GetPacket(interface);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb6f 	bl	8000bb4 <Comm_GetPacket>

	if(!packet.isNew) return;
 80014d6:	7e3b      	ldrb	r3, [r7, #24]
 80014d8:	f083 0301 	eor.w	r3, r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d139      	bne.n	8001556 <CommandHandler_ProcessCommand+0x96>

	if(packet.invalid) {
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <CommandHandler_ProcessCommand+0x34>
		Response_Invalid();
 80014e8:	f7ff ff9b 	bl	8001422 <Response_Invalid>
		SendResponse(interface);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff55 	bl	800139c <SendResponse>
		return;
 80014f2:	e031      	b.n	8001558 <CommandHandler_ProcessCommand+0x98>
	}

	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	e029      	b.n	800154e <CommandHandler_ProcessCommand+0x8e>
		if (commandTable[i].commandID == packet.command) {
 80014fa:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <CommandHandler_ProcessCommand+0xa0>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001502:	89bb      	ldrh	r3, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d11f      	bne.n	8001548 <CommandHandler_ProcessCommand+0x88>
			if(commandTable[i].expLength == 0 || commandTable[i].expLength == packet.length) {
 8001508:	4a15      	ldr	r2, [pc, #84]	@ (8001560 <CommandHandler_ProcessCommand+0xa0>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	885b      	ldrh	r3, [r3, #2]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <CommandHandler_ProcessCommand+0x66>
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <CommandHandler_ProcessCommand+0xa0>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	885b      	ldrh	r3, [r3, #2]
 8001520:	7dba      	ldrb	r2, [r7, #22]
 8001522:	4293      	cmp	r3, r2
 8001524:	d10a      	bne.n	800153c <CommandHandler_ProcessCommand+0x7c>
				commandTable[i].handler(&packet, robot);
 8001526:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <CommandHandler_ProcessCommand+0xa0>)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f107 020c 	add.w	r2, r7, #12
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	4610      	mov	r0, r2
 8001538:	4798      	blx	r3
 800153a:	e001      	b.n	8001540 <CommandHandler_ProcessCommand+0x80>
			} else {
				Response_Invalid();
 800153c:	f7ff ff71 	bl	8001422 <Response_Invalid>
			}
			SendResponse(interface);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff2b 	bl	800139c <SendResponse>
			return;
 8001546:	e007      	b.n	8001558 <CommandHandler_ProcessCommand+0x98>
	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	3301      	adds	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b09      	cmp	r3, #9
 8001552:	d9d2      	bls.n	80014fa <CommandHandler_ProcessCommand+0x3a>
 8001554:	e000      	b.n	8001558 <CommandHandler_ProcessCommand+0x98>
	if(!packet.isNew) return;
 8001556:	bf00      	nop
		}
	}
}
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000000 	.word	0x20000000

08001564 <Handle_SetMotorEnable>:

void Handle_SetMotorEnable(DecodedPacket_t *packet, RobotSystem *robot) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	uint8_t data = packet->data[0] > 0 ? 1 : 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	789b      	ldrb	r3, [r3, #2]
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	73fb      	strb	r3, [r7, #15]

	if(data) {
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <Handle_SetMotorEnable+0x28>
		RobotSystem_Enable(robot);
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f001 fd86 	bl	8003096 <RobotSystem_Enable>
 800158a:	e002      	b.n	8001592 <Handle_SetMotorEnable+0x2e>
	} else {
		RobotSystem_Disable(robot);
 800158c:	6838      	ldr	r0, [r7, #0]
 800158e:	f001 fd95 	bl	80030bc <RobotSystem_Disable>
	}

	Response_OK();
 8001592:	f7ff ff3d 	bl	8001410 <Response_OK>
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <Handle_SetMotorSpeed>:

void Handle_SetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
	int16_t leftSpeed = makeInt16_t(&packet->data[0], &packet->data[1]);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	1c9a      	adds	r2, r3, #2
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3303      	adds	r3, #3
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f7ff ff3e 	bl	8001434 <makeInt16_t>
 80015b8:	4603      	mov	r3, r0
 80015ba:	81fb      	strh	r3, [r7, #14]
	int16_t rightSpeed = makeInt16_t(&packet->data[2], &packet->data[3]);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	1d1a      	adds	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3305      	adds	r3, #5
 80015c4:	4619      	mov	r1, r3
 80015c6:	4610      	mov	r0, r2
 80015c8:	f7ff ff34 	bl	8001434 <makeInt16_t>
 80015cc:	4603      	mov	r3, r0
 80015ce:	81bb      	strh	r3, [r7, #12]
	RobotSystem_SetSpeed(robot, leftSpeed, rightSpeed);
 80015d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d8:	4619      	mov	r1, r3
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f001 fc8e 	bl	8002efc <RobotSystem_SetSpeed>

	Response_OK();
 80015e0:	f7ff ff16 	bl	8001410 <Response_OK>
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <Handle_SetMotorStop>:

void Handle_SetMotorStop(DecodedPacket_t *packet, RobotSystem *robot) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	RobotSystem_SetSpeed(robot, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f001 fc7e 	bl	8002efc <RobotSystem_SetSpeed>

	Response_OK();
 8001600:	f7ff ff06 	bl	8001410 <Response_OK>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <Handle_SetOneMotorSpeed>:

void Handle_SetOneMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
	int16_t speed = makeInt16_t(&packet->data[0], &packet->data[1]);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	1c9a      	adds	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3303      	adds	r3, #3
 800161e:	4619      	mov	r1, r3
 8001620:	4610      	mov	r0, r2
 8001622:	f7ff ff07 	bl	8001434 <makeInt16_t>
 8001626:	4603      	mov	r3, r0
 8001628:	81fb      	strh	r3, [r7, #14]

	if(packet->command == COMMAND_SETLEFTSPEED) {
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	f240 1203 	movw	r2, #259	@ 0x103
 8001632:	4293      	cmp	r3, r2
 8001634:	d106      	bne.n	8001644 <Handle_SetOneMotorSpeed+0x38>
		RobotSystem_SetLeftSpeed(robot, speed);
 8001636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800163a:	4619      	mov	r1, r3
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f001 fc88 	bl	8002f52 <RobotSystem_SetLeftSpeed>
 8001642:	e00a      	b.n	800165a <Handle_SetOneMotorSpeed+0x4e>
	} else if(packet->command == COMMAND_SETRIGHTSPEED) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800164c:	d105      	bne.n	800165a <Handle_SetOneMotorSpeed+0x4e>
		RobotSystem_SetRightSpeed(robot, speed);
 800164e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001652:	4619      	mov	r1, r3
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f001 fc96 	bl	8002f86 <RobotSystem_SetRightSpeed>
	}

	Response_OK();
 800165a:	f7ff fed9 	bl	8001410 <Response_OK>
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <Handle_GetMotorPosition>:

void Handle_GetMotorPosition(DecodedPacket_t *packet, RobotSystem *robot) {
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
	int16_t wheelPos[2];
	uint8_t data[4];

	RobotSystem_GetMotorPosition(robot, &wheelPos[0], &wheelPos[1]);
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	1c9a      	adds	r2, r3, #2
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4619      	mov	r1, r3
 800167c:	6838      	ldr	r0, [r7, #0]
 800167e:	f001 fcaf 	bl	8002fe0 <RobotSystem_GetMotorPosition>

	int16_tToUint8_t(wheelPos, data);
 8001682:	f107 0208 	add.w	r2, r7, #8
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fee5 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETMOTORPOSITION, sizeof(data), data);
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	461a      	mov	r2, r3
 8001698:	2104      	movs	r1, #4
 800169a:	f240 1081 	movw	r0, #385	@ 0x181
 800169e:	f7ff fe8b 	bl	80013b8 <SetResponse>
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <Handle_GetMotorSpeed>:

void Handle_GetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
	int16_t speed[2];
	uint8_t data[4];

	RobotSystem_GetMotorSpeed(robot, &speed[0], &speed[1]);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	1c9a      	adds	r2, r3, #2
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f001 fca2 	bl	800300a <RobotSystem_GetMotorSpeed>

	int16_tToUint8_t(speed, data);
 80016c6:	f107 0208 	add.w	r2, r7, #8
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fec3 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETMOTORSPEED, sizeof(data), data);
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	461a      	mov	r2, r3
 80016dc:	2104      	movs	r1, #4
 80016de:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80016e2:	f7ff fe69 	bl	80013b8 <SetResponse>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <Handle_WakeUp>:

void Handle_WakeUp(DecodedPacket_t *packet, RobotSystem *robot) {
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff fe5b 	bl	80013b8 <SetResponse>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <Handle_Ready>:

void Handle_Ready(DecodedPacket_t *packet, RobotSystem *robot) {
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fe4d 	bl	80013b8 <SetResponse>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <Handle_Shutdown>:

void Handle_Shutdown(DecodedPacket_t *packet, RobotSystem *robot) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
	Response_OK();
 8001730:	f7ff fe6e 	bl	8001410 <Response_OK>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <MX_DAC2_Init>:

DAC_HandleTypeDef hdac2;

/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	@ 0x30
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001742:	463b      	mov	r3, r7
 8001744:	2230      	movs	r2, #48	@ 0x30
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00a fe6d 	bl	800c428 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_DAC2_Init+0x6c>)
 8001750:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <MX_DAC2_Init+0x70>)
 8001752:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001754:	4814      	ldr	r0, [pc, #80]	@ (80017a8 <MX_DAC2_Init+0x6c>)
 8001756:	f003 fe4a 	bl	80053ee <HAL_DAC_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001760:	f000 fb4c 	bl	8001dfc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001764:	2302      	movs	r3, #2
 8001766:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001780:	2301      	movs	r3, #1
 8001782:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	@ (80017a8 <MX_DAC2_Init+0x6c>)
 8001790:	f003 feea 	bl	8005568 <HAL_DAC_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800179a:	f000 fb2f 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3730      	adds	r7, #48	@ 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200004a0 	.word	0x200004a0
 80017ac:	50000c00 	.word	0x50000c00

080017b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <HAL_DAC_MspInit+0x74>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d124      	bne.n	800181c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* DAC2 clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_DAC_MspInit+0x78>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <HAL_DAC_MspInit+0x78>)
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_DAC_MspInit+0x78>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <HAL_DAC_MspInit+0x78>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <HAL_DAC_MspInit+0x78>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <HAL_DAC_MspInit+0x78>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = WHEEL_MOTOR_CURRENT_LIMIT_Pin;
 8001802:	2340      	movs	r3, #64	@ 0x40
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WHEEL_MOTOR_CURRENT_LIMIT_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001818:	f005 f860 	bl	80068dc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	@ 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	50000c00 	.word	0x50000c00
 8001828:	40021000 	.word	0x40021000

0800182c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <MX_DMA_Init+0x50>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001836:	4a11      	ldr	r2, [pc, #68]	@ (800187c <MX_DMA_Init+0x50>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6493      	str	r3, [r2, #72]	@ 0x48
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <MX_DMA_Init+0x50>)
 8001840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184a:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <MX_DMA_Init+0x50>)
 800184c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184e:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <MX_DMA_Init+0x50>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6493      	str	r3, [r2, #72]	@ 0x48
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <MX_DMA_Init+0x50>)
 8001858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	200b      	movs	r0, #11
 8001868:	f003 fd8d 	bl	8005386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800186c:	200b      	movs	r0, #11
 800186e:	f003 fda4 	bl	80053ba <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001886:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 8001888:	4a2e      	ldr	r2, [pc, #184]	@ (8001944 <MX_FDCAN1_Init+0xc4>)
 800188a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV8;
 800188c:	4b2c      	ldr	r3, [pc, #176]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 800188e:	2204      	movs	r2, #4
 8001890:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001892:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001898:	4b29      	ldr	r3, [pc, #164]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800189e:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80018a4:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80018aa:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80018b0:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80018b6:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 80018bc:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018be:	220f      	movs	r2, #15
 80018c0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80018c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018c4:	2204      	movs	r2, #4
 80018c6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018ca:	2202      	movs	r2, #2
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018d6:	220f      	movs	r2, #15
 80018d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80018da:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018dc:	2204      	movs	r2, #4
 80018de:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80018f2:	4813      	ldr	r0, [pc, #76]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 80018f4:	f004 fb24 	bl	8005f40 <HAL_FDCAN_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80018fe:	f000 fa7d 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  HAL_FDCAN_MspInit(&hfdcan1);
 8001902:	480f      	ldr	r0, [pc, #60]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 8001904:	f000 f820 	bl	8001948 <HAL_FDCAN_MspInit>

  FDCAN_FilterTypeDef sFilterConfig;

    /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001908:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800190c:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001912:	2302      	movs	r3, #2
 8001914:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001916:	2301      	movs	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x0;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x0;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	@ (8001940 <MX_FDCAN1_Init+0xc0>)
 8001928:	f004 fc64 	bl	80061f4 <HAL_FDCAN_ConfigFilter>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_FDCAN1_Init+0xb6>
    {
      Error_Handler();
 8001932:	f000 fa63 	bl	8001dfc <Error_Handler>
//    uint32_t b = HAL_FDCAN_GetError(&hfdcan1);
//
//    HAL_Delay(1);
  /* USER CODE END FDCAN1_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200004b4 	.word	0x200004b4
 8001944:	40006400 	.word	0x40006400

08001948 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b09e      	sub	sp, #120	@ 0x78
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	2254      	movs	r2, #84	@ 0x54
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f00a fd5d 	bl	800c428 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1f      	ldr	r2, [pc, #124]	@ (80019f0 <HAL_FDCAN_MspInit+0xa8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d137      	bne.n	80019e8 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800197e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001982:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4618      	mov	r0, r3
 800198a:	f005 ff4f 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001994:	f000 fa32 	bl	8001dfc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_FDCAN_MspInit+0xac>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <HAL_FDCAN_MspInit+0xac>)
 800199e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_FDCAN_MspInit+0xac>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b0:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <HAL_FDCAN_MspInit+0xac>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b4:	4a0f      	ldr	r2, [pc, #60]	@ (80019f4 <HAL_FDCAN_MspInit+0xac>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_FDCAN_MspInit+0xac>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019c8:	2303      	movs	r3, #3
 80019ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019d8:	2309      	movs	r3, #9
 80019da:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019e0:	4619      	mov	r1, r3
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <HAL_FDCAN_MspInit+0xb0>)
 80019e4:	f004 ff7a 	bl	80068dc <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80019e8:	bf00      	nop
 80019ea:	3778      	adds	r7, #120	@ 0x78
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40006400 	.word	0x40006400
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48000c00 	.word	0x48000c00

080019fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	4b7a      	ldr	r3, [pc, #488]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	4a79      	ldr	r2, [pc, #484]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1e:	4b77      	ldr	r3, [pc, #476]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2a:	4b74      	ldr	r3, [pc, #464]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	4a73      	ldr	r2, [pc, #460]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a36:	4b71      	ldr	r3, [pc, #452]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b6e      	ldr	r3, [pc, #440]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	4a6d      	ldr	r2, [pc, #436]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4e:	4b6b      	ldr	r3, [pc, #428]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b68      	ldr	r3, [pc, #416]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5e:	4a67      	ldr	r2, [pc, #412]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a66:	4b65      	ldr	r3, [pc, #404]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a72:	4b62      	ldr	r3, [pc, #392]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	4a61      	ldr	r2, [pc, #388]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a96:	4b59      	ldr	r3, [pc, #356]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa2:	4b56      	ldr	r3, [pc, #344]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4a55      	ldr	r2, [pc, #340]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4b53      	ldr	r3, [pc, #332]	@ (8001bfc <MX_GPIO_Init+0x200>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nAUX2_EN_Pin|LED_A_INT_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac4:	f005 f8a4 	bl	8006c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, nDEBUG_LED2_Pin|nDEBUG_LED1_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8001ace:	484c      	ldr	r0, [pc, #304]	@ (8001c00 <MX_GPIO_Init+0x204>)
 8001ad0:	f005 f89e 	bl	8006c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX2_OUTPUT_GPIO_Port, AUX2_OUTPUT_Pin, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ada:	484a      	ldr	r0, [pc, #296]	@ (8001c04 <MX_GPIO_Init+0x208>)
 8001adc:	f005 f898 	bl	8006c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCM_GYRO_SPI_GPIO_Port, nCS_MCM_GYRO_SPI_Pin, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	4848      	ldr	r0, [pc, #288]	@ (8001c08 <MX_GPIO_Init+0x20c>)
 8001ae6:	f005 f893 	bl	8006c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCM_KILL_Pin|CAN_EN_5V_Pin|nCAN_STBY_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001af0:	4845      	ldr	r0, [pc, #276]	@ (8001c08 <MX_GPIO_Init+0x20c>)
 8001af2:	f005 f88d 	bl	8006c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nWHEEL_MOTOR_SHDN_GPIO_Port, nWHEEL_MOTOR_SHDN_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2102      	movs	r1, #2
 8001afa:	4844      	ldr	r0, [pc, #272]	@ (8001c0c <MX_GPIO_Init+0x210>)
 8001afc:	f005 f888 	bl	8006c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nAUX2_EN_Pin|LED_A_INT_Pin;
 8001b00:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1c:	f004 fede 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = nDEBUG_LED2_Pin|nDEBUG_LED1_Pin;
 8001b20:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4831      	ldr	r0, [pc, #196]	@ (8001c00 <MX_GPIO_Init+0x204>)
 8001b3a:	f004 fecf 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRMC_CURRFAULT_Pin;
 8001b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nRMC_CURRFAULT_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	482f      	ldr	r0, [pc, #188]	@ (8001c10 <MX_GPIO_Init+0x214>)
 8001b54:	f004 fec2 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = V_3V3_DIAG_Pin|V_5V_DIAG_Pin|nLMC_CURRFAULT_Pin;
 8001b58:	f44f 7341 	mov.w	r3, #772	@ 0x304
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4825      	ldr	r0, [pc, #148]	@ (8001c04 <MX_GPIO_Init+0x208>)
 8001b6e:	f004 feb5 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX2_OUTPUT_Pin;
 8001b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUX2_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481e      	ldr	r0, [pc, #120]	@ (8001c04 <MX_GPIO_Init+0x208>)
 8001b8c:	f004 fea6 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4818      	ldr	r0, [pc, #96]	@ (8001c08 <MX_GPIO_Init+0x20c>)
 8001ba6:	f004 fe99 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_MCM_GYRO_SPI_Pin|MCM_KILL_Pin|CAN_EN_5V_Pin|nCAN_STBY_Pin;
 8001baa:	f240 3382 	movw	r3, #898	@ 0x382
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4811      	ldr	r0, [pc, #68]	@ (8001c08 <MX_GPIO_Init+0x20c>)
 8001bc4:	f004 fe8a 	bl	80068dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nWHEEL_MOTOR_SHDN_Pin;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nWHEEL_MOTOR_SHDN_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480b      	ldr	r0, [pc, #44]	@ (8001c0c <MX_GPIO_Init+0x210>)
 8001be0:	f004 fe7c 	bl	80068dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2101      	movs	r1, #1
 8001be8:	2006      	movs	r0, #6
 8001bea:	f003 fbcc 	bl	8005386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bee:	2006      	movs	r0, #6
 8001bf0:	f003 fbe3 	bl	80053ba <HAL_NVIC_EnableIRQ>

}
 8001bf4:	bf00      	nop
 8001bf6:	3730      	adds	r7, #48	@ 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48001400 	.word	0x48001400
 8001c04:	48000c00 	.word	0x48000c00
 8001c08:	48001800 	.word	0x48001800
 8001c0c:	48001000 	.word	0x48001000
 8001c10:	48000400 	.word	0x48000400

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b0e3      	sub	sp, #396	@ 0x18c
 8001c18:	af5e      	add	r7, sp, #376	@ 0x178
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1a:	f002 f946 	bl	8003eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1e:	f000 f871 	bl	8001d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c22:	f7ff feeb 	bl	80019fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001c26:	f7ff fe01 	bl	800182c <MX_DMA_Init>
  MX_ADC3_Init();
 8001c2a:	f7ff fa77 	bl	800111c <MX_ADC3_Init>
  MX_DAC2_Init();
 8001c2e:	f7ff fd85 	bl	800173c <MX_DAC2_Init>
  MX_USART2_UART_Init();
 8001c32:	f002 f835 	bl	8003ca0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001c36:	f001 faed 	bl	8003214 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001c3a:	f7ff f9f7 	bl	800102c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001c3e:	f001 fbff 	bl	8003440 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001c42:	f001 fdd3 	bl	80037ec <MX_TIM8_Init>
  MX_TIM2_Init();
 8001c46:	f001 fcc3 	bl	80035d0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001c4a:	f001 fd47 	bl	80036dc <MX_TIM5_Init>
  MX_FDCAN1_Init();
 8001c4e:	f7ff fe17 	bl	8001880 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(nCAN_STBY_GPIO_Port, nCAN_STBY_Pin, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c58:	4823      	ldr	r0, [pc, #140]	@ (8001ce8 <main+0xd4>)
 8001c5a:	f004 ffd9 	bl	8006c10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_EN_5V_GPIO_Port, CAN_EN_5V_Pin, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c64:	4820      	ldr	r0, [pc, #128]	@ (8001ce8 <main+0xd4>)
 8001c66:	f004 ffd3 	bl	8006c10 <HAL_GPIO_WritePin>

  IMU_Init(&imu);
 8001c6a:	4820      	ldr	r0, [pc, #128]	@ (8001cec <main+0xd8>)
 8001c6c:	f7ff f8d6 	bl	8000e1c <IMU_Init>
  RobotSystem_Init(&robot, leftWheel, rightWheel);
 8001c70:	4c1f      	ldr	r4, [pc, #124]	@ (8001cf0 <main+0xdc>)
 8001c72:	4a20      	ldr	r2, [pc, #128]	@ (8001cf4 <main+0xe0>)
 8001c74:	ab2e      	add	r3, sp, #184	@ 0xb8
 8001c76:	4611      	mov	r1, r2
 8001c78:	22c0      	movs	r2, #192	@ 0xc0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00a fc00 	bl	800c480 <memcpy>
 8001c80:	4668      	mov	r0, sp
 8001c82:	f104 0308 	add.w	r3, r4, #8
 8001c86:	22b8      	movs	r2, #184	@ 0xb8
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f00a fbf9 	bl	800c480 <memcpy>
 8001c8e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001c92:	4819      	ldr	r0, [pc, #100]	@ (8001cf8 <main+0xe4>)
 8001c94:	f001 f8f8 	bl	8002e88 <RobotSystem_Init>
  Comm_Init(&serial, COMM_UART, &huart2);
 8001c98:	4a18      	ldr	r2, [pc, #96]	@ (8001cfc <main+0xe8>)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4818      	ldr	r0, [pc, #96]	@ (8001d00 <main+0xec>)
 8001c9e:	f7fe fea7 	bl	80009f0 <Comm_Init>
  //Comm_Init(&canbus, COMM_CAN, &hfdcan1);
  HAL_Delay(250);
 8001ca2:	20fa      	movs	r0, #250	@ 0xfa
 8001ca4:	f002 f972 	bl	8003f8c <HAL_Delay>
  DecodedPacket_t readyPacket = {
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	819a      	strh	r2, [r3, #12]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	803b      	strh	r3, [r7, #0]
		  .command = COMMAND_READY,
		  .length = 0,
		  .invalid = false
  };
  Comm_Send(&serial, &readyPacket);
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4810      	ldr	r0, [pc, #64]	@ (8001d00 <main+0xec>)
 8001cbe:	f7fe fefd 	bl	8000abc <Comm_Send>



  readyPacket.length = 2;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	72bb      	strb	r3, [r7, #10]
  readyPacket.data[0] = 0xAA;
 8001cc6:	23aa      	movs	r3, #170	@ 0xaa
 8001cc8:	70bb      	strb	r3, [r7, #2]
  readyPacket.data[1] = 0xCC;
 8001cca:	23cc      	movs	r3, #204	@ 0xcc
 8001ccc:	70fb      	strb	r3, [r7, #3]


  while (1)
  {

	  Comm_Process(&serial);
 8001cce:	480c      	ldr	r0, [pc, #48]	@ (8001d00 <main+0xec>)
 8001cd0:	f7fe ff20 	bl	8000b14 <Comm_Process>
	  RobotSystem_Calculate(&robot);
 8001cd4:	4808      	ldr	r0, [pc, #32]	@ (8001cf8 <main+0xe4>)
 8001cd6:	f001 f9ad 	bl	8003034 <RobotSystem_Calculate>

	  CommandHandler_ProcessCommand(&serial, &robot);
 8001cda:	4907      	ldr	r1, [pc, #28]	@ (8001cf8 <main+0xe4>)
 8001cdc:	4808      	ldr	r0, [pc, #32]	@ (8001d00 <main+0xec>)
 8001cde:	f7ff fbef 	bl	80014c0 <CommandHandler_ProcessCommand>
	  Comm_Process(&serial);
 8001ce2:	bf00      	nop
 8001ce4:	e7f3      	b.n	8001cce <main+0xba>
 8001ce6:	bf00      	nop
 8001ce8:	48001800 	.word	0x48001800
 8001cec:	20000050 	.word	0x20000050
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	20000208 	.word	0x20000208
 8001cf8:	20000070 	.word	0x20000070
 8001cfc:	200007a4 	.word	0x200007a4
 8001d00:	20000518 	.word	0x20000518

08001d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b094      	sub	sp, #80	@ 0x50
 8001d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	2238      	movs	r2, #56	@ 0x38
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f00a fb88 	bl	800c428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f004 ffa2 	bl	8006c70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d36:	2340      	movs	r3, #64	@ 0x40
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001d46:	2314      	movs	r3, #20
 8001d48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 f83c 	bl	8006dd8 <HAL_RCC_OscConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d66:	f000 f849 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2104      	movs	r1, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f005 fb3a 	bl	80073fc <HAL_RCC_ClockConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d8e:	f000 f835 	bl	8001dfc <Error_Handler>
  }
}
 8001d92:	bf00      	nop
 8001d94:	3750      	adds	r7, #80	@ 0x50
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	RobotSystem_InterruptHandler(&robot, htim);
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <HAL_TIM_IC_CaptureCallback+0x18>)
 8001da8:	f001 f958 	bl	800305c <RobotSystem_InterruptHandler>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000070 	.word	0x20000070

08001db8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
	IMU_InterruptHandler(&imu, GPIO_Pin);
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001dc8:	f7ff f91c 	bl	8001004 <IMU_InterruptHandler>

}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000050 	.word	0x20000050

08001dd8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
	Comm_Receive(&serial, 0, size);
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	461a      	mov	r2, r3
 8001de8:	2100      	movs	r1, #0
 8001dea:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <HAL_UARTEx_RxEventCallback+0x20>)
 8001dec:	f7fe fe7f 	bl	8000aee <Comm_Receive>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000518 	.word	0x20000518

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <Error_Handler+0x8>

08001e08 <Motor_Init>:
 */

#include "motor_control.h"

// Initialize a motor
void Motor_Init(Motor *motor) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    // Example: Initialize GPIOs or timers for the motor
	motor->pid.hallCount = 0;
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	motor->pid.lastHallCount = 0;
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	motor->pid.set_speed = 0;
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	motor->pid.integral = 0;
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	motor->pid.previousFilter = 0;
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	motor->pid.lastUpdateTime = 0;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	motor->pid.lastPwmVal = 0;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	motor->pid.lastHallTime = 0;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->pid.totalHallTime = 0;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	675a      	str	r2, [r3, #116]	@ 0x74
	motor->pid.pwmVal = 0;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	motor->pid.filterGain = DER_FILTER_GAIN;
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	motor->pid.maxIntegral = MAX_INTEGRAL_VAL;
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	motor->isFault = false;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor->faultRecovery = false;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43


	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall1_Channel);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f006 ff6e 	bl	8008da0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall2_Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	885b      	ldrh	r3, [r3, #2]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f006 ff66 	bl	8008da0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall3_Channel);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	889b      	ldrh	r3, [r3, #4]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f006 ff5e 	bl	8008da0 <HAL_TIM_IC_Start_IT>

	Motor_Stop(motor);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f960 	bl	80021aa <Motor_Stop>
	ReadHallSensors(motor);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 feb1 	bl	8002c52 <ReadHallSensors>
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <Motor_SetSpeed>:

// Set the speed of a motor
void Motor_SetSpeed(Motor *motor, int64_t target_speed) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	e9c7 2300 	strd	r2, r3, [r7]

	if (target_speed == motor->target_speed) return;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f0e:	4299      	cmp	r1, r3
 8001f10:	bf08      	it	eq
 8001f12:	4290      	cmpeq	r0, r2
 8001f14:	d036      	beq.n	8001f84 <Motor_SetSpeed+0x8c>

	if (target_speed > MAX_MOTOR_SPEED) target_speed = MAX_MOTOR_SPEED;
 8001f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f1a:	f641 7141 	movw	r1, #8001	@ 0x1f41
 8001f1e:	428a      	cmp	r2, r1
 8001f20:	f173 0300 	sbcs.w	r3, r3, #0
 8001f24:	db05      	blt.n	8001f32 <Motor_SetSpeed+0x3a>
 8001f26:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed < -MAX_MOTOR_SPEED) target_speed = -MAX_MOTOR_SPEED;
 8001f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f36:	f512 5ffa 	cmn.w	r2, #8000	@ 0x1f40
 8001f3a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001f3e:	da04      	bge.n	8001f4a <Motor_SetSpeed+0x52>
 8001f40:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <Motor_SetSpeed+0x94>)
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed > -MIN_MOTOR_SPEED && target_speed < MIN_MOTOR_SPEED)
 8001f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f4e:	4910      	ldr	r1, [pc, #64]	@ (8001f90 <Motor_SetSpeed+0x98>)
 8001f50:	428a      	cmp	r2, r1
 8001f52:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001f56:	db0c      	blt.n	8001f72 <Motor_SetSpeed+0x7a>
 8001f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f5c:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001f60:	f173 0300 	sbcs.w	r3, r3, #0
 8001f64:	da05      	bge.n	8001f72 <Motor_SetSpeed+0x7a>
			target_speed = 0;
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9c7 2300 	strd	r2, r3, [r7]

	//motor->pid.integral = 0;
	//motor->pid.previousError = 0;

	motor->target_speed = target_speed;
 8001f72:	68f9      	ldr	r1, [r7, #12]
 8001f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f78:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	Motor_Calculate(motor);
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f935 	bl	80021ec <Motor_Calculate>
 8001f82:	e000      	b.n	8001f86 <Motor_SetSpeed+0x8e>
	if (target_speed == motor->target_speed) return;
 8001f84:	bf00      	nop
}
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	ffffe0c0 	.word	0xffffe0c0
 8001f90:	fffffc19 	.word	0xfffffc19

08001f94 <Motor_SetPwm>:


void Motor_SetPwm(Motor *motor, int16_t duty_cycle) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]

	if(duty_cycle > PWM_MAX_VAL) duty_cycle = PWM_MAX_VAL;
 8001fa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fa8:	dd03      	ble.n	8001fb2 <Motor_SetPwm+0x1e>
 8001faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	e005      	b.n	8001fbe <Motor_SetPwm+0x2a>
	else if(duty_cycle < 0) duty_cycle = 0;
 8001fb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da01      	bge.n	8001fbe <Motor_SetPwm+0x2a>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	807b      	strh	r3, [r7, #2]

	motor->pid.pwmVal = duty_cycle;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_A_IDX], motor->pid.pwmVal);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <Motor_SetPwm+0x4a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fdc:	e03b      	b.n	8002056 <Motor_SetPwm+0xc2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d108      	bne.n	8001ff8 <Motor_SetPwm+0x64>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ff6:	e02e      	b.n	8002056 <Motor_SetPwm+0xc2>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d108      	bne.n	8002012 <Motor_SetPwm+0x7e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	460b      	mov	r3, r1
 800200e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002010:	e021      	b.n	8002056 <Motor_SetPwm+0xc2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d108      	bne.n	800202c <Motor_SetPwm+0x98>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	460b      	mov	r3, r1
 8002028:	6413      	str	r3, [r2, #64]	@ 0x40
 800202a:	e014      	b.n	8002056 <Motor_SetPwm+0xc2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002030:	2b10      	cmp	r3, #16
 8002032:	d108      	bne.n	8002046 <Motor_SetPwm+0xb2>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	460b      	mov	r3, r1
 8002042:	6493      	str	r3, [r2, #72]	@ 0x48
 8002044:	e007      	b.n	8002056 <Motor_SetPwm+0xc2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	460b      	mov	r3, r1
 8002054:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_B_IDX], motor->pid.pwmVal);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <Motor_SetPwm+0xda>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34
 800206c:	e03b      	b.n	80020e6 <Motor_SetPwm+0x152>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002072:	2b04      	cmp	r3, #4
 8002074:	d108      	bne.n	8002088 <Motor_SetPwm+0xf4>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	460b      	mov	r3, r1
 8002084:	6393      	str	r3, [r2, #56]	@ 0x38
 8002086:	e02e      	b.n	80020e6 <Motor_SetPwm+0x152>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800208c:	2b08      	cmp	r3, #8
 800208e:	d108      	bne.n	80020a2 <Motor_SetPwm+0x10e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	460b      	mov	r3, r1
 800209e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80020a0:	e021      	b.n	80020e6 <Motor_SetPwm+0x152>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d108      	bne.n	80020bc <Motor_SetPwm+0x128>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	460b      	mov	r3, r1
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	e014      	b.n	80020e6 <Motor_SetPwm+0x152>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d108      	bne.n	80020d6 <Motor_SetPwm+0x142>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	460b      	mov	r3, r1
 80020d2:	6493      	str	r3, [r2, #72]	@ 0x48
 80020d4:	e007      	b.n	80020e6 <Motor_SetPwm+0x152>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	460b      	mov	r3, r1
 80020e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_C_IDX], motor->pid.pwmVal);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d107      	bne.n	80020fe <Motor_SetPwm+0x16a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80020fc:	e03b      	b.n	8002176 <Motor_SetPwm+0x1e2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002102:	2b04      	cmp	r3, #4
 8002104:	d108      	bne.n	8002118 <Motor_SetPwm+0x184>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	460b      	mov	r3, r1
 8002114:	6393      	str	r3, [r2, #56]	@ 0x38
 8002116:	e02e      	b.n	8002176 <Motor_SetPwm+0x1e2>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800211c:	2b08      	cmp	r3, #8
 800211e:	d108      	bne.n	8002132 <Motor_SetPwm+0x19e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	460b      	mov	r3, r1
 800212e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002130:	e021      	b.n	8002176 <Motor_SetPwm+0x1e2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d108      	bne.n	800214c <Motor_SetPwm+0x1b8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	460b      	mov	r3, r1
 8002148:	6413      	str	r3, [r2, #64]	@ 0x40
 800214a:	e014      	b.n	8002176 <Motor_SetPwm+0x1e2>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002150:	2b10      	cmp	r3, #16
 8002152:	d108      	bne.n	8002166 <Motor_SetPwm+0x1d2>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	460b      	mov	r3, r1
 8002162:	6493      	str	r3, [r2, #72]	@ 0x48
 8002164:	e007      	b.n	8002176 <Motor_SetPwm+0x1e2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	460b      	mov	r3, r1
 8002174:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if(motor->pid.lastPwmVal == 0 && motor->pid.lastPwmVal != motor->pid.pwmVal)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <Motor_SetPwm+0x202>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	@ 0x82
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 800218c:	429a      	cmp	r2, r3
 800218e:	d002      	beq.n	8002196 <Motor_SetPwm+0x202>
		Motor_Update(motor);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fc43 	bl	8002a1c <Motor_Update>
	motor->pid.lastPwmVal = motor->pid.pwmVal;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <Motor_Stop>:

// Stop a motor
void Motor_Stop(Motor *motor) {
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
    // Set speed to zero to stop the motor
    Motor_SetSpeed(motor, 0);
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fe9c 	bl	8001ef8 <Motor_SetSpeed>
    SetPhase(motor, PHASE_A_IDX, false, false);
 80021c0:	2300      	movs	r3, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fcee 	bl	8002ba8 <SetPhase>
    SetPhase(motor, PHASE_B_IDX, false, false);
 80021cc:	2300      	movs	r3, #0
 80021ce:	2200      	movs	r2, #0
 80021d0:	2101      	movs	r1, #1
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fce8 	bl	8002ba8 <SetPhase>
    SetPhase(motor, PHASE_C_IDX, false, false);
 80021d8:	2300      	movs	r3, #0
 80021da:	2200      	movs	r2, #0
 80021dc:	2102      	movs	r1, #2
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fce2 	bl	8002ba8 <SetPhase>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <Motor_Calculate>:

void Motor_Calculate(Motor *motor) {
 80021ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f0:	b0d7      	sub	sp, #348	@ 0x15c
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
	uint32_t currentTime = HAL_GetTick(); // Get the current time in milliseconds
 80021f8:	f001 febc 	bl	8003f74 <HAL_GetTick>
 80021fc:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
	if(Motor_GetFaultStatus(motor)) {
 8002200:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002204:	f000 fe08 	bl	8002e18 <Motor_GetFaultStatus>

	}
	// Update PID every certain time cycle
	if ((currentTime - motor->pid.lastUpdateTime) >= PID_CALC_TIMING) {
 8002208:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800220c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	2b13      	cmp	r3, #19
 8002218:	f240 83f5 	bls.w	8002a06 <Motor_Calculate+0x81a>

		if(motor->faultRecovery) {
 800221c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002220:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <Motor_Calculate+0x46>
			Motor_CurrFaultHandler(motor);
 8002228:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800222c:	f000 fe19 	bl	8002e62 <Motor_CurrFaultHandler>
			return;
 8002230:	e3e9      	b.n	8002a06 <Motor_Calculate+0x81a>
		}
		CalculateDistance(motor);
 8002232:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002236:	f000 fd99 	bl	8002d6c <CalculateDistance>
		if(motor->pid.set_speed > motor->target_speed) {
 800223a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800223e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002242:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002246:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800224a:	4282      	cmp	r2, r0
 800224c:	418b      	sbcs	r3, r1
 800224e:	da78      	bge.n	8002342 <Motor_Calculate+0x156>
			if(motor->pid.set_speed > 0 && motor->pid.set_speed - motor->acceleration < 0 && motor->target_speed < 0) {
 8002250:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002254:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002258:	2a01      	cmp	r2, #1
 800225a:	f173 0300 	sbcs.w	r3, r3, #0
 800225e:	db35      	blt.n	80022cc <Motor_Calculate+0xe0>
 8002260:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002264:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002268:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800226c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002270:	1a84      	subs	r4, r0, r2
 8002272:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8002276:	eb61 0303 	sbc.w	r3, r1, r3
 800227a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800227e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002282:	2b00      	cmp	r3, #0
 8002284:	da22      	bge.n	80022cc <Motor_Calculate+0xe0>
 8002286:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800228a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	da1c      	bge.n	80022cc <Motor_Calculate+0xe0>
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 8002292:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002296:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800229a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800229e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80022a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022a6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80022aa:	eb10 0802 	adds.w	r8, r0, r2
 80022ae:	eb41 0903 	adc.w	r9, r1, r3
 80022b2:	45a0      	cmp	r8, r4
 80022b4:	eb79 0305 	sbcs.w	r3, r9, r5
 80022b8:	db3a      	blt.n	8002330 <Motor_Calculate+0x144>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 80022ba:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 80022ca:	e031      	b.n	8002330 <Motor_Calculate+0x144>
				}
			}
			else if(motor->pid.set_speed - motor->acceleration <= motor->target_speed) {
 80022cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022d0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80022d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022d8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80022dc:	ebb0 0a02 	subs.w	sl, r0, r2
 80022e0:	eb61 0b03 	sbc.w	fp, r1, r3
 80022e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022e8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80022ec:	4552      	cmp	r2, sl
 80022ee:	eb73 030b 	sbcs.w	r3, r3, fp
 80022f2:	db08      	blt.n	8002306 <Motor_Calculate+0x11a>
				motor->pid.set_speed = motor->target_speed;
 80022f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022f8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80022fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002300:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8002304:	e014      	b.n	8002330 <Motor_Calculate+0x144>
			}
			else {
				motor->pid.set_speed -= motor->acceleration;
 8002306:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800230a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800230e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002312:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002316:	1a84      	subs	r4, r0, r2
 8002318:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 800231c:	eb61 0303 	sbc.w	r3, r1, r3
 8002320:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002324:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002328:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800232c:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 8002330:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 8002340:	e08d      	b.n	800245e <Motor_Calculate+0x272>
		} else if(motor->pid.set_speed < motor->target_speed) {
 8002342:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002346:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800234a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800234e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002352:	4290      	cmp	r0, r2
 8002354:	eb71 0303 	sbcs.w	r3, r1, r3
 8002358:	f280 8081 	bge.w	800245e <Motor_Calculate+0x272>
			if(motor->pid.set_speed < 0 && motor->pid.set_speed + motor->acceleration > 0 && motor->target_speed > 0) {
 800235c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002360:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002364:	2b00      	cmp	r3, #0
 8002366:	da3a      	bge.n	80023de <Motor_Calculate+0x1f2>
 8002368:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800236c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002370:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002374:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002378:	1884      	adds	r4, r0, r2
 800237a:	eb41 0503 	adc.w	r5, r1, r3
 800237e:	2c01      	cmp	r4, #1
 8002380:	f175 0300 	sbcs.w	r3, r5, #0
 8002384:	db2b      	blt.n	80023de <Motor_Calculate+0x1f2>
 8002386:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800238a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800238e:	2a01      	cmp	r2, #1
 8002390:	f173 0300 	sbcs.w	r3, r3, #0
 8002394:	db23      	blt.n	80023de <Motor_Calculate+0x1f2>
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 8002396:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800239a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800239e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023a2:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80023a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023aa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80023ae:	1a86      	subs	r6, r0, r2
 80023b0:	f8c7 60e0 	str.w	r6, [r7, #224]	@ 0xe0
 80023b4:	eb61 0303 	sbc.w	r3, r1, r3
 80023b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80023c0:	460b      	mov	r3, r1
 80023c2:	429c      	cmp	r4, r3
 80023c4:	4613      	mov	r3, r2
 80023c6:	eb75 0303 	sbcs.w	r3, r5, r3
 80023ca:	db40      	blt.n	800244e <Motor_Calculate+0x262>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 80023cc:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 80023dc:	e037      	b.n	800244e <Motor_Calculate+0x262>
				}
			}
			else if(motor->pid.set_speed + motor->acceleration >= motor->target_speed) {
 80023de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023e2:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80023e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023ea:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80023ee:	1884      	adds	r4, r0, r2
 80023f0:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 80023f4:	eb41 0303 	adc.w	r3, r1, r3
 80023f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80023fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002400:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002404:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002408:	4621      	mov	r1, r4
 800240a:	4291      	cmp	r1, r2
 800240c:	4629      	mov	r1, r5
 800240e:	4199      	sbcs	r1, r3
 8002410:	db08      	blt.n	8002424 <Motor_Calculate+0x238>
				motor->pid.set_speed = motor->target_speed;
 8002412:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002416:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800241a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800241e:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8002422:	e014      	b.n	800244e <Motor_Calculate+0x262>
			}
			else {
				motor->pid.set_speed += motor->acceleration;
 8002424:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002428:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800242c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002430:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002434:	1884      	adds	r4, r0, r2
 8002436:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 800243a:	eb41 0303 	adc.w	r3, r1, r3
 800243e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002442:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002446:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800244a:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 800244e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		}

		//set motor direction based the sign of the set_speed variable
		if(motor->pid.set_speed < 0) {
 800245e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002462:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002466:	2b00      	cmp	r3, #0
 8002468:	da05      	bge.n	8002476 <Motor_Calculate+0x28a>
			motor->direction = false;
 800246a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800246e:	2300      	movs	r3, #0
 8002470:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
 8002474:	e004      	b.n	8002480 <Motor_Calculate+0x294>
		}
		else
		{
			motor->direction = true;
 8002476:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800247a:	2301      	movs	r3, #1
 800247c:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
		}

		// Calculate current speed
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 8002480:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002484:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8002488:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800248c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002490:	1a84      	subs	r4, r0, r2
 8002492:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002496:	eb61 0303 	sbc.w	r3, r1, r3
 800249a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				* ( 1000 * 1000 * 60 / ((int64_t)motor->pid.totalHallTime))/SPEED_CALC_HALL_TO_REV; // speed in counts per minute
 800249e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024aa:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024ae:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80024b2:	4822      	ldr	r0, [pc, #136]	@ (800253c <Motor_Calculate+0x350>)
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	f7fd feae 	bl	8000218 <__aeabi_ldivmod>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80024c4:	4629      	mov	r1, r5
 80024c6:	fb02 f001 	mul.w	r0, r2, r1
 80024ca:	4621      	mov	r1, r4
 80024cc:	fb01 f103 	mul.w	r1, r1, r3
 80024d0:	4401      	add	r1, r0
 80024d2:	4620      	mov	r0, r4
 80024d4:	fba0 2302 	umull	r2, r3, r0, r2
 80024d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80024dc:	4613      	mov	r3, r2
 80024de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80024e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80024e6:	18cb      	adds	r3, r1, r3
 80024e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80024ec:	f04f 0207 	mov.w	r2, #7
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80024f8:	f7fd fe8e 	bl	8000218 <__aeabi_ldivmod>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 8002504:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002508:	e9c3 0114 	strd	r0, r1, [r3, #80]	@ 0x50

		motor->pid.totalHallTime = 0;
 800250c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002510:	2300      	movs	r3, #0
 8002512:	6753      	str	r3, [r2, #116]	@ 0x74
		motor->pid.lastHallCount = motor->pid.hallCount;
 8002514:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002518:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800251c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002520:	e9c3 011a 	strd	r0, r1, [r3, #104]	@ 0x68

		//do no calculations if speed is set to 0
		if(motor->pid.set_speed == 0) {
 8002524:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002528:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800252c:	4313      	orrs	r3, r2
 800252e:	d107      	bne.n	8002540 <Motor_Calculate+0x354>
			Motor_SetPwm(motor,0);
 8002530:	2100      	movs	r1, #0
 8002532:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002536:	f7ff fd2d 	bl	8001f94 <Motor_SetPwm>
			return;
 800253a:	e264      	b.n	8002a06 <Motor_Calculate+0x81a>
 800253c:	03938700 	.word	0x03938700
		}

		// Calculate error
		int64_t error = (motor->pid.set_speed - motor->current_speed);
 8002540:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002544:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002548:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800254c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002550:	1a84      	subs	r4, r0, r2
 8002552:	653c      	str	r4, [r7, #80]	@ 0x50
 8002554:	eb61 0303 	sbc.w	r3, r1, r3
 8002558:	657b      	str	r3, [r7, #84]	@ 0x54
 800255a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800255e:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		// PID calculations
		motor->pid.integral += error * PID_CALC_TIMING/1000; // Integral term, scaled for 50ms
 8002562:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002566:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	@ 0x88
 800256a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800256e:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f7fd fe4f 	bl	8000218 <__aeabi_ldivmod>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	18a1      	adds	r1, r4, r2
 8002580:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8002584:	eb45 0303 	adc.w	r3, r5, r3
 8002588:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800258c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002590:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002594:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//clamp integral term to avoid integral windup
		if(motor->pid.integral > motor->pid.maxIntegral) motor->pid.integral = motor->pid.maxIntegral;
 8002598:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800259c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80025a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025a4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80025a8:	4282      	cmp	r2, r0
 80025aa:	418b      	sbcs	r3, r1
 80025ac:	da07      	bge.n	80025be <Motor_Calculate+0x3d2>
 80025ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025b2:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 80025b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025ba:	e9c3 0122 	strd	r0, r1, [r3, #136]	@ 0x88
		if(motor->pid.integral < -1*motor->pid.maxIntegral) motor->pid.integral = -1*motor->pid.maxIntegral;
 80025be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025c2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80025c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025ca:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80025ce:	2400      	movs	r4, #0
 80025d0:	4255      	negs	r5, r2
 80025d2:	f8c7 50b0 	str.w	r5, [r7, #176]	@ 0xb0
 80025d6:	eb64 0303 	sbc.w	r3, r4, r3
 80025da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025de:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80025e2:	4623      	mov	r3, r4
 80025e4:	4298      	cmp	r0, r3
 80025e6:	462b      	mov	r3, r5
 80025e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80025ec:	da11      	bge.n	8002612 <Motor_Calculate+0x426>
 80025ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025f2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80025f6:	2100      	movs	r1, #0
 80025f8:	4250      	negs	r0, r2
 80025fa:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 80025fe:	eb61 0303 	sbc.w	r3, r1, r3
 8002602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002606:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800260a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800260e:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//use derivitave filter to calculate derivative term
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 8002612:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002616:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800261a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800261e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8002622:	fb02 f501 	mul.w	r5, r2, r1
 8002626:	fb00 f403 	mul.w	r4, r0, r3
 800262a:	442c      	add	r4, r5
 800262c:	fba0 2302 	umull	r2, r3, r0, r2
 8002630:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002634:	4613      	mov	r3, r2
 8002636:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800263a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800263e:	18e3      	adds	r3, r4, r3
 8002640:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002644:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8002650:	f7fd fde2 	bl	8000218 <__aeabi_ldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4614      	mov	r4, r2
 800265a:	461d      	mov	r5, r3
								+ (100-motor->pid.filterGain)*(error - motor->pid.previousError)/100;
 800265c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002660:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8002664:	2100      	movs	r1, #0
 8002666:	f1d2 0064 	rsbs	r0, r2, #100	@ 0x64
 800266a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 800266e:	eb61 0303 	sbc.w	r3, r1, r3
 8002672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002676:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800267a:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 800267e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8002682:	1a16      	subs	r6, r2, r0
 8002684:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 8002688:	eb63 0301 	sbc.w	r3, r3, r1
 800268c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002690:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002694:	464b      	mov	r3, r9
 8002696:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800269a:	4652      	mov	r2, sl
 800269c:	fb02 f203 	mul.w	r2, r2, r3
 80026a0:	465b      	mov	r3, fp
 80026a2:	4641      	mov	r1, r8
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	4642      	mov	r2, r8
 80026ac:	4651      	mov	r1, sl
 80026ae:	fba2 1201 	umull	r1, r2, r2, r1
 80026b2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80026b6:	460a      	mov	r2, r1
 80026b8:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 80026bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80026c0:	4413      	add	r3, r2
 80026c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80026c6:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80026d2:	f7fd fda1 	bl	8000218 <__aeabi_ldivmod>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 80026da:	18a1      	adds	r1, r4, r2
 80026dc:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026de:	eb45 0303 	adc.w	r3, r5, r3
 80026e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80026e8:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

		int64_t derivative = (currentFilter) * 1000/PID_CALC_TIMING; // Derivative term
 80026ec:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	1894      	adds	r4, r2, r2
 80026f6:	643c      	str	r4, [r7, #64]	@ 0x40
 80026f8:	415b      	adcs	r3, r3
 80026fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80026fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002700:	1814      	adds	r4, r2, r0
 8002702:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002704:	414b      	adcs	r3, r1
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 8002714:	4634      	mov	r4, r6
 8002716:	00e3      	lsls	r3, r4, #3
 8002718:	462c      	mov	r4, r5
 800271a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800271e:	462c      	mov	r4, r5
 8002720:	00e2      	lsls	r2, r4, #3
 8002722:	4614      	mov	r4, r2
 8002724:	461d      	mov	r5, r3
 8002726:	4623      	mov	r3, r4
 8002728:	181b      	adds	r3, r3, r0
 800272a:	633b      	str	r3, [r7, #48]	@ 0x30
 800272c:	462b      	mov	r3, r5
 800272e:	eb41 0303 	adc.w	r3, r1, r3
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
 8002734:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002738:	460b      	mov	r3, r1
 800273a:	18db      	adds	r3, r3, r3
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800273e:	4613      	mov	r3, r2
 8002740:	eb42 0303 	adc.w	r3, r2, r3
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002746:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800274a:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		motor->pid.previousFilter = currentFilter;
 800274e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8002752:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002756:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		motor->pid.previousError = error;
 800275a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800275e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8002762:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		// Compute the new PWM value using the PID formula
		int64_t output = motor->pid.Kp * error + motor->pid.Ki * motor->pid.integral + motor->pid.Kd * derivative;
 8002766:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800276a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800276e:	17da      	asrs	r2, r3, #31
 8002770:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002774:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002778:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800277c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002780:	462a      	mov	r2, r5
 8002782:	fb02 f203 	mul.w	r2, r2, r3
 8002786:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800278a:	4621      	mov	r1, r4
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	441a      	add	r2, r3
 8002792:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002796:	4621      	mov	r1, r4
 8002798:	fba3 1301 	umull	r1, r3, r3, r1
 800279c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027a0:	460b      	mov	r3, r1
 80027a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027b8:	17da      	asrs	r2, r3, #31
 80027ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027be:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027c6:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80027ca:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80027ce:	4629      	mov	r1, r5
 80027d0:	fb02 f001 	mul.w	r0, r2, r1
 80027d4:	4621      	mov	r1, r4
 80027d6:	fb01 f103 	mul.w	r1, r1, r3
 80027da:	4401      	add	r1, r0
 80027dc:	4620      	mov	r0, r4
 80027de:	fba0 2302 	umull	r2, r3, r0, r2
 80027e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80027e6:	4613      	mov	r3, r2
 80027e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80027ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027f0:	18cb      	adds	r3, r1, r3
 80027f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80027f6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80027fa:	4623      	mov	r3, r4
 80027fc:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8002800:	4602      	mov	r2, r0
 8002802:	189b      	adds	r3, r3, r2
 8002804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002808:	460b      	mov	r3, r1
 800280a:	462a      	mov	r2, r5
 800280c:	eb42 0303 	adc.w	r3, r2, r3
 8002810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002814:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002818:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800281c:	17da      	asrs	r2, r3, #31
 800281e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002820:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002822:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002826:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800282a:	462a      	mov	r2, r5
 800282c:	fb02 f203 	mul.w	r2, r2, r3
 8002830:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002834:	4621      	mov	r1, r4
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	441a      	add	r2, r3
 800283c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002840:	4621      	mov	r1, r4
 8002842:	fba3 1301 	umull	r1, r3, r3, r1
 8002846:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800284a:	460b      	mov	r3, r1
 800284c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002854:	18d3      	adds	r3, r2, r3
 8002856:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800285a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800285e:	4623      	mov	r3, r4
 8002860:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002864:	4602      	mov	r2, r0
 8002866:	189b      	adds	r3, r3, r2
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	460b      	mov	r3, r1
 800286c:	462a      	mov	r2, r5
 800286e:	eb42 0303 	adc.w	r3, r2, r3
 8002872:	627b      	str	r3, [r7, #36]	@ 0x24
 8002874:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002878:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150

		// Clamp the output to the valid PWM range
		if(motor->pid.set_speed > 0) {
 800287c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002880:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002884:	2a01      	cmp	r2, #1
 8002886:	f173 0300 	sbcs.w	r3, r3, #0
 800288a:	db16      	blt.n	80028ba <Motor_Calculate+0x6ce>
			if (output > OUTPUT_MAX_VAL) output = OUTPUT_MAX_VAL;
 800288c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002890:	495f      	ldr	r1, [pc, #380]	@ (8002a10 <Motor_Calculate+0x824>)
 8002892:	428a      	cmp	r2, r1
 8002894:	f173 0300 	sbcs.w	r3, r3, #0
 8002898:	db04      	blt.n	80028a4 <Motor_Calculate+0x6b8>
 800289a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a14 <Motor_Calculate+0x828>)
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output < 0) output = 0;
 80028a4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	da37      	bge.n	800291c <Motor_Calculate+0x730>
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 80028b8:	e030      	b.n	800291c <Motor_Calculate+0x730>
		}
		else if(motor->pid.set_speed < 0) {
 80028ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028be:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	da24      	bge.n	8002910 <Motor_Calculate+0x724>
			if (output < -OUTPUT_MAX_VAL) output = -OUTPUT_MAX_VAL;
 80028c6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80028ca:	4953      	ldr	r1, [pc, #332]	@ (8002a18 <Motor_Calculate+0x82c>)
 80028cc:	428a      	cmp	r2, r1
 80028ce:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80028d2:	da04      	bge.n	80028de <Motor_Calculate+0x6f2>
 80028d4:	4a50      	ldr	r2, [pc, #320]	@ (8002a18 <Motor_Calculate+0x82c>)
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output > 0) output = 0;
 80028de:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80028e2:	2a01      	cmp	r2, #1
 80028e4:	f173 0300 	sbcs.w	r3, r3, #0
 80028e8:	db05      	blt.n	80028f6 <Motor_Calculate+0x70a>
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			output*=-1;
 80028f6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80028fa:	2100      	movs	r1, #0
 80028fc:	4250      	negs	r0, r2
 80028fe:	61b8      	str	r0, [r7, #24]
 8002900:	eb61 0303 	sbc.w	r3, r1, r3
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800290a:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 800290e:	e005      	b.n	800291c <Motor_Calculate+0x730>
		}
		else {
			output = 0;
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		}

		//shift the output itself to avoid the deadband range of the motor.
		//output is also divided by a factor to allow for more granular kp, ki, and kd values
		output = output/OUTPUT_TO_PWM_MULT + PWM_MIN_VAL;
 800291c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8002920:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	f7fd fc76 	bl	8000218 <__aeabi_ldivmod>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	f112 01af 	adds.w	r1, r2, #175	@ 0xaf
 8002934:	6139      	str	r1, [r7, #16]
 8002936:	f143 0300 	adc.w	r3, r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002940:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(output - motor->pid.pwmVal > PWM_MAX_CHANGE) output = motor->pid.pwmVal + PWM_MAX_CHANGE;
 8002944:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002948:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 800294c:	b21b      	sxth	r3, r3
 800294e:	17da      	asrs	r2, r3, #31
 8002950:	673b      	str	r3, [r7, #112]	@ 0x70
 8002952:	677a      	str	r2, [r7, #116]	@ 0x74
 8002954:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002958:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800295c:	4621      	mov	r1, r4
 800295e:	1a51      	subs	r1, r2, r1
 8002960:	66b9      	str	r1, [r7, #104]	@ 0x68
 8002962:	4629      	mov	r1, r5
 8002964:	eb63 0301 	sbc.w	r3, r3, r1
 8002968:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800296a:	f240 3321 	movw	r3, #801	@ 0x321
 800296e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002972:	4602      	mov	r2, r0
 8002974:	429a      	cmp	r2, r3
 8002976:	460b      	mov	r3, r1
 8002978:	f173 0300 	sbcs.w	r3, r3, #0
 800297c:	db0c      	blt.n	8002998 <Motor_Calculate+0x7ac>
 800297e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002982:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002986:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800298a:	17da      	asrs	r2, r3, #31
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	60fa      	str	r2, [r7, #12]
 8002990:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002994:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(motor->pid.pwmVal - output > PWM_MAX_CHANGE) output = motor->pid.pwmVal - PWM_MAX_CHANGE;
 8002998:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800299c:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80029a0:	b21b      	sxth	r3, r3
 80029a2:	17da      	asrs	r2, r3, #31
 80029a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80029a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80029a8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80029ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029b0:	4621      	mov	r1, r4
 80029b2:	1a89      	subs	r1, r1, r2
 80029b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029b6:	4629      	mov	r1, r5
 80029b8:	eb61 0303 	sbc.w	r3, r1, r3
 80029bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029be:	f240 3321 	movw	r3, #801	@ 0x321
 80029c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80029c6:	4602      	mov	r2, r0
 80029c8:	429a      	cmp	r2, r3
 80029ca:	460b      	mov	r3, r1
 80029cc:	f173 0300 	sbcs.w	r3, r3, #0
 80029d0:	db0c      	blt.n	80029ec <Motor_Calculate+0x800>
 80029d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029d6:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80029da:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80029de:	17da      	asrs	r2, r3, #31
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80029e8:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		// Apply the PWM value
		Motor_SetPwm(motor, (int16_t)output);
 80029ec:	f9b7 3150 	ldrsh.w	r3, [r7, #336]	@ 0x150
 80029f0:	4619      	mov	r1, r3
 80029f2:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80029f6:	f7ff facd 	bl	8001f94 <Motor_SetPwm>

		// Update the last update time
		motor->pid.lastUpdateTime = currentTime;
 80029fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029fe:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
}
 8002a06:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a10:	000c96a9 	.word	0x000c96a9
 8002a14:	000c96a8 	.word	0x000c96a8
 8002a18:	fff36958 	.word	0xfff36958

08002a1c <Motor_Update>:

// Update the motor state (optional, e.g., for monitoring or control logic)
void Motor_Update(Motor *motor) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

	CalculateHallTiming(motor);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f944 	bl	8002cb2 <CalculateHallTiming>

	ReadHallSensors(motor);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f911 	bl	8002c52 <ReadHallSensors>

	bool direction = motor->isDirInverted ? !motor->direction : motor->direction;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00e      	beq.n	8002a58 <Motor_Update+0x3c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f083 0301 	eor.w	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e007      	b.n	8002a68 <Motor_Update+0x4c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	73fb      	strb	r3, [r7, #15]

	if(motor->hallState == motor->commutationOrder[0]) {
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d106      	bne.n	8002a88 <Motor_Update+0x6c>
		SetPhases(motor, PHASE_A_IDX, PHASE_C_IDX, direction);
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	2100      	movs	r1, #0
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f84f 	bl	8002b24 <SetPhases>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
	}
	else if(motor->hallState == motor->commutationOrder[5]) {
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
	}
}
 8002a86:	e049      	b.n	8002b1c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[1]) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d106      	bne.n	8002aa6 <Motor_Update+0x8a>
		SetPhases(motor, PHASE_A_IDX, PHASE_B_IDX, direction);
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f840 	bl	8002b24 <SetPhases>
}
 8002aa4:	e03a      	b.n	8002b1c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[2]) {
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d106      	bne.n	8002ac4 <Motor_Update+0xa8>
		SetPhases(motor, PHASE_C_IDX, PHASE_B_IDX, direction);
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2102      	movs	r1, #2
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f831 	bl	8002b24 <SetPhases>
}
 8002ac2:	e02b      	b.n	8002b1c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[3]) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d106      	bne.n	8002ae2 <Motor_Update+0xc6>
		SetPhases(motor, PHASE_C_IDX, PHASE_A_IDX, direction);
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2102      	movs	r1, #2
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f822 	bl	8002b24 <SetPhases>
}
 8002ae0:	e01c      	b.n	8002b1c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[4]) {
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d106      	bne.n	8002b00 <Motor_Update+0xe4>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2101      	movs	r1, #1
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f813 	bl	8002b24 <SetPhases>
}
 8002afe:	e00d      	b.n	8002b1c <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[5]) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d105      	bne.n	8002b1c <Motor_Update+0x100>
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2202      	movs	r2, #2
 8002b14:	2101      	movs	r1, #1
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f804 	bl	8002b24 <SetPhases>
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <SetPhases>:

void SetPhases(Motor *motor, uint8_t highPhase, uint8_t lowPhase, bool direction) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	70fb      	strb	r3, [r7, #3]
 8002b36:	460b      	mov	r3, r1
 8002b38:	70bb      	strb	r3, [r7, #2]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	707b      	strb	r3, [r7, #1]
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d82b      	bhi.n	8002b9c <SetPhases+0x78>
 8002b44:	78bb      	ldrb	r3, [r7, #2]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d828      	bhi.n	8002b9c <SetPhases+0x78>
	if(highPhase == lowPhase) return;
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	78bb      	ldrb	r3, [r7, #2]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d026      	beq.n	8002ba0 <SetPhases+0x7c>

	uint8_t extraPhase = PHASE_A_IDX + PHASE_B_IDX + PHASE_C_IDX - highPhase - lowPhase;
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	78bb      	ldrb	r3, [r7, #2]
 8002b56:	4413      	add	r3, r2
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f1c3 0303 	rsb	r3, r3, #3
 8002b5e:	73fb      	strb	r3, [r7, #15]

	SetPhase(motor, extraPhase, false, false);
 8002b60:	7bf9      	ldrb	r1, [r7, #15]
 8002b62:	2300      	movs	r3, #0
 8002b64:	2200      	movs	r2, #0
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f81e 	bl	8002ba8 <SetPhase>

	SetPhase(motor, highPhase, true, direction);
 8002b6c:	787b      	ldrb	r3, [r7, #1]
 8002b6e:	78f9      	ldrb	r1, [r7, #3]
 8002b70:	2201      	movs	r2, #1
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f818 	bl	8002ba8 <SetPhase>
	SetPhase(motor, lowPhase, true, !direction);
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f083 0301 	eor.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	78b9      	ldrb	r1, [r7, #2]
 8002b92:	2201      	movs	r2, #1
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f807 	bl	8002ba8 <SetPhase>
 8002b9a:	e002      	b.n	8002ba2 <SetPhases+0x7e>
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8002b9c:	bf00      	nop
 8002b9e:	e000      	b.n	8002ba2 <SetPhases+0x7e>
	if(highPhase == lowPhase) return;
 8002ba0:	bf00      	nop

}
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <SetPhase>:

void SetPhase(Motor *motor, uint8_t phase,  bool OnorOff, bool HighOrLow) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	70fb      	strb	r3, [r7, #3]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70bb      	strb	r3, [r7, #2]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	707b      	strb	r3, [r7, #1]
	if(OnorOff) {
 8002bc2:	78bb      	ldrb	r3, [r7, #2]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02c      	beq.n	8002c22 <SetPhase+0x7a>
		if(HighOrLow) {
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <SetPhase+0x50>
			HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3218      	adds	r2, #24
 8002bd8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f007 fd3d 	bl	800a65c <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(motor->Timer, motor->phaseChannel[phase]);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3218      	adds	r2, #24
 8002bec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f005 fec5 	bl	8008980 <HAL_TIM_PWM_Start>
		}
	} else {
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
	}
}
 8002bf6:	e028      	b.n	8002c4a <SetPhase+0xa2>
			HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3218      	adds	r2, #24
 8002c02:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c06:	4619      	mov	r1, r3
 8002c08:	f005 ffcc 	bl	8008ba4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(motor->Timer, motor->phaseChannel[phase]);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3218      	adds	r2, #24
 8002c16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f007 fc5c 	bl	800a4d8 <HAL_TIMEx_PWMN_Start>
}
 8002c20:	e013      	b.n	8002c4a <SetPhase+0xa2>
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3218      	adds	r2, #24
 8002c2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c30:	4619      	mov	r1, r3
 8002c32:	f005 ffb7 	bl	8008ba4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3218      	adds	r2, #24
 8002c40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f007 fd09 	bl	800a65c <HAL_TIMEx_PWMN_Stop>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <ReadHallSensors>:

void ReadHallSensors(Motor *motor) {
 8002c52:	b590      	push	{r4, r7, lr}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8a9b      	ldrh	r3, [r3, #20]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f003 ffbb 	bl	8006be0 <HAL_GPIO_ReadPin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall2_Port, motor->Hall2_Pin)) << 1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8b9b      	ldrh	r3, [r3, #28]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f003 ffb1 	bl	8006be0 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	4323      	orrs	r3, r4
 8002c86:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall3_Port, motor->Hall3_Pin) << 2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f003 ffa4 	bl	8006be0 <HAL_GPIO_ReadPin>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	b2da      	uxtb	r2, r3
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd90      	pop	{r4, r7, pc}

08002cb2 <CalculateHallTiming>:


void CalculateHallTiming(Motor *motor) {
 8002cb2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	uint32_t currentMicroTime = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]

	if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	7f1b      	ldrb	r3, [r3, #28]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d109      	bne.n	8002cde <CalculateHallTiming+0x2c>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall1_Channel);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f006 fdc9 	bl	800986c <HAL_TIM_ReadCapturedValue>
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	e01c      	b.n	8002d18 <CalculateHallTiming+0x66>
	} else if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	7f1b      	ldrb	r3, [r3, #28]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d109      	bne.n	8002cfc <CalculateHallTiming+0x4a>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall2_Channel);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	885b      	ldrh	r3, [r3, #2]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f006 fdba 	bl	800986c <HAL_TIM_ReadCapturedValue>
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	e00d      	b.n	8002d18 <CalculateHallTiming+0x66>
	} else if (motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	7f1b      	ldrb	r3, [r3, #28]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d108      	bne.n	8002d18 <CalculateHallTiming+0x66>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall3_Channel);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	889b      	ldrh	r3, [r3, #4]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f006 fdab 	bl	800986c <HAL_TIM_ReadCapturedValue>
 8002d16:	60f8      	str	r0, [r7, #12]
	}

	motor->pid.totalHallTime += currentMicroTime - motor->pid.lastHallTime;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	1acb      	subs	r3, r1, r3
 8002d24:	441a      	add	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	675a      	str	r2, [r3, #116]	@ 0x74

	motor->pid.lastHallTime = currentMicroTime;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	671a      	str	r2, [r3, #112]	@ 0x70

	if(motor->direction) motor->pid.hallCount++;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <CalculateHallTiming+0x9e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002d40:	f112 0801 	adds.w	r8, r2, #1
 8002d44:	f143 0900 	adc.w	r9, r3, #0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	e9c3 8918 	strd	r8, r9, [r3, #96]	@ 0x60
	else motor->pid.hallCount--;
}
 8002d4e:	e008      	b.n	8002d62 <CalculateHallTiming+0xb0>
	else motor->pid.hallCount--;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002d56:	1e54      	subs	r4, r2, #1
 8002d58:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	e9c3 4518 	strd	r4, r5, [r3, #96]	@ 0x60
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002d6c <CalculateDistance>:

void CalculateDistance(Motor *motor) {
 8002d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
	motor->distance = (int16_t)(motor->pid.hallCount * RPM_INPUT_DIVISOR / HALL_TICKS_PER_REV);
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	e9d1 4518 	ldrd	r4, r5, [r1, #96]	@ 0x60
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	1806      	adds	r6, r0, r0
 8002d82:	603e      	str	r6, [r7, #0]
 8002d84:	4149      	adcs	r1, r1
 8002d86:	6079      	str	r1, [r7, #4]
 8002d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d8c:	1902      	adds	r2, r0, r4
 8002d8e:	eb41 0305 	adc.w	r3, r1, r5
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	0159      	lsls	r1, r3, #5
 8002d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da0:	0150      	lsls	r0, r2, #5
 8002da2:	eb12 0800 	adds.w	r8, r2, r0
 8002da6:	eb43 0901 	adc.w	r9, r3, r1
 8002daa:	eb18 0a04 	adds.w	sl, r8, r4
 8002dae:	eb49 0b05 	adc.w	fp, r9, r5
 8002db2:	f44f 7246 	mov.w	r2, #792	@ 0x318
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	4650      	mov	r0, sl
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	f7fd fa2b 	bl	8000218 <__aeabi_ldivmod>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	b212      	sxth	r2, r2
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	87da      	strh	r2, [r3, #62]	@ 0x3e
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002dd6 <Motor_GetDistance>:

void Motor_GetDistance(Motor *motor, int16_t *distance) {
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
	*distance = motor->distance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	801a      	strh	r2, [r3, #0]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <Motor_GetSpeed>:

void Motor_GetSpeed(Motor *motor, int16_t *speed) {
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
	*speed = motor->current_speed;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002e06:	b212      	sxth	r2, r2
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	801a      	strh	r2, [r3, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <Motor_GetFaultStatus>:

bool Motor_GetFaultStatus(Motor *motor) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	motor->isFault = !HAL_GPIO_ReadPin(motor->Fault_Port, motor->Fault_Pin);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	899b      	ldrh	r3, [r3, #12]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f003 fed8 	bl	8006be0 <HAL_GPIO_ReadPin>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	if(motor->isFault) motor->faultRecovery = true;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <Motor_GetFaultStatus+0x3c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return motor->isFault;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <Motor_CurrFaultHandler>:

void Motor_CurrFaultHandler(Motor *motor) {
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
	if(motor->faultRecovery) {
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <Motor_CurrFaultHandler+0x1a>
		//do some stuff. right now. going to just reset and continue normally.
		motor->faultRecovery = false;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <RobotSystem_Init>:

#include "robot_system.h"

// Initialize the robot system with configurations for the left and right motors

void RobotSystem_Init(RobotSystem *robotSystem, Motor leftMotorConfig, Motor rightMotorConfig) {
 8002e88:	b082      	sub	sp, #8
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	f107 0110 	add.w	r1, r7, #16
 8002e96:	e881 000c 	stmia.w	r1, {r2, r3}
    // Copy configurations into the robot system
    robotSystem->leftWheel = leftMotorConfig;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f107 0310 	add.w	r3, r7, #16
 8002ea2:	22c0      	movs	r2, #192	@ 0xc0
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f009 faeb 	bl	800c480 <memcpy>
    robotSystem->rightWheel = rightMotorConfig;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	33c0      	adds	r3, #192	@ 0xc0
 8002eae:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8002eb2:	22c0      	movs	r2, #192	@ 0xc0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f009 fae3 	bl	800c480 <memcpy>

    HAL_DAC_Start(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f002 fab3 	bl	8005434 <HAL_DAC_Start>

    RobotSystem_SetCurrentLimit(robotSystem, MAX_CURRENT_LIMIT);
 8002ece:	2105      	movs	r1, #5
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f927 	bl	8003124 <RobotSystem_SetCurrentLimit>

    // Initialize the left and right motors
    Motor_Init(&robotSystem->leftWheel);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe ff95 	bl	8001e08 <Motor_Init>
    Motor_Init(&robotSystem->rightWheel);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	33c0      	adds	r3, #192	@ 0xc0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe ff90 	bl	8001e08 <Motor_Init>

    RobotSystem_Enable(robotSystem);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f8d4 	bl	8003096 <RobotSystem_Enable>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ef8:	b002      	add	sp, #8
 8002efa:	4770      	bx	lr

08002efc <RobotSystem_SetSpeed>:

// Set the speeds of the left and right motors
void RobotSystem_SetSpeed(RobotSystem *robotSystem, int16_t leftSpeed, int16_t rightSpeed) {
 8002efc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	807b      	strh	r3, [r7, #2]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	803b      	strh	r3, [r7, #0]
	if(robotSystem->motorsEnabled) {
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d017      	beq.n	8002f48 <RobotSystem_SetSpeed+0x4c>
		Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f1e:	17da      	asrs	r2, r3, #31
 8002f20:	4698      	mov	r8, r3
 8002f22:	4691      	mov	r9, r2
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	4608      	mov	r0, r1
 8002f2a:	f7fe ffe5 	bl	8001ef8 <Motor_SetSpeed>
		Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002f34:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f38:	17da      	asrs	r2, r3, #31
 8002f3a:	461c      	mov	r4, r3
 8002f3c:	4615      	mov	r5, r2
 8002f3e:	4622      	mov	r2, r4
 8002f40:	462b      	mov	r3, r5
 8002f42:	4608      	mov	r0, r1
 8002f44:	f7fe ffd8 	bl	8001ef8 <Motor_SetSpeed>
	}
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002f52 <RobotSystem_SetLeftSpeed>:

void RobotSystem_SetLeftSpeed(RobotSystem *robotSystem, int16_t leftSpeed) {
 8002f52:	b5b0      	push	{r4, r5, r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]
	if(robotSystem->motorsEnabled) {
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <RobotSystem_SetLeftSpeed+0x2c>
		Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f6e:	17da      	asrs	r2, r3, #31
 8002f70:	461c      	mov	r4, r3
 8002f72:	4615      	mov	r5, r2
 8002f74:	4622      	mov	r2, r4
 8002f76:	462b      	mov	r3, r5
 8002f78:	4608      	mov	r0, r1
 8002f7a:	f7fe ffbd 	bl	8001ef8 <Motor_SetSpeed>
	}
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bdb0      	pop	{r4, r5, r7, pc}

08002f86 <RobotSystem_SetRightSpeed>:

void RobotSystem_SetRightSpeed(RobotSystem *robotSystem, int16_t rightSpeed) {
 8002f86:	b5b0      	push	{r4, r5, r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	807b      	strh	r3, [r7, #2]
	if(robotSystem->motorsEnabled) {
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00c      	beq.n	8002fb6 <RobotSystem_SetRightSpeed+0x30>
		Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002fa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fa6:	17da      	asrs	r2, r3, #31
 8002fa8:	461c      	mov	r4, r3
 8002faa:	4615      	mov	r5, r2
 8002fac:	4622      	mov	r2, r4
 8002fae:	462b      	mov	r3, r5
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	f7fe ffa1 	bl	8001ef8 <Motor_SetSpeed>
	}
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bdb0      	pop	{r4, r5, r7, pc}

08002fbe <RobotSystem_Stop>:

// Stop both motors in the robot system
void RobotSystem_Stop(RobotSystem *robotSystem) {
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
    Motor_Stop(&robotSystem->leftWheel);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f8ee 	bl	80021aa <Motor_Stop>
    Motor_Stop(&robotSystem->rightWheel);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	33c0      	adds	r3, #192	@ 0xc0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff f8e9 	bl	80021aa <Motor_Stop>
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <RobotSystem_GetMotorPosition>:

void RobotSystem_GetMotorPosition(RobotSystem *robotSystem, int16_t *leftPos, int16_t *rightPos) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
	Motor_GetDistance(&robotSystem->leftWheel, leftPos);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fef0 	bl	8002dd6 <Motor_GetDistance>
	Motor_GetDistance(&robotSystem->rightWheel, rightPos);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	33c0      	adds	r3, #192	@ 0xc0
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff feea 	bl	8002dd6 <Motor_GetDistance>
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <RobotSystem_GetMotorSpeed>:

void RobotSystem_GetMotorSpeed(RobotSystem *robotSystem, int16_t *leftSpeed, int16_t *rightSpeed) {
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
	Motor_GetSpeed(&robotSystem->leftWheel, leftSpeed);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff feeb 	bl	8002df6 <Motor_GetSpeed>
	Motor_GetSpeed(&robotSystem->rightWheel, rightSpeed);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	33c0      	adds	r3, #192	@ 0xc0
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fee5 	bl	8002df6 <Motor_GetSpeed>
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <RobotSystem_Calculate>:

void RobotSystem_Calculate(RobotSystem *robotSystem) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	Motor_Calculate(&robotSystem->leftWheel);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f8d4 	bl	80021ec <Motor_Calculate>
	Motor_Calculate(&robotSystem->rightWheel);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	33c0      	adds	r3, #192	@ 0xc0
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f8cf 	bl	80021ec <Motor_Calculate>
	RobotSystem_WheelFaultHandler(robotSystem);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f8a4 	bl	800319c <RobotSystem_WheelFaultHandler>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <RobotSystem_InterruptHandler>:

void RobotSystem_InterruptHandler(RobotSystem *robotSystem, TIM_HandleTypeDef *htim) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
	if (htim == robotSystem->leftWheel.HallTimer) {
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d103      	bne.n	8003078 <RobotSystem_InterruptHandler+0x1c>
		Motor_Update(&robotSystem->leftWheel);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fcd2 	bl	8002a1c <Motor_Update>
	}

	if (htim == robotSystem->rightWheel.HallTimer) {
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d104      	bne.n	800308e <RobotSystem_InterruptHandler+0x32>
		Motor_Update(&robotSystem->rightWheel);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	33c0      	adds	r3, #192	@ 0xc0
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fcc7 	bl	8002a1c <Motor_Update>
	}
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <RobotSystem_Enable>:

void RobotSystem_Enable (RobotSystem *robotSystem) {
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
	robotSystem->motorsEnabled = true;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	RobotSystem_SetEnablePin(robotSystem, true);
 80030a6:	2101      	movs	r1, #1
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f81d 	bl	80030e8 <RobotSystem_SetEnablePin>
	HAL_Delay(20);
 80030ae:	2014      	movs	r0, #20
 80030b0:	f000 ff6c 	bl	8003f8c <HAL_Delay>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <RobotSystem_Disable>:

void RobotSystem_Disable (RobotSystem *robotSystem) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	robotSystem->motorsEnabled = false;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	RobotSystem_Stop(robotSystem);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff76 	bl	8002fbe <RobotSystem_Stop>
	RobotSystem_SetEnablePin(robotSystem, false);
 80030d2:	2100      	movs	r1, #0
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f807 	bl	80030e8 <RobotSystem_SetEnablePin>

	HAL_Delay(20);
 80030da:	2014      	movs	r0, #20
 80030dc:	f000 ff56 	bl	8003f8c <HAL_Delay>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <RobotSystem_SetEnablePin>:

void RobotSystem_SetEnablePin(RobotSystem *robotSystem, bool onOrOff) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
	bool setValue = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
	if(onOrOff) setValue = true;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <RobotSystem_SetEnablePin+0x1c>
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e001      	b.n	8003108 <RobotSystem_SetEnablePin+0x20>
	else setValue = false;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(robotSystem->Enable_Port, robotSystem->Enable_Pin, setValue);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	4619      	mov	r1, r3
 8003118:	f003 fd7a 	bl	8006c10 <HAL_GPIO_WritePin>
	//__HAL_TIM_SET_COMPARE(robotSystem->FaultTimer, TIM_CHANNEL_1, setValue);
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <RobotSystem_SetCurrentLimit>:

void RobotSystem_SetCurrentLimit(RobotSystem *robotSystem, uint16_t currentLimit) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
	if(currentLimit > MAX_CURRENT_LIMIT) {
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	2b05      	cmp	r3, #5
 8003134:	d901      	bls.n	800313a <RobotSystem_SetCurrentLimit+0x16>
		currentLimit = MAX_CURRENT_LIMIT;
 8003136:	2305      	movs	r3, #5
 8003138:	807b      	strh	r3, [r7, #2]
	}
	robotSystem->currentLimit = currentLimit;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	887a      	ldrh	r2, [r7, #2]
 800313e:	f8a3 218e 	strh.w	r2, [r3, #398]	@ 0x18e

	uint32_t voltage = currentLimit * SHUNT_RESISTOR * RESISTORS / RESISTOR2;
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	f245 32fc 	movw	r2, #21500	@ 0x53fc
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <RobotSystem_SetCurrentLimit+0x70>)
 800314e:	fb82 1203 	smull	r1, r2, r2, r3
 8003152:	10d2      	asrs	r2, r2, #3
 8003154:	17db      	asrs	r3, r3, #31
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	60fb      	str	r3, [r7, #12]
	uint32_t dac_value = 4095 * voltage / 3300; // Convert voltage to digital value
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	031b      	lsls	r3, r3, #12
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	4a0c      	ldr	r2, [pc, #48]	@ (8003198 <RobotSystem_SetCurrentLimit+0x74>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel, DAC_ALIGN_12B_R, dac_value);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 0188 	ldr.w	r0, [r3, #392]	@ 0x188
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 800317a:	4619      	mov	r1, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2200      	movs	r2, #0
 8003180:	f002 f9c4 	bl	800550c <HAL_DAC_SetValue>
	HAL_Delay(25);
 8003184:	2019      	movs	r0, #25
 8003186:	f000 ff01 	bl	8003f8c <HAL_Delay>
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	1b4e81b5 	.word	0x1b4e81b5
 8003198:	09ee009f 	.word	0x09ee009f

0800319c <RobotSystem_WheelFaultHandler>:

void RobotSystem_WheelFaultHandler(RobotSystem *robotSystem) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	if(Motor_GetFaultStatus(&robotSystem->leftWheel)) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fe36 	bl	8002e18 <Motor_GetFaultStatus>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <RobotSystem_WheelFaultHandler+0x1c>
		RobotSystem_ResetEnablePin(robotSystem);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f80f 	bl	80031d6 <RobotSystem_ResetEnablePin>
		//RobotSystem_SetLeftSpeed(robotSystem, 0);
	}

	if(Motor_GetFaultStatus(&robotSystem->rightWheel)) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	33c0      	adds	r3, #192	@ 0xc0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fe2b 	bl	8002e18 <Motor_GetFaultStatus>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <RobotSystem_WheelFaultHandler+0x32>
		RobotSystem_ResetEnablePin(robotSystem);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f804 	bl	80031d6 <RobotSystem_ResetEnablePin>
		//RobotSystem_SetRightSpeed(robotSystem, 0);
	}
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <RobotSystem_ResetEnablePin>:

void RobotSystem_ResetEnablePin(RobotSystem *robotSystem) {
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
	if(robotSystem->motorsEnabled) {
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d010      	beq.n	800320a <RobotSystem_ResetEnablePin+0x34>
		RobotSystem_SetEnablePin(robotSystem, false);
 80031e8:	2100      	movs	r1, #0
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff7c 	bl	80030e8 <RobotSystem_SetEnablePin>

		for(uint16_t i = 0; i < 10; i++) {
 80031f0:	2300      	movs	r3, #0
 80031f2:	81fb      	strh	r3, [r7, #14]
 80031f4:	e002      	b.n	80031fc <RobotSystem_ResetEnablePin+0x26>
 80031f6:	89fb      	ldrh	r3, [r7, #14]
 80031f8:	3301      	adds	r3, #1
 80031fa:	81fb      	strh	r3, [r7, #14]
 80031fc:	89fb      	ldrh	r3, [r7, #14]
 80031fe:	2b09      	cmp	r3, #9
 8003200:	d9f9      	bls.n	80031f6 <RobotSystem_ResetEnablePin+0x20>

		}
		// Optional: Stop the timer if you want to halt further operation
		RobotSystem_SetEnablePin(robotSystem, true);
 8003202:	2101      	movs	r1, #1
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff6f 	bl	80030e8 <RobotSystem_SetEnablePin>
	}
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003218:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <MX_SPI1_Init+0x74>)
 800321a:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <MX_SPI1_Init+0x78>)
 800321c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800321e:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003220:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003226:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800322c:	4b16      	ldr	r3, [pc, #88]	@ (8003288 <MX_SPI1_Init+0x74>)
 800322e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003232:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003234:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800323a:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <MX_SPI1_Init+0x74>)
 800323c:	2200      	movs	r2, #0
 800323e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003246:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003248:	4b0f      	ldr	r3, [pc, #60]	@ (8003288 <MX_SPI1_Init+0x74>)
 800324a:	2218      	movs	r2, #24
 800324c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800324e:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003250:	2200      	movs	r2, #0
 8003252:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003254:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003256:	2200      	movs	r2, #0
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800325a:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <MX_SPI1_Init+0x74>)
 800325c:	2200      	movs	r2, #0
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003262:	2207      	movs	r2, #7
 8003264:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003266:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <MX_SPI1_Init+0x74>)
 800326e:	2208      	movs	r2, #8
 8003270:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003272:	4805      	ldr	r0, [pc, #20]	@ (8003288 <MX_SPI1_Init+0x74>)
 8003274:	f004 fd28 	bl	8007cc8 <HAL_SPI_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800327e:	f7fe fdbd 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000610 	.word	0x20000610
 800328c:	40013000 	.word	0x40013000

08003290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	@ 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a17      	ldr	r2, [pc, #92]	@ (800330c <HAL_SPI_MspInit+0x7c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d127      	bne.n	8003302 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032b2:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <HAL_SPI_MspInit+0x80>)
 80032b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b6:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <HAL_SPI_MspInit+0x80>)
 80032b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80032be:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <HAL_SPI_MspInit+0x80>)
 80032c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ca:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <HAL_SPI_MspInit+0x80>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ce:	4a10      	ldr	r2, [pc, #64]	@ (8003310 <HAL_SPI_MspInit+0x80>)
 80032d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <HAL_SPI_MspInit+0x80>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80032e2:	231c      	movs	r3, #28
 80032e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032f2:	2305      	movs	r3, #5
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032f6:	f107 0314 	add.w	r3, r7, #20
 80032fa:	4619      	mov	r1, r3
 80032fc:	4805      	ldr	r0, [pc, #20]	@ (8003314 <HAL_SPI_MspInit+0x84>)
 80032fe:	f003 faed 	bl	80068dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003302:	bf00      	nop
 8003304:	3728      	adds	r7, #40	@ 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40013000 	.word	0x40013000
 8003310:	40021000 	.word	0x40021000
 8003314:	48001800 	.word	0x48001800

08003318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	4b0f      	ldr	r3, [pc, #60]	@ (800335c <HAL_MspInit+0x44>)
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	4a0e      	ldr	r2, [pc, #56]	@ (800335c <HAL_MspInit+0x44>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6613      	str	r3, [r2, #96]	@ 0x60
 800332a:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <HAL_MspInit+0x44>)
 800332c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_MspInit+0x44>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	4a08      	ldr	r2, [pc, #32]	@ (800335c <HAL_MspInit+0x44>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003340:	6593      	str	r3, [r2, #88]	@ 0x58
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_MspInit+0x44>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800334e:	f003 fd33 	bl	8006db8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <NMI_Handler+0x4>

08003368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <HardFault_Handler+0x4>

08003370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <MemManage_Handler+0x4>

08003378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <BusFault_Handler+0x4>

08003380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <UsageFault_Handler+0x4>

08003388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b6:	f000 fdcb 	bl	8003f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}

080033be <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f003 fc3c 	bl	8006c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}

080033cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80033d0:	4802      	ldr	r0, [pc, #8]	@ (80033dc <DMA1_Channel1_IRQHandler+0x10>)
 80033d2:	f002 fc66 	bl	8005ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000838 	.word	0x20000838

080033e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033e4:	4802      	ldr	r0, [pc, #8]	@ (80033f0 <TIM2_IRQHandler+0x10>)
 80033e6:	f005 fe2b 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200006c0 	.word	0x200006c0

080033f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033f8:	4802      	ldr	r0, [pc, #8]	@ (8003404 <USART2_IRQHandler+0x10>)
 80033fa:	f007 fc01 	bl	800ac00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200007a4 	.word	0x200007a4

08003408 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800340c:	4802      	ldr	r0, [pc, #8]	@ (8003418 <TIM5_IRQHandler+0x10>)
 800340e:	f005 fe17 	bl	8009040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000070c 	.word	0x2000070c

0800341c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003420:	4b06      	ldr	r3, [pc, #24]	@ (800343c <SystemInit+0x20>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	4a05      	ldr	r2, [pc, #20]	@ (800343c <SystemInit+0x20>)
 8003428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800342c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b09c      	sub	sp, #112	@ 0x70
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003446:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003454:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003460:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
 8003470:	615a      	str	r2, [r3, #20]
 8003472:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	2234      	movs	r2, #52	@ 0x34
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f008 ffd4 	bl	800c428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003480:	4b51      	ldr	r3, [pc, #324]	@ (80035c8 <MX_TIM1_Init+0x188>)
 8003482:	4a52      	ldr	r2, [pc, #328]	@ (80035cc <MX_TIM1_Init+0x18c>)
 8003484:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8003486:	4b50      	ldr	r3, [pc, #320]	@ (80035c8 <MX_TIM1_Init+0x188>)
 8003488:	2210      	movs	r2, #16
 800348a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348c:	4b4e      	ldr	r3, [pc, #312]	@ (80035c8 <MX_TIM1_Init+0x188>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8003492:	4b4d      	ldr	r3, [pc, #308]	@ (80035c8 <MX_TIM1_Init+0x188>)
 8003494:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003498:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800349a:	4b4b      	ldr	r3, [pc, #300]	@ (80035c8 <MX_TIM1_Init+0x188>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034a0:	4b49      	ldr	r3, [pc, #292]	@ (80035c8 <MX_TIM1_Init+0x188>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a6:	4b48      	ldr	r3, [pc, #288]	@ (80035c8 <MX_TIM1_Init+0x188>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034ac:	4846      	ldr	r0, [pc, #280]	@ (80035c8 <MX_TIM1_Init+0x188>)
 80034ae:	f005 f9af 	bl	8008810 <HAL_TIM_Base_Init>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80034b8:	f7fe fca0 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80034c6:	4619      	mov	r1, r3
 80034c8:	483f      	ldr	r0, [pc, #252]	@ (80035c8 <MX_TIM1_Init+0x188>)
 80034ca:	f006 f8b9 	bl	8009640 <HAL_TIM_ConfigClockSource>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80034d4:	f7fe fc92 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034d8:	483b      	ldr	r0, [pc, #236]	@ (80035c8 <MX_TIM1_Init+0x188>)
 80034da:	f005 f9f0 	bl	80088be <HAL_TIM_PWM_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80034e4:	f7fe fc8a 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e8:	2300      	movs	r3, #0
 80034ea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80034ec:	2300      	movs	r3, #0
 80034ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034f8:	4619      	mov	r1, r3
 80034fa:	4833      	ldr	r0, [pc, #204]	@ (80035c8 <MX_TIM1_Init+0x188>)
 80034fc:	f007 f90c 	bl	800a718 <HAL_TIMEx_MasterConfigSynchronization>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003506:	f7fe fc79 	bl	8001dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800350a:	2360      	movs	r3, #96	@ 0x60
 800350c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003512:	2300      	movs	r3, #0
 8003514:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003516:	2300      	movs	r3, #0
 8003518:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003526:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800352a:	2200      	movs	r2, #0
 800352c:	4619      	mov	r1, r3
 800352e:	4826      	ldr	r0, [pc, #152]	@ (80035c8 <MX_TIM1_Init+0x188>)
 8003530:	f005 ff72 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800353a:	f7fe fc5f 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800353e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003542:	2204      	movs	r2, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4820      	ldr	r0, [pc, #128]	@ (80035c8 <MX_TIM1_Init+0x188>)
 8003548:	f005 ff66 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003552:	f7fe fc53 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003556:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800355a:	2208      	movs	r2, #8
 800355c:	4619      	mov	r1, r3
 800355e:	481a      	ldr	r0, [pc, #104]	@ (80035c8 <MX_TIM1_Init+0x188>)
 8003560:	f005 ff5a 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800356a:	f7fe fc47 	bl	8001dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003582:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003586:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003594:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800359e:	2300      	movs	r3, #0
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4807      	ldr	r0, [pc, #28]	@ (80035c8 <MX_TIM1_Init+0x188>)
 80035ac:	f007 f94a 	bl	800a844 <HAL_TIMEx_ConfigBreakDeadTime>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80035b6:	f7fe fc21 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80035ba:	4803      	ldr	r0, [pc, #12]	@ (80035c8 <MX_TIM1_Init+0x188>)
 80035bc:	f000 fa8a 	bl	8003ad4 <HAL_TIM_MspPostInit>

}
 80035c0:	bf00      	nop
 80035c2:	3770      	adds	r7, #112	@ 0x70
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000674 	.word	0x20000674
 80035cc:	40012c00 	.word	0x40012c00

080035d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	@ 0x30
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035d6:	f107 0320 	add.w	r3, r7, #32
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035fc:	4b36      	ldr	r3, [pc, #216]	@ (80036d8 <MX_TIM2_Init+0x108>)
 80035fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8003604:	4b34      	ldr	r3, [pc, #208]	@ (80036d8 <MX_TIM2_Init+0x108>)
 8003606:	22a9      	movs	r2, #169	@ 0xa9
 8003608:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360a:	4b33      	ldr	r3, [pc, #204]	@ (80036d8 <MX_TIM2_Init+0x108>)
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003610:	4b31      	ldr	r3, [pc, #196]	@ (80036d8 <MX_TIM2_Init+0x108>)
 8003612:	f04f 32ff 	mov.w	r2, #4294967295
 8003616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003618:	4b2f      	ldr	r3, [pc, #188]	@ (80036d8 <MX_TIM2_Init+0x108>)
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800361e:	4b2e      	ldr	r3, [pc, #184]	@ (80036d8 <MX_TIM2_Init+0x108>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003624:	482c      	ldr	r0, [pc, #176]	@ (80036d8 <MX_TIM2_Init+0x108>)
 8003626:	f005 f8f3 	bl	8008810 <HAL_TIM_Base_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003630:	f7fe fbe4 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003638:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800363a:	f107 0320 	add.w	r3, r7, #32
 800363e:	4619      	mov	r1, r3
 8003640:	4825      	ldr	r0, [pc, #148]	@ (80036d8 <MX_TIM2_Init+0x108>)
 8003642:	f005 fffd 	bl	8009640 <HAL_TIM_ConfigClockSource>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800364c:	f7fe fbd6 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003650:	4821      	ldr	r0, [pc, #132]	@ (80036d8 <MX_TIM2_Init+0x108>)
 8003652:	f005 fb43 	bl	8008cdc <HAL_TIM_IC_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800365c:	f7fe fbce 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	4619      	mov	r1, r3
 800366e:	481a      	ldr	r0, [pc, #104]	@ (80036d8 <MX_TIM2_Init+0x108>)
 8003670:	f007 f852 	bl	800a718 <HAL_TIMEx_MasterConfigSynchronization>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800367a:	f7fe fbbf 	bl	8001dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800367e:	230a      	movs	r3, #10
 8003680:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003682:	2301      	movs	r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2200      	movs	r2, #0
 8003692:	4619      	mov	r1, r3
 8003694:	4810      	ldr	r0, [pc, #64]	@ (80036d8 <MX_TIM2_Init+0x108>)
 8003696:	f005 fe22 	bl	80092de <HAL_TIM_IC_ConfigChannel>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80036a0:	f7fe fbac 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036a4:	1d3b      	adds	r3, r7, #4
 80036a6:	2204      	movs	r2, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	480b      	ldr	r0, [pc, #44]	@ (80036d8 <MX_TIM2_Init+0x108>)
 80036ac:	f005 fe17 	bl	80092de <HAL_TIM_IC_ConfigChannel>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80036b6:	f7fe fba1 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	2208      	movs	r2, #8
 80036be:	4619      	mov	r1, r3
 80036c0:	4805      	ldr	r0, [pc, #20]	@ (80036d8 <MX_TIM2_Init+0x108>)
 80036c2:	f005 fe0c 	bl	80092de <HAL_TIM_IC_ConfigChannel>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80036cc:	f7fe fb96 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036d0:	bf00      	nop
 80036d2:	3730      	adds	r7, #48	@ 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200006c0 	.word	0x200006c0

080036dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	@ 0x30
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036e2:	f107 0320 	add.w	r3, r7, #32
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003708:	4b36      	ldr	r3, [pc, #216]	@ (80037e4 <MX_TIM5_Init+0x108>)
 800370a:	4a37      	ldr	r2, [pc, #220]	@ (80037e8 <MX_TIM5_Init+0x10c>)
 800370c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 800370e:	4b35      	ldr	r3, [pc, #212]	@ (80037e4 <MX_TIM5_Init+0x108>)
 8003710:	22a9      	movs	r2, #169	@ 0xa9
 8003712:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003714:	4b33      	ldr	r3, [pc, #204]	@ (80037e4 <MX_TIM5_Init+0x108>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800371a:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <MX_TIM5_Init+0x108>)
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003722:	4b30      	ldr	r3, [pc, #192]	@ (80037e4 <MX_TIM5_Init+0x108>)
 8003724:	2200      	movs	r2, #0
 8003726:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003728:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <MX_TIM5_Init+0x108>)
 800372a:	2200      	movs	r2, #0
 800372c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800372e:	482d      	ldr	r0, [pc, #180]	@ (80037e4 <MX_TIM5_Init+0x108>)
 8003730:	f005 f86e 	bl	8008810 <HAL_TIM_Base_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800373a:	f7fe fb5f 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800373e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003742:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003744:	f107 0320 	add.w	r3, r7, #32
 8003748:	4619      	mov	r1, r3
 800374a:	4826      	ldr	r0, [pc, #152]	@ (80037e4 <MX_TIM5_Init+0x108>)
 800374c:	f005 ff78 	bl	8009640 <HAL_TIM_ConfigClockSource>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003756:	f7fe fb51 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800375a:	4822      	ldr	r0, [pc, #136]	@ (80037e4 <MX_TIM5_Init+0x108>)
 800375c:	f005 fabe 	bl	8008cdc <HAL_TIM_IC_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003766:	f7fe fb49 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	4619      	mov	r1, r3
 8003778:	481a      	ldr	r0, [pc, #104]	@ (80037e4 <MX_TIM5_Init+0x108>)
 800377a:	f006 ffcd 	bl	800a718 <HAL_TIMEx_MasterConfigSynchronization>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8003784:	f7fe fb3a 	bl	8001dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003788:	230a      	movs	r3, #10
 800378a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800378c:	2301      	movs	r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	2200      	movs	r2, #0
 800379c:	4619      	mov	r1, r3
 800379e:	4811      	ldr	r0, [pc, #68]	@ (80037e4 <MX_TIM5_Init+0x108>)
 80037a0:	f005 fd9d 	bl	80092de <HAL_TIM_IC_ConfigChannel>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80037aa:	f7fe fb27 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	2204      	movs	r2, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	480b      	ldr	r0, [pc, #44]	@ (80037e4 <MX_TIM5_Init+0x108>)
 80037b6:	f005 fd92 	bl	80092de <HAL_TIM_IC_ConfigChannel>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 80037c0:	f7fe fb1c 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	2208      	movs	r2, #8
 80037c8:	4619      	mov	r1, r3
 80037ca:	4806      	ldr	r0, [pc, #24]	@ (80037e4 <MX_TIM5_Init+0x108>)
 80037cc:	f005 fd87 	bl	80092de <HAL_TIM_IC_ConfigChannel>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 80037d6:	f7fe fb11 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80037da:	bf00      	nop
 80037dc:	3730      	adds	r7, #48	@ 0x30
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2000070c 	.word	0x2000070c
 80037e8:	40000c00 	.word	0x40000c00

080037ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b09c      	sub	sp, #112	@ 0x70
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003800:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800380c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
 800381c:	615a      	str	r2, [r3, #20]
 800381e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	2234      	movs	r2, #52	@ 0x34
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f008 fdfe 	bl	800c428 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800382c:	4b51      	ldr	r3, [pc, #324]	@ (8003974 <MX_TIM8_Init+0x188>)
 800382e:	4a52      	ldr	r2, [pc, #328]	@ (8003978 <MX_TIM8_Init+0x18c>)
 8003830:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 8003832:	4b50      	ldr	r3, [pc, #320]	@ (8003974 <MX_TIM8_Init+0x188>)
 8003834:	2210      	movs	r2, #16
 8003836:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003838:	4b4e      	ldr	r3, [pc, #312]	@ (8003974 <MX_TIM8_Init+0x188>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 800383e:	4b4d      	ldr	r3, [pc, #308]	@ (8003974 <MX_TIM8_Init+0x188>)
 8003840:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003844:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003846:	4b4b      	ldr	r3, [pc, #300]	@ (8003974 <MX_TIM8_Init+0x188>)
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800384c:	4b49      	ldr	r3, [pc, #292]	@ (8003974 <MX_TIM8_Init+0x188>)
 800384e:	2200      	movs	r2, #0
 8003850:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003852:	4b48      	ldr	r3, [pc, #288]	@ (8003974 <MX_TIM8_Init+0x188>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003858:	4846      	ldr	r0, [pc, #280]	@ (8003974 <MX_TIM8_Init+0x188>)
 800385a:	f004 ffd9 	bl	8008810 <HAL_TIM_Base_Init>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003864:	f7fe faca 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800386c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800386e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003872:	4619      	mov	r1, r3
 8003874:	483f      	ldr	r0, [pc, #252]	@ (8003974 <MX_TIM8_Init+0x188>)
 8003876:	f005 fee3 	bl	8009640 <HAL_TIM_ConfigClockSource>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003880:	f7fe fabc 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003884:	483b      	ldr	r0, [pc, #236]	@ (8003974 <MX_TIM8_Init+0x188>)
 8003886:	f005 f81a 	bl	80088be <HAL_TIM_PWM_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003890:	f7fe fab4 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003898:	2300      	movs	r3, #0
 800389a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389c:	2300      	movs	r3, #0
 800389e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038a4:	4619      	mov	r1, r3
 80038a6:	4833      	ldr	r0, [pc, #204]	@ (8003974 <MX_TIM8_Init+0x188>)
 80038a8:	f006 ff36 	bl	800a718 <HAL_TIMEx_MasterConfigSynchronization>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80038b2:	f7fe faa3 	bl	8001dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038b6:	2360      	movs	r3, #96	@ 0x60
 80038b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038be:	2300      	movs	r3, #0
 80038c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038c2:	2300      	movs	r3, #0
 80038c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038d6:	2200      	movs	r2, #0
 80038d8:	4619      	mov	r1, r3
 80038da:	4826      	ldr	r0, [pc, #152]	@ (8003974 <MX_TIM8_Init+0x188>)
 80038dc:	f005 fd9c 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80038e6:	f7fe fa89 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038ee:	2204      	movs	r2, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4820      	ldr	r0, [pc, #128]	@ (8003974 <MX_TIM8_Init+0x188>)
 80038f4:	f005 fd90 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80038fe:	f7fe fa7d 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003902:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003906:	2208      	movs	r2, #8
 8003908:	4619      	mov	r1, r3
 800390a:	481a      	ldr	r0, [pc, #104]	@ (8003974 <MX_TIM8_Init+0x188>)
 800390c:	f005 fd84 	bl	8009418 <HAL_TIM_PWM_ConfigChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003916:	f7fe fa71 	bl	8001dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800392e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003938:	2300      	movs	r3, #0
 800393a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800394a:	2300      	movs	r3, #0
 800394c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800394e:	2300      	movs	r3, #0
 8003950:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4807      	ldr	r0, [pc, #28]	@ (8003974 <MX_TIM8_Init+0x188>)
 8003958:	f006 ff74 	bl	800a844 <HAL_TIMEx_ConfigBreakDeadTime>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003962:	f7fe fa4b 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003966:	4803      	ldr	r0, [pc, #12]	@ (8003974 <MX_TIM8_Init+0x188>)
 8003968:	f000 f8b4 	bl	8003ad4 <HAL_TIM_MspPostInit>

}
 800396c:	bf00      	nop
 800396e:	3770      	adds	r7, #112	@ 0x70
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000758 	.word	0x20000758
 8003978:	40013400 	.word	0x40013400

0800397c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08e      	sub	sp, #56	@ 0x38
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a48      	ldr	r2, [pc, #288]	@ (8003abc <HAL_TIM_Base_MspInit+0x140>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d10c      	bne.n	80039b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800399e:	4b48      	ldr	r3, [pc, #288]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a2:	4a47      	ldr	r2, [pc, #284]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80039aa:	4b45      	ldr	r3, [pc, #276]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80039b6:	e07d      	b.n	8003ab4 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c0:	d130      	bne.n	8003a24 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039c2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ce:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039da:	4b39      	ldr	r3, [pc, #228]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039de:	4a38      	ldr	r2, [pc, #224]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039e0:	f043 0308 	orr.w	r3, r3, #8
 80039e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039e6:	4b36      	ldr	r3, [pc, #216]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LMC_HALL1_Pin|LMC_HALL2_Pin|LMC_HALL3_Pin;
 80039f2:	2398      	movs	r3, #152	@ 0x98
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fe:	2300      	movs	r3, #0
 8003a00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003a02:	2302      	movs	r3, #2
 8003a04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	482d      	ldr	r0, [pc, #180]	@ (8003ac4 <HAL_TIM_Base_MspInit+0x148>)
 8003a0e:	f002 ff65 	bl	80068dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003a12:	2200      	movs	r2, #0
 8003a14:	2102      	movs	r1, #2
 8003a16:	201c      	movs	r0, #28
 8003a18:	f001 fcb5 	bl	8005386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a1c:	201c      	movs	r0, #28
 8003a1e:	f001 fccc 	bl	80053ba <HAL_NVIC_EnableIRQ>
}
 8003a22:	e047      	b.n	8003ab4 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM5)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a27      	ldr	r2, [pc, #156]	@ (8003ac8 <HAL_TIM_Base_MspInit+0x14c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d131      	bne.n	8003a92 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a2e:	4b24      	ldr	r3, [pc, #144]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a32:	4a23      	ldr	r2, [pc, #140]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a3a:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003a4c:	f043 0320 	orr.w	r3, r3, #32
 8003a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RMC_HALL2_Pin|RMC_HALL3_Pin|RMC_HALL1_Pin;
 8003a5e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2302      	movs	r3, #2
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8003a70:	2306      	movs	r3, #6
 8003a72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4814      	ldr	r0, [pc, #80]	@ (8003acc <HAL_TIM_Base_MspInit+0x150>)
 8003a7c:	f002 ff2e 	bl	80068dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2102      	movs	r1, #2
 8003a84:	2032      	movs	r0, #50	@ 0x32
 8003a86:	f001 fc7e 	bl	8005386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a8a:	2032      	movs	r0, #50	@ 0x32
 8003a8c:	f001 fc95 	bl	80053ba <HAL_NVIC_EnableIRQ>
}
 8003a90:	e010      	b.n	8003ab4 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM8)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad0 <HAL_TIM_Base_MspInit+0x154>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10b      	bne.n	8003ab4 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa0:	4a07      	ldr	r2, [pc, #28]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003aa2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003aa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <HAL_TIM_Base_MspInit+0x144>)
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3738      	adds	r7, #56	@ 0x38
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	48000c00 	.word	0x48000c00
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	48001400 	.word	0x48001400
 8003ad0:	40013400 	.word	0x40013400

08003ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	@ 0x30
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a64      	ldr	r2, [pc, #400]	@ (8003c84 <HAL_TIM_MspPostInit+0x1b0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d166      	bne.n	8003bc4 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af6:	4b64      	ldr	r3, [pc, #400]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afa:	4a63      	ldr	r2, [pc, #396]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b02:	4b61      	ldr	r3, [pc, #388]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0e:	4b5e      	ldr	r3, [pc, #376]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	4a5d      	ldr	r2, [pc, #372]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b26:	4b58      	ldr	r3, [pc, #352]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2a:	4a57      	ldr	r2, [pc, #348]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003b2c:	f043 0310 	orr.w	r3, r3, #16
 8003b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b32:	4b55      	ldr	r3, [pc, #340]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_AL_RMC_Pin;
 8003b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b44:	2302      	movs	r3, #2
 8003b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003b50:	2304      	movs	r3, #4
 8003b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003b54:	f107 031c 	add.w	r3, r7, #28
 8003b58:	4619      	mov	r1, r3
 8003b5a:	484c      	ldr	r0, [pc, #304]	@ (8003c8c <HAL_TIM_MspPostInit+0x1b8>)
 8003b5c:	f002 febe 	bl	80068dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_AH_RMC_Pin|PWM_BH_RMC_Pin|PWM_CH_RMC_Pin;
 8003b60:	2307      	movs	r3, #7
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003b70:	2302      	movs	r3, #2
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b74:	f107 031c 	add.w	r3, r7, #28
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4844      	ldr	r0, [pc, #272]	@ (8003c8c <HAL_TIM_MspPostInit+0x1b8>)
 8003b7c:	f002 feae 	bl	80068dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_BL_RMC_Pin;
 8003b80:	2301      	movs	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003b90:	2306      	movs	r3, #6
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_BL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003b94:	f107 031c 	add.w	r3, r7, #28
 8003b98:	4619      	mov	r1, r3
 8003b9a:	483d      	ldr	r0, [pc, #244]	@ (8003c90 <HAL_TIM_MspPostInit+0x1bc>)
 8003b9c:	f002 fe9e 	bl	80068dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_CL_RMC_Pin;
 8003ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003bb6:	f107 031c 	add.w	r3, r7, #28
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4835      	ldr	r0, [pc, #212]	@ (8003c94 <HAL_TIM_MspPostInit+0x1c0>)
 8003bbe:	f002 fe8d 	bl	80068dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003bc2:	e05a      	b.n	8003c7a <HAL_TIM_MspPostInit+0x1a6>
  else if(timHandle->Instance==TIM8)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a33      	ldr	r2, [pc, #204]	@ (8003c98 <HAL_TIM_MspPostInit+0x1c4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d155      	bne.n	8003c7a <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bce:	4b2e      	ldr	r3, [pc, #184]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bda:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be6:	4b28      	ldr	r3, [pc, #160]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bea:	4a27      	ldr	r2, [pc, #156]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bf2:	4b25      	ldr	r3, [pc, #148]	@ (8003c88 <HAL_TIM_MspPostInit+0x1b4>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_LMC_Pin|PWM_AL_LMC_Pin|PWM_BL_LMC_Pin|PWM_CL_LMC_Pin;
 8003bfe:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 8003c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003c10:	2304      	movs	r3, #4
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c14:	f107 031c 	add.w	r3, r7, #28
 8003c18:	4619      	mov	r1, r3
 8003c1a:	481c      	ldr	r0, [pc, #112]	@ (8003c8c <HAL_TIM_MspPostInit+0x1b8>)
 8003c1c:	f002 fe5e 	bl	80068dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AH_LMC_Pin;
 8003c20:	2340      	movs	r3, #64	@ 0x40
 8003c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c24:	2302      	movs	r3, #2
 8003c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8003c30:	2305      	movs	r3, #5
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003c34:	f107 031c 	add.w	r3, r7, #28
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4815      	ldr	r0, [pc, #84]	@ (8003c90 <HAL_TIM_MspPostInit+0x1bc>)
 8003c3c:	f002 fe4e 	bl	80068dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_CH_LMC_Pin;
 8003c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003c52:	230a      	movs	r3, #10
 8003c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	480c      	ldr	r0, [pc, #48]	@ (8003c90 <HAL_TIM_MspPostInit+0x1bc>)
 8003c5e:	f002 fe3d 	bl	80068dc <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003c62:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <HAL_TIM_MspPostInit+0x1c8>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a0d      	ldr	r2, [pc, #52]	@ (8003c9c <HAL_TIM_MspPostInit+0x1c8>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c6c:	6053      	str	r3, [r2, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <HAL_TIM_MspPostInit+0x1c8>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <HAL_TIM_MspPostInit+0x1c8>)
 8003c74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c78:	6053      	str	r3, [r2, #4]
}
 8003c7a:	bf00      	nop
 8003c7c:	3730      	adds	r7, #48	@ 0x30
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	48000800 	.word	0x48000800
 8003c90:	48000400 	.word	0x48000400
 8003c94:	48001000 	.word	0x48001000
 8003c98:	40013400 	.word	0x40013400
 8003c9c:	40010000 	.word	0x40010000

08003ca0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ca4:	4b22      	ldr	r3, [pc, #136]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003ca6:	4a23      	ldr	r2, [pc, #140]	@ (8003d34 <MX_USART2_UART_Init+0x94>)
 8003ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8003caa:	4b21      	ldr	r3, [pc, #132]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cac:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8003cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cc6:	220c      	movs	r2, #12
 8003cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cca:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd0:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cd6:	4b16      	ldr	r3, [pc, #88]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cdc:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ce8:	4811      	ldr	r0, [pc, #68]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cea:	f006 feaa 	bl	800aa42 <HAL_UART_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003cf4:	f7fe f882 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	480d      	ldr	r0, [pc, #52]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003cfc:	f008 fa76 	bl	800c1ec <HAL_UARTEx_SetTxFifoThreshold>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003d06:	f7fe f879 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4808      	ldr	r0, [pc, #32]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003d0e:	f008 faab 	bl	800c268 <HAL_UARTEx_SetRxFifoThreshold>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003d18:	f7fe f870 	bl	8001dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003d1c:	4804      	ldr	r0, [pc, #16]	@ (8003d30 <MX_USART2_UART_Init+0x90>)
 8003d1e:	f008 fa2c 	bl	800c17a <HAL_UARTEx_DisableFifoMode>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003d28:	f7fe f868 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	200007a4 	.word	0x200007a4
 8003d34:	40004400 	.word	0x40004400

08003d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b09e      	sub	sp, #120	@ 0x78
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d50:	f107 0310 	add.w	r3, r7, #16
 8003d54:	2254      	movs	r2, #84	@ 0x54
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f008 fb65 	bl	800c428 <memset>
  if(uartHandle->Instance==USART2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a38      	ldr	r2, [pc, #224]	@ (8003e44 <HAL_UART_MspInit+0x10c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d168      	bne.n	8003e3a <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 fd59 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d80:	f7fe f83c 	bl	8001dfc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d84:	4b30      	ldr	r3, [pc, #192]	@ (8003e48 <HAL_UART_MspInit+0x110>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	4a2f      	ldr	r2, [pc, #188]	@ (8003e48 <HAL_UART_MspInit+0x110>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d90:	4b2d      	ldr	r3, [pc, #180]	@ (8003e48 <HAL_UART_MspInit+0x110>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e48 <HAL_UART_MspInit+0x110>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	4a29      	ldr	r2, [pc, #164]	@ (8003e48 <HAL_UART_MspInit+0x110>)
 8003da2:	f043 0308 	orr.w	r3, r3, #8
 8003da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003da8:	4b27      	ldr	r3, [pc, #156]	@ (8003e48 <HAL_UART_MspInit+0x110>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = AUX2_TX_Pin|AUX2_RX_Pin;
 8003db4:	2360      	movs	r3, #96	@ 0x60
 8003db6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dc4:	2307      	movs	r3, #7
 8003dc6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dc8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003dcc:	4619      	mov	r1, r3
 8003dce:	481f      	ldr	r0, [pc, #124]	@ (8003e4c <HAL_UART_MspInit+0x114>)
 8003dd0:	f002 fd84 	bl	80068dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e54 <HAL_UART_MspInit+0x11c>)
 8003dd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003dda:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003ddc:	221a      	movs	r2, #26
 8003dde:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003de0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003de6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dec:	4b18      	ldr	r3, [pc, #96]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003df2:	4b17      	ldr	r3, [pc, #92]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e04:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003e06:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003e0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e0c:	4810      	ldr	r0, [pc, #64]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003e0e:	f001 fd65 	bl	80058dc <HAL_DMA_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003e18:	f7fd fff0 	bl	8001dfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003e20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003e24:	4a0a      	ldr	r2, [pc, #40]	@ (8003e50 <HAL_UART_MspInit+0x118>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	2026      	movs	r0, #38	@ 0x26
 8003e30:	f001 faa9 	bl	8005386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e34:	2026      	movs	r0, #38	@ 0x26
 8003e36:	f001 fac0 	bl	80053ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3778      	adds	r7, #120	@ 0x78
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40004400 	.word	0x40004400
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	48000c00 	.word	0x48000c00
 8003e50:	20000838 	.word	0x20000838
 8003e54:	40020008 	.word	0x40020008

08003e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e58:	480d      	ldr	r0, [pc, #52]	@ (8003e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e5c:	f7ff fade 	bl	800341c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e60:	480c      	ldr	r0, [pc, #48]	@ (8003e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e62:	490d      	ldr	r1, [pc, #52]	@ (8003e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e64:	4a0d      	ldr	r2, [pc, #52]	@ (8003e9c <LoopForever+0xe>)
  movs r3, #0
 8003e66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e68:	e002      	b.n	8003e70 <LoopCopyDataInit>

08003e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e6e:	3304      	adds	r3, #4

08003e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e74:	d3f9      	bcc.n	8003e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e78:	4c0a      	ldr	r4, [pc, #40]	@ (8003ea4 <LoopForever+0x16>)
  movs r3, #0
 8003e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e7c:	e001      	b.n	8003e82 <LoopFillZerobss>

08003e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e80:	3204      	adds	r2, #4

08003e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e84:	d3fb      	bcc.n	8003e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e86:	f008 fad7 	bl	800c438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e8a:	f7fd fec3 	bl	8001c14 <main>

08003e8e <LoopForever>:

LoopForever:
    b LoopForever
 8003e8e:	e7fe      	b.n	8003e8e <LoopForever>
  ldr   r0, =_estack
 8003e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e98:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 8003e9c:	0800c514 	.word	0x0800c514
  ldr r2, =_sbss
 8003ea0:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 8003ea4:	2000089c 	.word	0x2000089c

08003ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ea8:	e7fe      	b.n	8003ea8 <ADC1_2_IRQHandler>

08003eaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eb4:	2003      	movs	r0, #3
 8003eb6:	f001 fa5b 	bl	8005370 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003eba:	200f      	movs	r0, #15
 8003ebc:	f000 f80e 	bl	8003edc <HAL_InitTick>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	71fb      	strb	r3, [r7, #7]
 8003eca:	e001      	b.n	8003ed0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ecc:	f7ff fa24 	bl	8003318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ed0:	79fb      	ldrb	r3, [r7, #7]

}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ee8:	4b16      	ldr	r3, [pc, #88]	@ (8003f44 <HAL_InitTick+0x68>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d022      	beq.n	8003f36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ef0:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <HAL_InitTick+0x6c>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <HAL_InitTick+0x68>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fa66 	bl	80053d6 <HAL_SYSTICK_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10f      	bne.n	8003f30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b0f      	cmp	r3, #15
 8003f14:	d809      	bhi.n	8003f2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f16:	2200      	movs	r2, #0
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1e:	f001 fa32 	bl	8005386 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f22:	4a0a      	ldr	r2, [pc, #40]	@ (8003f4c <HAL_InitTick+0x70>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e007      	b.n	8003f3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	e004      	b.n	8003f3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	e001      	b.n	8003f3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000390 	.word	0x20000390
 8003f48:	20000388 	.word	0x20000388
 8003f4c:	2000038c 	.word	0x2000038c

08003f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_IncTick+0x1c>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_IncTick+0x20>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	4a03      	ldr	r2, [pc, #12]	@ (8003f6c <HAL_IncTick+0x1c>)
 8003f60:	6013      	str	r3, [r2, #0]
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	20000898 	.word	0x20000898
 8003f70:	20000390 	.word	0x20000390

08003f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return uwTick;
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <HAL_GetTick+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000898 	.word	0x20000898

08003f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff ffee 	bl	8003f74 <HAL_GetTick>
 8003f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d004      	beq.n	8003fb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fa6:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_Delay+0x40>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fb0:	bf00      	nop
 8003fb2:	f7ff ffdf 	bl	8003f74 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d8f7      	bhi.n	8003fb2 <HAL_Delay+0x26>
  {
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000390 	.word	0x20000390

08003fd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	609a      	str	r2, [r3, #8]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	609a      	str	r2, [r3, #8]
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3360      	adds	r3, #96	@ 0x60
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b08      	ldr	r3, [pc, #32]	@ (800407c <LL_ADC_SetOffset+0x44>)
 800405a:	4013      	ands	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	4313      	orrs	r3, r2
 8004068:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	03fff000 	.word	0x03fff000

08004080 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3360      	adds	r3, #96	@ 0x60
 800408e:	461a      	mov	r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3360      	adds	r3, #96	@ 0x60
 80040bc:	461a      	mov	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b087      	sub	sp, #28
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3360      	adds	r3, #96	@ 0x60
 80040f2:	461a      	mov	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	431a      	orrs	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3360      	adds	r3, #96	@ 0x60
 8004128:	461a      	mov	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	431a      	orrs	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	615a      	str	r2, [r3, #20]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3330      	adds	r3, #48	@ 0x30
 8004184:	461a      	mov	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	4413      	add	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	211f      	movs	r1, #31
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	401a      	ands	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0e9b      	lsrs	r3, r3, #26
 80041ac:	f003 011f 	and.w	r1, r3, #31
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	431a      	orrs	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3314      	adds	r3, #20
 80041dc:	461a      	mov	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	0e5b      	lsrs	r3, r3, #25
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	4413      	add	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	0d1b      	lsrs	r3, r3, #20
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2107      	movs	r1, #7
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	401a      	ands	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	0d1b      	lsrs	r3, r3, #20
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	43db      	mvns	r3, r3
 800423e:	401a      	ands	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 0318 	and.w	r3, r3, #24
 8004246:	4908      	ldr	r1, [pc, #32]	@ (8004268 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004248:	40d9      	lsrs	r1, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	400b      	ands	r3, r1
 800424e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	0007ffff 	.word	0x0007ffff

0800426c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800427c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6093      	str	r3, [r2, #8]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042a4:	d101      	bne.n	80042aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80042c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042f4:	d101      	bne.n	80042fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <LL_ADC_IsEnabled+0x18>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <LL_ADC_IsEnabled+0x1a>
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d101      	bne.n	8004346 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d101      	bne.n	800436c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b089      	sub	sp, #36	@ 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1a9      	b.n	80046ea <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fc ff31 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff67 	bl	8004290 <LL_ADC_IsDeepPowerDownEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff4d 	bl	800426c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff ff82 	bl	80042e0 <LL_ADC_IsInternalRegulatorEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d115      	bne.n	800440e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff66 	bl	80042b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043ec:	4b9c      	ldr	r3, [pc, #624]	@ (8004660 <HAL_ADC_Init+0x2e4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	4a9c      	ldr	r2, [pc, #624]	@ (8004664 <HAL_ADC_Init+0x2e8>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	3301      	adds	r3, #1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004400:	e002      	b.n	8004408 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b01      	subs	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f9      	bne.n	8004402 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff64 	bl	80042e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff ff75 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 8004444:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	f040 8142 	bne.w	80046d8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 813e 	bne.w	80046d8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004460:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff49 	bl	8004308 <LL_ADC_IsEnabled>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d141      	bne.n	8004500 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004484:	d004      	beq.n	8004490 <HAL_ADC_Init+0x114>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a77      	ldr	r2, [pc, #476]	@ (8004668 <HAL_ADC_Init+0x2ec>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10f      	bne.n	80044b0 <HAL_ADC_Init+0x134>
 8004490:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004494:	f7ff ff38 	bl	8004308 <LL_ADC_IsEnabled>
 8004498:	4604      	mov	r4, r0
 800449a:	4873      	ldr	r0, [pc, #460]	@ (8004668 <HAL_ADC_Init+0x2ec>)
 800449c:	f7ff ff34 	bl	8004308 <LL_ADC_IsEnabled>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4323      	orrs	r3, r4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e012      	b.n	80044d6 <HAL_ADC_Init+0x15a>
 80044b0:	486e      	ldr	r0, [pc, #440]	@ (800466c <HAL_ADC_Init+0x2f0>)
 80044b2:	f7ff ff29 	bl	8004308 <LL_ADC_IsEnabled>
 80044b6:	4604      	mov	r4, r0
 80044b8:	486d      	ldr	r0, [pc, #436]	@ (8004670 <HAL_ADC_Init+0x2f4>)
 80044ba:	f7ff ff25 	bl	8004308 <LL_ADC_IsEnabled>
 80044be:	4603      	mov	r3, r0
 80044c0:	431c      	orrs	r4, r3
 80044c2:	486c      	ldr	r0, [pc, #432]	@ (8004674 <HAL_ADC_Init+0x2f8>)
 80044c4:	f7ff ff20 	bl	8004308 <LL_ADC_IsEnabled>
 80044c8:	4603      	mov	r3, r0
 80044ca:	4323      	orrs	r3, r4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d012      	beq.n	8004500 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e2:	d004      	beq.n	80044ee <HAL_ADC_Init+0x172>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004668 <HAL_ADC_Init+0x2ec>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_ADC_Init+0x176>
 80044ee:	4a62      	ldr	r2, [pc, #392]	@ (8004678 <HAL_ADC_Init+0x2fc>)
 80044f0:	e000      	b.n	80044f4 <HAL_ADC_Init+0x178>
 80044f2:	4a62      	ldr	r2, [pc, #392]	@ (800467c <HAL_ADC_Init+0x300>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f7ff fd68 	bl	8003fd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7f5b      	ldrb	r3, [r3, #29]
 8004504:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800450a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004510:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004516:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800451e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800452a:	2b01      	cmp	r3, #1
 800452c:	d106      	bne.n	800453c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	3b01      	subs	r3, #1
 8004534:	045b      	lsls	r3, r3, #17
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004550:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	4b48      	ldr	r3, [pc, #288]	@ (8004680 <HAL_ADC_Init+0x304>)
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	430b      	orrs	r3, r1
 800456a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fee4 	bl	8004354 <LL_ADC_INJ_IsConversionOngoing>
 800458c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d17f      	bne.n	8004694 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d17c      	bne.n	8004694 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800459e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045a6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045b6:	f023 0302 	bic.w	r3, r3, #2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	69b9      	ldr	r1, [r7, #24]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d017      	beq.n	80045fc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80045da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80045e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6911      	ldr	r1, [r2, #16]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	430b      	orrs	r3, r1
 80045f6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80045fa:	e013      	b.n	8004624 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800460a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800461c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004620:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800462a:	2b01      	cmp	r3, #1
 800462c:	d12a      	bne.n	8004684 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004638:	f023 0304 	bic.w	r3, r3, #4
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800464a:	4311      	orrs	r1, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004650:	430a      	orrs	r2, r1
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	611a      	str	r2, [r3, #16]
 800465e:	e019      	b.n	8004694 <HAL_ADC_Init+0x318>
 8004660:	20000388 	.word	0x20000388
 8004664:	053e2d63 	.word	0x053e2d63
 8004668:	50000100 	.word	0x50000100
 800466c:	50000400 	.word	0x50000400
 8004670:	50000500 	.word	0x50000500
 8004674:	50000600 	.word	0x50000600
 8004678:	50000300 	.word	0x50000300
 800467c:	50000700 	.word	0x50000700
 8004680:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d10c      	bne.n	80046b6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	f023 010f 	bic.w	r1, r3, #15
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	1e5a      	subs	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b4:	e007      	b.n	80046c6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 020f 	bic.w	r2, r2, #15
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046d6:	e007      	b.n	80046e8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046dc:	f043 0210 	orr.w	r2, r3, #16
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3724      	adds	r7, #36	@ 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd90      	pop	{r4, r7, pc}
 80046f2:	bf00      	nop

080046f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0b6      	sub	sp, #216	@ 0xd8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800470e:	2b01      	cmp	r3, #1
 8004710:	d102      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x24>
 8004712:	2302      	movs	r3, #2
 8004714:	f000 bc13 	b.w	8004f3e <HAL_ADC_ConfigChannel+0x84a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fe02 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 83f3 	bne.w	8004f18 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7ff fd18 	bl	8004174 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fdf0 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 800474e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fdfc 	bl	8004354 <LL_ADC_INJ_IsConversionOngoing>
 800475c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004760:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 81d9 	bne.w	8004b1c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800476a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 81d4 	bne.w	8004b1c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800477c:	d10f      	bne.n	800479e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	4619      	mov	r1, r3
 800478a:	f7ff fd1f 	bl	80041cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fcd9 	bl	800414e <LL_ADC_SetSamplingTimeCommonConfig>
 800479c:	e00e      	b.n	80047bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6819      	ldr	r1, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f7ff fd0e 	bl	80041cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fcc9 	bl	800414e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	08db      	lsrs	r3, r3, #3
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d022      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6919      	ldr	r1, [r3, #16]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047ee:	f7ff fc23 	bl	8004038 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6919      	ldr	r1, [r3, #16]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	461a      	mov	r2, r3
 8004800:	f7ff fc6f 	bl	80040e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <HAL_ADC_ConfigChannel+0x126>
 8004814:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004818:	e000      	b.n	800481c <HAL_ADC_ConfigChannel+0x128>
 800481a:	2300      	movs	r3, #0
 800481c:	461a      	mov	r2, r3
 800481e:	f7ff fc7b 	bl	8004118 <LL_ADC_SetOffsetSaturation>
 8004822:	e17b      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fc28 	bl	8004080 <LL_ADC_GetOffsetChannel>
 8004830:	4603      	mov	r3, r0
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x15c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fc1d 	bl	8004080 <LL_ADC_GetOffsetChannel>
 8004846:	4603      	mov	r3, r0
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	f003 021f 	and.w	r2, r3, #31
 800484e:	e01e      	b.n	800488e <HAL_ADC_ConfigChannel+0x19a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fc12 	bl	8004080 <LL_ADC_GetOffsetChannel>
 800485c:	4603      	mov	r3, r0
 800485e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800486e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004872:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800487e:	2320      	movs	r3, #32
 8004880:	e004      	b.n	800488c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x1b2>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	e018      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x1e4>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80048ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80048c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80048ca:	2320      	movs	r3, #32
 80048cc:	e004      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80048ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048d2:	fab3 f383 	clz	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048d8:	429a      	cmp	r2, r3
 80048da:	d106      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fbe1 	bl	80040ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fbc5 	bl	8004080 <LL_ADC_GetOffsetChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x222>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2101      	movs	r1, #1
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fbba 	bl	8004080 <LL_ADC_GetOffsetChannel>
 800490c:	4603      	mov	r3, r0
 800490e:	0e9b      	lsrs	r3, r3, #26
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	e01e      	b.n	8004954 <HAL_ADC_ConfigChannel+0x260>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2101      	movs	r1, #1
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fbaf 	bl	8004080 <LL_ADC_GetOffsetChannel>
 8004922:	4603      	mov	r3, r0
 8004924:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800493c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004944:	2320      	movs	r3, #32
 8004946:	e004      	b.n	8004952 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <HAL_ADC_ConfigChannel+0x278>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	0e9b      	lsrs	r3, r3, #26
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	e018      	b.n	800499e <HAL_ADC_ConfigChannel+0x2aa>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004980:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004984:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004988:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004990:	2320      	movs	r3, #32
 8004992:	e004      	b.n	800499e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004998:	fab3 f383 	clz	r3, r3
 800499c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800499e:	429a      	cmp	r2, r3
 80049a0:	d106      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	2101      	movs	r1, #1
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fb7e 	bl	80040ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2102      	movs	r1, #2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fb62 	bl	8004080 <LL_ADC_GetOffsetChannel>
 80049bc:	4603      	mov	r3, r0
 80049be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x2e8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2102      	movs	r1, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fb57 	bl	8004080 <LL_ADC_GetOffsetChannel>
 80049d2:	4603      	mov	r3, r0
 80049d4:	0e9b      	lsrs	r3, r3, #26
 80049d6:	f003 021f 	and.w	r2, r3, #31
 80049da:	e01e      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x326>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2102      	movs	r1, #2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fb4c 	bl	8004080 <LL_ADC_GetOffsetChannel>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049f2:	fa93 f3a3 	rbit	r3, r3
 80049f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80049fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	e004      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x33e>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	0e9b      	lsrs	r3, r3, #26
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	e016      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x36c>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a3e:	fa93 f3a3 	rbit	r3, r3
 8004a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004a52:	2320      	movs	r3, #32
 8004a54:	e004      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d106      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fb1d 	bl	80040ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2103      	movs	r1, #3
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fb01 	bl	8004080 <LL_ADC_GetOffsetChannel>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x3aa>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2103      	movs	r1, #3
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff faf6 	bl	8004080 <LL_ADC_GetOffsetChannel>
 8004a94:	4603      	mov	r3, r0
 8004a96:	0e9b      	lsrs	r3, r3, #26
 8004a98:	f003 021f 	and.w	r2, r3, #31
 8004a9c:	e017      	b.n	8004ace <HAL_ADC_ConfigChannel+0x3da>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2103      	movs	r1, #3
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff faeb 	bl	8004080 <LL_ADC_GetOffsetChannel>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ab0:	fa93 f3a3 	rbit	r3, r3
 8004ab4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	e003      	b.n	8004acc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004ac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ac6:	fab3 f383 	clz	r3, r3
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x3f2>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	0e9b      	lsrs	r3, r3, #26
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	e011      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x416>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004af4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004afe:	2320      	movs	r3, #32
 8004b00:	e003      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b04:	fab3 f383 	clz	r3, r3
 8004b08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d106      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	2103      	movs	r1, #3
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fac8 	bl	80040ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fbf1 	bl	8004308 <LL_ADC_IsEnabled>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f040 813d 	bne.w	8004da8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6819      	ldr	r1, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f7ff fb72 	bl	8004224 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4aa2      	ldr	r2, [pc, #648]	@ (8004dd0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	f040 812e 	bne.w	8004da8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x480>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	0e9b      	lsrs	r3, r3, #26
 8004b62:	3301      	adds	r3, #1
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2b09      	cmp	r3, #9
 8004b6a:	bf94      	ite	ls
 8004b6c:	2301      	movls	r3, #1
 8004b6e:	2300      	movhi	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e019      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x4b4>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	e003      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004b90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	3301      	adds	r3, #1
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2b09      	cmp	r3, #9
 8004ba0:	bf94      	ite	ls
 8004ba2:	2301      	movls	r3, #1
 8004ba4:	2300      	movhi	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d079      	beq.n	8004ca0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d107      	bne.n	8004bc8 <HAL_ADC_ConfigChannel+0x4d4>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	0e9b      	lsrs	r3, r3, #26
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	069b      	lsls	r3, r3, #26
 8004bc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bc6:	e015      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x500>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd0:	fa93 f3a3 	rbit	r3, r3
 8004bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004be0:	2320      	movs	r3, #32
 8004be2:	e003      	b.n	8004bec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	3301      	adds	r3, #1
 8004bee:	069b      	lsls	r3, r3, #26
 8004bf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x520>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	0e9b      	lsrs	r3, r3, #26
 8004c06:	3301      	adds	r3, #1
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	e017      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x550>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c1c:	fa93 f3a3 	rbit	r3, r3
 8004c20:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c2c:	2320      	movs	r3, #32
 8004c2e:	e003      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	3301      	adds	r3, #1
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	2101      	movs	r1, #1
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	ea42 0103 	orr.w	r1, r2, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x576>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	0e9b      	lsrs	r3, r3, #26
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	f003 021f 	and.w	r2, r3, #31
 8004c60:	4613      	mov	r3, r2
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	051b      	lsls	r3, r3, #20
 8004c68:	e018      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x5a8>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004c82:	2320      	movs	r3, #32
 8004c84:	e003      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f003 021f 	and.w	r2, r3, #31
 8004c94:	4613      	mov	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4413      	add	r3, r2
 8004c9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	e07e      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d107      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x5c8>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	0e9b      	lsrs	r3, r3, #26
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	069b      	lsls	r3, r3, #26
 8004cb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cba:	e015      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x5f4>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc4:	fa93 f3a3 	rbit	r3, r3
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	e003      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	fab3 f383 	clz	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	069b      	lsls	r3, r3, #26
 8004ce4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x614>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	0e9b      	lsrs	r3, r3, #26
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2101      	movs	r1, #1
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	e017      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x644>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	61fb      	str	r3, [r7, #28]
  return result;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d20:	2320      	movs	r3, #32
 8004d22:	e003      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2101      	movs	r1, #1
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	ea42 0103 	orr.w	r1, r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10d      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x670>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0e9b      	lsrs	r3, r3, #26
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f003 021f 	and.w	r2, r3, #31
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	3b1e      	subs	r3, #30
 8004d5c:	051b      	lsls	r3, r3, #20
 8004d5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d62:	e01b      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x6a8>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	613b      	str	r3, [r7, #16]
  return result;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	e003      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f003 021f 	and.w	r2, r3, #31
 8004d8e:	4613      	mov	r3, r2
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4413      	add	r3, r2
 8004d94:	3b1e      	subs	r3, #30
 8004d96:	051b      	lsls	r3, r3, #20
 8004d98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004da2:	4619      	mov	r1, r3
 8004da4:	f7ff fa12 	bl	80041cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_ADC_ConfigChannel+0x6e0>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80be 	beq.w	8004f32 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dbe:	d004      	beq.n	8004dca <HAL_ADC_ConfigChannel+0x6d6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a04      	ldr	r2, [pc, #16]	@ (8004dd8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d10a      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x6ec>
 8004dca:	4b04      	ldr	r3, [pc, #16]	@ (8004ddc <HAL_ADC_ConfigChannel+0x6e8>)
 8004dcc:	e009      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x6ee>
 8004dce:	bf00      	nop
 8004dd0:	407f0000 	.word	0x407f0000
 8004dd4:	80080000 	.word	0x80080000
 8004dd8:	50000100 	.word	0x50000100
 8004ddc:	50000300 	.word	0x50000300
 8004de0:	4b59      	ldr	r3, [pc, #356]	@ (8004f48 <HAL_ADC_ConfigChannel+0x854>)
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff f91a 	bl	800401c <LL_ADC_GetCommonPathInternalCh>
 8004de8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a56      	ldr	r2, [pc, #344]	@ (8004f4c <HAL_ADC_ConfigChannel+0x858>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_ADC_ConfigChannel+0x70c>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a55      	ldr	r2, [pc, #340]	@ (8004f50 <HAL_ADC_ConfigChannel+0x85c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d13a      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d134      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e14:	d005      	beq.n	8004e22 <HAL_ADC_ConfigChannel+0x72e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f54 <HAL_ADC_ConfigChannel+0x860>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	f040 8085 	bne.w	8004f2c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e2a:	d004      	beq.n	8004e36 <HAL_ADC_ConfigChannel+0x742>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a49      	ldr	r2, [pc, #292]	@ (8004f58 <HAL_ADC_ConfigChannel+0x864>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x746>
 8004e36:	4a49      	ldr	r2, [pc, #292]	@ (8004f5c <HAL_ADC_ConfigChannel+0x868>)
 8004e38:	e000      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x748>
 8004e3a:	4a43      	ldr	r2, [pc, #268]	@ (8004f48 <HAL_ADC_ConfigChannel+0x854>)
 8004e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7ff f8d5 	bl	8003ff6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e4c:	4b44      	ldr	r3, [pc, #272]	@ (8004f60 <HAL_ADC_ConfigChannel+0x86c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	099b      	lsrs	r3, r3, #6
 8004e52:	4a44      	ldr	r2, [pc, #272]	@ (8004f64 <HAL_ADC_ConfigChannel+0x870>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	099b      	lsrs	r3, r3, #6
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e66:	e002      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f9      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e74:	e05a      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f68 <HAL_ADC_ConfigChannel+0x874>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d125      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11f      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a31      	ldr	r2, [pc, #196]	@ (8004f58 <HAL_ADC_ConfigChannel+0x864>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d104      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x7ac>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a34      	ldr	r2, [pc, #208]	@ (8004f6c <HAL_ADC_ConfigChannel+0x878>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d047      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ea8:	d004      	beq.n	8004eb4 <HAL_ADC_ConfigChannel+0x7c0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2a      	ldr	r2, [pc, #168]	@ (8004f58 <HAL_ADC_ConfigChannel+0x864>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d101      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x7c4>
 8004eb4:	4a29      	ldr	r2, [pc, #164]	@ (8004f5c <HAL_ADC_ConfigChannel+0x868>)
 8004eb6:	e000      	b.n	8004eba <HAL_ADC_ConfigChannel+0x7c6>
 8004eb8:	4a23      	ldr	r2, [pc, #140]	@ (8004f48 <HAL_ADC_ConfigChannel+0x854>)
 8004eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7ff f896 	bl	8003ff6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eca:	e031      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a27      	ldr	r2, [pc, #156]	@ (8004f70 <HAL_ADC_ConfigChannel+0x87c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d12d      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ed6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d127      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f58 <HAL_ADC_ConfigChannel+0x864>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d022      	beq.n	8004f32 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ef4:	d004      	beq.n	8004f00 <HAL_ADC_ConfigChannel+0x80c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a17      	ldr	r2, [pc, #92]	@ (8004f58 <HAL_ADC_ConfigChannel+0x864>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d101      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x810>
 8004f00:	4a16      	ldr	r2, [pc, #88]	@ (8004f5c <HAL_ADC_ConfigChannel+0x868>)
 8004f02:	e000      	b.n	8004f06 <HAL_ADC_ConfigChannel+0x812>
 8004f04:	4a10      	ldr	r2, [pc, #64]	@ (8004f48 <HAL_ADC_ConfigChannel+0x854>)
 8004f06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f7ff f870 	bl	8003ff6 <LL_ADC_SetCommonPathInternalCh>
 8004f16:	e00c      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	f043 0220 	orr.w	r2, r3, #32
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f2a:	e002      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f2c:	bf00      	nop
 8004f2e:	e000      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	37d8      	adds	r7, #216	@ 0xd8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	50000700 	.word	0x50000700
 8004f4c:	c3210000 	.word	0xc3210000
 8004f50:	90c00010 	.word	0x90c00010
 8004f54:	50000600 	.word	0x50000600
 8004f58:	50000100 	.word	0x50000100
 8004f5c:	50000300 	.word	0x50000300
 8004f60:	20000388 	.word	0x20000388
 8004f64:	053e2d63 	.word	0x053e2d63
 8004f68:	c7520000 	.word	0xc7520000
 8004f6c:	50000500 	.word	0x50000500
 8004f70:	cb840000 	.word	0xcb840000

08004f74 <LL_ADC_IsEnabled>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <LL_ADC_IsEnabled+0x18>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <LL_ADC_IsEnabled+0x1a>
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <LL_ADC_REG_IsConversionOngoing>:
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d101      	bne.n	8004fb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b0a1      	sub	sp, #132	@ 0x84
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e0e7      	b.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004fea:	2300      	movs	r3, #0
 8004fec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ff6:	d102      	bne.n	8004ffe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	e009      	b.n	8005012 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a6e      	ldr	r2, [pc, #440]	@ (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d102      	bne.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005008:	4b6d      	ldr	r3, [pc, #436]	@ (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	e001      	b.n	8005012 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	f043 0220 	orr.w	r2, r3, #32
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0be      	b.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff ffb1 	bl	8004f9a <LL_ADC_REG_IsConversionOngoing>
 8005038:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff ffab 	bl	8004f9a <LL_ADC_REG_IsConversionOngoing>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 80a0 	bne.w	800518c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800504c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 809c 	bne.w	800518c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800505c:	d004      	beq.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a55      	ldr	r2, [pc, #340]	@ (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005068:	4b56      	ldr	r3, [pc, #344]	@ (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800506a:	e000      	b.n	800506e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800506c:	4b56      	ldr	r3, [pc, #344]	@ (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800506e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d04b      	beq.n	8005110 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800508a:	035b      	lsls	r3, r3, #13
 800508c:	430b      	orrs	r3, r1
 800508e:	431a      	orrs	r2, r3
 8005090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005092:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800509c:	d004      	beq.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a45      	ldr	r2, [pc, #276]	@ (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d10f      	bne.n	80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80050a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050ac:	f7ff ff62 	bl	8004f74 <LL_ADC_IsEnabled>
 80050b0:	4604      	mov	r4, r0
 80050b2:	4841      	ldr	r0, [pc, #260]	@ (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050b4:	f7ff ff5e 	bl	8004f74 <LL_ADC_IsEnabled>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4323      	orrs	r3, r4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bf0c      	ite	eq
 80050c0:	2301      	moveq	r3, #1
 80050c2:	2300      	movne	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	e012      	b.n	80050ee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80050c8:	483c      	ldr	r0, [pc, #240]	@ (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80050ca:	f7ff ff53 	bl	8004f74 <LL_ADC_IsEnabled>
 80050ce:	4604      	mov	r4, r0
 80050d0:	483b      	ldr	r0, [pc, #236]	@ (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80050d2:	f7ff ff4f 	bl	8004f74 <LL_ADC_IsEnabled>
 80050d6:	4603      	mov	r3, r0
 80050d8:	431c      	orrs	r4, r3
 80050da:	483c      	ldr	r0, [pc, #240]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80050dc:	f7ff ff4a 	bl	8004f74 <LL_ADC_IsEnabled>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4323      	orrs	r3, r4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d056      	beq.n	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050fa:	f023 030f 	bic.w	r3, r3, #15
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	6892      	ldr	r2, [r2, #8]
 8005106:	430a      	orrs	r2, r1
 8005108:	431a      	orrs	r2, r3
 800510a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800510c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800510e:	e047      	b.n	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800511a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005124:	d004      	beq.n	8005130 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a23      	ldr	r2, [pc, #140]	@ (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10f      	bne.n	8005150 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005130:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005134:	f7ff ff1e 	bl	8004f74 <LL_ADC_IsEnabled>
 8005138:	4604      	mov	r4, r0
 800513a:	481f      	ldr	r0, [pc, #124]	@ (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800513c:	f7ff ff1a 	bl	8004f74 <LL_ADC_IsEnabled>
 8005140:	4603      	mov	r3, r0
 8005142:	4323      	orrs	r3, r4
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e012      	b.n	8005176 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005150:	481a      	ldr	r0, [pc, #104]	@ (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005152:	f7ff ff0f 	bl	8004f74 <LL_ADC_IsEnabled>
 8005156:	4604      	mov	r4, r0
 8005158:	4819      	ldr	r0, [pc, #100]	@ (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800515a:	f7ff ff0b 	bl	8004f74 <LL_ADC_IsEnabled>
 800515e:	4603      	mov	r3, r0
 8005160:	431c      	orrs	r4, r3
 8005162:	481a      	ldr	r0, [pc, #104]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005164:	f7ff ff06 	bl	8004f74 <LL_ADC_IsEnabled>
 8005168:	4603      	mov	r3, r0
 800516a:	4323      	orrs	r3, r4
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d012      	beq.n	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800517a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005182:	f023 030f 	bic.w	r3, r3, #15
 8005186:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005188:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800518a:	e009      	b.n	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800519e:	e000      	b.n	80051a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3784      	adds	r7, #132	@ 0x84
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd90      	pop	{r4, r7, pc}
 80051b6:	bf00      	nop
 80051b8:	50000100 	.word	0x50000100
 80051bc:	50000400 	.word	0x50000400
 80051c0:	50000500 	.word	0x50000500
 80051c4:	50000300 	.word	0x50000300
 80051c8:	50000700 	.word	0x50000700
 80051cc:	50000600 	.word	0x50000600

080051d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <__NVIC_SetPriorityGrouping+0x44>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80051ec:	4013      	ands	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80051fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005202:	4a04      	ldr	r2, [pc, #16]	@ (8005214 <__NVIC_SetPriorityGrouping+0x44>)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	60d3      	str	r3, [r2, #12]
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	e000ed00 	.word	0xe000ed00

08005218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800521c:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <__NVIC_GetPriorityGrouping+0x18>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	f003 0307 	and.w	r3, r3, #7
}
 8005226:	4618      	mov	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800523e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005242:	2b00      	cmp	r3, #0
 8005244:	db0b      	blt.n	800525e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	f003 021f 	and.w	r2, r3, #31
 800524c:	4907      	ldr	r1, [pc, #28]	@ (800526c <__NVIC_EnableIRQ+0x38>)
 800524e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2001      	movs	r0, #1
 8005256:	fa00 f202 	lsl.w	r2, r0, r2
 800525a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	e000e100 	.word	0xe000e100

08005270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	6039      	str	r1, [r7, #0]
 800527a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800527c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005280:	2b00      	cmp	r3, #0
 8005282:	db0a      	blt.n	800529a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	490c      	ldr	r1, [pc, #48]	@ (80052bc <__NVIC_SetPriority+0x4c>)
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	0112      	lsls	r2, r2, #4
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	440b      	add	r3, r1
 8005294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005298:	e00a      	b.n	80052b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4908      	ldr	r1, [pc, #32]	@ (80052c0 <__NVIC_SetPriority+0x50>)
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	3b04      	subs	r3, #4
 80052a8:	0112      	lsls	r2, r2, #4
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	440b      	add	r3, r1
 80052ae:	761a      	strb	r2, [r3, #24]
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	e000e100 	.word	0xe000e100
 80052c0:	e000ed00 	.word	0xe000ed00

080052c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b089      	sub	sp, #36	@ 0x24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f1c3 0307 	rsb	r3, r3, #7
 80052de:	2b04      	cmp	r3, #4
 80052e0:	bf28      	it	cs
 80052e2:	2304      	movcs	r3, #4
 80052e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d902      	bls.n	80052f4 <NVIC_EncodePriority+0x30>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3b03      	subs	r3, #3
 80052f2:	e000      	b.n	80052f6 <NVIC_EncodePriority+0x32>
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f8:	f04f 32ff 	mov.w	r2, #4294967295
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43da      	mvns	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	401a      	ands	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800530c:	f04f 31ff 	mov.w	r1, #4294967295
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	43d9      	mvns	r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800531c:	4313      	orrs	r3, r2
         );
}
 800531e:	4618      	mov	r0, r3
 8005320:	3724      	adds	r7, #36	@ 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3b01      	subs	r3, #1
 8005338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800533c:	d301      	bcc.n	8005342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800533e:	2301      	movs	r3, #1
 8005340:	e00f      	b.n	8005362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005342:	4a0a      	ldr	r2, [pc, #40]	@ (800536c <SysTick_Config+0x40>)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3b01      	subs	r3, #1
 8005348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800534a:	210f      	movs	r1, #15
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	f7ff ff8e 	bl	8005270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005354:	4b05      	ldr	r3, [pc, #20]	@ (800536c <SysTick_Config+0x40>)
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800535a:	4b04      	ldr	r3, [pc, #16]	@ (800536c <SysTick_Config+0x40>)
 800535c:	2207      	movs	r2, #7
 800535e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	e000e010 	.word	0xe000e010

08005370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff ff29 	bl	80051d0 <__NVIC_SetPriorityGrouping>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	4603      	mov	r3, r0
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005394:	f7ff ff40 	bl	8005218 <__NVIC_GetPriorityGrouping>
 8005398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	6978      	ldr	r0, [r7, #20]
 80053a0:	f7ff ff90 	bl	80052c4 <NVIC_EncodePriority>
 80053a4:	4602      	mov	r2, r0
 80053a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff ff5f 	bl	8005270 <__NVIC_SetPriority>
}
 80053b2:	bf00      	nop
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	4603      	mov	r3, r0
 80053c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff ff33 	bl	8005234 <__NVIC_EnableIRQ>
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff ffa4 	bl	800532c <SysTick_Config>
 80053e4:	4603      	mov	r3, r0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e014      	b.n	800542a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	791b      	ldrb	r3, [r3, #4]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fc f9cd 	bl	80017b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e056      	b.n	80054f6 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	795b      	ldrb	r3, [r3, #5]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_DAC_Start+0x20>
 8005450:	2302      	movs	r3, #2
 8005452:	e050      	b.n	80054f6 <HAL_DAC_Start+0xc2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2201      	movs	r2, #1
 800546e:	409a      	lsls	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005478:	4b22      	ldr	r3, [pc, #136]	@ (8005504 <HAL_DAC_Start+0xd0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	099b      	lsrs	r3, r3, #6
 800547e:	4a22      	ldr	r2, [pc, #136]	@ (8005508 <HAL_DAC_Start+0xd4>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	099b      	lsrs	r3, r3, #6
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800548a:	e002      	b.n	8005492 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3b01      	subs	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f9      	bne.n	800548c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10f      	bne.n	80054be <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d11d      	bne.n	80054e8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	e014      	b.n	80054e8 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2102      	movs	r1, #2
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d107      	bne.n	80054e8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0202 	orr.w	r2, r2, #2
 80054e6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000388 	.word	0x20000388
 8005508:	053e2d63 	.word	0x053e2d63

0800550c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e018      	b.n	800555a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4413      	add	r3, r2
 8005540:	3308      	adds	r3, #8
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e004      	b.n	8005550 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4413      	add	r3, r2
 800554c:	3314      	adds	r3, #20
 800554e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	461a      	mov	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08a      	sub	sp, #40	@ 0x28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_DAC_ConfigChannel+0x1c>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e1a1      	b.n	80058cc <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	795b      	ldrb	r3, [r3, #5]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_DAC_ConfigChannel+0x32>
 8005596:	2302      	movs	r3, #2
 8005598:	e198      	b.n	80058cc <HAL_DAC_ConfigChannel+0x364>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2202      	movs	r2, #2
 80055a4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d17a      	bne.n	80056a4 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80055ae:	f7fe fce1 	bl	8003f74 <HAL_GetTick>
 80055b2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d13d      	bne.n	8005636 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055ba:	e018      	b.n	80055ee <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055bc:	f7fe fcda 	bl	8003f74 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d911      	bls.n	80055ee <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f043 0208 	orr.w	r2, r3, #8
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2203      	movs	r2, #3
 80055e8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e16e      	b.n	80058cc <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1df      	bne.n	80055bc <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005604:	641a      	str	r2, [r3, #64]	@ 0x40
 8005606:	e020      	b.n	800564a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005608:	f7fe fcb4 	bl	8003f74 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d90f      	bls.n	8005636 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561c:	2b00      	cmp	r3, #0
 800561e:	da0a      	bge.n	8005636 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f043 0208 	orr.w	r2, r3, #8
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2203      	movs	r2, #3
 8005630:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e14a      	b.n	80058cc <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563c:	2b00      	cmp	r3, #0
 800563e:	dbe3      	blt.n	8005608 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005648:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	ea02 0103 	and.w	r1, r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	409a      	lsls	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	21ff      	movs	r1, #255	@ 0xff
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	ea02 0103 	and.w	r1, r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	409a      	lsls	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d11d      	bne.n	80056e8 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	221f      	movs	r2, #31
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c4:	4013      	ands	r3, r2
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056dc:	4313      	orrs	r3, r2
 80056de:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2207      	movs	r2, #7
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005700:	4013      	ands	r3, r2
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d102      	bne.n	8005712 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800570c:	2300      	movs	r3, #0
 800570e:	623b      	str	r3, [r7, #32]
 8005710:	e00f      	b.n	8005732 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d102      	bne.n	8005720 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800571a:	2301      	movs	r3, #1
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	e008      	b.n	8005732 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005728:	2301      	movs	r3, #1
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	e001      	b.n	8005732 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800572e:	2300      	movs	r3, #0
 8005730:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	6a3a      	ldr	r2, [r7, #32]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005754:	4013      	ands	r3, r2
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	791b      	ldrb	r3, [r3, #4]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d102      	bne.n	8005766 <HAL_DAC_ConfigChannel+0x1fe>
 8005760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005764:	e000      	b.n	8005768 <HAL_DAC_ConfigChannel+0x200>
 8005766:	2300      	movs	r3, #0
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005780:	4013      	ands	r3, r2
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	795b      	ldrb	r3, [r3, #5]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d102      	bne.n	8005792 <HAL_DAC_ConfigChannel+0x22a>
 800578c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005790:	e000      	b.n	8005794 <HAL_DAC_ConfigChannel+0x22c>
 8005792:	2300      	movs	r3, #0
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d114      	bne.n	80057d4 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80057aa:	f001 ffc3 	bl	8007734 <HAL_RCC_GetHCLKFreq>
 80057ae:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4a48      	ldr	r2, [pc, #288]	@ (80058d4 <HAL_DAC_ConfigChannel+0x36c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d904      	bls.n	80057c2 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057be:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c0:	e00f      	b.n	80057e2 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4a44      	ldr	r2, [pc, #272]	@ (80058d8 <HAL_DAC_ConfigChannel+0x370>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d90a      	bls.n	80057e0 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d2:	e006      	b.n	80057e2 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057da:	4313      	orrs	r3, r2
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057de:	e000      	b.n	80057e2 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80057e0:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f0:	4313      	orrs	r3, r2
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43da      	mvns	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	400a      	ands	r2, r1
 8005818:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005834:	4013      	ands	r3, r2
 8005836:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800584c:	4313      	orrs	r3, r2
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005856:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6819      	ldr	r1, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	22c0      	movs	r2, #192	@ 0xc0
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43da      	mvns	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	400a      	ands	r2, r1
 8005872:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	089b      	lsrs	r3, r3, #2
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	ea02 0103 	and.w	r1, r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	409a      	lsls	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80058ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3728      	adds	r7, #40	@ 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	09896800 	.word	0x09896800
 80058d8:	04c4b400 	.word	0x04c4b400

080058dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e08d      	b.n	8005a0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	4b47      	ldr	r3, [pc, #284]	@ (8005a14 <HAL_DMA_Init+0x138>)
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d80f      	bhi.n	800591a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	4b45      	ldr	r3, [pc, #276]	@ (8005a18 <HAL_DMA_Init+0x13c>)
 8005902:	4413      	add	r3, r2
 8005904:	4a45      	ldr	r2, [pc, #276]	@ (8005a1c <HAL_DMA_Init+0x140>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	009a      	lsls	r2, r3, #2
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a42      	ldr	r2, [pc, #264]	@ (8005a20 <HAL_DMA_Init+0x144>)
 8005916:	641a      	str	r2, [r3, #64]	@ 0x40
 8005918:	e00e      	b.n	8005938 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	4b40      	ldr	r3, [pc, #256]	@ (8005a24 <HAL_DMA_Init+0x148>)
 8005922:	4413      	add	r3, r2
 8005924:	4a3d      	ldr	r2, [pc, #244]	@ (8005a1c <HAL_DMA_Init+0x140>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	009a      	lsls	r2, r3, #2
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a3c      	ldr	r2, [pc, #240]	@ (8005a28 <HAL_DMA_Init+0x14c>)
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800595c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa76 	bl	8005e7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005998:	d102      	bne.n	80059a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d010      	beq.n	80059e0 <HAL_DMA_Init+0x104>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d80c      	bhi.n	80059e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fa96 	bl	8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	e008      	b.n	80059f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40020407 	.word	0x40020407
 8005a18:	bffdfff8 	.word	0xbffdfff8
 8005a1c:	cccccccd 	.word	0xcccccccd
 8005a20:	40020000 	.word	0x40020000
 8005a24:	bffdfbf8 	.word	0xbffdfbf8
 8005a28:	40020400 	.word	0x40020400

08005a2c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_DMA_Start_IT+0x20>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e066      	b.n	8005b1a <HAL_DMA_Start_IT+0xee>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d155      	bne.n	8005b0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f9bb 	bl	8005e00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 020e 	orr.w	r2, r2, #14
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e00f      	b.n	8005ac4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0204 	bic.w	r2, r2, #4
 8005ab2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 020a 	orr.w	r2, r2, #10
 8005ac2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005adc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ae0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005af8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e005      	b.n	8005b18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b14:	2302      	movs	r3, #2
 8005b16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d005      	beq.n	8005b46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
 8005b44:	e037      	b.n	8005bb6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 020e 	bic.w	r2, r2, #14
 8005b54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f003 021f 	and.w	r2, r3, #31
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	2101      	movs	r1, #1
 8005b84:	fa01 f202 	lsl.w	r2, r1, r2
 8005b88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005baa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005bb4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d00d      	beq.n	8005c08 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	73fb      	strb	r3, [r7, #15]
 8005c06:	e047      	b.n	8005c98 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 020e 	bic.w	r2, r2, #14
 8005c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3c:	f003 021f 	and.w	r2, r3, #31
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	2101      	movs	r1, #1
 8005c46:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
    }
  }
  return status;
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d026      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x7a>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d021      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0204 	bic.w	r2, r2, #4
 8005cf4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfa:	f003 021f 	and.w	r2, r3, #31
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	2104      	movs	r1, #4
 8005d04:	fa01 f202 	lsl.w	r2, r1, r2
 8005d08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d071      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d1a:	e06c      	b.n	8005df6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2202      	movs	r2, #2
 8005d26:	409a      	lsls	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d02e      	beq.n	8005d8e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d029      	beq.n	8005d8e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 020a 	bic.w	r2, r2, #10
 8005d56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d64:	f003 021f 	and.w	r2, r3, #31
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	2102      	movs	r1, #2
 8005d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d038      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005d8c:	e033      	b.n	8005df6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2208      	movs	r2, #8
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02a      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d025      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 020e 	bic.w	r2, r2, #14
 8005dba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc0:	f003 021f 	and.w	r2, r3, #31
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	2101      	movs	r1, #1
 8005dca:	fa01 f202 	lsl.w	r2, r1, r2
 8005dce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
}
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e16:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e28:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2e:	f003 021f 	and.w	r2, r3, #31
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	2101      	movs	r1, #1
 8005e38:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d108      	bne.n	8005e60 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e5e:	e007      	b.n	8005e70 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	60da      	str	r2, [r3, #12]
}
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b16      	ldr	r3, [pc, #88]	@ (8005ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d802      	bhi.n	8005e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005e90:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e001      	b.n	8005e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005e96:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005e98:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	3b08      	subs	r3, #8
 8005ea6:	4a12      	ldr	r2, [pc, #72]	@ (8005ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb4:	089b      	lsrs	r3, r3, #2
 8005eb6:	009a      	lsls	r2, r3, #2
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8005ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ec6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	2201      	movs	r2, #1
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40020407 	.word	0x40020407
 8005ee8:	40020800 	.word	0x40020800
 8005eec:	40020820 	.word	0x40020820
 8005ef0:	cccccccd 	.word	0xcccccccd
 8005ef4:	40020880 	.word	0x40020880

08005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	461a      	mov	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a08      	ldr	r2, [pc, #32]	@ (8005f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f1a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	f003 031f 	and.w	r3, r3, #31
 8005f24:	2201      	movs	r2, #1
 8005f26:	409a      	lsls	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	1000823f 	.word	0x1000823f
 8005f3c:	40020940 	.word	0x40020940

08005f40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e147      	b.n	80061e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fb fcee 	bl	8001948 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0210 	bic.w	r2, r2, #16
 8005f7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f7c:	f7fd fffa 	bl	8003f74 <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005f82:	e012      	b.n	8005faa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005f84:	f7fd fff6 	bl	8003f74 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b0a      	cmp	r3, #10
 8005f90:	d90b      	bls.n	8005faa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f96:	f043 0201 	orr.w	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e11b      	b.n	80061e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d0e5      	beq.n	8005f84 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fc8:	f7fd ffd4 	bl	8003f74 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005fce:	e012      	b.n	8005ff6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fd0:	f7fd ffd0 	bl	8003f74 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b0a      	cmp	r3, #10
 8005fdc:	d90b      	bls.n	8005ff6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe2:	f043 0201 	orr.w	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2203      	movs	r2, #3
 8005fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e0f5      	b.n	80061e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0e5      	beq.n	8005fd0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0202 	orr.w	r2, r2, #2
 8006012:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a74      	ldr	r2, [pc, #464]	@ (80061ec <HAL_FDCAN_Init+0x2ac>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d103      	bne.n	8006026 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800601e:	4a74      	ldr	r2, [pc, #464]	@ (80061f0 <HAL_FDCAN_Init+0x2b0>)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7c1b      	ldrb	r3, [r3, #16]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d108      	bne.n	8006040 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800603c:	619a      	str	r2, [r3, #24]
 800603e:	e007      	b.n	8006050 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800604e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	7c5b      	ldrb	r3, [r3, #17]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d108      	bne.n	800606a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006066:	619a      	str	r2, [r3, #24]
 8006068:	e007      	b.n	800607a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006078:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	7c9b      	ldrb	r3, [r3, #18]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d108      	bne.n	8006094 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006090:	619a      	str	r2, [r3, #24]
 8006092:	e007      	b.n	80060a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699a      	ldr	r2, [r3, #24]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80060c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0210 	bic.w	r2, r2, #16
 80060d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d108      	bne.n	80060f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0204 	orr.w	r2, r2, #4
 80060f0:	619a      	str	r2, [r3, #24]
 80060f2:	e02c      	b.n	800614e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d028      	beq.n	800614e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d01c      	beq.n	800613e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006112:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0210 	orr.w	r2, r2, #16
 8006122:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d110      	bne.n	800614e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0220 	orr.w	r2, r2, #32
 800613a:	619a      	str	r2, [r3, #24]
 800613c:	e007      	b.n	800614e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0220 	orr.w	r2, r2, #32
 800614c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	3b01      	subs	r3, #1
 8006154:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	3b01      	subs	r3, #1
 800615c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800615e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006166:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	3b01      	subs	r3, #1
 8006170:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006176:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006178:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006182:	d115      	bne.n	80061b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	3b01      	subs	r3, #1
 8006190:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006192:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006198:	3b01      	subs	r3, #1
 800619a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800619c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	3b01      	subs	r3, #1
 80061a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 faa0 	bl	800670c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40006400 	.word	0x40006400
 80061f0:	40006500 	.word	0x40006500

080061f4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006204:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006206:	7dfb      	ldrb	r3, [r7, #23]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d002      	beq.n	8006212 <HAL_FDCAN_ConfigFilter+0x1e>
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d13d      	bne.n	800628e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d119      	bne.n	800624e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006226:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800622e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e01d      	b.n	800628a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	075a      	lsls	r2, r3, #29
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	079a      	lsls	r2, r3, #30
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	3304      	adds	r3, #4
 8006282:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e006      	b.n	800629c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006292:	f043 0202 	orr.w	r2, r3, #2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
  }
}
 800629c:	4618      	mov	r0, r3
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d12c      	bne.n	800631a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80062c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e023      	b.n	8006328 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80062e8:	0c1b      	lsrs	r3, r3, #16
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fa74 	bl	80067e4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2101      	movs	r1, #1
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	fa01 f202 	lsl.w	r2, r1, r2
 8006308:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800630c:	2201      	movs	r2, #1
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	409a      	lsls	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	e006      	b.n	8006328 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800631e:	f043 0208 	orr.w	r2, r3, #8
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006330:	b480      	push	{r7}
 8006332:	b08b      	sub	sp, #44	@ 0x2c
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006348:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800634a:	7efb      	ldrb	r3, [r7, #27]
 800634c:	2b02      	cmp	r3, #2
 800634e:	f040 80e8 	bne.w	8006522 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b40      	cmp	r3, #64	@ 0x40
 8006356:	d137      	bne.n	80063c8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0db      	b.n	8006530 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006380:	0e1b      	lsrs	r3, r3, #24
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d10a      	bne.n	80063a0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006392:	0a5b      	lsrs	r3, r3, #9
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800639c:	2301      	movs	r3, #1
 800639e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	4613      	mov	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4413      	add	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	440b      	add	r3, r1
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c6:	e036      	b.n	8006436 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d107      	bne.n	80063e8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0a3      	b.n	8006530 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063f0:	0e1b      	lsrs	r3, r3, #24
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d10a      	bne.n	8006410 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800640c:	2301      	movs	r3, #1
 800640e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4413      	add	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	440b      	add	r3, r1
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d107      	bne.n	800645a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	0c9b      	lsrs	r3, r3, #18
 8006450:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e005      	b.n	8006466 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	3304      	adds	r3, #4
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	b29a      	uxth	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	0e1b      	lsrs	r3, r3, #24
 80064ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	0fda      	lsrs	r2, r3, #31
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	3304      	adds	r3, #4
 80064d0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80064d6:	2300      	movs	r3, #0
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	e00a      	b.n	80064f2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	441a      	add	r2, r3
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	440b      	add	r3, r1
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	3301      	adds	r3, #1
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	4a11      	ldr	r2, [pc, #68]	@ (800653c <HAL_FDCAN_GetRxMessage+0x20c>)
 80064f8:	5cd3      	ldrb	r3, [r2, r3]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	4293      	cmp	r3, r2
 8006500:	d3ec      	bcc.n	80064dc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b40      	cmp	r3, #64	@ 0x40
 8006506:	d105      	bne.n	8006514 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8006512:	e004      	b.n	800651e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	e006      	b.n	8006530 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006526:	f043 0208 	orr.w	r2, r3, #8
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
  }
}
 8006530:	4618      	mov	r0, r3
 8006532:	372c      	adds	r7, #44	@ 0x2c
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	0800c4cc 	.word	0x0800c4cc

08006540 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006552:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d003      	beq.n	8006562 <HAL_FDCAN_ActivateNotification+0x22>
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b02      	cmp	r3, #2
 800655e:	f040 80c8 	bne.w	80066f2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006568:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d03b      	beq.n	80065f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d031      	beq.n	80065f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d027      	beq.n	80065f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01d      	beq.n	80065f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d009      	beq.n	80065f6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00c      	beq.n	8006606 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d107      	bne.n	8006606 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d13b      	bne.n	8006692 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d131      	bne.n	8006692 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	d127      	bne.n	8006692 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d11d      	bne.n	8006692 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b00      	cmp	r3, #0
 8006668:	d113      	bne.n	8006692 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00c      	beq.n	80066a2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0202 	orr.w	r2, r2, #2
 80066a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d009      	beq.n	80066de <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	430a      	orrs	r2, r1
 80066da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e006      	b.n	8006700 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f6:	f043 0202 	orr.w	r2, r3, #2
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
  }
}
 8006700:	4618      	mov	r0, r3
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006714:	4b30      	ldr	r3, [pc, #192]	@ (80067d8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006716:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2f      	ldr	r2, [pc, #188]	@ (80067dc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d103      	bne.n	800672a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006728:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2c      	ldr	r2, [pc, #176]	@ (80067e0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d103      	bne.n	800673c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800673a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800674a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	041a      	lsls	r2, r3, #16
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006770:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	061a      	lsls	r2, r3, #24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	e005      	b.n	80067be <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3304      	adds	r3, #4
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d3f3      	bcc.n	80067b2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	4000a400 	.word	0x4000a400
 80067dc:	40006800 	.word	0x40006800
 80067e0:	40006c00 	.word	0x40006c00

080067e4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b089      	sub	sp, #36	@ 0x24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006802:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800680a:	4313      	orrs	r3, r2
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	e00a      	b.n	8006826 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006818:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800681e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006820:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006824:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006830:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006836:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800683c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	4613      	mov	r3, r2
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	4413      	add	r3, r2
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	440b      	add	r3, r1
 8006858:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	3304      	adds	r3, #4
 8006864:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	3304      	adds	r3, #4
 8006870:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	e020      	b.n	80068ba <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	3303      	adds	r3, #3
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	4413      	add	r3, r2
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	3302      	adds	r3, #2
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	440b      	add	r3, r1
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006890:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	3301      	adds	r3, #1
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	440b      	add	r3, r1
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800689e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	440a      	add	r2, r1
 80068a6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80068a8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	3304      	adds	r3, #4
 80068b2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	3304      	adds	r3, #4
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	4a06      	ldr	r2, [pc, #24]	@ (80068d8 <FDCAN_CopyMessageToRAM+0xf4>)
 80068c0:	5cd3      	ldrb	r3, [r2, r3]
 80068c2:	461a      	mov	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d3d6      	bcc.n	8006878 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	3724      	adds	r7, #36	@ 0x24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	0800c4cc 	.word	0x0800c4cc

080068dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068ea:	e15a      	b.n	8006ba2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	2101      	movs	r1, #1
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	fa01 f303 	lsl.w	r3, r1, r3
 80068f8:	4013      	ands	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 814c 	beq.w	8006b9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	2b01      	cmp	r3, #1
 800690e:	d005      	beq.n	800691c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006918:	2b02      	cmp	r3, #2
 800691a:	d130      	bne.n	800697e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	2203      	movs	r2, #3
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	43db      	mvns	r3, r3
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4013      	ands	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006952:	2201      	movs	r2, #1
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43db      	mvns	r3, r3
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4013      	ands	r3, r2
 8006960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	091b      	lsrs	r3, r3, #4
 8006968:	f003 0201 	and.w	r2, r3, #1
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b03      	cmp	r3, #3
 8006988:	d017      	beq.n	80069ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	2203      	movs	r2, #3
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	43db      	mvns	r3, r3
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4013      	ands	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d123      	bne.n	8006a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	08da      	lsrs	r2, r3, #3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3208      	adds	r2, #8
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	220f      	movs	r2, #15
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	43db      	mvns	r3, r3
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4013      	ands	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	fa02 f303 	lsl.w	r3, r2, r3
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	08da      	lsrs	r2, r3, #3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3208      	adds	r2, #8
 8006a08:	6939      	ldr	r1, [r7, #16]
 8006a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	2203      	movs	r2, #3
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4013      	ands	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f003 0203 	and.w	r2, r3, #3
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80a6 	beq.w	8006b9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a50:	4b5b      	ldr	r3, [pc, #364]	@ (8006bc0 <HAL_GPIO_Init+0x2e4>)
 8006a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a54:	4a5a      	ldr	r2, [pc, #360]	@ (8006bc0 <HAL_GPIO_Init+0x2e4>)
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a5c:	4b58      	ldr	r3, [pc, #352]	@ (8006bc0 <HAL_GPIO_Init+0x2e4>)
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a68:	4a56      	ldr	r2, [pc, #344]	@ (8006bc4 <HAL_GPIO_Init+0x2e8>)
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	089b      	lsrs	r3, r3, #2
 8006a6e:	3302      	adds	r3, #2
 8006a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	220f      	movs	r2, #15
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006a92:	d01f      	beq.n	8006ad4 <HAL_GPIO_Init+0x1f8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a4c      	ldr	r2, [pc, #304]	@ (8006bc8 <HAL_GPIO_Init+0x2ec>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d019      	beq.n	8006ad0 <HAL_GPIO_Init+0x1f4>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a4b      	ldr	r2, [pc, #300]	@ (8006bcc <HAL_GPIO_Init+0x2f0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d013      	beq.n	8006acc <HAL_GPIO_Init+0x1f0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a4a      	ldr	r2, [pc, #296]	@ (8006bd0 <HAL_GPIO_Init+0x2f4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00d      	beq.n	8006ac8 <HAL_GPIO_Init+0x1ec>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a49      	ldr	r2, [pc, #292]	@ (8006bd4 <HAL_GPIO_Init+0x2f8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d007      	beq.n	8006ac4 <HAL_GPIO_Init+0x1e8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a48      	ldr	r2, [pc, #288]	@ (8006bd8 <HAL_GPIO_Init+0x2fc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d101      	bne.n	8006ac0 <HAL_GPIO_Init+0x1e4>
 8006abc:	2305      	movs	r3, #5
 8006abe:	e00a      	b.n	8006ad6 <HAL_GPIO_Init+0x1fa>
 8006ac0:	2306      	movs	r3, #6
 8006ac2:	e008      	b.n	8006ad6 <HAL_GPIO_Init+0x1fa>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	e006      	b.n	8006ad6 <HAL_GPIO_Init+0x1fa>
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e004      	b.n	8006ad6 <HAL_GPIO_Init+0x1fa>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e002      	b.n	8006ad6 <HAL_GPIO_Init+0x1fa>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <HAL_GPIO_Init+0x1fa>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	f002 0203 	and.w	r2, r2, #3
 8006adc:	0092      	lsls	r2, r2, #2
 8006ade:	4093      	lsls	r3, r2
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ae6:	4937      	ldr	r1, [pc, #220]	@ (8006bc4 <HAL_GPIO_Init+0x2e8>)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	089b      	lsrs	r3, r3, #2
 8006aec:	3302      	adds	r3, #2
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006af4:	4b39      	ldr	r3, [pc, #228]	@ (8006bdc <HAL_GPIO_Init+0x300>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	43db      	mvns	r3, r3
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4013      	ands	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b18:	4a30      	ldr	r2, [pc, #192]	@ (8006bdc <HAL_GPIO_Init+0x300>)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8006bdc <HAL_GPIO_Init+0x300>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	43db      	mvns	r3, r3
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b42:	4a26      	ldr	r2, [pc, #152]	@ (8006bdc <HAL_GPIO_Init+0x300>)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b48:	4b24      	ldr	r3, [pc, #144]	@ (8006bdc <HAL_GPIO_Init+0x300>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	4013      	ands	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bdc <HAL_GPIO_Init+0x300>)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b72:	4b1a      	ldr	r3, [pc, #104]	@ (8006bdc <HAL_GPIO_Init+0x300>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b96:	4a11      	ldr	r2, [pc, #68]	@ (8006bdc <HAL_GPIO_Init+0x300>)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f47f ae9d 	bne.w	80068ec <HAL_GPIO_Init+0x10>
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	48000400 	.word	0x48000400
 8006bcc:	48000800 	.word	0x48000800
 8006bd0:	48000c00 	.word	0x48000c00
 8006bd4:	48001000 	.word	0x48001000
 8006bd8:	48001400 	.word	0x48001400
 8006bdc:	40010400 	.word	0x40010400

08006be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
 8006bfc:	e001      	b.n	8006c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	807b      	strh	r3, [r7, #2]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c20:	787b      	ldrb	r3, [r7, #1]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c26:	887a      	ldrh	r2, [r7, #2]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c2c:	e002      	b.n	8006c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c2e:	887a      	ldrh	r2, [r7, #2]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006c4a:	4b08      	ldr	r3, [pc, #32]	@ (8006c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d006      	beq.n	8006c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c56:	4a05      	ldr	r2, [pc, #20]	@ (8006c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fb f8aa 	bl	8001db8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40010400 	.word	0x40010400

08006c70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d141      	bne.n	8006d02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c8a:	d131      	bne.n	8006cf0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c8c:	4b47      	ldr	r3, [pc, #284]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c92:	4a46      	ldr	r2, [pc, #280]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c9c:	4b43      	ldr	r3, [pc, #268]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ca4:	4a41      	ldr	r2, [pc, #260]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cac:	4b40      	ldr	r3, [pc, #256]	@ (8006db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2232      	movs	r2, #50	@ 0x32
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8006db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	0c9b      	lsrs	r3, r3, #18
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cc2:	e002      	b.n	8006cca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cca:	4b38      	ldr	r3, [pc, #224]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd6:	d102      	bne.n	8006cde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f2      	bne.n	8006cc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cde:	4b33      	ldr	r3, [pc, #204]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cea:	d158      	bne.n	8006d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e057      	b.n	8006da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d00:	e04d      	b.n	8006d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d08:	d141      	bne.n	8006d8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d0a:	4b28      	ldr	r3, [pc, #160]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d16:	d131      	bne.n	8006d7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d18:	4b24      	ldr	r3, [pc, #144]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d1e:	4a23      	ldr	r2, [pc, #140]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d28:	4b20      	ldr	r3, [pc, #128]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d30:	4a1e      	ldr	r2, [pc, #120]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d38:	4b1d      	ldr	r3, [pc, #116]	@ (8006db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2232      	movs	r2, #50	@ 0x32
 8006d3e:	fb02 f303 	mul.w	r3, r2, r3
 8006d42:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d44:	fba2 2303 	umull	r2, r3, r2, r3
 8006d48:	0c9b      	lsrs	r3, r3, #18
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d4e:	e002      	b.n	8006d56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d56:	4b15      	ldr	r3, [pc, #84]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d62:	d102      	bne.n	8006d6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f2      	bne.n	8006d50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d6a:	4b10      	ldr	r3, [pc, #64]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d76:	d112      	bne.n	8006d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e011      	b.n	8006da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d82:	4a0a      	ldr	r2, [pc, #40]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d8c:	e007      	b.n	8006d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d96:	4a05      	ldr	r2, [pc, #20]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	40007000 	.word	0x40007000
 8006db0:	20000388 	.word	0x20000388
 8006db4:	431bde83 	.word	0x431bde83

08006db8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006dbc:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4a04      	ldr	r2, [pc, #16]	@ (8006dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dc6:	6093      	str	r3, [r2, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40007000 	.word	0x40007000

08006dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e2fe      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d075      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006df6:	4b97      	ldr	r3, [pc, #604]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e00:	4b94      	ldr	r3, [pc, #592]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b0c      	cmp	r3, #12
 8006e0e:	d102      	bne.n	8006e16 <HAL_RCC_OscConfig+0x3e>
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d002      	beq.n	8006e1c <HAL_RCC_OscConfig+0x44>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d10b      	bne.n	8006e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d05b      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x108>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d157      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e2d9      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCC_OscConfig+0x74>
 8006e3e:	4b85      	ldr	r3, [pc, #532]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a84      	ldr	r2, [pc, #528]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e01d      	b.n	8006e88 <HAL_RCC_OscConfig+0xb0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCC_OscConfig+0x98>
 8006e56:	4b7f      	ldr	r3, [pc, #508]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	4b7c      	ldr	r3, [pc, #496]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a7b      	ldr	r2, [pc, #492]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e00b      	b.n	8006e88 <HAL_RCC_OscConfig+0xb0>
 8006e70:	4b78      	ldr	r3, [pc, #480]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a77      	ldr	r2, [pc, #476]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	4b75      	ldr	r3, [pc, #468]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a74      	ldr	r2, [pc, #464]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d013      	beq.n	8006eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e90:	f7fd f870 	bl	8003f74 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e98:	f7fd f86c 	bl	8003f74 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b64      	cmp	r3, #100	@ 0x64
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e29e      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f0      	beq.n	8006e98 <HAL_RCC_OscConfig+0xc0>
 8006eb6:	e014      	b.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fd f85c 	bl	8003f74 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec0:	f7fd f858 	bl	8003f74 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b64      	cmp	r3, #100	@ 0x64
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e28a      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ed2:	4b60      	ldr	r3, [pc, #384]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0xe8>
 8006ede:	e000      	b.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d075      	beq.n	8006fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eee:	4b59      	ldr	r3, [pc, #356]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
 8006ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ef8:	4b56      	ldr	r3, [pc, #344]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0303 	and.w	r3, r3, #3
 8006f00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b0c      	cmp	r3, #12
 8006f06:	d102      	bne.n	8006f0e <HAL_RCC_OscConfig+0x136>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d002      	beq.n	8006f14 <HAL_RCC_OscConfig+0x13c>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d11f      	bne.n	8006f54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f14:	4b4f      	ldr	r3, [pc, #316]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_RCC_OscConfig+0x154>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e25d      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2c:	4b49      	ldr	r3, [pc, #292]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	061b      	lsls	r3, r3, #24
 8006f3a:	4946      	ldr	r1, [pc, #280]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f40:	4b45      	ldr	r3, [pc, #276]	@ (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fc ffc9 	bl	8003edc <HAL_InitTick>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d043      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e249      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d023      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a3c      	ldr	r2, [pc, #240]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f68:	f7fd f804 	bl	8003f74 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f70:	f7fd f800 	bl	8003f74 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e232      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f82:	4b34      	ldr	r3, [pc, #208]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f8e:	4b31      	ldr	r3, [pc, #196]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	492d      	ldr	r1, [pc, #180]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	604b      	str	r3, [r1, #4]
 8006fa2:	e01a      	b.n	8006fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006faa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb0:	f7fc ffe0 	bl	8003f74 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fb8:	f7fc ffdc 	bl	8003f74 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e20e      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fca:	4b22      	ldr	r3, [pc, #136]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x1e0>
 8006fd6:	e000      	b.n	8006fda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d041      	beq.n	800706a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d01c      	beq.n	8007028 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fee:	4b19      	ldr	r3, [pc, #100]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ff4:	4a17      	ldr	r2, [pc, #92]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ffe:	f7fc ffb9 	bl	8003f74 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007006:	f7fc ffb5 	bl	8003f74 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e1e7      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007018:	4b0e      	ldr	r3, [pc, #56]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 800701a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0ef      	beq.n	8007006 <HAL_RCC_OscConfig+0x22e>
 8007026:	e020      	b.n	800706a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007028:	4b0a      	ldr	r3, [pc, #40]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 800702a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800702e:	4a09      	ldr	r2, [pc, #36]	@ (8007054 <HAL_RCC_OscConfig+0x27c>)
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007038:	f7fc ff9c 	bl	8003f74 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800703e:	e00d      	b.n	800705c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007040:	f7fc ff98 	bl	8003f74 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d906      	bls.n	800705c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e1ca      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
 8007052:	bf00      	nop
 8007054:	40021000 	.word	0x40021000
 8007058:	2000038c 	.word	0x2000038c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800705c:	4b8c      	ldr	r3, [pc, #560]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 800705e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1ea      	bne.n	8007040 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80a6 	beq.w	80071c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007078:	2300      	movs	r3, #0
 800707a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800707c:	4b84      	ldr	r3, [pc, #528]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_RCC_OscConfig+0x2b4>
 8007088:	2301      	movs	r3, #1
 800708a:	e000      	b.n	800708e <HAL_RCC_OscConfig+0x2b6>
 800708c:	2300      	movs	r3, #0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00d      	beq.n	80070ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007092:	4b7f      	ldr	r3, [pc, #508]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007096:	4a7e      	ldr	r2, [pc, #504]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800709c:	6593      	str	r3, [r2, #88]	@ 0x58
 800709e:	4b7c      	ldr	r3, [pc, #496]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 80070a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80070aa:	2301      	movs	r3, #1
 80070ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070ae:	4b79      	ldr	r3, [pc, #484]	@ (8007294 <HAL_RCC_OscConfig+0x4bc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d118      	bne.n	80070ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070ba:	4b76      	ldr	r3, [pc, #472]	@ (8007294 <HAL_RCC_OscConfig+0x4bc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a75      	ldr	r2, [pc, #468]	@ (8007294 <HAL_RCC_OscConfig+0x4bc>)
 80070c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070c6:	f7fc ff55 	bl	8003f74 <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ce:	f7fc ff51 	bl	8003f74 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e183      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070e0:	4b6c      	ldr	r3, [pc, #432]	@ (8007294 <HAL_RCC_OscConfig+0x4bc>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d108      	bne.n	8007106 <HAL_RCC_OscConfig+0x32e>
 80070f4:	4b66      	ldr	r3, [pc, #408]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070fa:	4a65      	ldr	r2, [pc, #404]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 80070fc:	f043 0301 	orr.w	r3, r3, #1
 8007100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007104:	e024      	b.n	8007150 <HAL_RCC_OscConfig+0x378>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b05      	cmp	r3, #5
 800710c:	d110      	bne.n	8007130 <HAL_RCC_OscConfig+0x358>
 800710e:	4b60      	ldr	r3, [pc, #384]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007114:	4a5e      	ldr	r2, [pc, #376]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007116:	f043 0304 	orr.w	r3, r3, #4
 800711a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800711e:	4b5c      	ldr	r3, [pc, #368]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007124:	4a5a      	ldr	r2, [pc, #360]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007126:	f043 0301 	orr.w	r3, r3, #1
 800712a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800712e:	e00f      	b.n	8007150 <HAL_RCC_OscConfig+0x378>
 8007130:	4b57      	ldr	r3, [pc, #348]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007136:	4a56      	ldr	r2, [pc, #344]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007140:	4b53      	ldr	r3, [pc, #332]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007146:	4a52      	ldr	r2, [pc, #328]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007148:	f023 0304 	bic.w	r3, r3, #4
 800714c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d016      	beq.n	8007186 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007158:	f7fc ff0c 	bl	8003f74 <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800715e:	e00a      	b.n	8007176 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007160:	f7fc ff08 	bl	8003f74 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800716e:	4293      	cmp	r3, r2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e138      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007176:	4b46      	ldr	r3, [pc, #280]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0ed      	beq.n	8007160 <HAL_RCC_OscConfig+0x388>
 8007184:	e015      	b.n	80071b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007186:	f7fc fef5 	bl	8003f74 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800718c:	e00a      	b.n	80071a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800718e:	f7fc fef1 	bl	8003f74 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719c:	4293      	cmp	r3, r2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e121      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071a4:	4b3a      	ldr	r3, [pc, #232]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1ed      	bne.n	800718e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071b2:	7ffb      	ldrb	r3, [r7, #31]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d105      	bne.n	80071c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071b8:	4b35      	ldr	r3, [pc, #212]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 80071ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071bc:	4a34      	ldr	r2, [pc, #208]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 80071be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d03c      	beq.n	800724a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01c      	beq.n	8007212 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 80071da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071de:	4a2c      	ldr	r2, [pc, #176]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e8:	f7fc fec4 	bl	8003f74 <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071f0:	f7fc fec0 	bl	8003f74 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e0f2      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007202:	4b23      	ldr	r3, [pc, #140]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0ef      	beq.n	80071f0 <HAL_RCC_OscConfig+0x418>
 8007210:	e01b      	b.n	800724a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007212:	4b1f      	ldr	r3, [pc, #124]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007218:	4a1d      	ldr	r2, [pc, #116]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 800721a:	f023 0301 	bic.w	r3, r3, #1
 800721e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007222:	f7fc fea7 	bl	8003f74 <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800722a:	f7fc fea3 	bl	8003f74 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e0d5      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800723c:	4b14      	ldr	r3, [pc, #80]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 800723e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1ef      	bne.n	800722a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80c9 	beq.w	80073e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007254:	4b0e      	ldr	r3, [pc, #56]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 030c 	and.w	r3, r3, #12
 800725c:	2b0c      	cmp	r3, #12
 800725e:	f000 8083 	beq.w	8007368 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d15e      	bne.n	8007328 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800726a:	4b09      	ldr	r3, [pc, #36]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a08      	ldr	r2, [pc, #32]	@ (8007290 <HAL_RCC_OscConfig+0x4b8>)
 8007270:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007276:	f7fc fe7d 	bl	8003f74 <HAL_GetTick>
 800727a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800727c:	e00c      	b.n	8007298 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800727e:	f7fc fe79 	bl	8003f74 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d905      	bls.n	8007298 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e0ab      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
 8007290:	40021000 	.word	0x40021000
 8007294:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007298:	4b55      	ldr	r3, [pc, #340]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1ec      	bne.n	800727e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072a4:	4b52      	ldr	r3, [pc, #328]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	4b52      	ldr	r3, [pc, #328]	@ (80073f4 <HAL_RCC_OscConfig+0x61c>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6a11      	ldr	r1, [r2, #32]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072b4:	3a01      	subs	r2, #1
 80072b6:	0112      	lsls	r2, r2, #4
 80072b8:	4311      	orrs	r1, r2
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80072be:	0212      	lsls	r2, r2, #8
 80072c0:	4311      	orrs	r1, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80072c6:	0852      	lsrs	r2, r2, #1
 80072c8:	3a01      	subs	r2, #1
 80072ca:	0552      	lsls	r2, r2, #21
 80072cc:	4311      	orrs	r1, r2
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072d2:	0852      	lsrs	r2, r2, #1
 80072d4:	3a01      	subs	r2, #1
 80072d6:	0652      	lsls	r2, r2, #25
 80072d8:	4311      	orrs	r1, r2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072de:	06d2      	lsls	r2, r2, #27
 80072e0:	430a      	orrs	r2, r1
 80072e2:	4943      	ldr	r1, [pc, #268]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072e8:	4b41      	ldr	r3, [pc, #260]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a40      	ldr	r2, [pc, #256]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 80072ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80072f4:	4b3e      	ldr	r3, [pc, #248]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	4a3d      	ldr	r2, [pc, #244]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 80072fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007300:	f7fc fe38 	bl	8003f74 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007308:	f7fc fe34 	bl	8003f74 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e066      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800731a:	4b35      	ldr	r3, [pc, #212]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f0      	beq.n	8007308 <HAL_RCC_OscConfig+0x530>
 8007326:	e05e      	b.n	80073e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007328:	4b31      	ldr	r3, [pc, #196]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a30      	ldr	r2, [pc, #192]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 800732e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fc fe1e 	bl	8003f74 <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800733c:	f7fc fe1a 	bl	8003f74 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e04c      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800734e:	4b28      	ldr	r3, [pc, #160]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f0      	bne.n	800733c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800735a:	4b25      	ldr	r3, [pc, #148]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	4924      	ldr	r1, [pc, #144]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 8007360:	4b25      	ldr	r3, [pc, #148]	@ (80073f8 <HAL_RCC_OscConfig+0x620>)
 8007362:	4013      	ands	r3, r2
 8007364:	60cb      	str	r3, [r1, #12]
 8007366:	e03e      	b.n	80073e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e039      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007374:	4b1e      	ldr	r3, [pc, #120]	@ (80073f0 <HAL_RCC_OscConfig+0x618>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f003 0203 	and.w	r2, r3, #3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	429a      	cmp	r2, r3
 8007386:	d12c      	bne.n	80073e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007392:	3b01      	subs	r3, #1
 8007394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007396:	429a      	cmp	r2, r3
 8007398:	d123      	bne.n	80073e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d11b      	bne.n	80073e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d113      	bne.n	80073e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	3b01      	subs	r3, #1
 80073c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d109      	bne.n	80073e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d8:	085b      	lsrs	r3, r3, #1
 80073da:	3b01      	subs	r3, #1
 80073dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073de:	429a      	cmp	r2, r3
 80073e0:	d001      	beq.n	80073e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3720      	adds	r7, #32
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40021000 	.word	0x40021000
 80073f4:	019f800c 	.word	0x019f800c
 80073f8:	feeefffc 	.word	0xfeeefffc

080073fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e11e      	b.n	8007652 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007414:	4b91      	ldr	r3, [pc, #580]	@ (800765c <HAL_RCC_ClockConfig+0x260>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d910      	bls.n	8007444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007422:	4b8e      	ldr	r3, [pc, #568]	@ (800765c <HAL_RCC_ClockConfig+0x260>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f023 020f 	bic.w	r2, r3, #15
 800742a:	498c      	ldr	r1, [pc, #560]	@ (800765c <HAL_RCC_ClockConfig+0x260>)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	4313      	orrs	r3, r2
 8007430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007432:	4b8a      	ldr	r3, [pc, #552]	@ (800765c <HAL_RCC_ClockConfig+0x260>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d001      	beq.n	8007444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e106      	b.n	8007652 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d073      	beq.n	8007538 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d129      	bne.n	80074ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007458:	4b81      	ldr	r3, [pc, #516]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e0f4      	b.n	8007652 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007468:	f000 f99c 	bl	80077a4 <RCC_GetSysClockFreqFromPLLSource>
 800746c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4a7c      	ldr	r2, [pc, #496]	@ (8007664 <HAL_RCC_ClockConfig+0x268>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d93f      	bls.n	80074f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007476:	4b7a      	ldr	r3, [pc, #488]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d009      	beq.n	8007496 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800748a:	2b00      	cmp	r3, #0
 800748c:	d033      	beq.n	80074f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007492:	2b00      	cmp	r3, #0
 8007494:	d12f      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007496:	4b72      	ldr	r3, [pc, #456]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800749e:	4a70      	ldr	r2, [pc, #448]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 80074a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074a6:	2380      	movs	r3, #128	@ 0x80
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	e024      	b.n	80074f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d107      	bne.n	80074c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d109      	bne.n	80074d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0c6      	b.n	8007652 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074c4:	4b66      	ldr	r3, [pc, #408]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0be      	b.n	8007652 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80074d4:	f000 f8ce 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 80074d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	4a61      	ldr	r2, [pc, #388]	@ (8007664 <HAL_RCC_ClockConfig+0x268>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d909      	bls.n	80074f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074e2:	4b5f      	ldr	r3, [pc, #380]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074ea:	4a5d      	ldr	r2, [pc, #372]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 80074ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80074f2:	2380      	movs	r3, #128	@ 0x80
 80074f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074f6:	4b5a      	ldr	r3, [pc, #360]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f023 0203 	bic.w	r2, r3, #3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	4957      	ldr	r1, [pc, #348]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007504:	4313      	orrs	r3, r2
 8007506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007508:	f7fc fd34 	bl	8003f74 <HAL_GetTick>
 800750c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800750e:	e00a      	b.n	8007526 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007510:	f7fc fd30 	bl	8003f74 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800751e:	4293      	cmp	r3, r2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e095      	b.n	8007652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007526:	4b4e      	ldr	r3, [pc, #312]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 020c 	and.w	r2, r3, #12
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	429a      	cmp	r2, r3
 8007536:	d1eb      	bne.n	8007510 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d023      	beq.n	800758c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007550:	4b43      	ldr	r3, [pc, #268]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	4a42      	ldr	r2, [pc, #264]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007556:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800755a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007568:	4b3d      	ldr	r3, [pc, #244]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007570:	4a3b      	ldr	r2, [pc, #236]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007572:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007576:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007578:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4936      	ldr	r1, [pc, #216]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007586:	4313      	orrs	r3, r2
 8007588:	608b      	str	r3, [r1, #8]
 800758a:	e008      	b.n	800759e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b80      	cmp	r3, #128	@ 0x80
 8007590:	d105      	bne.n	800759e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007592:	4b33      	ldr	r3, [pc, #204]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	4a32      	ldr	r2, [pc, #200]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007598:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800759c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800759e:	4b2f      	ldr	r3, [pc, #188]	@ (800765c <HAL_RCC_ClockConfig+0x260>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d21d      	bcs.n	80075e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ac:	4b2b      	ldr	r3, [pc, #172]	@ (800765c <HAL_RCC_ClockConfig+0x260>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f023 020f 	bic.w	r2, r3, #15
 80075b4:	4929      	ldr	r1, [pc, #164]	@ (800765c <HAL_RCC_ClockConfig+0x260>)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80075bc:	f7fc fcda 	bl	8003f74 <HAL_GetTick>
 80075c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075c2:	e00a      	b.n	80075da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c4:	f7fc fcd6 	bl	8003f74 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e03b      	b.n	8007652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075da:	4b20      	ldr	r3, [pc, #128]	@ (800765c <HAL_RCC_ClockConfig+0x260>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d1ed      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	4917      	ldr	r1, [pc, #92]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007602:	4313      	orrs	r3, r2
 8007604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007612:	4b13      	ldr	r3, [pc, #76]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	490f      	ldr	r1, [pc, #60]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 8007622:	4313      	orrs	r3, r2
 8007624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007626:	f000 f825 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 800762a:	4602      	mov	r2, r0
 800762c:	4b0c      	ldr	r3, [pc, #48]	@ (8007660 <HAL_RCC_ClockConfig+0x264>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	490c      	ldr	r1, [pc, #48]	@ (8007668 <HAL_RCC_ClockConfig+0x26c>)
 8007638:	5ccb      	ldrb	r3, [r1, r3]
 800763a:	f003 031f 	and.w	r3, r3, #31
 800763e:	fa22 f303 	lsr.w	r3, r2, r3
 8007642:	4a0a      	ldr	r2, [pc, #40]	@ (800766c <HAL_RCC_ClockConfig+0x270>)
 8007644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007646:	4b0a      	ldr	r3, [pc, #40]	@ (8007670 <HAL_RCC_ClockConfig+0x274>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f7fc fc46 	bl	8003edc <HAL_InitTick>
 8007650:	4603      	mov	r3, r0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40022000 	.word	0x40022000
 8007660:	40021000 	.word	0x40021000
 8007664:	04c4b400 	.word	0x04c4b400
 8007668:	0800c4b4 	.word	0x0800c4b4
 800766c:	20000388 	.word	0x20000388
 8007670:	2000038c 	.word	0x2000038c

08007674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800767a:	4b2c      	ldr	r3, [pc, #176]	@ (800772c <HAL_RCC_GetSysClockFreq+0xb8>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 030c 	and.w	r3, r3, #12
 8007682:	2b04      	cmp	r3, #4
 8007684:	d102      	bne.n	800768c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007686:	4b2a      	ldr	r3, [pc, #168]	@ (8007730 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	e047      	b.n	800771c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800768c:	4b27      	ldr	r3, [pc, #156]	@ (800772c <HAL_RCC_GetSysClockFreq+0xb8>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 030c 	and.w	r3, r3, #12
 8007694:	2b08      	cmp	r3, #8
 8007696:	d102      	bne.n	800769e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007698:	4b25      	ldr	r3, [pc, #148]	@ (8007730 <HAL_RCC_GetSysClockFreq+0xbc>)
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	e03e      	b.n	800771c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800769e:	4b23      	ldr	r3, [pc, #140]	@ (800772c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 030c 	and.w	r3, r3, #12
 80076a6:	2b0c      	cmp	r3, #12
 80076a8:	d136      	bne.n	8007718 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076aa:	4b20      	ldr	r3, [pc, #128]	@ (800772c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076b4:	4b1d      	ldr	r3, [pc, #116]	@ (800772c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	091b      	lsrs	r3, r3, #4
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	3301      	adds	r3, #1
 80076c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d10c      	bne.n	80076e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076c8:	4a19      	ldr	r2, [pc, #100]	@ (8007730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d0:	4a16      	ldr	r2, [pc, #88]	@ (800772c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076d2:	68d2      	ldr	r2, [r2, #12]
 80076d4:	0a12      	lsrs	r2, r2, #8
 80076d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076da:	fb02 f303 	mul.w	r3, r2, r3
 80076de:	617b      	str	r3, [r7, #20]
      break;
 80076e0:	e00c      	b.n	80076fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076e2:	4a13      	ldr	r2, [pc, #76]	@ (8007730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	4a10      	ldr	r2, [pc, #64]	@ (800772c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076ec:	68d2      	ldr	r2, [r2, #12]
 80076ee:	0a12      	lsrs	r2, r2, #8
 80076f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076f4:	fb02 f303 	mul.w	r3, r2, r3
 80076f8:	617b      	str	r3, [r7, #20]
      break;
 80076fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076fc:	4b0b      	ldr	r3, [pc, #44]	@ (800772c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	0e5b      	lsrs	r3, r3, #25
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	3301      	adds	r3, #1
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	fbb2 f3f3 	udiv	r3, r2, r3
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	e001      	b.n	800771c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800771c:	693b      	ldr	r3, [r7, #16]
}
 800771e:	4618      	mov	r0, r3
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40021000 	.word	0x40021000
 8007730:	00f42400 	.word	0x00f42400

08007734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007738:	4b03      	ldr	r3, [pc, #12]	@ (8007748 <HAL_RCC_GetHCLKFreq+0x14>)
 800773a:	681b      	ldr	r3, [r3, #0]
}
 800773c:	4618      	mov	r0, r3
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20000388 	.word	0x20000388

0800774c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007750:	f7ff fff0 	bl	8007734 <HAL_RCC_GetHCLKFreq>
 8007754:	4602      	mov	r2, r0
 8007756:	4b06      	ldr	r3, [pc, #24]	@ (8007770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	4904      	ldr	r1, [pc, #16]	@ (8007774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007762:	5ccb      	ldrb	r3, [r1, r3]
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800776c:	4618      	mov	r0, r3
 800776e:	bd80      	pop	{r7, pc}
 8007770:	40021000 	.word	0x40021000
 8007774:	0800c4c4 	.word	0x0800c4c4

08007778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800777c:	f7ff ffda 	bl	8007734 <HAL_RCC_GetHCLKFreq>
 8007780:	4602      	mov	r2, r0
 8007782:	4b06      	ldr	r3, [pc, #24]	@ (800779c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	0adb      	lsrs	r3, r3, #11
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	4904      	ldr	r1, [pc, #16]	@ (80077a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800778e:	5ccb      	ldrb	r3, [r1, r3]
 8007790:	f003 031f 	and.w	r3, r3, #31
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007798:	4618      	mov	r0, r3
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40021000 	.word	0x40021000
 80077a0:	0800c4c4 	.word	0x0800c4c4

080077a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	091b      	lsrs	r3, r3, #4
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d10c      	bne.n	80077e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077c8:	4a17      	ldr	r2, [pc, #92]	@ (8007828 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	4a14      	ldr	r2, [pc, #80]	@ (8007824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077d2:	68d2      	ldr	r2, [r2, #12]
 80077d4:	0a12      	lsrs	r2, r2, #8
 80077d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077da:	fb02 f303 	mul.w	r3, r2, r3
 80077de:	617b      	str	r3, [r7, #20]
    break;
 80077e0:	e00c      	b.n	80077fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077e2:	4a11      	ldr	r2, [pc, #68]	@ (8007828 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077ec:	68d2      	ldr	r2, [r2, #12]
 80077ee:	0a12      	lsrs	r2, r2, #8
 80077f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077f4:	fb02 f303 	mul.w	r3, r2, r3
 80077f8:	617b      	str	r3, [r7, #20]
    break;
 80077fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077fc:	4b09      	ldr	r3, [pc, #36]	@ (8007824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	0e5b      	lsrs	r3, r3, #25
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	3301      	adds	r3, #1
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	fbb2 f3f3 	udiv	r3, r2, r3
 8007814:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007816:	687b      	ldr	r3, [r7, #4]
}
 8007818:	4618      	mov	r0, r3
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	40021000 	.word	0x40021000
 8007828:	00f42400 	.word	0x00f42400

0800782c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007834:	2300      	movs	r3, #0
 8007836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007838:	2300      	movs	r3, #0
 800783a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8098 	beq.w	800797a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800784a:	2300      	movs	r3, #0
 800784c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800784e:	4b43      	ldr	r3, [pc, #268]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10d      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800785a:	4b40      	ldr	r3, [pc, #256]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785e:	4a3f      	ldr	r2, [pc, #252]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007864:	6593      	str	r3, [r2, #88]	@ 0x58
 8007866:	4b3d      	ldr	r3, [pc, #244]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800786a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800786e:	60bb      	str	r3, [r7, #8]
 8007870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007872:	2301      	movs	r3, #1
 8007874:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007876:	4b3a      	ldr	r3, [pc, #232]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a39      	ldr	r2, [pc, #228]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800787c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007880:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007882:	f7fc fb77 	bl	8003f74 <HAL_GetTick>
 8007886:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007888:	e009      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800788a:	f7fc fb73 	bl	8003f74 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	2b02      	cmp	r3, #2
 8007896:	d902      	bls.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	74fb      	strb	r3, [r7, #19]
        break;
 800789c:	e005      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800789e:	4b30      	ldr	r3, [pc, #192]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0ef      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80078aa:	7cfb      	ldrb	r3, [r7, #19]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d159      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078b0:	4b2a      	ldr	r3, [pc, #168]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d01e      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d019      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078cc:	4b23      	ldr	r3, [pc, #140]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078d8:	4b20      	ldr	r3, [pc, #128]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078de:	4a1f      	ldr	r2, [pc, #124]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078e8:	4b1c      	ldr	r3, [pc, #112]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ee:	4a1b      	ldr	r2, [pc, #108]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078f8:	4a18      	ldr	r2, [pc, #96]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d016      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790a:	f7fc fb33 	bl	8003f74 <HAL_GetTick>
 800790e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007910:	e00b      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007912:	f7fc fb2f 	bl	8003f74 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007920:	4293      	cmp	r3, r2
 8007922:	d902      	bls.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	74fb      	strb	r3, [r7, #19]
            break;
 8007928:	e006      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800792a:	4b0c      	ldr	r3, [pc, #48]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800792c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0ec      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007938:	7cfb      	ldrb	r3, [r7, #19]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800793e:	4b07      	ldr	r3, [pc, #28]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794c:	4903      	ldr	r1, [pc, #12]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007954:	e008      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	74bb      	strb	r3, [r7, #18]
 800795a:	e005      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800795c:	40021000 	.word	0x40021000
 8007960:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007964:	7cfb      	ldrb	r3, [r7, #19]
 8007966:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007968:	7c7b      	ldrb	r3, [r7, #17]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d105      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800796e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007972:	4aa6      	ldr	r2, [pc, #664]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007978:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007986:	4ba1      	ldr	r3, [pc, #644]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800798c:	f023 0203 	bic.w	r2, r3, #3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	499d      	ldr	r1, [pc, #628]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007996:	4313      	orrs	r3, r2
 8007998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079a8:	4b98      	ldr	r3, [pc, #608]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ae:	f023 020c 	bic.w	r2, r3, #12
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	4995      	ldr	r1, [pc, #596]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079ca:	4b90      	ldr	r3, [pc, #576]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	498c      	ldr	r1, [pc, #560]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079ec:	4b87      	ldr	r3, [pc, #540]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	4984      	ldr	r1, [pc, #528]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0310 	and.w	r3, r3, #16
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	497b      	ldr	r1, [pc, #492]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a30:	4b76      	ldr	r3, [pc, #472]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	4973      	ldr	r1, [pc, #460]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a52:	4b6e      	ldr	r3, [pc, #440]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	496a      	ldr	r1, [pc, #424]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a74:	4b65      	ldr	r3, [pc, #404]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	4962      	ldr	r1, [pc, #392]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a96:	4b5d      	ldr	r3, [pc, #372]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	4959      	ldr	r1, [pc, #356]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ab8:	4b54      	ldr	r3, [pc, #336]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007abe:	f023 0203 	bic.w	r2, r3, #3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac6:	4951      	ldr	r1, [pc, #324]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ada:	4b4c      	ldr	r3, [pc, #304]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	4948      	ldr	r1, [pc, #288]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d015      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007afc:	4b43      	ldr	r3, [pc, #268]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	4940      	ldr	r1, [pc, #256]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b1a:	d105      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	4a3a      	ldr	r2, [pc, #232]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b26:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d015      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b34:	4b35      	ldr	r3, [pc, #212]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b42:	4932      	ldr	r1, [pc, #200]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b52:	d105      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b54:	4b2d      	ldr	r3, [pc, #180]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	4a2c      	ldr	r2, [pc, #176]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b5e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d015      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b6c:	4b27      	ldr	r3, [pc, #156]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7a:	4924      	ldr	r1, [pc, #144]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b8a:	d105      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4a1e      	ldr	r2, [pc, #120]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d015      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ba4:	4b19      	ldr	r3, [pc, #100]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007baa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb2:	4916      	ldr	r1, [pc, #88]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bc2:	d105      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bc4:	4b11      	ldr	r3, [pc, #68]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4a10      	ldr	r2, [pc, #64]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d019      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bea:	4908      	ldr	r1, [pc, #32]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bfa:	d109      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bfc:	4b03      	ldr	r3, [pc, #12]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	4a02      	ldr	r2, [pc, #8]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c06:	60d3      	str	r3, [r2, #12]
 8007c08:	e002      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007c0a:	bf00      	nop
 8007c0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d015      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c1c:	4b29      	ldr	r3, [pc, #164]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2a:	4926      	ldr	r1, [pc, #152]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c3a:	d105      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c3c:	4b21      	ldr	r3, [pc, #132]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	4a20      	ldr	r2, [pc, #128]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d015      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007c54:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c62:	4918      	ldr	r1, [pc, #96]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c72:	d105      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c74:	4b13      	ldr	r3, [pc, #76]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	4a12      	ldr	r2, [pc, #72]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d015      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9a:	490a      	ldr	r1, [pc, #40]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007caa:	d105      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cac:	4b05      	ldr	r3, [pc, #20]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4a04      	ldr	r2, [pc, #16]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007cb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	40021000 	.word	0x40021000

08007cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e09d      	b.n	8007e16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d108      	bne.n	8007cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cea:	d009      	beq.n	8007d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	61da      	str	r2, [r3, #28]
 8007cf2:	e005      	b.n	8007d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fb fab8 	bl	8003290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d40:	d902      	bls.n	8007d48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	e002      	b.n	8007d4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007d56:	d007      	beq.n	8007d68 <HAL_SPI_Init+0xa0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d60:	d002      	beq.n	8007d68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007da0:	431a      	orrs	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007daa:	ea42 0103 	orr.w	r1, r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	f003 0204 	and.w	r2, r3, #4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dcc:	f003 0310 	and.w	r3, r3, #16
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007de4:	ea42 0103 	orr.w	r1, r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b088      	sub	sp, #32
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	603b      	str	r3, [r7, #0]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e2e:	f7fc f8a1 	bl	8003f74 <HAL_GetTick>
 8007e32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007e34:	88fb      	ldrh	r3, [r7, #6]
 8007e36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d001      	beq.n	8007e48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
 8007e46:	e15c      	b.n	8008102 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_SPI_Transmit+0x36>
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e154      	b.n	8008102 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_SPI_Transmit+0x48>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e14d      	b.n	8008102 <HAL_SPI_Transmit+0x2e4>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2203      	movs	r2, #3
 8007e72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	88fa      	ldrh	r2, [r7, #6]
 8007e86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	88fa      	ldrh	r2, [r7, #6]
 8007e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eb8:	d10f      	bne.n	8007eda <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ec8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ed8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee4:	2b40      	cmp	r3, #64	@ 0x40
 8007ee6:	d007      	beq.n	8007ef8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ef6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f00:	d952      	bls.n	8007fa8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_SPI_Transmit+0xf2>
 8007f0a:	8b7b      	ldrh	r3, [r7, #26]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d145      	bne.n	8007f9c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f14:	881a      	ldrh	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f20:	1c9a      	adds	r2, r3, #2
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f34:	e032      	b.n	8007f9c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d112      	bne.n	8007f6a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f48:	881a      	ldrh	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f54:	1c9a      	adds	r2, r3, #2
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f68:	e018      	b.n	8007f9c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f6a:	f7fc f803 	bl	8003f74 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d803      	bhi.n	8007f82 <HAL_SPI_Transmit+0x164>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d102      	bne.n	8007f88 <HAL_SPI_Transmit+0x16a>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d109      	bne.n	8007f9c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e0b2      	b.n	8008102 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1c7      	bne.n	8007f36 <HAL_SPI_Transmit+0x118>
 8007fa6:	e083      	b.n	80080b0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <HAL_SPI_Transmit+0x198>
 8007fb0:	8b7b      	ldrh	r3, [r7, #26]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d177      	bne.n	80080a6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d912      	bls.n	8007fe6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc4:	881a      	ldrh	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd0:	1c9a      	adds	r2, r3, #2
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3b02      	subs	r3, #2
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007fe4:	e05f      	b.n	80080a6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	330c      	adds	r3, #12
 8007ff0:	7812      	ldrb	r2, [r2, #0]
 8007ff2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800800c:	e04b      	b.n	80080a6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b02      	cmp	r3, #2
 800801a:	d12b      	bne.n	8008074 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b01      	cmp	r3, #1
 8008024:	d912      	bls.n	800804c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802a:	881a      	ldrh	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	1c9a      	adds	r2, r3, #2
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b02      	subs	r3, #2
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800804a:	e02c      	b.n	80080a6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b01      	subs	r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008072:	e018      	b.n	80080a6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008074:	f7fb ff7e 	bl	8003f74 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d803      	bhi.n	800808c <HAL_SPI_Transmit+0x26e>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d102      	bne.n	8008092 <HAL_SPI_Transmit+0x274>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e02d      	b.n	8008102 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1ae      	bne.n	800800e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 fb65 	bl	8008784 <SPI_EndRxTxTransaction>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2220      	movs	r2, #32
 80080c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008100:	2300      	movs	r3, #0
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b08a      	sub	sp, #40	@ 0x28
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008118:	2301      	movs	r3, #1
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800811c:	f7fb ff2a 	bl	8003f74 <HAL_GetTick>
 8008120:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008128:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008130:	887b      	ldrh	r3, [r7, #2]
 8008132:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008134:	887b      	ldrh	r3, [r7, #2]
 8008136:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008138:	7ffb      	ldrb	r3, [r7, #31]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d00c      	beq.n	8008158 <HAL_SPI_TransmitReceive+0x4e>
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008144:	d106      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x4a>
 800814e:	7ffb      	ldrb	r3, [r7, #31]
 8008150:	2b04      	cmp	r3, #4
 8008152:	d001      	beq.n	8008158 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008154:	2302      	movs	r3, #2
 8008156:	e1f3      	b.n	8008540 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d005      	beq.n	800816a <HAL_SPI_TransmitReceive+0x60>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <HAL_SPI_TransmitReceive+0x60>
 8008164:	887b      	ldrh	r3, [r7, #2]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e1e8      	b.n	8008540 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_SPI_TransmitReceive+0x72>
 8008178:	2302      	movs	r3, #2
 800817a:	e1e1      	b.n	8008540 <HAL_SPI_TransmitReceive+0x436>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b04      	cmp	r3, #4
 800818e:	d003      	beq.n	8008198 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2205      	movs	r2, #5
 8008194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	887a      	ldrh	r2, [r7, #2]
 80081a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	887a      	ldrh	r2, [r7, #2]
 80081b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	887a      	ldrh	r2, [r7, #2]
 80081be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	887a      	ldrh	r2, [r7, #2]
 80081c4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081da:	d802      	bhi.n	80081e2 <HAL_SPI_TransmitReceive+0xd8>
 80081dc:	8abb      	ldrh	r3, [r7, #20]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d908      	bls.n	80081f4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	e007      	b.n	8008204 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008202:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820e:	2b40      	cmp	r3, #64	@ 0x40
 8008210:	d007      	beq.n	8008222 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800822a:	f240 8083 	bls.w	8008334 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <HAL_SPI_TransmitReceive+0x132>
 8008236:	8afb      	ldrh	r3, [r7, #22]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d16f      	bne.n	800831c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	881a      	ldrh	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824c:	1c9a      	adds	r2, r3, #2
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008260:	e05c      	b.n	800831c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b02      	cmp	r3, #2
 800826e:	d11b      	bne.n	80082a8 <HAL_SPI_TransmitReceive+0x19e>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d016      	beq.n	80082a8 <HAL_SPI_TransmitReceive+0x19e>
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	2b01      	cmp	r3, #1
 800827e:	d113      	bne.n	80082a8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008284:	881a      	ldrh	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008290:	1c9a      	adds	r2, r3, #2
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800829a:	b29b      	uxth	r3, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d11c      	bne.n	80082f0 <HAL_SPI_TransmitReceive+0x1e6>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d016      	beq.n	80082f0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082cc:	b292      	uxth	r2, r2
 80082ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d4:	1c9a      	adds	r2, r3, #2
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082ec:	2301      	movs	r3, #1
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082f0:	f7fb fe40 	bl	8003f74 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d80d      	bhi.n	800831c <HAL_SPI_TransmitReceive+0x212>
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008306:	d009      	beq.n	800831c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e111      	b.n	8008540 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d19d      	bne.n	8008262 <HAL_SPI_TransmitReceive+0x158>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d197      	bne.n	8008262 <HAL_SPI_TransmitReceive+0x158>
 8008332:	e0e5      	b.n	8008500 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <HAL_SPI_TransmitReceive+0x23a>
 800833c:	8afb      	ldrh	r3, [r7, #22]
 800833e:	2b01      	cmp	r3, #1
 8008340:	f040 80d1 	bne.w	80084e6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b01      	cmp	r3, #1
 800834c:	d912      	bls.n	8008374 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	881a      	ldrh	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835e:	1c9a      	adds	r2, r3, #2
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b02      	subs	r3, #2
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008372:	e0b8      	b.n	80084e6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	330c      	adds	r3, #12
 800837e:	7812      	ldrb	r2, [r2, #0]
 8008380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800839a:	e0a4      	b.n	80084e6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d134      	bne.n	8008414 <HAL_SPI_TransmitReceive+0x30a>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d02f      	beq.n	8008414 <HAL_SPI_TransmitReceive+0x30a>
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d12c      	bne.n	8008414 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d912      	bls.n	80083ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c8:	881a      	ldrh	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d4:	1c9a      	adds	r2, r3, #2
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b02      	subs	r3, #2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083e8:	e012      	b.n	8008410 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b01      	cmp	r3, #1
 8008420:	d148      	bne.n	80084b4 <HAL_SPI_TransmitReceive+0x3aa>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d042      	beq.n	80084b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008434:	b29b      	uxth	r3, r3
 8008436:	2b01      	cmp	r3, #1
 8008438:	d923      	bls.n	8008482 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	b292      	uxth	r2, r2
 8008446:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844c:	1c9a      	adds	r2, r3, #2
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008458:	b29b      	uxth	r3, r3
 800845a:	3b02      	subs	r3, #2
 800845c:	b29a      	uxth	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b01      	cmp	r3, #1
 800846e:	d81f      	bhi.n	80084b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800847e:	605a      	str	r2, [r3, #4]
 8008480:	e016      	b.n	80084b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f103 020c 	add.w	r2, r3, #12
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800848e:	7812      	ldrb	r2, [r2, #0]
 8008490:	b2d2      	uxtb	r2, r2
 8008492:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084b0:	2301      	movs	r3, #1
 80084b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084b4:	f7fb fd5e 	bl	8003f74 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d803      	bhi.n	80084cc <HAL_SPI_TransmitReceive+0x3c2>
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d102      	bne.n	80084d2 <HAL_SPI_TransmitReceive+0x3c8>
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e02c      	b.n	8008540 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f47f af55 	bne.w	800839c <HAL_SPI_TransmitReceive+0x292>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f47f af4e 	bne.w	800839c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008500:	6a3a      	ldr	r2, [r7, #32]
 8008502:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 f93d 	bl	8008784 <SPI_EndRxTxTransaction>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d008      	beq.n	8008522 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2220      	movs	r2, #32
 8008514:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e00e      	b.n	8008540 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800853e:	2300      	movs	r3, #0
  }
}
 8008540:	4618      	mov	r0, r3
 8008542:	3728      	adds	r7, #40	@ 0x28
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b088      	sub	sp, #32
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	4613      	mov	r3, r2
 8008556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008558:	f7fb fd0c 	bl	8003f74 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4413      	add	r3, r2
 8008566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008568:	f7fb fd04 	bl	8003f74 <HAL_GetTick>
 800856c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800856e:	4b39      	ldr	r3, [pc, #228]	@ (8008654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	015b      	lsls	r3, r3, #5
 8008574:	0d1b      	lsrs	r3, r3, #20
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800857e:	e054      	b.n	800862a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008586:	d050      	beq.n	800862a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008588:	f7fb fcf4 	bl	8003f74 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	429a      	cmp	r2, r3
 8008596:	d902      	bls.n	800859e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d13d      	bne.n	800861a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085b6:	d111      	bne.n	80085dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085c0:	d004      	beq.n	80085cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ca:	d107      	bne.n	80085dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e4:	d10f      	bne.n	8008606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e017      	b.n	800864a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	3b01      	subs	r3, #1
 8008628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	4013      	ands	r3, r2
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	429a      	cmp	r2, r3
 8008638:	bf0c      	ite	eq
 800863a:	2301      	moveq	r3, #1
 800863c:	2300      	movne	r3, #0
 800863e:	b2db      	uxtb	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	429a      	cmp	r2, r3
 8008646:	d19b      	bne.n	8008580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000388 	.word	0x20000388

08008658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08a      	sub	sp, #40	@ 0x28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800866a:	f7fb fc83 	bl	8003f74 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	4413      	add	r3, r2
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800867a:	f7fb fc7b 	bl	8003f74 <HAL_GetTick>
 800867e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008688:	4b3d      	ldr	r3, [pc, #244]	@ (8008780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	00da      	lsls	r2, r3, #3
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	0d1b      	lsrs	r3, r3, #20
 8008698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800869a:	fb02 f303 	mul.w	r3, r2, r3
 800869e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80086a0:	e060      	b.n	8008764 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086a8:	d107      	bne.n	80086ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d050      	beq.n	8008764 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086c2:	f7fb fc57 	bl	8003f74 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d902      	bls.n	80086d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d13d      	bne.n	8008754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80086e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086f0:	d111      	bne.n	8008716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086fa:	d004      	beq.n	8008706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008704:	d107      	bne.n	8008716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800871e:	d10f      	bne.n	8008740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800873e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e010      	b.n	8008776 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	3b01      	subs	r3, #1
 8008762:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	4013      	ands	r3, r2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	d196      	bne.n	80086a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3728      	adds	r7, #40	@ 0x28
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000388 	.word	0x20000388

08008784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af02      	add	r7, sp, #8
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2200      	movs	r2, #0
 8008798:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7ff ff5b 	bl	8008658 <SPI_WaitFifoStateUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d007      	beq.n	80087b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ac:	f043 0220 	orr.w	r2, r3, #32
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e027      	b.n	8008808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2200      	movs	r2, #0
 80087c0:	2180      	movs	r1, #128	@ 0x80
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff fec0 	bl	8008548 <SPI_WaitFlagStateUntilTimeout>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087d2:	f043 0220 	orr.w	r2, r3, #32
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e014      	b.n	8008808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff ff34 	bl	8008658 <SPI_WaitFifoStateUntilTimeout>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d007      	beq.n	8008806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087fa:	f043 0220 	orr.w	r2, r3, #32
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e000      	b.n	8008808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e049      	b.n	80088b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fb f8a0 	bl	800397c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f001 f878 	bl	8009944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e049      	b.n	8008964 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d106      	bne.n	80088ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f841 	bl	800896c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2202      	movs	r2, #2
 80088ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4610      	mov	r0, r2
 80088fe:	f001 f821 	bl	8009944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <HAL_TIM_PWM_Start+0x24>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	bf14      	ite	ne
 800899c:	2301      	movne	r3, #1
 800899e:	2300      	moveq	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	e03c      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d109      	bne.n	80089be <HAL_TIM_PWM_Start+0x3e>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	bf14      	ite	ne
 80089b6:	2301      	movne	r3, #1
 80089b8:	2300      	moveq	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	e02f      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d109      	bne.n	80089d8 <HAL_TIM_PWM_Start+0x58>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	bf14      	ite	ne
 80089d0:	2301      	movne	r3, #1
 80089d2:	2300      	moveq	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	e022      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b0c      	cmp	r3, #12
 80089dc:	d109      	bne.n	80089f2 <HAL_TIM_PWM_Start+0x72>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	bf14      	ite	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	2300      	moveq	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	e015      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b10      	cmp	r3, #16
 80089f6:	d109      	bne.n	8008a0c <HAL_TIM_PWM_Start+0x8c>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	e008      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	bf14      	ite	ne
 8008a18:	2301      	movne	r3, #1
 8008a1a:	2300      	moveq	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e0a6      	b.n	8008b74 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_PWM_Start+0xb6>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a34:	e023      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d104      	bne.n	8008a46 <HAL_TIM_PWM_Start+0xc6>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a44:	e01b      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d104      	bne.n	8008a56 <HAL_TIM_PWM_Start+0xd6>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a54:	e013      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b0c      	cmp	r3, #12
 8008a5a:	d104      	bne.n	8008a66 <HAL_TIM_PWM_Start+0xe6>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a64:	e00b      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d104      	bne.n	8008a76 <HAL_TIM_PWM_Start+0xf6>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a74:	e003      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2201      	movs	r2, #1
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 fd00 	bl	800a48c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a3a      	ldr	r2, [pc, #232]	@ (8008b7c <HAL_TIM_PWM_Start+0x1fc>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d018      	beq.n	8008ac8 <HAL_TIM_PWM_Start+0x148>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a39      	ldr	r2, [pc, #228]	@ (8008b80 <HAL_TIM_PWM_Start+0x200>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d013      	beq.n	8008ac8 <HAL_TIM_PWM_Start+0x148>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a37      	ldr	r2, [pc, #220]	@ (8008b84 <HAL_TIM_PWM_Start+0x204>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d00e      	beq.n	8008ac8 <HAL_TIM_PWM_Start+0x148>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a36      	ldr	r2, [pc, #216]	@ (8008b88 <HAL_TIM_PWM_Start+0x208>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d009      	beq.n	8008ac8 <HAL_TIM_PWM_Start+0x148>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a34      	ldr	r2, [pc, #208]	@ (8008b8c <HAL_TIM_PWM_Start+0x20c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d004      	beq.n	8008ac8 <HAL_TIM_PWM_Start+0x148>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a33      	ldr	r2, [pc, #204]	@ (8008b90 <HAL_TIM_PWM_Start+0x210>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d101      	bne.n	8008acc <HAL_TIM_PWM_Start+0x14c>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <HAL_TIM_PWM_Start+0x14e>
 8008acc:	2300      	movs	r3, #0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a25      	ldr	r2, [pc, #148]	@ (8008b7c <HAL_TIM_PWM_Start+0x1fc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d022      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1b2>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af4:	d01d      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1b2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a26      	ldr	r2, [pc, #152]	@ (8008b94 <HAL_TIM_PWM_Start+0x214>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d018      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1b2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a24      	ldr	r2, [pc, #144]	@ (8008b98 <HAL_TIM_PWM_Start+0x218>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d013      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1b2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a23      	ldr	r2, [pc, #140]	@ (8008b9c <HAL_TIM_PWM_Start+0x21c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00e      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1b2>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a19      	ldr	r2, [pc, #100]	@ (8008b80 <HAL_TIM_PWM_Start+0x200>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d009      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1b2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a18      	ldr	r2, [pc, #96]	@ (8008b84 <HAL_TIM_PWM_Start+0x204>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d004      	beq.n	8008b32 <HAL_TIM_PWM_Start+0x1b2>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a18      	ldr	r2, [pc, #96]	@ (8008b90 <HAL_TIM_PWM_Start+0x210>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d115      	bne.n	8008b5e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	4b19      	ldr	r3, [pc, #100]	@ (8008ba0 <HAL_TIM_PWM_Start+0x220>)
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b06      	cmp	r3, #6
 8008b42:	d015      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1f0>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b4a:	d011      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0201 	orr.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5c:	e008      	b.n	8008b70 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f042 0201 	orr.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	e000      	b.n	8008b72 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40012c00 	.word	0x40012c00
 8008b80:	40013400 	.word	0x40013400
 8008b84:	40014000 	.word	0x40014000
 8008b88:	40014400 	.word	0x40014400
 8008b8c:	40014800 	.word	0x40014800
 8008b90:	40015000 	.word	0x40015000
 8008b94:	40000400 	.word	0x40000400
 8008b98:	40000800 	.word	0x40000800
 8008b9c:	40000c00 	.word	0x40000c00
 8008ba0:	00010007 	.word	0x00010007

08008ba4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f001 fc68 	bl	800a48c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a40      	ldr	r2, [pc, #256]	@ (8008cc4 <HAL_TIM_PWM_Stop+0x120>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d018      	beq.n	8008bf8 <HAL_TIM_PWM_Stop+0x54>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a3f      	ldr	r2, [pc, #252]	@ (8008cc8 <HAL_TIM_PWM_Stop+0x124>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d013      	beq.n	8008bf8 <HAL_TIM_PWM_Stop+0x54>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8008ccc <HAL_TIM_PWM_Stop+0x128>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00e      	beq.n	8008bf8 <HAL_TIM_PWM_Stop+0x54>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a3c      	ldr	r2, [pc, #240]	@ (8008cd0 <HAL_TIM_PWM_Stop+0x12c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d009      	beq.n	8008bf8 <HAL_TIM_PWM_Stop+0x54>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a3a      	ldr	r2, [pc, #232]	@ (8008cd4 <HAL_TIM_PWM_Stop+0x130>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d004      	beq.n	8008bf8 <HAL_TIM_PWM_Stop+0x54>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a39      	ldr	r2, [pc, #228]	@ (8008cd8 <HAL_TIM_PWM_Stop+0x134>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d101      	bne.n	8008bfc <HAL_TIM_PWM_Stop+0x58>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e000      	b.n	8008bfe <HAL_TIM_PWM_Stop+0x5a>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d017      	beq.n	8008c32 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6a1a      	ldr	r2, [r3, #32]
 8008c08:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10f      	bne.n	8008c32 <HAL_TIM_PWM_Stop+0x8e>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d107      	bne.n	8008c32 <HAL_TIM_PWM_Stop+0x8e>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6a1a      	ldr	r2, [r3, #32]
 8008c38:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10f      	bne.n	8008c62 <HAL_TIM_PWM_Stop+0xbe>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6a1a      	ldr	r2, [r3, #32]
 8008c48:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d107      	bne.n	8008c62 <HAL_TIM_PWM_Stop+0xbe>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0201 	bic.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d104      	bne.n	8008c72 <HAL_TIM_PWM_Stop+0xce>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c70:	e023      	b.n	8008cba <HAL_TIM_PWM_Stop+0x116>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d104      	bne.n	8008c82 <HAL_TIM_PWM_Stop+0xde>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c80:	e01b      	b.n	8008cba <HAL_TIM_PWM_Stop+0x116>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d104      	bne.n	8008c92 <HAL_TIM_PWM_Stop+0xee>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c90:	e013      	b.n	8008cba <HAL_TIM_PWM_Stop+0x116>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b0c      	cmp	r3, #12
 8008c96:	d104      	bne.n	8008ca2 <HAL_TIM_PWM_Stop+0xfe>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ca0:	e00b      	b.n	8008cba <HAL_TIM_PWM_Stop+0x116>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b10      	cmp	r3, #16
 8008ca6:	d104      	bne.n	8008cb2 <HAL_TIM_PWM_Stop+0x10e>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cb0:	e003      	b.n	8008cba <HAL_TIM_PWM_Stop+0x116>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	40012c00 	.word	0x40012c00
 8008cc8:	40013400 	.word	0x40013400
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400
 8008cd4:	40014800 	.word	0x40014800
 8008cd8:	40015000 	.word	0x40015000

08008cdc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e049      	b.n	8008d82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f841 	bl	8008d8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f000 fe12 	bl	8009944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d104      	bne.n	8008dbe <HAL_TIM_IC_Start_IT+0x1e>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	e023      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d104      	bne.n	8008dce <HAL_TIM_IC_Start_IT+0x2e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	e01b      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d104      	bne.n	8008dde <HAL_TIM_IC_Start_IT+0x3e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	e013      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b0c      	cmp	r3, #12
 8008de2:	d104      	bne.n	8008dee <HAL_TIM_IC_Start_IT+0x4e>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	e00b      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d104      	bne.n	8008dfe <HAL_TIM_IC_Start_IT+0x5e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	e003      	b.n	8008e06 <HAL_TIM_IC_Start_IT+0x66>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d104      	bne.n	8008e18 <HAL_TIM_IC_Start_IT+0x78>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	e013      	b.n	8008e40 <HAL_TIM_IC_Start_IT+0xa0>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	d104      	bne.n	8008e28 <HAL_TIM_IC_Start_IT+0x88>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	e00b      	b.n	8008e40 <HAL_TIM_IC_Start_IT+0xa0>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d104      	bne.n	8008e38 <HAL_TIM_IC_Start_IT+0x98>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	e003      	b.n	8008e40 <HAL_TIM_IC_Start_IT+0xa0>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d102      	bne.n	8008e4e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e48:	7b7b      	ldrb	r3, [r7, #13]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d001      	beq.n	8008e52 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e0e2      	b.n	8009018 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <HAL_TIM_IC_Start_IT+0xc2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e60:	e023      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d104      	bne.n	8008e72 <HAL_TIM_IC_Start_IT+0xd2>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e70:	e01b      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d104      	bne.n	8008e82 <HAL_TIM_IC_Start_IT+0xe2>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e80:	e013      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b0c      	cmp	r3, #12
 8008e86:	d104      	bne.n	8008e92 <HAL_TIM_IC_Start_IT+0xf2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e90:	e00b      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_IC_Start_IT+0x102>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ea0:	e003      	b.n	8008eaa <HAL_TIM_IC_Start_IT+0x10a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d104      	bne.n	8008eba <HAL_TIM_IC_Start_IT+0x11a>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eb8:	e013      	b.n	8008ee2 <HAL_TIM_IC_Start_IT+0x142>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d104      	bne.n	8008eca <HAL_TIM_IC_Start_IT+0x12a>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ec8:	e00b      	b.n	8008ee2 <HAL_TIM_IC_Start_IT+0x142>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d104      	bne.n	8008eda <HAL_TIM_IC_Start_IT+0x13a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ed8:	e003      	b.n	8008ee2 <HAL_TIM_IC_Start_IT+0x142>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2202      	movs	r2, #2
 8008ede:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b0c      	cmp	r3, #12
 8008ee6:	d841      	bhi.n	8008f6c <HAL_TIM_IC_Start_IT+0x1cc>
 8008ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <HAL_TIM_IC_Start_IT+0x150>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f25 	.word	0x08008f25
 8008ef4:	08008f6d 	.word	0x08008f6d
 8008ef8:	08008f6d 	.word	0x08008f6d
 8008efc:	08008f6d 	.word	0x08008f6d
 8008f00:	08008f37 	.word	0x08008f37
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008f6d 	.word	0x08008f6d
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008f5b 	.word	0x08008f5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0202 	orr.w	r2, r2, #2
 8008f32:	60da      	str	r2, [r3, #12]
      break;
 8008f34:	e01d      	b.n	8008f72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f042 0204 	orr.w	r2, r2, #4
 8008f44:	60da      	str	r2, [r3, #12]
      break;
 8008f46:	e014      	b.n	8008f72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0208 	orr.w	r2, r2, #8
 8008f56:	60da      	str	r2, [r3, #12]
      break;
 8008f58:	e00b      	b.n	8008f72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0210 	orr.w	r2, r2, #16
 8008f68:	60da      	str	r2, [r3, #12]
      break;
 8008f6a:	e002      	b.n	8008f72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f70:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d14e      	bne.n	8009016 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 fa83 	bl	800a48c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a25      	ldr	r2, [pc, #148]	@ (8009020 <HAL_TIM_IC_Start_IT+0x280>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d022      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f98:	d01d      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a21      	ldr	r2, [pc, #132]	@ (8009024 <HAL_TIM_IC_Start_IT+0x284>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d018      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8009028 <HAL_TIM_IC_Start_IT+0x288>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800902c <HAL_TIM_IC_Start_IT+0x28c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8009030 <HAL_TIM_IC_Start_IT+0x290>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d009      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8009034 <HAL_TIM_IC_Start_IT+0x294>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_TIM_IC_Start_IT+0x236>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a19      	ldr	r2, [pc, #100]	@ (8009038 <HAL_TIM_IC_Start_IT+0x298>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d115      	bne.n	8009002 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	4b17      	ldr	r3, [pc, #92]	@ (800903c <HAL_TIM_IC_Start_IT+0x29c>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b06      	cmp	r3, #6
 8008fe6:	d015      	beq.n	8009014 <HAL_TIM_IC_Start_IT+0x274>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fee:	d011      	beq.n	8009014 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009000:	e008      	b.n	8009014 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f042 0201 	orr.w	r2, r2, #1
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	e000      	b.n	8009016 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009014:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40012c00 	.word	0x40012c00
 8009024:	40000400 	.word	0x40000400
 8009028:	40000800 	.word	0x40000800
 800902c:	40000c00 	.word	0x40000c00
 8009030:	40013400 	.word	0x40013400
 8009034:	40014000 	.word	0x40014000
 8009038:	40015000 	.word	0x40015000
 800903c:	00010007 	.word	0x00010007

08009040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d020      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01b      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f06f 0202 	mvn.w	r2, #2
 8009074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7f8 fe86 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8009090:	e005      	b.n	800909e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fc38 	bl	8009908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc3f 	bl	800991c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d020      	beq.n	80090f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01b      	beq.n	80090f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0204 	mvn.w	r2, #4
 80090c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7f8 fe60 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 80090dc:	e005      	b.n	80090ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fc12 	bl	8009908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fc19 	bl	800991c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0308 	and.w	r3, r3, #8
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d020      	beq.n	800913c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01b      	beq.n	800913c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0208 	mvn.w	r2, #8
 800910c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2204      	movs	r2, #4
 8009112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f8 fe3a 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fbec 	bl	8009908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fbf3 	bl	800991c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b00      	cmp	r3, #0
 8009144:	d020      	beq.n	8009188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01b      	beq.n	8009188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0210 	mvn.w	r2, #16
 8009158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2208      	movs	r2, #8
 800915e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7f8 fe14 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8009174:	e005      	b.n	8009182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fbc6 	bl	8009908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fbcd 	bl	800991c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00c      	beq.n	80091ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0201 	mvn.w	r2, #1
 80091a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fba4 	bl	80098f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80091d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 fbd3 	bl	800a980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00c      	beq.n	80091fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80091f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 fbcb 	bl	800a994 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00c      	beq.n	8009222 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800921a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb87 	bl	8009930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00c      	beq.n	8009246 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f06f 0220 	mvn.w	r2, #32
 800923e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fb93 	bl	800a96c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00c      	beq.n	800926a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fb9f 	bl	800a9a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00c      	beq.n	800928e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d007      	beq.n	800928e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fb97 	bl	800a9bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00c      	beq.n	80092b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d007      	beq.n	80092b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80092aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 fb8f 	bl	800a9d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00c      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d007      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80092ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 fb87 	bl	800a9e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d101      	bne.n	80092fc <HAL_TIM_IC_ConfigChannel+0x1e>
 80092f8:	2302      	movs	r3, #2
 80092fa:	e088      	b.n	800940e <HAL_TIM_IC_ConfigChannel+0x130>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d11b      	bne.n	8009342 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800931a:	f000 fef1 	bl	800a100 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	699a      	ldr	r2, [r3, #24]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 020c 	bic.w	r2, r2, #12
 800932c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6999      	ldr	r1, [r3, #24]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	619a      	str	r2, [r3, #24]
 8009340:	e060      	b.n	8009404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b04      	cmp	r3, #4
 8009346:	d11c      	bne.n	8009382 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009358:	f000 ff75 	bl	800a246 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800936a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6999      	ldr	r1, [r3, #24]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	021a      	lsls	r2, r3, #8
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	619a      	str	r2, [r3, #24]
 8009380:	e040      	b.n	8009404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b08      	cmp	r3, #8
 8009386:	d11b      	bne.n	80093c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009398:	f000 ffc2 	bl	800a320 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69da      	ldr	r2, [r3, #28]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 020c 	bic.w	r2, r2, #12
 80093aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69d9      	ldr	r1, [r3, #28]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	61da      	str	r2, [r3, #28]
 80093be:	e021      	b.n	8009404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b0c      	cmp	r3, #12
 80093c4:	d11c      	bne.n	8009400 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80093d6:	f000 ffdf 	bl	800a398 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69da      	ldr	r2, [r3, #28]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80093e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69d9      	ldr	r1, [r3, #28]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	021a      	lsls	r2, r3, #8
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	61da      	str	r2, [r3, #28]
 80093fe:	e001      	b.n	8009404 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800942e:	2b01      	cmp	r3, #1
 8009430:	d101      	bne.n	8009436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009432:	2302      	movs	r3, #2
 8009434:	e0ff      	b.n	8009636 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b14      	cmp	r3, #20
 8009442:	f200 80f0 	bhi.w	8009626 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009446:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	080094a1 	.word	0x080094a1
 8009450:	08009627 	.word	0x08009627
 8009454:	08009627 	.word	0x08009627
 8009458:	08009627 	.word	0x08009627
 800945c:	080094e1 	.word	0x080094e1
 8009460:	08009627 	.word	0x08009627
 8009464:	08009627 	.word	0x08009627
 8009468:	08009627 	.word	0x08009627
 800946c:	08009523 	.word	0x08009523
 8009470:	08009627 	.word	0x08009627
 8009474:	08009627 	.word	0x08009627
 8009478:	08009627 	.word	0x08009627
 800947c:	08009563 	.word	0x08009563
 8009480:	08009627 	.word	0x08009627
 8009484:	08009627 	.word	0x08009627
 8009488:	08009627 	.word	0x08009627
 800948c:	080095a5 	.word	0x080095a5
 8009490:	08009627 	.word	0x08009627
 8009494:	08009627 	.word	0x08009627
 8009498:	08009627 	.word	0x08009627
 800949c:	080095e5 	.word	0x080095e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fb00 	bl	8009aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0208 	orr.w	r2, r2, #8
 80094ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 0204 	bic.w	r2, r2, #4
 80094ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6999      	ldr	r1, [r3, #24]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	691a      	ldr	r2, [r3, #16]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	619a      	str	r2, [r3, #24]
      break;
 80094de:	e0a5      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 fb7a 	bl	8009be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800950a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6999      	ldr	r1, [r3, #24]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	021a      	lsls	r2, r3, #8
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	619a      	str	r2, [r3, #24]
      break;
 8009520:	e084      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fbed 	bl	8009d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0208 	orr.w	r2, r2, #8
 800953c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0204 	bic.w	r2, r2, #4
 800954c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69d9      	ldr	r1, [r3, #28]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	430a      	orrs	r2, r1
 800955e:	61da      	str	r2, [r3, #28]
      break;
 8009560:	e064      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68b9      	ldr	r1, [r7, #8]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fc5f 	bl	8009e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69da      	ldr	r2, [r3, #28]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800957c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69da      	ldr	r2, [r3, #28]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800958c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69d9      	ldr	r1, [r3, #28]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	021a      	lsls	r2, r3, #8
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	61da      	str	r2, [r3, #28]
      break;
 80095a2:	e043      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68b9      	ldr	r1, [r7, #8]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fcd2 	bl	8009f54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0208 	orr.w	r2, r2, #8
 80095be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0204 	bic.w	r2, r2, #4
 80095ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80095e2:	e023      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fd1c 	bl	800a028 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800960e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	021a      	lsls	r2, r3, #8
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009624:	e002      	b.n	800962c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	75fb      	strb	r3, [r7, #23]
      break;
 800962a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop

08009640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d101      	bne.n	800965c <HAL_TIM_ConfigClockSource+0x1c>
 8009658:	2302      	movs	r3, #2
 800965a:	e0f6      	b.n	800984a <HAL_TIM_ConfigClockSource+0x20a>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800967a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800967e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a6f      	ldr	r2, [pc, #444]	@ (8009854 <HAL_TIM_ConfigClockSource+0x214>)
 8009696:	4293      	cmp	r3, r2
 8009698:	f000 80c1 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 800969c:	4a6d      	ldr	r2, [pc, #436]	@ (8009854 <HAL_TIM_ConfigClockSource+0x214>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	f200 80c6 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096a4:	4a6c      	ldr	r2, [pc, #432]	@ (8009858 <HAL_TIM_ConfigClockSource+0x218>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	f000 80b9 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096ac:	4a6a      	ldr	r2, [pc, #424]	@ (8009858 <HAL_TIM_ConfigClockSource+0x218>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	f200 80be 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096b4:	4a69      	ldr	r2, [pc, #420]	@ (800985c <HAL_TIM_ConfigClockSource+0x21c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	f000 80b1 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096bc:	4a67      	ldr	r2, [pc, #412]	@ (800985c <HAL_TIM_ConfigClockSource+0x21c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	f200 80b6 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096c4:	4a66      	ldr	r2, [pc, #408]	@ (8009860 <HAL_TIM_ConfigClockSource+0x220>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	f000 80a9 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096cc:	4a64      	ldr	r2, [pc, #400]	@ (8009860 <HAL_TIM_ConfigClockSource+0x220>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	f200 80ae 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096d4:	4a63      	ldr	r2, [pc, #396]	@ (8009864 <HAL_TIM_ConfigClockSource+0x224>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	f000 80a1 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096dc:	4a61      	ldr	r2, [pc, #388]	@ (8009864 <HAL_TIM_ConfigClockSource+0x224>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	f200 80a6 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096e4:	4a60      	ldr	r2, [pc, #384]	@ (8009868 <HAL_TIM_ConfigClockSource+0x228>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	f000 8099 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096ec:	4a5e      	ldr	r2, [pc, #376]	@ (8009868 <HAL_TIM_ConfigClockSource+0x228>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	f200 809e 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 80096f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80096f8:	f000 8091 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 80096fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009700:	f200 8096 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009708:	f000 8089 	beq.w	800981e <HAL_TIM_ConfigClockSource+0x1de>
 800970c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009710:	f200 808e 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009718:	d03e      	beq.n	8009798 <HAL_TIM_ConfigClockSource+0x158>
 800971a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800971e:	f200 8087 	bhi.w	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009726:	f000 8086 	beq.w	8009836 <HAL_TIM_ConfigClockSource+0x1f6>
 800972a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800972e:	d87f      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009730:	2b70      	cmp	r3, #112	@ 0x70
 8009732:	d01a      	beq.n	800976a <HAL_TIM_ConfigClockSource+0x12a>
 8009734:	2b70      	cmp	r3, #112	@ 0x70
 8009736:	d87b      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009738:	2b60      	cmp	r3, #96	@ 0x60
 800973a:	d050      	beq.n	80097de <HAL_TIM_ConfigClockSource+0x19e>
 800973c:	2b60      	cmp	r3, #96	@ 0x60
 800973e:	d877      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009740:	2b50      	cmp	r3, #80	@ 0x50
 8009742:	d03c      	beq.n	80097be <HAL_TIM_ConfigClockSource+0x17e>
 8009744:	2b50      	cmp	r3, #80	@ 0x50
 8009746:	d873      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009748:	2b40      	cmp	r3, #64	@ 0x40
 800974a:	d058      	beq.n	80097fe <HAL_TIM_ConfigClockSource+0x1be>
 800974c:	2b40      	cmp	r3, #64	@ 0x40
 800974e:	d86f      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009750:	2b30      	cmp	r3, #48	@ 0x30
 8009752:	d064      	beq.n	800981e <HAL_TIM_ConfigClockSource+0x1de>
 8009754:	2b30      	cmp	r3, #48	@ 0x30
 8009756:	d86b      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009758:	2b20      	cmp	r3, #32
 800975a:	d060      	beq.n	800981e <HAL_TIM_ConfigClockSource+0x1de>
 800975c:	2b20      	cmp	r3, #32
 800975e:	d867      	bhi.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
 8009760:	2b00      	cmp	r3, #0
 8009762:	d05c      	beq.n	800981e <HAL_TIM_ConfigClockSource+0x1de>
 8009764:	2b10      	cmp	r3, #16
 8009766:	d05a      	beq.n	800981e <HAL_TIM_ConfigClockSource+0x1de>
 8009768:	e062      	b.n	8009830 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800977a:	f000 fe67 	bl	800a44c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800978c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	609a      	str	r2, [r3, #8]
      break;
 8009796:	e04f      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097a8:	f000 fe50 	bl	800a44c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097ba:	609a      	str	r2, [r3, #8]
      break;
 80097bc:	e03c      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ca:	461a      	mov	r2, r3
 80097cc:	f000 fd0c 	bl	800a1e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2150      	movs	r1, #80	@ 0x50
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fe1b 	bl	800a412 <TIM_ITRx_SetConfig>
      break;
 80097dc:	e02c      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ea:	461a      	mov	r2, r3
 80097ec:	f000 fd68 	bl	800a2c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2160      	movs	r1, #96	@ 0x60
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fe0b 	bl	800a412 <TIM_ITRx_SetConfig>
      break;
 80097fc:	e01c      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800980a:	461a      	mov	r2, r3
 800980c:	f000 fcec 	bl	800a1e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2140      	movs	r1, #64	@ 0x40
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fdfb 	bl	800a412 <TIM_ITRx_SetConfig>
      break;
 800981c:	e00c      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4619      	mov	r1, r3
 8009828:	4610      	mov	r0, r2
 800982a:	f000 fdf2 	bl	800a412 <TIM_ITRx_SetConfig>
      break;
 800982e:	e003      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	73fb      	strb	r3, [r7, #15]
      break;
 8009834:	e000      	b.n	8009838 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	00100070 	.word	0x00100070
 8009858:	00100060 	.word	0x00100060
 800985c:	00100050 	.word	0x00100050
 8009860:	00100040 	.word	0x00100040
 8009864:	00100030 	.word	0x00100030
 8009868:	00100020 	.word	0x00100020

0800986c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b0c      	cmp	r3, #12
 800987e:	d831      	bhi.n	80098e4 <HAL_TIM_ReadCapturedValue+0x78>
 8009880:	a201      	add	r2, pc, #4	@ (adr r2, 8009888 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009886:	bf00      	nop
 8009888:	080098bd 	.word	0x080098bd
 800988c:	080098e5 	.word	0x080098e5
 8009890:	080098e5 	.word	0x080098e5
 8009894:	080098e5 	.word	0x080098e5
 8009898:	080098c7 	.word	0x080098c7
 800989c:	080098e5 	.word	0x080098e5
 80098a0:	080098e5 	.word	0x080098e5
 80098a4:	080098e5 	.word	0x080098e5
 80098a8:	080098d1 	.word	0x080098d1
 80098ac:	080098e5 	.word	0x080098e5
 80098b0:	080098e5 	.word	0x080098e5
 80098b4:	080098e5 	.word	0x080098e5
 80098b8:	080098db 	.word	0x080098db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098c2:	60fb      	str	r3, [r7, #12]

      break;
 80098c4:	e00f      	b.n	80098e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098cc:	60fb      	str	r3, [r7, #12]

      break;
 80098ce:	e00a      	b.n	80098e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098d6:	60fb      	str	r3, [r7, #12]

      break;
 80098d8:	e005      	b.n	80098e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e0:	60fb      	str	r3, [r7, #12]

      break;
 80098e2:	e000      	b.n	80098e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80098e4:	bf00      	nop
  }

  return tmpreg;
 80098e6:	68fb      	ldr	r3, [r7, #12]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a4c      	ldr	r2, [pc, #304]	@ (8009a88 <TIM_Base_SetConfig+0x144>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d017      	beq.n	800998c <TIM_Base_SetConfig+0x48>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009962:	d013      	beq.n	800998c <TIM_Base_SetConfig+0x48>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a49      	ldr	r2, [pc, #292]	@ (8009a8c <TIM_Base_SetConfig+0x148>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00f      	beq.n	800998c <TIM_Base_SetConfig+0x48>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a48      	ldr	r2, [pc, #288]	@ (8009a90 <TIM_Base_SetConfig+0x14c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00b      	beq.n	800998c <TIM_Base_SetConfig+0x48>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a47      	ldr	r2, [pc, #284]	@ (8009a94 <TIM_Base_SetConfig+0x150>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_Base_SetConfig+0x48>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a46      	ldr	r2, [pc, #280]	@ (8009a98 <TIM_Base_SetConfig+0x154>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_Base_SetConfig+0x48>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a45      	ldr	r2, [pc, #276]	@ (8009a9c <TIM_Base_SetConfig+0x158>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d108      	bne.n	800999e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a39      	ldr	r2, [pc, #228]	@ (8009a88 <TIM_Base_SetConfig+0x144>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d023      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ac:	d01f      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a36      	ldr	r2, [pc, #216]	@ (8009a8c <TIM_Base_SetConfig+0x148>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d01b      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a35      	ldr	r2, [pc, #212]	@ (8009a90 <TIM_Base_SetConfig+0x14c>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d017      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a34      	ldr	r2, [pc, #208]	@ (8009a94 <TIM_Base_SetConfig+0x150>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d013      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a33      	ldr	r2, [pc, #204]	@ (8009a98 <TIM_Base_SetConfig+0x154>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00f      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a33      	ldr	r2, [pc, #204]	@ (8009aa0 <TIM_Base_SetConfig+0x15c>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d00b      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a32      	ldr	r2, [pc, #200]	@ (8009aa4 <TIM_Base_SetConfig+0x160>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d007      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a31      	ldr	r2, [pc, #196]	@ (8009aa8 <TIM_Base_SetConfig+0x164>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d003      	beq.n	80099ee <TIM_Base_SetConfig+0xaa>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a2c      	ldr	r2, [pc, #176]	@ (8009a9c <TIM_Base_SetConfig+0x158>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d108      	bne.n	8009a00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a18      	ldr	r2, [pc, #96]	@ (8009a88 <TIM_Base_SetConfig+0x144>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d013      	beq.n	8009a54 <TIM_Base_SetConfig+0x110>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009a98 <TIM_Base_SetConfig+0x154>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d00f      	beq.n	8009a54 <TIM_Base_SetConfig+0x110>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a1a      	ldr	r2, [pc, #104]	@ (8009aa0 <TIM_Base_SetConfig+0x15c>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d00b      	beq.n	8009a54 <TIM_Base_SetConfig+0x110>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a19      	ldr	r2, [pc, #100]	@ (8009aa4 <TIM_Base_SetConfig+0x160>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d007      	beq.n	8009a54 <TIM_Base_SetConfig+0x110>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a18      	ldr	r2, [pc, #96]	@ (8009aa8 <TIM_Base_SetConfig+0x164>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d003      	beq.n	8009a54 <TIM_Base_SetConfig+0x110>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a13      	ldr	r2, [pc, #76]	@ (8009a9c <TIM_Base_SetConfig+0x158>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d103      	bne.n	8009a5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	691a      	ldr	r2, [r3, #16]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d105      	bne.n	8009a7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	f023 0201 	bic.w	r2, r3, #1
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	611a      	str	r2, [r3, #16]
  }
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	40012c00 	.word	0x40012c00
 8009a8c:	40000400 	.word	0x40000400
 8009a90:	40000800 	.word	0x40000800
 8009a94:	40000c00 	.word	0x40000c00
 8009a98:	40013400 	.word	0x40013400
 8009a9c:	40015000 	.word	0x40015000
 8009aa0:	40014000 	.word	0x40014000
 8009aa4:	40014400 	.word	0x40014400
 8009aa8:	40014800 	.word	0x40014800

08009aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	f023 0201 	bic.w	r2, r3, #1
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f023 0302 	bic.w	r3, r3, #2
 8009af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a30      	ldr	r2, [pc, #192]	@ (8009bc8 <TIM_OC1_SetConfig+0x11c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d013      	beq.n	8009b34 <TIM_OC1_SetConfig+0x88>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8009bcc <TIM_OC1_SetConfig+0x120>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00f      	beq.n	8009b34 <TIM_OC1_SetConfig+0x88>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a2e      	ldr	r2, [pc, #184]	@ (8009bd0 <TIM_OC1_SetConfig+0x124>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d00b      	beq.n	8009b34 <TIM_OC1_SetConfig+0x88>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8009bd4 <TIM_OC1_SetConfig+0x128>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d007      	beq.n	8009b34 <TIM_OC1_SetConfig+0x88>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a2c      	ldr	r2, [pc, #176]	@ (8009bd8 <TIM_OC1_SetConfig+0x12c>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d003      	beq.n	8009b34 <TIM_OC1_SetConfig+0x88>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8009bdc <TIM_OC1_SetConfig+0x130>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d10c      	bne.n	8009b4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f023 0308 	bic.w	r3, r3, #8
 8009b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f023 0304 	bic.w	r3, r3, #4
 8009b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a1d      	ldr	r2, [pc, #116]	@ (8009bc8 <TIM_OC1_SetConfig+0x11c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d013      	beq.n	8009b7e <TIM_OC1_SetConfig+0xd2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a1c      	ldr	r2, [pc, #112]	@ (8009bcc <TIM_OC1_SetConfig+0x120>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00f      	beq.n	8009b7e <TIM_OC1_SetConfig+0xd2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a1b      	ldr	r2, [pc, #108]	@ (8009bd0 <TIM_OC1_SetConfig+0x124>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d00b      	beq.n	8009b7e <TIM_OC1_SetConfig+0xd2>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a1a      	ldr	r2, [pc, #104]	@ (8009bd4 <TIM_OC1_SetConfig+0x128>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d007      	beq.n	8009b7e <TIM_OC1_SetConfig+0xd2>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a19      	ldr	r2, [pc, #100]	@ (8009bd8 <TIM_OC1_SetConfig+0x12c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d003      	beq.n	8009b7e <TIM_OC1_SetConfig+0xd2>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a18      	ldr	r2, [pc, #96]	@ (8009bdc <TIM_OC1_SetConfig+0x130>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d111      	bne.n	8009ba2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	621a      	str	r2, [r3, #32]
}
 8009bbc:	bf00      	nop
 8009bbe:	371c      	adds	r7, #28
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	40012c00 	.word	0x40012c00
 8009bcc:	40013400 	.word	0x40013400
 8009bd0:	40014000 	.word	0x40014000
 8009bd4:	40014400 	.word	0x40014400
 8009bd8:	40014800 	.word	0x40014800
 8009bdc:	40015000 	.word	0x40015000

08009be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	f023 0210 	bic.w	r2, r3, #16
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f023 0320 	bic.w	r3, r3, #32
 8009c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	011b      	lsls	r3, r3, #4
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8009cf0 <TIM_OC2_SetConfig+0x110>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d007      	beq.n	8009c54 <TIM_OC2_SetConfig+0x74>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a2b      	ldr	r2, [pc, #172]	@ (8009cf4 <TIM_OC2_SetConfig+0x114>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d003      	beq.n	8009c54 <TIM_OC2_SetConfig+0x74>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8009cf8 <TIM_OC2_SetConfig+0x118>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d10d      	bne.n	8009c70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf0 <TIM_OC2_SetConfig+0x110>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xc0>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8009cf4 <TIM_OC2_SetConfig+0x114>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00f      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xc0>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a1e      	ldr	r2, [pc, #120]	@ (8009cfc <TIM_OC2_SetConfig+0x11c>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d00b      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xc0>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8009d00 <TIM_OC2_SetConfig+0x120>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d007      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xc0>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a1c      	ldr	r2, [pc, #112]	@ (8009d04 <TIM_OC2_SetConfig+0x124>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d003      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xc0>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a17      	ldr	r2, [pc, #92]	@ (8009cf8 <TIM_OC2_SetConfig+0x118>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d113      	bne.n	8009cc8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40012c00 	.word	0x40012c00
 8009cf4:	40013400 	.word	0x40013400
 8009cf8:	40015000 	.word	0x40015000
 8009cfc:	40014000 	.word	0x40014000
 8009d00:	40014400 	.word	0x40014400
 8009d04:	40014800 	.word	0x40014800

08009d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0303 	bic.w	r3, r3, #3
 8009d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	021b      	lsls	r3, r3, #8
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a2b      	ldr	r2, [pc, #172]	@ (8009e14 <TIM_OC3_SetConfig+0x10c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d007      	beq.n	8009d7a <TIM_OC3_SetConfig+0x72>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8009e18 <TIM_OC3_SetConfig+0x110>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d003      	beq.n	8009d7a <TIM_OC3_SetConfig+0x72>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a29      	ldr	r2, [pc, #164]	@ (8009e1c <TIM_OC3_SetConfig+0x114>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d10d      	bne.n	8009d96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a1e      	ldr	r2, [pc, #120]	@ (8009e14 <TIM_OC3_SetConfig+0x10c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d013      	beq.n	8009dc6 <TIM_OC3_SetConfig+0xbe>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a1d      	ldr	r2, [pc, #116]	@ (8009e18 <TIM_OC3_SetConfig+0x110>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d00f      	beq.n	8009dc6 <TIM_OC3_SetConfig+0xbe>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e20 <TIM_OC3_SetConfig+0x118>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00b      	beq.n	8009dc6 <TIM_OC3_SetConfig+0xbe>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a1c      	ldr	r2, [pc, #112]	@ (8009e24 <TIM_OC3_SetConfig+0x11c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d007      	beq.n	8009dc6 <TIM_OC3_SetConfig+0xbe>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a1b      	ldr	r2, [pc, #108]	@ (8009e28 <TIM_OC3_SetConfig+0x120>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d003      	beq.n	8009dc6 <TIM_OC3_SetConfig+0xbe>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a16      	ldr	r2, [pc, #88]	@ (8009e1c <TIM_OC3_SetConfig+0x114>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d113      	bne.n	8009dee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	621a      	str	r2, [r3, #32]
}
 8009e08:	bf00      	nop
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	40012c00 	.word	0x40012c00
 8009e18:	40013400 	.word	0x40013400
 8009e1c:	40015000 	.word	0x40015000
 8009e20:	40014000 	.word	0x40014000
 8009e24:	40014400 	.word	0x40014400
 8009e28:	40014800 	.word	0x40014800

08009e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	031b      	lsls	r3, r3, #12
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8009f3c <TIM_OC4_SetConfig+0x110>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d007      	beq.n	8009ea0 <TIM_OC4_SetConfig+0x74>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a2b      	ldr	r2, [pc, #172]	@ (8009f40 <TIM_OC4_SetConfig+0x114>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d003      	beq.n	8009ea0 <TIM_OC4_SetConfig+0x74>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8009f44 <TIM_OC4_SetConfig+0x118>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d10d      	bne.n	8009ebc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	031b      	lsls	r3, r3, #12
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009eba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8009f3c <TIM_OC4_SetConfig+0x110>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d013      	beq.n	8009eec <TIM_OC4_SetConfig+0xc0>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8009f40 <TIM_OC4_SetConfig+0x114>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00f      	beq.n	8009eec <TIM_OC4_SetConfig+0xc0>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a1e      	ldr	r2, [pc, #120]	@ (8009f48 <TIM_OC4_SetConfig+0x11c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00b      	beq.n	8009eec <TIM_OC4_SetConfig+0xc0>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8009f4c <TIM_OC4_SetConfig+0x120>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d007      	beq.n	8009eec <TIM_OC4_SetConfig+0xc0>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a1c      	ldr	r2, [pc, #112]	@ (8009f50 <TIM_OC4_SetConfig+0x124>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC4_SetConfig+0xc0>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a17      	ldr	r2, [pc, #92]	@ (8009f44 <TIM_OC4_SetConfig+0x118>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d113      	bne.n	8009f14 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ef2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009efa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	019b      	lsls	r3, r3, #6
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	019b      	lsls	r3, r3, #6
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	621a      	str	r2, [r3, #32]
}
 8009f2e:	bf00      	nop
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40012c00 	.word	0x40012c00
 8009f40:	40013400 	.word	0x40013400
 8009f44:	40015000 	.word	0x40015000
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800

08009f54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009f98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	041b      	lsls	r3, r3, #16
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a19      	ldr	r2, [pc, #100]	@ (800a010 <TIM_OC5_SetConfig+0xbc>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d013      	beq.n	8009fd6 <TIM_OC5_SetConfig+0x82>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a18      	ldr	r2, [pc, #96]	@ (800a014 <TIM_OC5_SetConfig+0xc0>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d00f      	beq.n	8009fd6 <TIM_OC5_SetConfig+0x82>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a17      	ldr	r2, [pc, #92]	@ (800a018 <TIM_OC5_SetConfig+0xc4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00b      	beq.n	8009fd6 <TIM_OC5_SetConfig+0x82>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a16      	ldr	r2, [pc, #88]	@ (800a01c <TIM_OC5_SetConfig+0xc8>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d007      	beq.n	8009fd6 <TIM_OC5_SetConfig+0x82>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a15      	ldr	r2, [pc, #84]	@ (800a020 <TIM_OC5_SetConfig+0xcc>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d003      	beq.n	8009fd6 <TIM_OC5_SetConfig+0x82>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a14      	ldr	r2, [pc, #80]	@ (800a024 <TIM_OC5_SetConfig+0xd0>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d109      	bne.n	8009fea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	021b      	lsls	r3, r3, #8
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	621a      	str	r2, [r3, #32]
}
 800a004:	bf00      	nop
 800a006:	371c      	adds	r7, #28
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	40012c00 	.word	0x40012c00
 800a014:	40013400 	.word	0x40013400
 800a018:	40014000 	.word	0x40014000
 800a01c:	40014400 	.word	0x40014400
 800a020:	40014800 	.word	0x40014800
 800a024:	40015000 	.word	0x40015000

0800a028 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a05a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	021b      	lsls	r3, r3, #8
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	4313      	orrs	r3, r2
 800a066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a06e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	051b      	lsls	r3, r3, #20
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	4313      	orrs	r3, r2
 800a07a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a1a      	ldr	r2, [pc, #104]	@ (800a0e8 <TIM_OC6_SetConfig+0xc0>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d013      	beq.n	800a0ac <TIM_OC6_SetConfig+0x84>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a19      	ldr	r2, [pc, #100]	@ (800a0ec <TIM_OC6_SetConfig+0xc4>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d00f      	beq.n	800a0ac <TIM_OC6_SetConfig+0x84>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a18      	ldr	r2, [pc, #96]	@ (800a0f0 <TIM_OC6_SetConfig+0xc8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d00b      	beq.n	800a0ac <TIM_OC6_SetConfig+0x84>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a17      	ldr	r2, [pc, #92]	@ (800a0f4 <TIM_OC6_SetConfig+0xcc>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d007      	beq.n	800a0ac <TIM_OC6_SetConfig+0x84>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a16      	ldr	r2, [pc, #88]	@ (800a0f8 <TIM_OC6_SetConfig+0xd0>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d003      	beq.n	800a0ac <TIM_OC6_SetConfig+0x84>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a15      	ldr	r2, [pc, #84]	@ (800a0fc <TIM_OC6_SetConfig+0xd4>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d109      	bne.n	800a0c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	029b      	lsls	r3, r3, #10
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	621a      	str	r2, [r3, #32]
}
 800a0da:	bf00      	nop
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	40012c00 	.word	0x40012c00
 800a0ec:	40013400 	.word	0x40013400
 800a0f0:	40014000 	.word	0x40014000
 800a0f4:	40014400 	.word	0x40014400
 800a0f8:	40014800 	.word	0x40014800
 800a0fc:	40015000 	.word	0x40015000

0800a100 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	f023 0201 	bic.w	r2, r3, #1
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4a28      	ldr	r2, [pc, #160]	@ (800a1cc <TIM_TI1_SetConfig+0xcc>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d01b      	beq.n	800a166 <TIM_TI1_SetConfig+0x66>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a134:	d017      	beq.n	800a166 <TIM_TI1_SetConfig+0x66>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	4a25      	ldr	r2, [pc, #148]	@ (800a1d0 <TIM_TI1_SetConfig+0xd0>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d013      	beq.n	800a166 <TIM_TI1_SetConfig+0x66>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4a24      	ldr	r2, [pc, #144]	@ (800a1d4 <TIM_TI1_SetConfig+0xd4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00f      	beq.n	800a166 <TIM_TI1_SetConfig+0x66>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4a23      	ldr	r2, [pc, #140]	@ (800a1d8 <TIM_TI1_SetConfig+0xd8>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00b      	beq.n	800a166 <TIM_TI1_SetConfig+0x66>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4a22      	ldr	r2, [pc, #136]	@ (800a1dc <TIM_TI1_SetConfig+0xdc>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d007      	beq.n	800a166 <TIM_TI1_SetConfig+0x66>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	4a21      	ldr	r2, [pc, #132]	@ (800a1e0 <TIM_TI1_SetConfig+0xe0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d003      	beq.n	800a166 <TIM_TI1_SetConfig+0x66>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	4a20      	ldr	r2, [pc, #128]	@ (800a1e4 <TIM_TI1_SetConfig+0xe4>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d101      	bne.n	800a16a <TIM_TI1_SetConfig+0x6a>
 800a166:	2301      	movs	r3, #1
 800a168:	e000      	b.n	800a16c <TIM_TI1_SetConfig+0x6c>
 800a16a:	2300      	movs	r3, #0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d008      	beq.n	800a182 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	e003      	b.n	800a18a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f043 0301 	orr.w	r3, r3, #1
 800a188:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	011b      	lsls	r3, r3, #4
 800a196:	b2db      	uxtb	r3, r3
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f023 030a 	bic.w	r3, r3, #10
 800a1a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f003 030a 	and.w	r3, r3, #10
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	621a      	str	r2, [r3, #32]
}
 800a1be:	bf00      	nop
 800a1c0:	371c      	adds	r7, #28
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	40012c00 	.word	0x40012c00
 800a1d0:	40000400 	.word	0x40000400
 800a1d4:	40000800 	.word	0x40000800
 800a1d8:	40000c00 	.word	0x40000c00
 800a1dc:	40013400 	.word	0x40013400
 800a1e0:	40014000 	.word	0x40014000
 800a1e4:	40015000 	.word	0x40015000

0800a1e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	f023 0201 	bic.w	r2, r3, #1
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	011b      	lsls	r3, r3, #4
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f023 030a 	bic.w	r3, r3, #10
 800a224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	621a      	str	r2, [r3, #32]
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a246:	b480      	push	{r7}
 800a248:	b087      	sub	sp, #28
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	f023 0210 	bic.w	r2, r3, #16
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	021b      	lsls	r3, r3, #8
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	031b      	lsls	r3, r3, #12
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	4313      	orrs	r3, r2
 800a290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a298:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	011b      	lsls	r3, r3, #4
 800a29e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	621a      	str	r2, [r3, #32]
}
 800a2b4:	bf00      	nop
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	f023 0210 	bic.w	r2, r3, #16
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	031b      	lsls	r3, r3, #12
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a2fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	011b      	lsls	r3, r3, #4
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	4313      	orrs	r3, r2
 800a306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	621a      	str	r2, [r3, #32]
}
 800a314:	bf00      	nop
 800a316:	371c      	adds	r7, #28
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f023 0303 	bic.w	r3, r3, #3
 800a34c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4313      	orrs	r3, r2
 800a354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a35c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	b2db      	uxtb	r3, r3
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	4313      	orrs	r3, r2
 800a368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a370:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	021b      	lsls	r3, r3, #8
 800a376:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	621a      	str	r2, [r3, #32]
}
 800a38c:	bf00      	nop
 800a38e:	371c      	adds	r7, #28
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6a1b      	ldr	r3, [r3, #32]
 800a3b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	021b      	lsls	r3, r3, #8
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	031b      	lsls	r3, r3, #12
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a3ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	031b      	lsls	r3, r3, #12
 800a3f0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	621a      	str	r2, [r3, #32]
}
 800a406:	bf00      	nop
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a412:	b480      	push	{r7}
 800a414:	b085      	sub	sp, #20
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a42c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4313      	orrs	r3, r2
 800a434:	f043 0307 	orr.w	r3, r3, #7
 800a438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	609a      	str	r2, [r3, #8]
}
 800a440:	bf00      	nop
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	021a      	lsls	r2, r3, #8
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	431a      	orrs	r2, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	4313      	orrs	r3, r2
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	4313      	orrs	r3, r2
 800a478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	609a      	str	r2, [r3, #8]
}
 800a480:	bf00      	nop
 800a482:	371c      	adds	r7, #28
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f003 031f 	and.w	r3, r3, #31
 800a49e:	2201      	movs	r2, #1
 800a4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6a1a      	ldr	r2, [r3, #32]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	43db      	mvns	r3, r3
 800a4ae:	401a      	ands	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6a1a      	ldr	r2, [r3, #32]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f003 031f 	and.w	r3, r3, #31
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	621a      	str	r2, [r3, #32]
}
 800a4ca:	bf00      	nop
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
	...

0800a4d8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <HAL_TIMEx_PWMN_Start+0x24>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	e022      	b.n	800a542 <HAL_TIMEx_PWMN_Start+0x6a>
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	d109      	bne.n	800a516 <HAL_TIMEx_PWMN_Start+0x3e>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	bf14      	ite	ne
 800a50e:	2301      	movne	r3, #1
 800a510:	2300      	moveq	r3, #0
 800a512:	b2db      	uxtb	r3, r3
 800a514:	e015      	b.n	800a542 <HAL_TIMEx_PWMN_Start+0x6a>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d109      	bne.n	800a530 <HAL_TIMEx_PWMN_Start+0x58>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b01      	cmp	r3, #1
 800a526:	bf14      	ite	ne
 800a528:	2301      	movne	r3, #1
 800a52a:	2300      	moveq	r3, #0
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	e008      	b.n	800a542 <HAL_TIMEx_PWMN_Start+0x6a>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b01      	cmp	r3, #1
 800a53a:	bf14      	ite	ne
 800a53c:	2301      	movne	r3, #1
 800a53e:	2300      	moveq	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e073      	b.n	800a632 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <HAL_TIMEx_PWMN_Start+0x82>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2202      	movs	r2, #2
 800a554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a558:	e013      	b.n	800a582 <HAL_TIMEx_PWMN_Start+0xaa>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d104      	bne.n	800a56a <HAL_TIMEx_PWMN_Start+0x92>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a568:	e00b      	b.n	800a582 <HAL_TIMEx_PWMN_Start+0xaa>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b08      	cmp	r3, #8
 800a56e:	d104      	bne.n	800a57a <HAL_TIMEx_PWMN_Start+0xa2>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a578:	e003      	b.n	800a582 <HAL_TIMEx_PWMN_Start+0xaa>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2202      	movs	r2, #2
 800a57e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2204      	movs	r2, #4
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fa34 	bl	800a9f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a59e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a25      	ldr	r2, [pc, #148]	@ (800a63c <HAL_TIMEx_PWMN_Start+0x164>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d022      	beq.n	800a5f0 <HAL_TIMEx_PWMN_Start+0x118>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5b2:	d01d      	beq.n	800a5f0 <HAL_TIMEx_PWMN_Start+0x118>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a21      	ldr	r2, [pc, #132]	@ (800a640 <HAL_TIMEx_PWMN_Start+0x168>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d018      	beq.n	800a5f0 <HAL_TIMEx_PWMN_Start+0x118>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a20      	ldr	r2, [pc, #128]	@ (800a644 <HAL_TIMEx_PWMN_Start+0x16c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d013      	beq.n	800a5f0 <HAL_TIMEx_PWMN_Start+0x118>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a648 <HAL_TIMEx_PWMN_Start+0x170>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d00e      	beq.n	800a5f0 <HAL_TIMEx_PWMN_Start+0x118>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a1d      	ldr	r2, [pc, #116]	@ (800a64c <HAL_TIMEx_PWMN_Start+0x174>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d009      	beq.n	800a5f0 <HAL_TIMEx_PWMN_Start+0x118>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a650 <HAL_TIMEx_PWMN_Start+0x178>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d004      	beq.n	800a5f0 <HAL_TIMEx_PWMN_Start+0x118>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a654 <HAL_TIMEx_PWMN_Start+0x17c>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d115      	bne.n	800a61c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	4b18      	ldr	r3, [pc, #96]	@ (800a658 <HAL_TIMEx_PWMN_Start+0x180>)
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b06      	cmp	r3, #6
 800a600:	d015      	beq.n	800a62e <HAL_TIMEx_PWMN_Start+0x156>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a608:	d011      	beq.n	800a62e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0201 	orr.w	r2, r2, #1
 800a618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61a:	e008      	b.n	800a62e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f042 0201 	orr.w	r2, r2, #1
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	e000      	b.n	800a630 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a62e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	40012c00 	.word	0x40012c00
 800a640:	40000400 	.word	0x40000400
 800a644:	40000800 	.word	0x40000800
 800a648:	40000c00 	.word	0x40000c00
 800a64c:	40013400 	.word	0x40013400
 800a650:	40014000 	.word	0x40014000
 800a654:	40015000 	.word	0x40015000
 800a658:	00010007 	.word	0x00010007

0800a65c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2200      	movs	r2, #0
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 f9c2 	bl	800a9f8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6a1a      	ldr	r2, [r3, #32]
 800a67a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a67e:	4013      	ands	r3, r2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10f      	bne.n	800a6a4 <HAL_TIMEx_PWMN_Stop+0x48>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6a1a      	ldr	r2, [r3, #32]
 800a68a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a68e:	4013      	ands	r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d107      	bne.n	800a6a4 <HAL_TIMEx_PWMN_Stop+0x48>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a6a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6a1a      	ldr	r2, [r3, #32]
 800a6aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10f      	bne.n	800a6d4 <HAL_TIMEx_PWMN_Stop+0x78>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6a1a      	ldr	r2, [r3, #32]
 800a6ba:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a6be:	4013      	ands	r3, r2
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d107      	bne.n	800a6d4 <HAL_TIMEx_PWMN_Stop+0x78>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0201 	bic.w	r2, r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d104      	bne.n	800a6e4 <HAL_TIMEx_PWMN_Stop+0x88>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6e2:	e013      	b.n	800a70c <HAL_TIMEx_PWMN_Stop+0xb0>
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d104      	bne.n	800a6f4 <HAL_TIMEx_PWMN_Stop+0x98>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6f2:	e00b      	b.n	800a70c <HAL_TIMEx_PWMN_Stop+0xb0>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b08      	cmp	r3, #8
 800a6f8:	d104      	bne.n	800a704 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a702:	e003      	b.n	800a70c <HAL_TIMEx_PWMN_Stop+0xb0>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d101      	bne.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a72c:	2302      	movs	r3, #2
 800a72e:	e074      	b.n	800a81a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2202      	movs	r2, #2
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a34      	ldr	r2, [pc, #208]	@ (800a828 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d009      	beq.n	800a76e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a33      	ldr	r2, [pc, #204]	@ (800a82c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d004      	beq.n	800a76e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a31      	ldr	r2, [pc, #196]	@ (800a830 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d108      	bne.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a774:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a78a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	4313      	orrs	r3, r2
 800a794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a21      	ldr	r2, [pc, #132]	@ (800a828 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d022      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7b0:	d01d      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a1f      	ldr	r2, [pc, #124]	@ (800a834 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d018      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a838 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d013      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a1c      	ldr	r2, [pc, #112]	@ (800a83c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d00e      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a15      	ldr	r2, [pc, #84]	@ (800a82c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d009      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a18      	ldr	r2, [pc, #96]	@ (800a840 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d004      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a11      	ldr	r2, [pc, #68]	@ (800a830 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d10c      	bne.n	800a808 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	40012c00 	.word	0x40012c00
 800a82c:	40013400 	.word	0x40013400
 800a830:	40015000 	.word	0x40015000
 800a834:	40000400 	.word	0x40000400
 800a838:	40000800 	.word	0x40000800
 800a83c:	40000c00 	.word	0x40000c00
 800a840:	40014000 	.word	0x40014000

0800a844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a84e:	2300      	movs	r3, #0
 800a850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d101      	bne.n	800a860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a85c:	2302      	movs	r3, #2
 800a85e:	e078      	b.n	800a952 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	4313      	orrs	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	041b      	lsls	r3, r3, #16
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a960 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d009      	beq.n	800a906 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a1b      	ldr	r2, [pc, #108]	@ (800a964 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d004      	beq.n	800a906 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a19      	ldr	r2, [pc, #100]	@ (800a968 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d11c      	bne.n	800a940 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a910:	051b      	lsls	r3, r3, #20
 800a912:	4313      	orrs	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92e:	4313      	orrs	r3, r2
 800a930:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	40012c00 	.word	0x40012c00
 800a964:	40013400 	.word	0x40013400
 800a968:	40015000 	.word	0x40015000

0800a96c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	2204      	movs	r2, #4
 800aa0c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6a1a      	ldr	r2, [r3, #32]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	401a      	ands	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a1a      	ldr	r2, [r3, #32]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f003 030f 	and.w	r3, r3, #15
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa30:	431a      	orrs	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	621a      	str	r2, [r3, #32]
}
 800aa36:	bf00      	nop
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e042      	b.n	800aada <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d106      	bne.n	800aa6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7f9 f966 	bl	8003d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2224      	movs	r2, #36	@ 0x24
 800aa70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0201 	bic.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 ff1d 	bl	800b8cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fc1e 	bl	800b2d4 <UART_SetConfig>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e01b      	b.n	800aada <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aab0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aac0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f042 0201 	orr.w	r2, r2, #1
 800aad0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 ff9c 	bl	800ba10 <UART_CheckIdleState>
 800aad8:	4603      	mov	r3, r0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b08a      	sub	sp, #40	@ 0x28
 800aae6:	af02      	add	r7, sp, #8
 800aae8:	60f8      	str	r0, [r7, #12]
 800aaea:	60b9      	str	r1, [r7, #8]
 800aaec:	603b      	str	r3, [r7, #0]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	d17b      	bne.n	800abf4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <HAL_UART_Transmit+0x26>
 800ab02:	88fb      	ldrh	r3, [r7, #6]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e074      	b.n	800abf6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2221      	movs	r2, #33	@ 0x21
 800ab18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab1c:	f7f9 fa2a 	bl	8003f74 <HAL_GetTick>
 800ab20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	88fa      	ldrh	r2, [r7, #6]
 800ab26:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	88fa      	ldrh	r2, [r7, #6]
 800ab2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab3a:	d108      	bne.n	800ab4e <HAL_UART_Transmit+0x6c>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d104      	bne.n	800ab4e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab44:	2300      	movs	r3, #0
 800ab46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	61bb      	str	r3, [r7, #24]
 800ab4c:	e003      	b.n	800ab56 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ab56:	e030      	b.n	800abba <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2180      	movs	r1, #128	@ 0x80
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 fffe 	bl	800bb64 <UART_WaitOnFlagUntilTimeout>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d005      	beq.n	800ab7a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2220      	movs	r2, #32
 800ab72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e03d      	b.n	800abf6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10b      	bne.n	800ab98 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	881b      	ldrh	r3, [r3, #0]
 800ab84:	461a      	mov	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	3302      	adds	r3, #2
 800ab94:	61bb      	str	r3, [r7, #24]
 800ab96:	e007      	b.n	800aba8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	781a      	ldrb	r2, [r3, #0]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	3301      	adds	r3, #1
 800aba6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abae:	b29b      	uxth	r3, r3
 800abb0:	3b01      	subs	r3, #1
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1c8      	bne.n	800ab58 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2200      	movs	r2, #0
 800abce:	2140      	movs	r1, #64	@ 0x40
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 ffc7 	bl	800bb64 <UART_WaitOnFlagUntilTimeout>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d005      	beq.n	800abe8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2220      	movs	r2, #32
 800abe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800abe4:	2303      	movs	r3, #3
 800abe6:	e006      	b.n	800abf6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2220      	movs	r2, #32
 800abec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	e000      	b.n	800abf6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800abf4:	2302      	movs	r3, #2
  }
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3720      	adds	r7, #32
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b0ba      	sub	sp, #232	@ 0xe8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ac2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ac2e:	4013      	ands	r3, r2
 800ac30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ac34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d11b      	bne.n	800ac74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d015      	beq.n	800ac74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac4c:	f003 0320 	and.w	r3, r3, #32
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d105      	bne.n	800ac60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d009      	beq.n	800ac74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8300 	beq.w	800b26a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	4798      	blx	r3
      }
      return;
 800ac72:	e2fa      	b.n	800b26a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ac74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 8123 	beq.w	800aec4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ac7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ac82:	4b8d      	ldr	r3, [pc, #564]	@ (800aeb8 <HAL_UART_IRQHandler+0x2b8>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ac8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ac8e:	4b8b      	ldr	r3, [pc, #556]	@ (800aebc <HAL_UART_IRQHandler+0x2bc>)
 800ac90:	4013      	ands	r3, r2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 8116 	beq.w	800aec4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d011      	beq.n	800acc8 <HAL_UART_IRQHandler+0xc8>
 800aca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00b      	beq.n	800acc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2201      	movs	r2, #1
 800acb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acbe:	f043 0201 	orr.w	r2, r3, #1
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d011      	beq.n	800acf8 <HAL_UART_IRQHandler+0xf8>
 800acd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00b      	beq.n	800acf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2202      	movs	r2, #2
 800ace6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acee:	f043 0204 	orr.w	r2, r3, #4
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d011      	beq.n	800ad28 <HAL_UART_IRQHandler+0x128>
 800ad04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2204      	movs	r2, #4
 800ad16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad1e:	f043 0202 	orr.w	r2, r3, #2
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d017      	beq.n	800ad64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d105      	bne.n	800ad4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ad40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad44:	4b5c      	ldr	r3, [pc, #368]	@ (800aeb8 <HAL_UART_IRQHandler+0x2b8>)
 800ad46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00b      	beq.n	800ad64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2208      	movs	r2, #8
 800ad52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad5a:	f043 0208 	orr.w	r2, r3, #8
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d012      	beq.n	800ad96 <HAL_UART_IRQHandler+0x196>
 800ad70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00c      	beq.n	800ad96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad8c:	f043 0220 	orr.w	r2, r3, #32
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 8266 	beq.w	800b26e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ada2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d013      	beq.n	800add6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d007      	beq.n	800add6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800addc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adea:	2b40      	cmp	r3, #64	@ 0x40
 800adec:	d005      	beq.n	800adfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800adee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800adf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d054      	beq.n	800aea4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 f807 	bl	800be0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae0a:	2b40      	cmp	r3, #64	@ 0x40
 800ae0c:	d146      	bne.n	800ae9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ae24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3308      	adds	r3, #8
 800ae36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ae3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ae3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ae46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ae52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1d9      	bne.n	800ae0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d017      	beq.n	800ae94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae6a:	4a15      	ldr	r2, [pc, #84]	@ (800aec0 <HAL_UART_IRQHandler+0x2c0>)
 800ae6c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fa fead 	bl	8005bd4 <HAL_DMA_Abort_IT>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d019      	beq.n	800aeb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ae8e:	4610      	mov	r0, r2
 800ae90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae92:	e00f      	b.n	800aeb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fa13 	bl	800b2c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae9a:	e00b      	b.n	800aeb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fa0f 	bl	800b2c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea2:	e007      	b.n	800aeb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fa0b 	bl	800b2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aeb2:	e1dc      	b.n	800b26e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb4:	bf00      	nop
    return;
 800aeb6:	e1da      	b.n	800b26e <HAL_UART_IRQHandler+0x66e>
 800aeb8:	10000001 	.word	0x10000001
 800aebc:	04000120 	.word	0x04000120
 800aec0:	0800c0c5 	.word	0x0800c0c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	f040 8170 	bne.w	800b1ae <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aed2:	f003 0310 	and.w	r3, r3, #16
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 8169 	beq.w	800b1ae <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aee0:	f003 0310 	and.w	r3, r3, #16
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 8162 	beq.w	800b1ae <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2210      	movs	r2, #16
 800aef0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aefc:	2b40      	cmp	r3, #64	@ 0x40
 800aefe:	f040 80d8 	bne.w	800b0b2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 80af 	beq.w	800b078 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af24:	429a      	cmp	r2, r3
 800af26:	f080 80a7 	bcs.w	800b078 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0320 	and.w	r3, r3, #32
 800af42:	2b00      	cmp	r3, #0
 800af44:	f040 8087 	bne.w	800b056 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800af5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	461a      	mov	r2, r3
 800af6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800af76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800af7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800af82:	e841 2300 	strex	r3, r2, [r1]
 800af86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800af8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1da      	bne.n	800af48 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3308      	adds	r3, #8
 800af98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800afa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afa4:	f023 0301 	bic.w	r3, r3, #1
 800afa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3308      	adds	r3, #8
 800afb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800afb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800afba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800afbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800afc2:	e841 2300 	strex	r3, r2, [r1]
 800afc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800afc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1e1      	bne.n	800af92 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3308      	adds	r3, #8
 800afd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800afde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3308      	adds	r3, #8
 800afee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aff2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aff4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aff8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e3      	bne.n	800afce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b024:	f023 0310 	bic.w	r3, r3, #16
 800b028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	461a      	mov	r2, r3
 800b032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b036:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b038:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b03c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b03e:	e841 2300 	strex	r3, r2, [r1]
 800b042:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1e4      	bne.n	800b014 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b050:	4618      	mov	r0, r3
 800b052:	f7fa fd66 	bl	8005b22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2202      	movs	r2, #2
 800b05a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b068:	b29b      	uxth	r3, r3
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7f6 feb1 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b076:	e0fc      	b.n	800b272 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b07e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b082:	429a      	cmp	r2, r3
 800b084:	f040 80f5 	bne.w	800b272 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0320 	and.w	r3, r3, #32
 800b096:	2b20      	cmp	r3, #32
 800b098:	f040 80eb 	bne.w	800b272 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7f6 fe94 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
      return;
 800b0b0:	e0df      	b.n	800b272 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 80d1 	beq.w	800b276 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b0d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80cc 	beq.w	800b276 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b100:	647b      	str	r3, [r7, #68]	@ 0x44
 800b102:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e4      	bne.n	800b0de <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3308      	adds	r3, #8
 800b11a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	623b      	str	r3, [r7, #32]
   return(result);
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b12a:	f023 0301 	bic.w	r3, r3, #1
 800b12e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3308      	adds	r3, #8
 800b138:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b13c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e1      	bne.n	800b114 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2220      	movs	r2, #32
 800b154:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	60fb      	str	r3, [r7, #12]
   return(result);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f023 0310 	bic.w	r3, r3, #16
 800b178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	461a      	mov	r2, r3
 800b182:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b186:	61fb      	str	r3, [r7, #28]
 800b188:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	69b9      	ldr	r1, [r7, #24]
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	617b      	str	r3, [r7, #20]
   return(result);
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e4      	bne.n	800b164 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2202      	movs	r2, #2
 800b19e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b1a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7f6 fe16 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1ac:	e063      	b.n	800b276 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00e      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x5d8>
 800b1ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d008      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b1ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 ffb4 	bl	800c13e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1d6:	e051      	b.n	800b27c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d014      	beq.n	800b20e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d105      	bne.n	800b1fc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d008      	beq.n	800b20e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b200:	2b00      	cmp	r3, #0
 800b202:	d03a      	beq.n	800b27a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	4798      	blx	r3
    }
    return;
 800b20c:	e035      	b.n	800b27a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b216:	2b00      	cmp	r3, #0
 800b218:	d009      	beq.n	800b22e <HAL_UART_IRQHandler+0x62e>
 800b21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b21e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b222:	2b00      	cmp	r3, #0
 800b224:	d003      	beq.n	800b22e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 ff5e 	bl	800c0e8 <UART_EndTransmit_IT>
    return;
 800b22c:	e026      	b.n	800b27c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d009      	beq.n	800b24e <HAL_UART_IRQHandler+0x64e>
 800b23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b23e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 ff8d 	bl	800c166 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b24c:	e016      	b.n	800b27c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b252:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d010      	beq.n	800b27c <HAL_UART_IRQHandler+0x67c>
 800b25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	da0c      	bge.n	800b27c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 ff75 	bl	800c152 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b268:	e008      	b.n	800b27c <HAL_UART_IRQHandler+0x67c>
      return;
 800b26a:	bf00      	nop
 800b26c:	e006      	b.n	800b27c <HAL_UART_IRQHandler+0x67c>
    return;
 800b26e:	bf00      	nop
 800b270:	e004      	b.n	800b27c <HAL_UART_IRQHandler+0x67c>
      return;
 800b272:	bf00      	nop
 800b274:	e002      	b.n	800b27c <HAL_UART_IRQHandler+0x67c>
      return;
 800b276:	bf00      	nop
 800b278:	e000      	b.n	800b27c <HAL_UART_IRQHandler+0x67c>
    return;
 800b27a:	bf00      	nop
  }
}
 800b27c:	37e8      	adds	r7, #232	@ 0xe8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop

0800b284 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2d8:	b08c      	sub	sp, #48	@ 0x30
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	69db      	ldr	r3, [r3, #28]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	4baa      	ldr	r3, [pc, #680]	@ (800b5ac <UART_SetConfig+0x2d8>)
 800b304:	4013      	ands	r3, r2
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	6812      	ldr	r2, [r2, #0]
 800b30a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b30c:	430b      	orrs	r3, r1
 800b30e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	430a      	orrs	r2, r1
 800b324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a9f      	ldr	r2, [pc, #636]	@ (800b5b0 <UART_SetConfig+0x2dc>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d004      	beq.n	800b340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b33c:	4313      	orrs	r3, r2
 800b33e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b34a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	6812      	ldr	r2, [r2, #0]
 800b352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b354:	430b      	orrs	r3, r1
 800b356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35e:	f023 010f 	bic.w	r1, r3, #15
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a90      	ldr	r2, [pc, #576]	@ (800b5b4 <UART_SetConfig+0x2e0>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d125      	bne.n	800b3c4 <UART_SetConfig+0xf0>
 800b378:	4b8f      	ldr	r3, [pc, #572]	@ (800b5b8 <UART_SetConfig+0x2e4>)
 800b37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b37e:	f003 0303 	and.w	r3, r3, #3
 800b382:	2b03      	cmp	r3, #3
 800b384:	d81a      	bhi.n	800b3bc <UART_SetConfig+0xe8>
 800b386:	a201      	add	r2, pc, #4	@ (adr r2, 800b38c <UART_SetConfig+0xb8>)
 800b388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38c:	0800b39d 	.word	0x0800b39d
 800b390:	0800b3ad 	.word	0x0800b3ad
 800b394:	0800b3a5 	.word	0x0800b3a5
 800b398:	0800b3b5 	.word	0x0800b3b5
 800b39c:	2301      	movs	r3, #1
 800b39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3a2:	e116      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3aa:	e112      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b3ac:	2304      	movs	r3, #4
 800b3ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3b2:	e10e      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b3b4:	2308      	movs	r3, #8
 800b3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ba:	e10a      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b3bc:	2310      	movs	r3, #16
 800b3be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3c2:	e106      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a7c      	ldr	r2, [pc, #496]	@ (800b5bc <UART_SetConfig+0x2e8>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d138      	bne.n	800b440 <UART_SetConfig+0x16c>
 800b3ce:	4b7a      	ldr	r3, [pc, #488]	@ (800b5b8 <UART_SetConfig+0x2e4>)
 800b3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d4:	f003 030c 	and.w	r3, r3, #12
 800b3d8:	2b0c      	cmp	r3, #12
 800b3da:	d82d      	bhi.n	800b438 <UART_SetConfig+0x164>
 800b3dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e4 <UART_SetConfig+0x110>)
 800b3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e2:	bf00      	nop
 800b3e4:	0800b419 	.word	0x0800b419
 800b3e8:	0800b439 	.word	0x0800b439
 800b3ec:	0800b439 	.word	0x0800b439
 800b3f0:	0800b439 	.word	0x0800b439
 800b3f4:	0800b429 	.word	0x0800b429
 800b3f8:	0800b439 	.word	0x0800b439
 800b3fc:	0800b439 	.word	0x0800b439
 800b400:	0800b439 	.word	0x0800b439
 800b404:	0800b421 	.word	0x0800b421
 800b408:	0800b439 	.word	0x0800b439
 800b40c:	0800b439 	.word	0x0800b439
 800b410:	0800b439 	.word	0x0800b439
 800b414:	0800b431 	.word	0x0800b431
 800b418:	2300      	movs	r3, #0
 800b41a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b41e:	e0d8      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b420:	2302      	movs	r3, #2
 800b422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b426:	e0d4      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b428:	2304      	movs	r3, #4
 800b42a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b42e:	e0d0      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b430:	2308      	movs	r3, #8
 800b432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b436:	e0cc      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b438:	2310      	movs	r3, #16
 800b43a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b43e:	e0c8      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a5e      	ldr	r2, [pc, #376]	@ (800b5c0 <UART_SetConfig+0x2ec>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d125      	bne.n	800b496 <UART_SetConfig+0x1c2>
 800b44a:	4b5b      	ldr	r3, [pc, #364]	@ (800b5b8 <UART_SetConfig+0x2e4>)
 800b44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b450:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b454:	2b30      	cmp	r3, #48	@ 0x30
 800b456:	d016      	beq.n	800b486 <UART_SetConfig+0x1b2>
 800b458:	2b30      	cmp	r3, #48	@ 0x30
 800b45a:	d818      	bhi.n	800b48e <UART_SetConfig+0x1ba>
 800b45c:	2b20      	cmp	r3, #32
 800b45e:	d00a      	beq.n	800b476 <UART_SetConfig+0x1a2>
 800b460:	2b20      	cmp	r3, #32
 800b462:	d814      	bhi.n	800b48e <UART_SetConfig+0x1ba>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <UART_SetConfig+0x19a>
 800b468:	2b10      	cmp	r3, #16
 800b46a:	d008      	beq.n	800b47e <UART_SetConfig+0x1aa>
 800b46c:	e00f      	b.n	800b48e <UART_SetConfig+0x1ba>
 800b46e:	2300      	movs	r3, #0
 800b470:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b474:	e0ad      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b476:	2302      	movs	r3, #2
 800b478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b47c:	e0a9      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b47e:	2304      	movs	r3, #4
 800b480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b484:	e0a5      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b486:	2308      	movs	r3, #8
 800b488:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b48c:	e0a1      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b48e:	2310      	movs	r3, #16
 800b490:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b494:	e09d      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a4a      	ldr	r2, [pc, #296]	@ (800b5c4 <UART_SetConfig+0x2f0>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d125      	bne.n	800b4ec <UART_SetConfig+0x218>
 800b4a0:	4b45      	ldr	r3, [pc, #276]	@ (800b5b8 <UART_SetConfig+0x2e4>)
 800b4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b4aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4ac:	d016      	beq.n	800b4dc <UART_SetConfig+0x208>
 800b4ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4b0:	d818      	bhi.n	800b4e4 <UART_SetConfig+0x210>
 800b4b2:	2b80      	cmp	r3, #128	@ 0x80
 800b4b4:	d00a      	beq.n	800b4cc <UART_SetConfig+0x1f8>
 800b4b6:	2b80      	cmp	r3, #128	@ 0x80
 800b4b8:	d814      	bhi.n	800b4e4 <UART_SetConfig+0x210>
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <UART_SetConfig+0x1f0>
 800b4be:	2b40      	cmp	r3, #64	@ 0x40
 800b4c0:	d008      	beq.n	800b4d4 <UART_SetConfig+0x200>
 800b4c2:	e00f      	b.n	800b4e4 <UART_SetConfig+0x210>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ca:	e082      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4d2:	e07e      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4da:	e07a      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b4dc:	2308      	movs	r3, #8
 800b4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4e2:	e076      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b4e4:	2310      	movs	r3, #16
 800b4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ea:	e072      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a35      	ldr	r2, [pc, #212]	@ (800b5c8 <UART_SetConfig+0x2f4>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d12a      	bne.n	800b54c <UART_SetConfig+0x278>
 800b4f6:	4b30      	ldr	r3, [pc, #192]	@ (800b5b8 <UART_SetConfig+0x2e4>)
 800b4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b500:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b504:	d01a      	beq.n	800b53c <UART_SetConfig+0x268>
 800b506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b50a:	d81b      	bhi.n	800b544 <UART_SetConfig+0x270>
 800b50c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b510:	d00c      	beq.n	800b52c <UART_SetConfig+0x258>
 800b512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b516:	d815      	bhi.n	800b544 <UART_SetConfig+0x270>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d003      	beq.n	800b524 <UART_SetConfig+0x250>
 800b51c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b520:	d008      	beq.n	800b534 <UART_SetConfig+0x260>
 800b522:	e00f      	b.n	800b544 <UART_SetConfig+0x270>
 800b524:	2300      	movs	r3, #0
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52a:	e052      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b52c:	2302      	movs	r3, #2
 800b52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b532:	e04e      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b534:	2304      	movs	r3, #4
 800b536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53a:	e04a      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b53c:	2308      	movs	r3, #8
 800b53e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b542:	e046      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b544:	2310      	movs	r3, #16
 800b546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b54a:	e042      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a17      	ldr	r2, [pc, #92]	@ (800b5b0 <UART_SetConfig+0x2dc>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d13a      	bne.n	800b5cc <UART_SetConfig+0x2f8>
 800b556:	4b18      	ldr	r3, [pc, #96]	@ (800b5b8 <UART_SetConfig+0x2e4>)
 800b558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b55c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b560:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b564:	d01a      	beq.n	800b59c <UART_SetConfig+0x2c8>
 800b566:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b56a:	d81b      	bhi.n	800b5a4 <UART_SetConfig+0x2d0>
 800b56c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b570:	d00c      	beq.n	800b58c <UART_SetConfig+0x2b8>
 800b572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b576:	d815      	bhi.n	800b5a4 <UART_SetConfig+0x2d0>
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d003      	beq.n	800b584 <UART_SetConfig+0x2b0>
 800b57c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b580:	d008      	beq.n	800b594 <UART_SetConfig+0x2c0>
 800b582:	e00f      	b.n	800b5a4 <UART_SetConfig+0x2d0>
 800b584:	2300      	movs	r3, #0
 800b586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b58a:	e022      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b58c:	2302      	movs	r3, #2
 800b58e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b592:	e01e      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b594:	2304      	movs	r3, #4
 800b596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b59a:	e01a      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b59c:	2308      	movs	r3, #8
 800b59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5a2:	e016      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5aa:	e012      	b.n	800b5d2 <UART_SetConfig+0x2fe>
 800b5ac:	cfff69f3 	.word	0xcfff69f3
 800b5b0:	40008000 	.word	0x40008000
 800b5b4:	40013800 	.word	0x40013800
 800b5b8:	40021000 	.word	0x40021000
 800b5bc:	40004400 	.word	0x40004400
 800b5c0:	40004800 	.word	0x40004800
 800b5c4:	40004c00 	.word	0x40004c00
 800b5c8:	40005000 	.word	0x40005000
 800b5cc:	2310      	movs	r3, #16
 800b5ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4aae      	ldr	r2, [pc, #696]	@ (800b890 <UART_SetConfig+0x5bc>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	f040 8097 	bne.w	800b70c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d823      	bhi.n	800b62e <UART_SetConfig+0x35a>
 800b5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5ec <UART_SetConfig+0x318>)
 800b5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ec:	0800b611 	.word	0x0800b611
 800b5f0:	0800b62f 	.word	0x0800b62f
 800b5f4:	0800b619 	.word	0x0800b619
 800b5f8:	0800b62f 	.word	0x0800b62f
 800b5fc:	0800b61f 	.word	0x0800b61f
 800b600:	0800b62f 	.word	0x0800b62f
 800b604:	0800b62f 	.word	0x0800b62f
 800b608:	0800b62f 	.word	0x0800b62f
 800b60c:	0800b627 	.word	0x0800b627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b610:	f7fc f89c 	bl	800774c <HAL_RCC_GetPCLK1Freq>
 800b614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b616:	e010      	b.n	800b63a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b618:	4b9e      	ldr	r3, [pc, #632]	@ (800b894 <UART_SetConfig+0x5c0>)
 800b61a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b61c:	e00d      	b.n	800b63a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b61e:	f7fc f829 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 800b622:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b624:	e009      	b.n	800b63a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b62a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b62c:	e005      	b.n	800b63a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b638:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f000 8130 	beq.w	800b8a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b646:	4a94      	ldr	r2, [pc, #592]	@ (800b898 <UART_SetConfig+0x5c4>)
 800b648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b64c:	461a      	mov	r2, r3
 800b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b650:	fbb3 f3f2 	udiv	r3, r3, r2
 800b654:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	4613      	mov	r3, r2
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	4413      	add	r3, r2
 800b660:	69ba      	ldr	r2, [r7, #24]
 800b662:	429a      	cmp	r2, r3
 800b664:	d305      	bcc.n	800b672 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b66c:	69ba      	ldr	r2, [r7, #24]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d903      	bls.n	800b67a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b678:	e113      	b.n	800b8a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	2200      	movs	r2, #0
 800b67e:	60bb      	str	r3, [r7, #8]
 800b680:	60fa      	str	r2, [r7, #12]
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b686:	4a84      	ldr	r2, [pc, #528]	@ (800b898 <UART_SetConfig+0x5c4>)
 800b688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	2200      	movs	r2, #0
 800b690:	603b      	str	r3, [r7, #0]
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b698:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b69c:	f7f4 fe0c 	bl	80002b8 <__aeabi_uldivmod>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	f04f 0200 	mov.w	r2, #0
 800b6ac:	f04f 0300 	mov.w	r3, #0
 800b6b0:	020b      	lsls	r3, r1, #8
 800b6b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6b6:	0202      	lsls	r2, r0, #8
 800b6b8:	6979      	ldr	r1, [r7, #20]
 800b6ba:	6849      	ldr	r1, [r1, #4]
 800b6bc:	0849      	lsrs	r1, r1, #1
 800b6be:	2000      	movs	r0, #0
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	eb12 0804 	adds.w	r8, r2, r4
 800b6c8:	eb43 0905 	adc.w	r9, r3, r5
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	469a      	mov	sl, r3
 800b6d4:	4693      	mov	fp, r2
 800b6d6:	4652      	mov	r2, sl
 800b6d8:	465b      	mov	r3, fp
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4649      	mov	r1, r9
 800b6de:	f7f4 fdeb 	bl	80002b8 <__aeabi_uldivmod>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6f0:	d308      	bcc.n	800b704 <UART_SetConfig+0x430>
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6f8:	d204      	bcs.n	800b704 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6a3a      	ldr	r2, [r7, #32]
 800b700:	60da      	str	r2, [r3, #12]
 800b702:	e0ce      	b.n	800b8a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b70a:	e0ca      	b.n	800b8a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b714:	d166      	bne.n	800b7e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b716:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b71a:	2b08      	cmp	r3, #8
 800b71c:	d827      	bhi.n	800b76e <UART_SetConfig+0x49a>
 800b71e:	a201      	add	r2, pc, #4	@ (adr r2, 800b724 <UART_SetConfig+0x450>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b749 	.word	0x0800b749
 800b728:	0800b751 	.word	0x0800b751
 800b72c:	0800b759 	.word	0x0800b759
 800b730:	0800b76f 	.word	0x0800b76f
 800b734:	0800b75f 	.word	0x0800b75f
 800b738:	0800b76f 	.word	0x0800b76f
 800b73c:	0800b76f 	.word	0x0800b76f
 800b740:	0800b76f 	.word	0x0800b76f
 800b744:	0800b767 	.word	0x0800b767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b748:	f7fc f800 	bl	800774c <HAL_RCC_GetPCLK1Freq>
 800b74c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b74e:	e014      	b.n	800b77a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b750:	f7fc f812 	bl	8007778 <HAL_RCC_GetPCLK2Freq>
 800b754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b756:	e010      	b.n	800b77a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b758:	4b4e      	ldr	r3, [pc, #312]	@ (800b894 <UART_SetConfig+0x5c0>)
 800b75a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b75c:	e00d      	b.n	800b77a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b75e:	f7fb ff89 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 800b762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b764:	e009      	b.n	800b77a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b76a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b76c:	e005      	b.n	800b77a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b76e:	2300      	movs	r3, #0
 800b770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 8090 	beq.w	800b8a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b786:	4a44      	ldr	r2, [pc, #272]	@ (800b898 <UART_SetConfig+0x5c4>)
 800b788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b78c:	461a      	mov	r2, r3
 800b78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b790:	fbb3 f3f2 	udiv	r3, r3, r2
 800b794:	005a      	lsls	r2, r3, #1
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	085b      	lsrs	r3, r3, #1
 800b79c:	441a      	add	r2, r3
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7a8:	6a3b      	ldr	r3, [r7, #32]
 800b7aa:	2b0f      	cmp	r3, #15
 800b7ac:	d916      	bls.n	800b7dc <UART_SetConfig+0x508>
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7b4:	d212      	bcs.n	800b7dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	f023 030f 	bic.w	r3, r3, #15
 800b7be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	085b      	lsrs	r3, r3, #1
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	8bfb      	ldrh	r3, [r7, #30]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	8bfa      	ldrh	r2, [r7, #30]
 800b7d8:	60da      	str	r2, [r3, #12]
 800b7da:	e062      	b.n	800b8a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b7e2:	e05e      	b.n	800b8a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b7e8:	2b08      	cmp	r3, #8
 800b7ea:	d828      	bhi.n	800b83e <UART_SetConfig+0x56a>
 800b7ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <UART_SetConfig+0x520>)
 800b7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f2:	bf00      	nop
 800b7f4:	0800b819 	.word	0x0800b819
 800b7f8:	0800b821 	.word	0x0800b821
 800b7fc:	0800b829 	.word	0x0800b829
 800b800:	0800b83f 	.word	0x0800b83f
 800b804:	0800b82f 	.word	0x0800b82f
 800b808:	0800b83f 	.word	0x0800b83f
 800b80c:	0800b83f 	.word	0x0800b83f
 800b810:	0800b83f 	.word	0x0800b83f
 800b814:	0800b837 	.word	0x0800b837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b818:	f7fb ff98 	bl	800774c <HAL_RCC_GetPCLK1Freq>
 800b81c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b81e:	e014      	b.n	800b84a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b820:	f7fb ffaa 	bl	8007778 <HAL_RCC_GetPCLK2Freq>
 800b824:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b826:	e010      	b.n	800b84a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b828:	4b1a      	ldr	r3, [pc, #104]	@ (800b894 <UART_SetConfig+0x5c0>)
 800b82a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b82c:	e00d      	b.n	800b84a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b82e:	f7fb ff21 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 800b832:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b834:	e009      	b.n	800b84a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b83a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b83c:	e005      	b.n	800b84a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b848:	bf00      	nop
    }

    if (pclk != 0U)
 800b84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d028      	beq.n	800b8a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b854:	4a10      	ldr	r2, [pc, #64]	@ (800b898 <UART_SetConfig+0x5c4>)
 800b856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b85a:	461a      	mov	r2, r3
 800b85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	085b      	lsrs	r3, r3, #1
 800b868:	441a      	add	r2, r3
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b872:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	2b0f      	cmp	r3, #15
 800b878:	d910      	bls.n	800b89c <UART_SetConfig+0x5c8>
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b880:	d20c      	bcs.n	800b89c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	b29a      	uxth	r2, r3
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60da      	str	r2, [r3, #12]
 800b88c:	e009      	b.n	800b8a2 <UART_SetConfig+0x5ce>
 800b88e:	bf00      	nop
 800b890:	40008000 	.word	0x40008000
 800b894:	00f42400 	.word	0x00f42400
 800b898:	0800c4dc 	.word	0x0800c4dc
      }
      else
      {
        ret = HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b8be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3730      	adds	r7, #48	@ 0x30
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b8cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d8:	f003 0308 	and.w	r3, r3, #8
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00a      	beq.n	800b8f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00a      	beq.n	800b918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	430a      	orrs	r2, r1
 800b916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b91c:	f003 0302 	and.w	r3, r3, #2
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	430a      	orrs	r2, r1
 800b938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	f003 0304 	and.w	r3, r3, #4
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b960:	f003 0310 	and.w	r3, r3, #16
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00a      	beq.n	800b97e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	430a      	orrs	r2, r1
 800b97c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b982:	f003 0320 	and.w	r3, r3, #32
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00a      	beq.n	800b9a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	430a      	orrs	r2, r1
 800b99e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d01a      	beq.n	800b9e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9ca:	d10a      	bne.n	800b9e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	430a      	orrs	r2, r1
 800ba02:	605a      	str	r2, [r3, #4]
  }
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b098      	sub	sp, #96	@ 0x60
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba20:	f7f8 faa8 	bl	8003f74 <HAL_GetTick>
 800ba24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0308 	and.w	r3, r3, #8
 800ba30:	2b08      	cmp	r3, #8
 800ba32:	d12f      	bne.n	800ba94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f88e 	bl	800bb64 <UART_WaitOnFlagUntilTimeout>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d022      	beq.n	800ba94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	e853 3f00 	ldrex	r3, [r3]
 800ba5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba62:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	461a      	mov	r2, r3
 800ba6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba74:	e841 2300 	strex	r3, r2, [r1]
 800ba78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1e6      	bne.n	800ba4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e063      	b.n	800bb5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 0304 	and.w	r3, r3, #4
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d149      	bne.n	800bb36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baa2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baaa:	2200      	movs	r2, #0
 800baac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f857 	bl	800bb64 <UART_WaitOnFlagUntilTimeout>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d03c      	beq.n	800bb36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac4:	e853 3f00 	ldrex	r3, [r3]
 800bac8:	623b      	str	r3, [r7, #32]
   return(result);
 800baca:	6a3b      	ldr	r3, [r7, #32]
 800bacc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bada:	633b      	str	r3, [r7, #48]	@ 0x30
 800badc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bae2:	e841 2300 	strex	r3, r2, [r1]
 800bae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baea:	2b00      	cmp	r3, #0
 800baec:	d1e6      	bne.n	800babc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3308      	adds	r3, #8
 800baf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f023 0301 	bic.w	r3, r3, #1
 800bb04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb0e:	61fa      	str	r2, [r7, #28]
 800bb10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	69b9      	ldr	r1, [r7, #24]
 800bb14:	69fa      	ldr	r2, [r7, #28]
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	617b      	str	r3, [r7, #20]
   return(result);
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e5      	bne.n	800baee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2220      	movs	r2, #32
 800bb26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e012      	b.n	800bb5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2220      	movs	r2, #32
 800bb3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2220      	movs	r2, #32
 800bb42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3758      	adds	r7, #88	@ 0x58
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	603b      	str	r3, [r7, #0]
 800bb70:	4613      	mov	r3, r2
 800bb72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb74:	e04f      	b.n	800bc16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7c:	d04b      	beq.n	800bc16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb7e:	f7f8 f9f9 	bl	8003f74 <HAL_GetTick>
 800bb82:	4602      	mov	r2, r0
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	69ba      	ldr	r2, [r7, #24]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d302      	bcc.n	800bb94 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e04e      	b.n	800bc36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0304 	and.w	r3, r3, #4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d037      	beq.n	800bc16 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	2b80      	cmp	r3, #128	@ 0x80
 800bbaa:	d034      	beq.n	800bc16 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b40      	cmp	r3, #64	@ 0x40
 800bbb0:	d031      	beq.n	800bc16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	69db      	ldr	r3, [r3, #28]
 800bbb8:	f003 0308 	and.w	r3, r3, #8
 800bbbc:	2b08      	cmp	r3, #8
 800bbbe:	d110      	bne.n	800bbe2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2208      	movs	r2, #8
 800bbc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f920 	bl	800be0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e029      	b.n	800bc36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	69db      	ldr	r3, [r3, #28]
 800bbe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbf0:	d111      	bne.n	800bc16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bbfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f906 	bl	800be0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bc12:	2303      	movs	r3, #3
 800bc14:	e00f      	b.n	800bc36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	69da      	ldr	r2, [r3, #28]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	4013      	ands	r3, r2
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	bf0c      	ite	eq
 800bc26:	2301      	moveq	r3, #1
 800bc28:	2300      	movne	r3, #0
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	79fb      	ldrb	r3, [r7, #7]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d0a0      	beq.n	800bb76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b096      	sub	sp, #88	@ 0x58
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2222      	movs	r2, #34	@ 0x22
 800bc68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d02d      	beq.n	800bcd2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc7c:	4a40      	ldr	r2, [pc, #256]	@ (800bd80 <UART_Start_Receive_DMA+0x140>)
 800bc7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc86:	4a3f      	ldr	r2, [pc, #252]	@ (800bd84 <UART_Start_Receive_DMA+0x144>)
 800bc88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc90:	4a3d      	ldr	r2, [pc, #244]	@ (800bd88 <UART_Start_Receive_DMA+0x148>)
 800bc92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3324      	adds	r3, #36	@ 0x24
 800bcaa:	4619      	mov	r1, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	88fb      	ldrh	r3, [r7, #6]
 800bcb4:	f7f9 feba 	bl	8005a2c <HAL_DMA_Start_IT>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d009      	beq.n	800bcd2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2210      	movs	r2, #16
 800bcc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2220      	movs	r2, #32
 800bcca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e051      	b.n	800bd76 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d018      	beq.n	800bd0c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcee:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcfa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bcfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd00:	e841 2300 	strex	r3, r2, [r1]
 800bd04:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bd06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1e6      	bne.n	800bcda <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3308      	adds	r3, #8
 800bd12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd16:	e853 3f00 	ldrex	r3, [r3]
 800bd1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1e:	f043 0301 	orr.w	r3, r3, #1
 800bd22:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	3308      	adds	r3, #8
 800bd2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd2c:	637a      	str	r2, [r7, #52]	@ 0x34
 800bd2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd34:	e841 2300 	strex	r3, r2, [r1]
 800bd38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bd3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1e5      	bne.n	800bd0c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3308      	adds	r3, #8
 800bd46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	e853 3f00 	ldrex	r3, [r3]
 800bd4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	3308      	adds	r3, #8
 800bd5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd60:	623a      	str	r2, [r7, #32]
 800bd62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	69f9      	ldr	r1, [r7, #28]
 800bd66:	6a3a      	ldr	r2, [r7, #32]
 800bd68:	e841 2300 	strex	r3, r2, [r1]
 800bd6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e5      	bne.n	800bd40 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3758      	adds	r7, #88	@ 0x58
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	0800bedb 	.word	0x0800bedb
 800bd84:	0800c007 	.word	0x0800c007
 800bd88:	0800c045 	.word	0x0800c045

0800bd8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b08f      	sub	sp, #60	@ 0x3c
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bda8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bdb4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdba:	e841 2300 	strex	r3, r2, [r1]
 800bdbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1e6      	bne.n	800bd94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3308      	adds	r3, #8
 800bdcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	e853 3f00 	ldrex	r3, [r3]
 800bdd4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bddc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3308      	adds	r3, #8
 800bde4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde6:	61ba      	str	r2, [r7, #24]
 800bde8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdea:	6979      	ldr	r1, [r7, #20]
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	e841 2300 	strex	r3, r2, [r1]
 800bdf2:	613b      	str	r3, [r7, #16]
   return(result);
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1e5      	bne.n	800bdc6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800be02:	bf00      	nop
 800be04:	373c      	adds	r7, #60	@ 0x3c
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be0e:	b480      	push	{r7}
 800be10:	b095      	sub	sp, #84	@ 0x54
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be1e:	e853 3f00 	ldrex	r3, [r3]
 800be22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	461a      	mov	r2, r3
 800be32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be34:	643b      	str	r3, [r7, #64]	@ 0x40
 800be36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be3c:	e841 2300 	strex	r3, r2, [r1]
 800be40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1e6      	bne.n	800be16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3308      	adds	r3, #8
 800be4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	e853 3f00 	ldrex	r3, [r3]
 800be56:	61fb      	str	r3, [r7, #28]
   return(result);
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be5e:	f023 0301 	bic.w	r3, r3, #1
 800be62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3308      	adds	r3, #8
 800be6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e3      	bne.n	800be48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be84:	2b01      	cmp	r3, #1
 800be86:	d118      	bne.n	800beba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	60bb      	str	r3, [r7, #8]
   return(result);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	f023 0310 	bic.w	r3, r3, #16
 800be9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bea6:	61bb      	str	r3, [r7, #24]
 800bea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	6979      	ldr	r1, [r7, #20]
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	613b      	str	r3, [r7, #16]
   return(result);
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e6      	bne.n	800be88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bece:	bf00      	nop
 800bed0:	3754      	adds	r7, #84	@ 0x54
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b09c      	sub	sp, #112	@ 0x70
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0320 	and.w	r3, r3, #32
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d171      	bne.n	800bfda <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bef8:	2200      	movs	r2, #0
 800befa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800befe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf06:	e853 3f00 	ldrex	r3, [r3]
 800bf0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf12:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	461a      	mov	r2, r3
 800bf1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf24:	e841 2300 	strex	r3, r2, [r1]
 800bf28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1e6      	bne.n	800befe <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3308      	adds	r3, #8
 800bf36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3a:	e853 3f00 	ldrex	r3, [r3]
 800bf3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf42:	f023 0301 	bic.w	r3, r3, #1
 800bf46:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3308      	adds	r3, #8
 800bf4e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bf50:	647a      	str	r2, [r7, #68]	@ 0x44
 800bf52:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf58:	e841 2300 	strex	r3, r2, [r1]
 800bf5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1e5      	bne.n	800bf30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3308      	adds	r3, #8
 800bf6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6e:	e853 3f00 	ldrex	r3, [r3]
 800bf72:	623b      	str	r3, [r7, #32]
   return(result);
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf7a:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3308      	adds	r3, #8
 800bf82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf84:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf8c:	e841 2300 	strex	r3, r2, [r1]
 800bf90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1e5      	bne.n	800bf64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bf98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf9a:	2220      	movs	r2, #32
 800bf9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d118      	bne.n	800bfda <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	e853 3f00 	ldrex	r3, [r3]
 800bfb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f023 0310 	bic.w	r3, r3, #16
 800bfbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfc6:	61fb      	str	r3, [r7, #28]
 800bfc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfca:	69b9      	ldr	r1, [r7, #24]
 800bfcc:	69fa      	ldr	r2, [r7, #28]
 800bfce:	e841 2300 	strex	r3, r2, [r1]
 800bfd2:	617b      	str	r3, [r7, #20]
   return(result);
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1e6      	bne.n	800bfa8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfdc:	2200      	movs	r2, #0
 800bfde:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d107      	bne.n	800bff8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bfee:	4619      	mov	r1, r3
 800bff0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bff2:	f7f5 fef1 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bff6:	e002      	b.n	800bffe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bff8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bffa:	f7ff f94d 	bl	800b298 <HAL_UART_RxCpltCallback>
}
 800bffe:	bf00      	nop
 800c000:	3770      	adds	r7, #112	@ 0x70
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c012:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2201      	movs	r2, #1
 800c018:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d109      	bne.n	800c036 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c028:	085b      	lsrs	r3, r3, #1
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	4619      	mov	r1, r3
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f7f5 fed2 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c034:	e002      	b.n	800c03c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff f938 	bl	800b2ac <HAL_UART_RxHalfCpltCallback>
}
 800c03c:	bf00      	nop
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c050:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c058:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c060:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c06c:	2b80      	cmp	r3, #128	@ 0x80
 800c06e:	d109      	bne.n	800c084 <UART_DMAError+0x40>
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	2b21      	cmp	r3, #33	@ 0x21
 800c074:	d106      	bne.n	800c084 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	2200      	movs	r2, #0
 800c07a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c07e:	6978      	ldr	r0, [r7, #20]
 800c080:	f7ff fe84 	bl	800bd8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c08e:	2b40      	cmp	r3, #64	@ 0x40
 800c090:	d109      	bne.n	800c0a6 <UART_DMAError+0x62>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b22      	cmp	r3, #34	@ 0x22
 800c096:	d106      	bne.n	800c0a6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c0a0:	6978      	ldr	r0, [r7, #20]
 800c0a2:	f7ff feb4 	bl	800be0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ac:	f043 0210 	orr.w	r2, r3, #16
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0b6:	6978      	ldr	r0, [r7, #20]
 800c0b8:	f7ff f902 	bl	800b2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0bc:	bf00      	nop
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f7ff f8f0 	bl	800b2c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0e0:	bf00      	nop
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	e853 3f00 	ldrex	r3, [r3]
 800c0fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c104:	61fb      	str	r3, [r7, #28]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	461a      	mov	r2, r3
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	61bb      	str	r3, [r7, #24]
 800c110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c112:	6979      	ldr	r1, [r7, #20]
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	e841 2300 	strex	r3, r2, [r1]
 800c11a:	613b      	str	r3, [r7, #16]
   return(result);
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1e6      	bne.n	800c0f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2220      	movs	r2, #32
 800c126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7ff f8a7 	bl	800b284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c136:	bf00      	nop
 800c138:	3720      	adds	r7, #32
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c13e:	b480      	push	{r7}
 800c140:	b083      	sub	sp, #12
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c152:	b480      	push	{r7}
 800c154:	b083      	sub	sp, #12
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c15a:	bf00      	nop
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c16e:	bf00      	nop
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c17a:	b480      	push	{r7}
 800c17c:	b085      	sub	sp, #20
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d101      	bne.n	800c190 <HAL_UARTEx_DisableFifoMode+0x16>
 800c18c:	2302      	movs	r3, #2
 800c18e:	e027      	b.n	800c1e0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2224      	movs	r2, #36	@ 0x24
 800c19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f022 0201 	bic.w	r2, r2, #1
 800c1b6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c1be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d101      	bne.n	800c204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c200:	2302      	movs	r3, #2
 800c202:	e02d      	b.n	800c260 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2224      	movs	r2, #36	@ 0x24
 800c210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f022 0201 	bic.w	r2, r2, #1
 800c22a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	430a      	orrs	r2, r1
 800c23e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f8a3 	bl	800c38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2220      	movs	r2, #32
 800c252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d101      	bne.n	800c280 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c27c:	2302      	movs	r3, #2
 800c27e:	e02d      	b.n	800c2dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2224      	movs	r2, #36	@ 0x24
 800c28c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 0201 	bic.w	r2, r2, #1
 800c2a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f865 	bl	800c38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b08c      	sub	sp, #48	@ 0x30
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2f8:	2b20      	cmp	r3, #32
 800c2fa:	d142      	bne.n	800c382 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d002      	beq.n	800c308 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c302:	88fb      	ldrh	r3, [r7, #6]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d101      	bne.n	800c30c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e03b      	b.n	800c384 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2201      	movs	r2, #1
 800c310:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c318:	88fb      	ldrh	r3, [r7, #6]
 800c31a:	461a      	mov	r2, r3
 800c31c:	68b9      	ldr	r1, [r7, #8]
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f7ff fc8e 	bl	800bc40 <UART_Start_Receive_DMA>
 800c324:	4603      	mov	r3, r0
 800c326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c32a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d124      	bne.n	800c37c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c336:	2b01      	cmp	r3, #1
 800c338:	d11d      	bne.n	800c376 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2210      	movs	r2, #16
 800c340:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	617b      	str	r3, [r7, #20]
   return(result);
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f043 0310 	orr.w	r3, r3, #16
 800c356:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c360:	627b      	str	r3, [r7, #36]	@ 0x24
 800c362:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	6a39      	ldr	r1, [r7, #32]
 800c366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e6      	bne.n	800c342 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c374:	e002      	b.n	800c37c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c37c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c380:	e000      	b.n	800c384 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c382:	2302      	movs	r3, #2
  }
}
 800c384:	4618      	mov	r0, r3
 800c386:	3730      	adds	r7, #48	@ 0x30
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d108      	bne.n	800c3ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3ac:	e031      	b.n	800c412 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3ae:	2308      	movs	r3, #8
 800c3b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3b2:	2308      	movs	r3, #8
 800c3b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	0e5b      	lsrs	r3, r3, #25
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	f003 0307 	and.w	r3, r3, #7
 800c3c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	0f5b      	lsrs	r3, r3, #29
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	f003 0307 	and.w	r3, r3, #7
 800c3d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
 800c3d8:	7b3a      	ldrb	r2, [r7, #12]
 800c3da:	4911      	ldr	r1, [pc, #68]	@ (800c420 <UARTEx_SetNbDataToProcess+0x94>)
 800c3dc:	5c8a      	ldrb	r2, [r1, r2]
 800c3de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c3e2:	7b3a      	ldrb	r2, [r7, #12]
 800c3e4:	490f      	ldr	r1, [pc, #60]	@ (800c424 <UARTEx_SetNbDataToProcess+0x98>)
 800c3e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
 800c3f6:	7b7a      	ldrb	r2, [r7, #13]
 800c3f8:	4909      	ldr	r1, [pc, #36]	@ (800c420 <UARTEx_SetNbDataToProcess+0x94>)
 800c3fa:	5c8a      	ldrb	r2, [r1, r2]
 800c3fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c400:	7b7a      	ldrb	r2, [r7, #13]
 800c402:	4908      	ldr	r1, [pc, #32]	@ (800c424 <UARTEx_SetNbDataToProcess+0x98>)
 800c404:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c406:	fb93 f3f2 	sdiv	r3, r3, r2
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c412:	bf00      	nop
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	0800c4f4 	.word	0x0800c4f4
 800c424:	0800c4fc 	.word	0x0800c4fc

0800c428 <memset>:
 800c428:	4402      	add	r2, r0
 800c42a:	4603      	mov	r3, r0
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d100      	bne.n	800c432 <memset+0xa>
 800c430:	4770      	bx	lr
 800c432:	f803 1b01 	strb.w	r1, [r3], #1
 800c436:	e7f9      	b.n	800c42c <memset+0x4>

0800c438 <__libc_init_array>:
 800c438:	b570      	push	{r4, r5, r6, lr}
 800c43a:	4d0d      	ldr	r5, [pc, #52]	@ (800c470 <__libc_init_array+0x38>)
 800c43c:	4c0d      	ldr	r4, [pc, #52]	@ (800c474 <__libc_init_array+0x3c>)
 800c43e:	1b64      	subs	r4, r4, r5
 800c440:	10a4      	asrs	r4, r4, #2
 800c442:	2600      	movs	r6, #0
 800c444:	42a6      	cmp	r6, r4
 800c446:	d109      	bne.n	800c45c <__libc_init_array+0x24>
 800c448:	4d0b      	ldr	r5, [pc, #44]	@ (800c478 <__libc_init_array+0x40>)
 800c44a:	4c0c      	ldr	r4, [pc, #48]	@ (800c47c <__libc_init_array+0x44>)
 800c44c:	f000 f826 	bl	800c49c <_init>
 800c450:	1b64      	subs	r4, r4, r5
 800c452:	10a4      	asrs	r4, r4, #2
 800c454:	2600      	movs	r6, #0
 800c456:	42a6      	cmp	r6, r4
 800c458:	d105      	bne.n	800c466 <__libc_init_array+0x2e>
 800c45a:	bd70      	pop	{r4, r5, r6, pc}
 800c45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c460:	4798      	blx	r3
 800c462:	3601      	adds	r6, #1
 800c464:	e7ee      	b.n	800c444 <__libc_init_array+0xc>
 800c466:	f855 3b04 	ldr.w	r3, [r5], #4
 800c46a:	4798      	blx	r3
 800c46c:	3601      	adds	r6, #1
 800c46e:	e7f2      	b.n	800c456 <__libc_init_array+0x1e>
 800c470:	0800c50c 	.word	0x0800c50c
 800c474:	0800c50c 	.word	0x0800c50c
 800c478:	0800c50c 	.word	0x0800c50c
 800c47c:	0800c510 	.word	0x0800c510

0800c480 <memcpy>:
 800c480:	440a      	add	r2, r1
 800c482:	4291      	cmp	r1, r2
 800c484:	f100 33ff 	add.w	r3, r0, #4294967295
 800c488:	d100      	bne.n	800c48c <memcpy+0xc>
 800c48a:	4770      	bx	lr
 800c48c:	b510      	push	{r4, lr}
 800c48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c492:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c496:	4291      	cmp	r1, r2
 800c498:	d1f9      	bne.n	800c48e <memcpy+0xe>
 800c49a:	bd10      	pop	{r4, pc}

0800c49c <_init>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	bf00      	nop
 800c4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	469e      	mov	lr, r3
 800c4a6:	4770      	bx	lr

0800c4a8 <_fini>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr
