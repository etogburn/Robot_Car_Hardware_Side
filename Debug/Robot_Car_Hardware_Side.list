
Robot_Car_Hardware_Side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be54  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800c02c  0800c02c  0000d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c08c  0800c08c  0000e34c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c08c  0800c08c  0000d08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c094  0800c094  0000e34c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c094  0800c094  0000d094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c098  0800c098  0000d098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  0800c09c  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  2000034c  0800c3e8  0000e34c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  0800c3e8  0000e978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e34c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227b6  00000000  00000000  0000e37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003df8  00000000  00000000  00030b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00034930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001579  00000000  00000000  000364d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3c7  00000000  00000000  00037a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021156  00000000  00000000  00062e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dd10  00000000  00000000  00083f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a1c7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007850  00000000  00000000  001a1cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a9514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000034c 	.word	0x2000034c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c014 	.word	0x0800c014

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000350 	.word	0x20000350
 8000214:	0800c014 	.word	0x0800c014

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b9b5 	b.w	80005a4 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f84d 	bl	80002e8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f840 	bl	80002e8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f82f 	bl	80002e8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f821 	bl	80002e8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_uldivmod>:
 80002b8:	b953      	cbnz	r3, 80002d0 <__aeabi_uldivmod+0x18>
 80002ba:	b94a      	cbnz	r2, 80002d0 <__aeabi_uldivmod+0x18>
 80002bc:	2900      	cmp	r1, #0
 80002be:	bf08      	it	eq
 80002c0:	2800      	cmpeq	r0, #0
 80002c2:	bf1c      	itt	ne
 80002c4:	f04f 31ff 	movne.w	r1, #4294967295
 80002c8:	f04f 30ff 	movne.w	r0, #4294967295
 80002cc:	f000 b96a 	b.w	80005a4 <__aeabi_idiv0>
 80002d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d8:	f000 f806 	bl	80002e8 <__udivmoddi4>
 80002dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e4:	b004      	add	sp, #16
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <CAN_Init>:


#include "CAN_Driver.h"

// Initialize the CAN peripheral
void CAN_Init(FDCAN_HandleTypeDef *hcan) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nCAN_STBY_GPIO_Port, nCAN_STBY_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b6:	4811      	ldr	r0, [pc, #68]	@ (80005fc <CAN_Init+0x54>)
 80005b8:	f006 f8e6 	bl	8006788 <HAL_GPIO_WritePin>

    FDCAN_FilterTypeDef filterConfig;


    filterConfig.IdType = FDCAN_EXTENDED_ID;
 80005bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005c0:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterIndex = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterType = FDCAN_FILTER_MASK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
	filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80005ca:	2301      	movs	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
	filterConfig.FilterID1 = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterID2 = 0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
//    filterConfig.FilterMaskIdHigh = 0x0000;              // Mask ID
//    filterConfig.FilterMaskIdLow = 0x0000;               // Mask ID
//    filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; // Assign FIFO0
//    filterConfig.FilterActivation = ENABLE;              // Enable filter

    if (HAL_FDCAN_ConfigFilter(hcan, &filterConfig) != HAL_OK) {
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	4619      	mov	r1, r3
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f005 fa0f 	bl	8005a00 <HAL_FDCAN_ConfigFilter>
        // Handle error
    }

    // Start the CAN peripheral
    if (HAL_FDCAN_Start(hcan) != HAL_OK) {
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f005 fa66 	bl	8005ab4 <HAL_FDCAN_Start>
        // Handle error
    }

    // Enable interrupt for receiving messages
    if (HAL_FDCAN_ActivateNotification(hcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80005e8:	2200      	movs	r2, #0
 80005ea:	2101      	movs	r1, #1
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f005 fbd5 	bl	8005d9c <HAL_FDCAN_ActivateNotification>
        // Handle error
    }

}
 80005f2:	bf00      	nop
 80005f4:	3720      	adds	r7, #32
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	48001800 	.word	0x48001800

08000600 <CAN_SendMessage>:
        // Handle error
    }
}

// Send a CAN message
HAL_StatusTypeDef CAN_SendMessage(FDCAN_HandleTypeDef *hcan, CAN_Message *msg) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b08c      	sub	sp, #48	@ 0x30
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef txHeader;

	txHeader.Identifier = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	txHeader.IdType = FDCAN_EXTENDED_ID;
 800060e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000612:	613b      	str	r3, [r7, #16]
	txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
	txHeader.DataLength = msg->length; //FDCAN_DLC_BYTES_8;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	7b1b      	ldrb	r3, [r3, #12]
 800061c:	61bb      	str	r3, [r7, #24]
	txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
	txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
	txHeader.FDFormat = FDCAN_FD_CAN;
 8000626:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.MessageMarker = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
//    txHeader.IDE = (msg->format == 0) ? CAN_ID_STD : CAN_ID_EXT;
//    txHeader.RTR = (msg->type == 0) ? CAN_RTR_DATA : CAN_RTR_REMOTE;
//    txHeader.DLC = msg->length;

    // Transmit the message
    return HAL_FDCAN_AddMessageToTxFifoQ(hcan, &txHeader, msg->data);
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	1d1a      	adds	r2, r3, #4
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f005 fa60 	bl	8005b04 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000644:	4603      	mov	r3, r0
}
 8000646:	4618      	mov	r0, r3
 8000648:	3730      	adds	r7, #48	@ 0x30
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <CAN_SendWakeMessage>:
    msg->length = rxHeader.DataLength;

    return HAL_OK;
}

void CAN_SendWakeMessage(FDCAN_HandleTypeDef *hcan) {
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b089      	sub	sp, #36	@ 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	uint32_t currentTime = HAL_GetTick();
 8000658:	f003 f892 	bl	8003780 <HAL_GetTick>
 800065c:	61f8      	str	r0, [r7, #28]
	static uint32_t lastTime = 0;



	if(currentTime - lastTime > 5) {
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <CAN_SendWakeMessage+0x40>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	69fa      	ldr	r2, [r7, #28]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	2b05      	cmp	r3, #5
 8000668:	d90e      	bls.n	8000688 <CAN_SendWakeMessage+0x38>

		CAN_Message message = {
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <CAN_SendWakeMessage+0x44>)
 800066c:	f107 040c 	add.w	r4, r7, #12
 8000670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				.length = 8,
				.format = 1,
				.type = 0
		};

		CAN_SendMessage(hcan, &message);
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4619      	mov	r1, r3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ffbf 	bl	8000600 <CAN_SendMessage>

		lastTime = currentTime;
 8000682:	4a03      	ldr	r2, [pc, #12]	@ (8000690 <CAN_SendWakeMessage+0x40>)
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	6013      	str	r3, [r2, #0]
	}
}
 8000688:	bf00      	nop
 800068a:	3724      	adds	r7, #36	@ 0x24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd90      	pop	{r4, r7, pc}
 8000690:	20000368 	.word	0x20000368
 8000694:	0800c02c 	.word	0x0800c02c

08000698 <IMU_WriteRegister>:

#include "IMU.h"
#include <stdio.h> // For debugging with printf

// Internal helper function: Write a register
static HAL_StatusTypeDef IMU_WriteRegister(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t value) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
 80006a4:	4613      	mov	r3, r2
 80006a6:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = { reg, value };
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	733b      	strb	r3, [r7, #12]
 80006ac:	78bb      	ldrb	r3, [r7, #2]
 80006ae:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6858      	ldr	r0, [r3, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	891b      	ldrh	r3, [r3, #8]
 80006b8:	2200      	movs	r2, #0
 80006ba:	4619      	mov	r1, r3
 80006bc:	f006 f864 	bl	8006788 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(imu->hspi, data, 2, HAL_MAX_DELAY);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	f107 010c 	add.w	r1, r7, #12
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	2202      	movs	r2, #2
 80006ce:	f007 f962 	bl	8007996 <HAL_SPI_Transmit>
 80006d2:	4603      	mov	r3, r0
 80006d4:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6858      	ldr	r0, [r3, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	891b      	ldrh	r3, [r3, #8]
 80006de:	2201      	movs	r2, #1
 80006e0:	4619      	mov	r1, r3
 80006e2:	f006 f851 	bl	8006788 <HAL_GPIO_WritePin>

    return status;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <IMU_BurstRead>:

// Internal helper function: Burst read
static HAL_StatusTypeDef IMU_BurstRead(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t *buffer, uint8_t length) {
 80006f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f4:	b08f      	sub	sp, #60	@ 0x3c
 80006f6:	af02      	add	r7, sp, #8
 80006f8:	6178      	str	r0, [r7, #20]
 80006fa:	60fa      	str	r2, [r7, #12]
 80006fc:	461a      	mov	r2, r3
 80006fe:	460b      	mov	r3, r1
 8000700:	74fb      	strb	r3, [r7, #19]
 8000702:	4613      	mov	r3, r2
 8000704:	74bb      	strb	r3, [r7, #18]
 8000706:	466b      	mov	r3, sp
 8000708:	461e      	mov	r6, r3

    uint8_t tx_data[length+1];
 800070a:	7cbb      	ldrb	r3, [r7, #18]
 800070c:	1c59      	adds	r1, r3, #1
 800070e:	1e4b      	subs	r3, r1, #1
 8000710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000712:	460a      	mov	r2, r1
 8000714:	2300      	movs	r3, #0
 8000716:	603a      	str	r2, [r7, #0]
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	f04f 0200 	mov.w	r2, #0
 800071e:	f04f 0300 	mov.w	r3, #0
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	00c3      	lsls	r3, r0, #3
 8000726:	6838      	ldr	r0, [r7, #0]
 8000728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	00c2      	lsls	r2, r0, #3
 8000730:	460a      	mov	r2, r1
 8000732:	2300      	movs	r3, #0
 8000734:	4692      	mov	sl, r2
 8000736:	469b      	mov	fp, r3
 8000738:	f04f 0200 	mov.w	r2, #0
 800073c:	f04f 0300 	mov.w	r3, #0
 8000740:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000744:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800074c:	460b      	mov	r3, r1
 800074e:	3307      	adds	r3, #7
 8000750:	08db      	lsrs	r3, r3, #3
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	ebad 0d03 	sub.w	sp, sp, r3
 8000758:	ab02      	add	r3, sp, #8
 800075a:	3300      	adds	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_data[length+1];
 800075e:	7cbb      	ldrb	r3, [r7, #18]
 8000760:	1c59      	adds	r1, r3, #1
 8000762:	1e4b      	subs	r3, r1, #1
 8000764:	623b      	str	r3, [r7, #32]
 8000766:	460a      	mov	r2, r1
 8000768:	2300      	movs	r3, #0
 800076a:	4690      	mov	r8, r2
 800076c:	4699      	mov	r9, r3
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800077a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800077e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000782:	460a      	mov	r2, r1
 8000784:	2300      	movs	r3, #0
 8000786:	4614      	mov	r4, r2
 8000788:	461d      	mov	r5, r3
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	00eb      	lsls	r3, r5, #3
 8000794:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000798:	00e2      	lsls	r2, r4, #3
 800079a:	460b      	mov	r3, r1
 800079c:	3307      	adds	r3, #7
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	ebad 0d03 	sub.w	sp, sp, r3
 80007a6:	ab02      	add	r3, sp, #8
 80007a8:	3300      	adds	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
    tx_data[0] = reg | IMU_READ_BIT;
 80007ac:	7cfb      	ldrb	r3, [r7, #19]
 80007ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= length; i++) {
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80007be:	e00f      	b.n	80007e0 <IMU_BurstRead+0xf0>
    	tx_data[i] = (tx_data[i-1]+1);
 80007c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007c4:	3b01      	subs	r3, #1
 80007c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007c8:	5cd2      	ldrb	r2, [r2, r3]
 80007ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007ce:	3201      	adds	r2, #1
 80007d0:	b2d1      	uxtb	r1, r2
 80007d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007d4:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 1; i <= length; i++) {
 80007d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007da:	3301      	adds	r3, #1
 80007dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80007e0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80007e4:	7cbb      	ldrb	r3, [r7, #18]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d9ea      	bls.n	80007c0 <IMU_BurstRead+0xd0>
    }

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	6858      	ldr	r0, [r3, #4]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	891b      	ldrh	r3, [r3, #8]
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	f005 ffc7 	bl	8006788 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx_data, rx_data, length + 1, HAL_MAX_DELAY);
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	7cbb      	ldrb	r3, [r7, #18]
 8000800:	b29b      	uxth	r3, r3
 8000802:	3301      	adds	r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	f04f 32ff 	mov.w	r2, #4294967295
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	69fa      	ldr	r2, [r7, #28]
 800080e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000810:	f007 fa37 	bl	8007c82 <HAL_SPI_TransmitReceive>
 8000814:	4603      	mov	r3, r0
 8000816:	76fb      	strb	r3, [r7, #27]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	6858      	ldr	r0, [r3, #4]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	891b      	ldrh	r3, [r3, #8]
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	f005 ffb0 	bl	8006788 <HAL_GPIO_WritePin>

    for(uint8_t i = 1; i <= length; i++) {
 8000828:	2301      	movs	r3, #1
 800082a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800082e:	e00e      	b.n	800084e <IMU_BurstRead+0x15e>
    	*(buffer+(i-1)) = rx_data[i];
 8000830:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000834:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000838:	3b01      	subs	r3, #1
 800083a:	68f9      	ldr	r1, [r7, #12]
 800083c:	440b      	add	r3, r1
 800083e:	69f9      	ldr	r1, [r7, #28]
 8000840:	5c8a      	ldrb	r2, [r1, r2]
 8000842:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= length; i++) {
 8000844:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000848:	3301      	adds	r3, #1
 800084a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800084e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000852:	7cbb      	ldrb	r3, [r7, #18]
 8000854:	429a      	cmp	r2, r3
 8000856:	d9eb      	bls.n	8000830 <IMU_BurstRead+0x140>
	}


    return status;
 8000858:	7efb      	ldrb	r3, [r7, #27]
 800085a:	46b5      	mov	sp, r6
}
 800085c:	4618      	mov	r0, r3
 800085e:	3734      	adds	r7, #52	@ 0x34
 8000860:	46bd      	mov	sp, r7
 8000862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000866 <IMU_Init>:

// Initialize the IMU
HAL_StatusTypeDef IMU_Init(IMU_HandleTypeDef *imu) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73fb      	strb	r3, [r7, #15]
//
//    for(uint8_t i = 0; i < 14; i++) {
//    	data_buffer[i] = 0;
//    }

    if (IMU_WriteRegister(imu, 0x76, 0x00) != HAL_OK) { //userbank 0 select
 8000872:	2200      	movs	r2, #0
 8000874:	2176      	movs	r1, #118	@ 0x76
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ff0e 	bl	8000698 <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
	HAL_Delay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f002 ff8b 	bl	8003798 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_DEVICE_CONFIG_REG, IMU_DEVICE_CONFIG_RESET) != HAL_OK) {
 8000882:	2201      	movs	r2, #1
 8000884:	2111      	movs	r1, #17
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ff06 	bl	8000698 <IMU_WriteRegister>
    	//   return HAL_ERROR;
	}

    HAL_Delay(5);
 800088c:	2005      	movs	r0, #5
 800088e:	f002 ff83 	bl	8003798 <HAL_Delay>

    if (IMU_BurstRead(imu, IMU_WHO_AM_I_REG, &who_am_i, 1) != HAL_OK || who_am_i != IMU_WHO_AM_I_EXPECTED) {
 8000892:	f107 020f 	add.w	r2, r7, #15
 8000896:	2301      	movs	r3, #1
 8000898:	2175      	movs	r1, #117	@ 0x75
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff28 	bl	80006f0 <IMU_BurstRead>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f002 ff77 	bl	8003798 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_PWR_MGMT_0, IMU_ENABLE_ACCEL_GYRO) != HAL_OK) {
 80008aa:	220f      	movs	r2, #15
 80008ac:	214e      	movs	r1, #78	@ 0x4e
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fef2 	bl	8000698 <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f002 ff6f 	bl	8003798 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_GYRO_CONFIG_REG, IMU_GYRO_CONFIG_DATA) != HAL_OK) {
 80008ba:	2248      	movs	r2, #72	@ 0x48
 80008bc:	214f      	movs	r1, #79	@ 0x4f
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff feea 	bl	8000698 <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f002 ff67 	bl	8003798 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_ACCEL_CONFIG_REG, IMU_ACCEL_CONFIG_DATA) != HAL_OK) {
 80008ca:	2248      	movs	r2, #72	@ 0x48
 80008cc:	2150      	movs	r1, #80	@ 0x50
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fee2 	bl	8000698 <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f002 ff5f 	bl	8003798 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG0_REG, IMU_INT_CONFIG0_DATA) != HAL_OK) {
 80008da:	2220      	movs	r2, #32
 80008dc:	2163      	movs	r1, #99	@ 0x63
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff feda 	bl	8000698 <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
    HAL_Delay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f002 ff57 	bl	8003798 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_SOURCE_REG, IMU_INT_ENABLE_DATA_RDY) != HAL_OK) {
 80008ea:	2208      	movs	r2, #8
 80008ec:	2165      	movs	r1, #101	@ 0x65
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fed2 	bl	8000698 <IMU_WriteRegister>
       // return HAL_ERROR;
    }
    HAL_Delay(1);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f002 ff4f 	bl	8003798 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG_REG, IMU_INT_ACTIVE_HIGH) != HAL_OK) {
 80008fa:	2207      	movs	r2, #7
 80008fc:	2114      	movs	r1, #20
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff feca 	bl	8000698 <IMU_WriteRegister>
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f002 ff47 	bl	8003798 <HAL_Delay>


    return HAL_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <IMU_ReadAll>:

    return HAL_OK;
}

// Read all data (accelerometer, gyroscope, and temperature)
HAL_StatusTypeDef IMU_ReadAll(IMU_HandleTypeDef *imu) {
 8000914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000918:	b087      	sub	sp, #28
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	466b      	mov	r3, sp
 8000920:	461e      	mov	r6, r3
	uint8_t length = 14;
 8000922:	230e      	movs	r3, #14
 8000924:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[length];
 8000926:	7df9      	ldrb	r1, [r7, #23]
 8000928:	460b      	mov	r3, r1
 800092a:	3b01      	subs	r3, #1
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	b2cb      	uxtb	r3, r1
 8000930:	2200      	movs	r2, #0
 8000932:	4698      	mov	r8, r3
 8000934:	4691      	mov	r9, r2
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800094a:	b2cb      	uxtb	r3, r1
 800094c:	2200      	movs	r2, #0
 800094e:	461c      	mov	r4, r3
 8000950:	4615      	mov	r5, r2
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	00eb      	lsls	r3, r5, #3
 800095c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000960:	00e2      	lsls	r2, r4, #3
 8000962:	460b      	mov	r3, r1
 8000964:	3307      	adds	r3, #7
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	ebad 0d03 	sub.w	sp, sp, r3
 800096e:	466b      	mov	r3, sp
 8000970:	3300      	adds	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
    uint8_t intStatus = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	72fb      	strb	r3, [r7, #11]
    if (IMU_BurstRead(imu, IMU_TEMP_OUT_H, raw_data, length) != HAL_OK) {
 8000978:	7dfb      	ldrb	r3, [r7, #23]
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	211d      	movs	r1, #29
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff feb6 	bl	80006f0 <IMU_BurstRead>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <IMU_ReadAll+0x7a>
        return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e059      	b.n	8000a42 <IMU_ReadAll+0x12e>
    }

    imu->accel[0] = (raw_data[2] << 8) | raw_data[3];
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	b21a      	sxth	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	78db      	ldrb	r3, [r3, #3]
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b21a      	sxth	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	825a      	strh	r2, [r3, #18]
    imu->accel[1] = (raw_data[4] << 8) | raw_data[5];
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	795b      	ldrb	r3, [r3, #5]
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	829a      	strh	r2, [r3, #20]
    imu->accel[2] = (raw_data[6] << 8) | raw_data[7];
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	799b      	ldrb	r3, [r3, #6]
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	79db      	ldrb	r3, [r3, #7]
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b21a      	sxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	82da      	strh	r2, [r3, #22]

    imu->temperature = (raw_data[0] << 8) | raw_data[1];
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	4313      	orrs	r3, r2
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	83da      	strh	r2, [r3, #30]

    imu->gyro[0] = (raw_data[8] << 8) | raw_data[9];
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	7a1b      	ldrb	r3, [r3, #8]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	b21a      	sxth	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	7a5b      	ldrb	r3, [r3, #9]
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	831a      	strh	r2, [r3, #24]
    imu->gyro[1] = (raw_data[10] << 8) | raw_data[11];
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	7a9b      	ldrb	r3, [r3, #10]
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	7adb      	ldrb	r3, [r3, #11]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	835a      	strh	r2, [r3, #26]
    imu->gyro[2] = (raw_data[12] << 8) | raw_data[13];
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	7b1b      	ldrb	r3, [r3, #12]
 8000a16:	021b      	lsls	r3, r3, #8
 8000a18:	b21a      	sxth	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	7b5b      	ldrb	r3, [r3, #13]
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	839a      	strh	r2, [r3, #28]

    if (IMU_BurstRead(imu, IMU_INT_STATUS_REG, &intStatus, 1) != HAL_OK) {
 8000a28:	f107 020b 	add.w	r2, r7, #11
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	212d      	movs	r1, #45	@ 0x2d
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fe5d 	bl	80006f0 <IMU_BurstRead>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <IMU_ReadAll+0x12c>
		return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <IMU_ReadAll+0x12e>
	}

    return HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	46b5      	mov	sp, r6
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	371c      	adds	r7, #28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a4e <IMU_InterruptHandler>:

// Interrupt handler
void IMU_InterruptHandler(IMU_HandleTypeDef *imu, uint16_t GPIO_pin) {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	807b      	strh	r3, [r7, #2]
    if (GPIO_pin != imu->int_pin) return;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	8a1b      	ldrh	r3, [r3, #16]
 8000a5e:	887a      	ldrh	r2, [r7, #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d103      	bne.n	8000a6c <IMU_InterruptHandler+0x1e>

    if (IMU_ReadAll(imu) == HAL_OK) {
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff55 	bl	8000914 <IMU_ReadAll>
 8000a6a:	e000      	b.n	8000a6e <IMU_InterruptHandler+0x20>
    if (GPIO_pin != imu->int_pin) return;
 8000a6c:	bf00      	nop
        // Data successfully read
    } else {
        // Handle read error
    }
}
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <Motor_Init>:
 */

#include "motor_control.h"

// Initialize a motor
void Motor_Init(Motor *motor) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
    // Example: Initialize GPIOs or timers for the motor
	motor->pid.hallCount = 0;
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	motor->pid.lastHallCount = 0;
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	motor->pid.set_speed = 0;
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	f04f 0200 	mov.w	r2, #0
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	motor->pid.integral = 0;
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	f04f 0300 	mov.w	r3, #0
 8000abe:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	motor->pid.previousFilter = 0;
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 0200 	mov.w	r2, #0
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	motor->pid.lastUpdateTime = 0;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	motor->pid.lastPwmVal = 0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	motor->pid.lastHallTime = 0;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->pid.totalHallTime = 0;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	675a      	str	r2, [r3, #116]	@ 0x74
	motor->pid.pwmVal = 0;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	motor->pid.filterGain = DER_FILTER_GAIN;
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	motor->pid.maxIntegral = MAX_INTEGRAL_VAL;
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90


	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall1_Channel);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	f007 fefc 	bl	8008918 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall2_Channel);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	885b      	ldrh	r3, [r3, #2]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	f007 fef4 	bl	8008918 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall3_Channel);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	889b      	ldrh	r3, [r3, #4]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	f007 feec 	bl	8008918 <HAL_TIM_IC_Start_IT>

	Motor_Stop(motor);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f96e 	bl	8000e22 <Motor_Stop>
	ReadHallSensors(motor);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 fead 	bl	80018a6 <ReadHallSensors>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Motor_SetSpeed>:

// Set the speed of a motor
void Motor_SetSpeed(Motor *motor, int64_t target_speed) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	e9c7 2300 	strd	r2, r3, [r7]

	if (target_speed == motor->target_speed) return;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	bf08      	it	eq
 8000b6e:	4290      	cmpeq	r0, r2
 8000b70:	d044      	beq.n	8000bfc <Motor_SetSpeed+0xa8>

	if (target_speed > MAX_MOTOR_SPEED) target_speed = MAX_MOTOR_SPEED;
 8000b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b76:	f641 7141 	movw	r1, #8001	@ 0x1f41
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	f173 0300 	sbcs.w	r3, r3, #0
 8000b80:	db05      	blt.n	8000b8e <Motor_SetSpeed+0x3a>
 8000b82:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b86:	f04f 0300 	mov.w	r3, #0
 8000b8a:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed < -MAX_MOTOR_SPEED) target_speed = -MAX_MOTOR_SPEED;
 8000b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b92:	f512 5ffa 	cmn.w	r2, #8000	@ 0x1f40
 8000b96:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8000b9a:	da04      	bge.n	8000ba6 <Motor_SetSpeed+0x52>
 8000b9c:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <Motor_SetSpeed+0xb0>)
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed > -MIN_MOTOR_SPEED && target_speed < MIN_MOTOR_SPEED)
 8000ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000baa:	4917      	ldr	r1, [pc, #92]	@ (8000c08 <Motor_SetSpeed+0xb4>)
 8000bac:	428a      	cmp	r2, r1
 8000bae:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8000bb2:	db0c      	blt.n	8000bce <Motor_SetSpeed+0x7a>
 8000bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bb8:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8000bbc:	f173 0300 	sbcs.w	r3, r3, #0
 8000bc0:	da05      	bge.n	8000bce <Motor_SetSpeed+0x7a>
			target_speed = 0;
 8000bc2:	f04f 0200 	mov.w	r2, #0
 8000bc6:	f04f 0300 	mov.w	r3, #0
 8000bca:	e9c7 2300 	strd	r2, r3, [r7]

	motor->pid.integral = 0;
 8000bce:	68f9      	ldr	r1, [r7, #12]
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

	motor->target_speed = target_speed;
 8000bea:	68f9      	ldr	r1, [r7, #12]
 8000bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bf0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	Motor_Calculate(motor);
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f000 f935 	bl	8000e64 <Motor_Calculate>
 8000bfa:	e000      	b.n	8000bfe <Motor_SetSpeed+0xaa>
	if (target_speed == motor->target_speed) return;
 8000bfc:	bf00      	nop
}
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	ffffe0c0 	.word	0xffffe0c0
 8000c08:	fffffc19 	.word	0xfffffc19

08000c0c <Motor_SetPwm>:


void Motor_SetPwm(Motor *motor, int16_t duty_cycle) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]

	if(duty_cycle > PWM_MAX_VAL) duty_cycle = PWM_MAX_VAL;
 8000c18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c20:	dd03      	ble.n	8000c2a <Motor_SetPwm+0x1e>
 8000c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	e005      	b.n	8000c36 <Motor_SetPwm+0x2a>
	else if(duty_cycle < 0) duty_cycle = 0;
 8000c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	da01      	bge.n	8000c36 <Motor_SetPwm+0x2a>
 8000c32:	2300      	movs	r3, #0
 8000c34:	807b      	strh	r3, [r7, #2]

	motor->pid.pwmVal = duty_cycle;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	887a      	ldrh	r2, [r7, #2]
 8000c3a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_A_IDX], motor->pid.pwmVal);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d107      	bne.n	8000c56 <Motor_SetPwm+0x4a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c54:	e03b      	b.n	8000cce <Motor_SetPwm+0xc2>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d108      	bne.n	8000c70 <Motor_SetPwm+0x64>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c6e:	e02e      	b.n	8000cce <Motor_SetPwm+0xc2>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d108      	bne.n	8000c8a <Motor_SetPwm+0x7e>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	460b      	mov	r3, r1
 8000c86:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c88:	e021      	b.n	8000cce <Motor_SetPwm+0xc2>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000c8e:	2b0c      	cmp	r3, #12
 8000c90:	d108      	bne.n	8000ca4 <Motor_SetPwm+0x98>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca2:	e014      	b.n	8000cce <Motor_SetPwm+0xc2>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000ca8:	2b10      	cmp	r3, #16
 8000caa:	d108      	bne.n	8000cbe <Motor_SetPwm+0xb2>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cbc:	e007      	b.n	8000cce <Motor_SetPwm+0xc2>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_B_IDX], motor->pid.pwmVal);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d107      	bne.n	8000ce6 <Motor_SetPwm+0xda>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ce4:	e03b      	b.n	8000d5e <Motor_SetPwm+0x152>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d108      	bne.n	8000d00 <Motor_SetPwm+0xf4>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cfe:	e02e      	b.n	8000d5e <Motor_SetPwm+0x152>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d108      	bne.n	8000d1a <Motor_SetPwm+0x10e>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	460b      	mov	r3, r1
 8000d16:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d18:	e021      	b.n	8000d5e <Motor_SetPwm+0x152>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000d1e:	2b0c      	cmp	r3, #12
 8000d20:	d108      	bne.n	8000d34 <Motor_SetPwm+0x128>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	e014      	b.n	8000d5e <Motor_SetPwm+0x152>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000d38:	2b10      	cmp	r3, #16
 8000d3a:	d108      	bne.n	8000d4e <Motor_SetPwm+0x142>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d4c:	e007      	b.n	8000d5e <Motor_SetPwm+0x152>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_C_IDX], motor->pid.pwmVal);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d107      	bne.n	8000d76 <Motor_SetPwm+0x16a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d74:	e03b      	b.n	8000dee <Motor_SetPwm+0x1e2>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d108      	bne.n	8000d90 <Motor_SetPwm+0x184>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d8e:	e02e      	b.n	8000dee <Motor_SetPwm+0x1e2>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d108      	bne.n	8000daa <Motor_SetPwm+0x19e>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	460b      	mov	r3, r1
 8000da6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000da8:	e021      	b.n	8000dee <Motor_SetPwm+0x1e2>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000dae:	2b0c      	cmp	r3, #12
 8000db0:	d108      	bne.n	8000dc4 <Motor_SetPwm+0x1b8>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc2:	e014      	b.n	8000dee <Motor_SetPwm+0x1e2>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000dc8:	2b10      	cmp	r3, #16
 8000dca:	d108      	bne.n	8000dde <Motor_SetPwm+0x1d2>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ddc:	e007      	b.n	8000dee <Motor_SetPwm+0x1e2>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	460b      	mov	r3, r1
 8000dec:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if(motor->pid.lastPwmVal == 0 && motor->pid.lastPwmVal != motor->pid.pwmVal)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10a      	bne.n	8000e0e <Motor_SetPwm+0x202>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	@ 0x82
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d002      	beq.n	8000e0e <Motor_SetPwm+0x202>
		Motor_Update(motor);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fc31 	bl	8001670 <Motor_Update>
	motor->pid.lastPwmVal = motor->pid.pwmVal;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <Motor_Stop>:

// Stop a motor
void Motor_Stop(Motor *motor) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
    // Set speed to zero to stop the motor
    Motor_SetSpeed(motor, 0);
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fe8e 	bl	8000b54 <Motor_SetSpeed>
    SetPhase(motor, PHASE_A_IDX, false, false);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 fcdc 	bl	80017fc <SetPhase>
    SetPhase(motor, PHASE_B_IDX, false, false);
 8000e44:	2300      	movs	r3, #0
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 fcd6 	bl	80017fc <SetPhase>
    SetPhase(motor, PHASE_C_IDX, false, false);
 8000e50:	2300      	movs	r3, #0
 8000e52:	2200      	movs	r2, #0
 8000e54:	2102      	movs	r1, #2
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 fcd0 	bl	80017fc <SetPhase>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <Motor_Calculate>:

void Motor_Calculate(Motor *motor) {
 8000e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e68:	b0d7      	sub	sp, #348	@ 0x15c
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
	uint32_t currentTime = HAL_GetTick(); // Get the current time in milliseconds
 8000e70:	f002 fc86 	bl	8003780 <HAL_GetTick>
 8000e74:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

	// Update PID every certain time cycle
	if ((currentTime - motor->pid.lastUpdateTime) >= PID_CALC_TIMING) {
 8000e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e7c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8000e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000e84:	1a9b      	subs	r3, r3, r2
 8000e86:	2b13      	cmp	r3, #19
 8000e88:	f240 83e7 	bls.w	800165a <Motor_Calculate+0x7f6>

		if(motor->pid.set_speed > motor->target_speed) {
 8000e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e90:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8000e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e98:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	418b      	sbcs	r3, r1
 8000ea0:	da78      	bge.n	8000f94 <Motor_Calculate+0x130>
			if(motor->pid.set_speed > 0 && motor->pid.set_speed - motor->acceleration < 0 && motor->target_speed < 0) {
 8000ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ea6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8000eaa:	2a01      	cmp	r2, #1
 8000eac:	f173 0300 	sbcs.w	r3, r3, #0
 8000eb0:	db35      	blt.n	8000f1e <Motor_Calculate+0xba>
 8000eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000eb6:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8000eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ebe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8000ec8:	eb61 0303 	sbc.w	r3, r1, r3
 8000ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da22      	bge.n	8000f1e <Motor_Calculate+0xba>
 8000ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000edc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da1c      	bge.n	8000f1e <Motor_Calculate+0xba>
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 8000ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ee8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8000eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ef0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8000ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ef8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000efc:	eb10 0802 	adds.w	r8, r0, r2
 8000f00:	eb41 0903 	adc.w	r9, r1, r3
 8000f04:	45a0      	cmp	r8, r4
 8000f06:	eb79 0305 	sbcs.w	r3, r9, r5
 8000f0a:	db3a      	blt.n	8000f82 <Motor_Calculate+0x11e>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 8000f0c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 8000f1c:	e031      	b.n	8000f82 <Motor_Calculate+0x11e>
				}
			}
			else if(motor->pid.set_speed - motor->acceleration <= motor->target_speed) {
 8000f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f22:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8000f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f2a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000f2e:	ebb0 0a02 	subs.w	sl, r0, r2
 8000f32:	eb61 0b03 	sbc.w	fp, r1, r3
 8000f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f3a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000f3e:	4552      	cmp	r2, sl
 8000f40:	eb73 030b 	sbcs.w	r3, r3, fp
 8000f44:	db08      	blt.n	8000f58 <Motor_Calculate+0xf4>
				motor->pid.set_speed = motor->target_speed;
 8000f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f4a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8000f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f52:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8000f56:	e014      	b.n	8000f82 <Motor_Calculate+0x11e>
			}
			else {
				motor->pid.set_speed -= motor->acceleration;
 8000f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f5c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8000f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f64:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000f68:	1a84      	subs	r4, r0, r2
 8000f6a:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8000f6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000f72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f7a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8000f7e:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 8000f82:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 8000f92:	e08d      	b.n	80010b0 <Motor_Calculate+0x24c>
		} else if(motor->pid.set_speed < motor->target_speed) {
 8000f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f98:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8000f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fa0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000fa4:	4290      	cmp	r0, r2
 8000fa6:	eb71 0303 	sbcs.w	r3, r1, r3
 8000faa:	f280 8081 	bge.w	80010b0 <Motor_Calculate+0x24c>
			if(motor->pid.set_speed < 0 && motor->pid.set_speed + motor->acceleration > 0 && motor->target_speed > 0) {
 8000fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fb2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da3a      	bge.n	8001030 <Motor_Calculate+0x1cc>
 8000fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fbe:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8000fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fc6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000fca:	1884      	adds	r4, r0, r2
 8000fcc:	eb41 0503 	adc.w	r5, r1, r3
 8000fd0:	2c01      	cmp	r4, #1
 8000fd2:	f175 0300 	sbcs.w	r3, r5, #0
 8000fd6:	db2b      	blt.n	8001030 <Motor_Calculate+0x1cc>
 8000fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fdc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	f173 0300 	sbcs.w	r3, r3, #0
 8000fe6:	db23      	blt.n	8001030 <Motor_Calculate+0x1cc>
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 8000fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fec:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8000ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ff4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8000ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000ffc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001000:	1a86      	subs	r6, r0, r2
 8001002:	f8c7 60e0 	str.w	r6, [r7, #224]	@ 0xe0
 8001006:	eb61 0303 	sbc.w	r3, r1, r3
 800100a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800100e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8001012:	460b      	mov	r3, r1
 8001014:	429c      	cmp	r4, r3
 8001016:	4613      	mov	r3, r2
 8001018:	eb75 0303 	sbcs.w	r3, r5, r3
 800101c:	db40      	blt.n	80010a0 <Motor_Calculate+0x23c>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 800101e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 800102e:	e037      	b.n	80010a0 <Motor_Calculate+0x23c>
				}
			}
			else if(motor->pid.set_speed + motor->acceleration >= motor->target_speed) {
 8001030:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001034:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8001038:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800103c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001040:	1884      	adds	r4, r0, r2
 8001042:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8001046:	eb41 0303 	adc.w	r3, r1, r3
 800104a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800104e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001052:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001056:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800105a:	4621      	mov	r1, r4
 800105c:	4291      	cmp	r1, r2
 800105e:	4629      	mov	r1, r5
 8001060:	4199      	sbcs	r1, r3
 8001062:	db08      	blt.n	8001076 <Motor_Calculate+0x212>
				motor->pid.set_speed = motor->target_speed;
 8001064:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001068:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800106c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001070:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8001074:	e014      	b.n	80010a0 <Motor_Calculate+0x23c>
			}
			else {
				motor->pid.set_speed += motor->acceleration;
 8001076:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800107a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800107e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001082:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001086:	1884      	adds	r4, r0, r2
 8001088:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 800108c:	eb41 0303 	adc.w	r3, r1, r3
 8001090:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001094:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001098:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800109c:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 80010a0:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		}

		//set motor direction based the sign of the set_speed variable
		if(motor->pid.set_speed < 0) {
 80010b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010b4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	da05      	bge.n	80010c8 <Motor_Calculate+0x264>
			motor->direction = false;
 80010bc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80010c0:	2300      	movs	r3, #0
 80010c2:	f882 3045 	strb.w	r3, [r2, #69]	@ 0x45
 80010c6:	e004      	b.n	80010d2 <Motor_Calculate+0x26e>
		}
		else
		{
			motor->direction = true;
 80010c8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80010cc:	2301      	movs	r3, #1
 80010ce:	f882 3045 	strb.w	r3, [r2, #69]	@ 0x45
		}

		// Calculate current speed
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 80010d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010d6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80010da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010de:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80010e2:	1a84      	subs	r4, r0, r2
 80010e4:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 80010e8:	eb61 0303 	sbc.w	r3, r1, r3
 80010ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				* ( 1000 * 1000 * 60 / ((int64_t)motor->pid.totalHallTime))/SPEED_CALC_HALL_TO_REV; // speed in counts per minute
 80010f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010f6:	2200      	movs	r2, #0
 80010f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80010fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001100:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001104:	4822      	ldr	r0, [pc, #136]	@ (8001190 <Motor_Calculate+0x32c>)
 8001106:	f04f 0100 	mov.w	r1, #0
 800110a:	f7ff f885 	bl	8000218 <__aeabi_ldivmod>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001116:	4629      	mov	r1, r5
 8001118:	fb02 f001 	mul.w	r0, r2, r1
 800111c:	4621      	mov	r1, r4
 800111e:	fb01 f103 	mul.w	r1, r1, r3
 8001122:	4401      	add	r1, r0
 8001124:	4620      	mov	r0, r4
 8001126:	fba0 2302 	umull	r2, r3, r0, r2
 800112a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800112e:	4613      	mov	r3, r2
 8001130:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001134:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001138:	18cb      	adds	r3, r1, r3
 800113a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800113e:	f04f 0207 	mov.w	r2, #7
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800114a:	f7ff f865 	bl	8000218 <__aeabi_ldivmod>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 8001156:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800115a:	e9c3 0114 	strd	r0, r1, [r3, #80]	@ 0x50

		motor->pid.totalHallTime = 0;
 800115e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001162:	2300      	movs	r3, #0
 8001164:	6753      	str	r3, [r2, #116]	@ 0x74
		motor->pid.lastHallCount = motor->pid.hallCount;
 8001166:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800116a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800116e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001172:	e9c3 011a 	strd	r0, r1, [r3, #104]	@ 0x68

		//do no calculations if speed is set to 0
		if(motor->pid.set_speed == 0) {
 8001176:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800117a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800117e:	4313      	orrs	r3, r2
 8001180:	d108      	bne.n	8001194 <Motor_Calculate+0x330>
			Motor_SetPwm(motor,0);
 8001182:	2100      	movs	r1, #0
 8001184:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001188:	f7ff fd40 	bl	8000c0c <Motor_SetPwm>
			return;
 800118c:	e265      	b.n	800165a <Motor_Calculate+0x7f6>
 800118e:	bf00      	nop
 8001190:	03938700 	.word	0x03938700
		}

		// Calculate error
		int64_t error = (motor->pid.set_speed - motor->current_speed);
 8001194:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001198:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800119c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80011a4:	1a84      	subs	r4, r0, r2
 80011a6:	653c      	str	r4, [r7, #80]	@ 0x50
 80011a8:	eb61 0303 	sbc.w	r3, r1, r3
 80011ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80011ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80011b2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		// PID calculations
		motor->pid.integral += error * PID_CALC_TIMING/1000; // Integral term, scaled for 50ms
 80011b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011ba:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	@ 0x88
 80011be:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80011c2:	f04f 0232 	mov.w	r2, #50	@ 0x32
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	f7ff f825 	bl	8000218 <__aeabi_ldivmod>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	18a1      	adds	r1, r4, r2
 80011d4:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80011d8:	eb45 0303 	adc.w	r3, r5, r3
 80011dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80011e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011e4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80011e8:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//clamp integral term to avoid integral windup
		if(motor->pid.integral > motor->pid.maxIntegral) motor->pid.integral = motor->pid.maxIntegral;
 80011ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011f0:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80011f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011f8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80011fc:	4282      	cmp	r2, r0
 80011fe:	418b      	sbcs	r3, r1
 8001200:	da07      	bge.n	8001212 <Motor_Calculate+0x3ae>
 8001202:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001206:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 800120a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800120e:	e9c3 0122 	strd	r0, r1, [r3, #136]	@ 0x88
		if(motor->pid.integral < -1*motor->pid.maxIntegral) motor->pid.integral = -1*motor->pid.maxIntegral;
 8001212:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001216:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 800121a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800121e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001222:	2400      	movs	r4, #0
 8001224:	4255      	negs	r5, r2
 8001226:	f8c7 50b0 	str.w	r5, [r7, #176]	@ 0xb0
 800122a:	eb64 0303 	sbc.w	r3, r4, r3
 800122e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001232:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001236:	4623      	mov	r3, r4
 8001238:	4298      	cmp	r0, r3
 800123a:	462b      	mov	r3, r5
 800123c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001240:	da11      	bge.n	8001266 <Motor_Calculate+0x402>
 8001242:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001246:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800124a:	2100      	movs	r1, #0
 800124c:	4250      	negs	r0, r2
 800124e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8001252:	eb61 0303 	sbc.w	r3, r1, r3
 8001256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800125a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800125e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001262:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//use derivitave filter to calculate derivative term
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 8001266:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800126a:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800126e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001272:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001276:	fb02 f501 	mul.w	r5, r2, r1
 800127a:	fb00 f403 	mul.w	r4, r0, r3
 800127e:	442c      	add	r4, r5
 8001280:	fba0 2302 	umull	r2, r3, r0, r2
 8001284:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001288:	4613      	mov	r3, r2
 800128a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800128e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001292:	18e3      	adds	r3, r4, r3
 8001294:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001298:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80012a4:	f7fe ffb8 	bl	8000218 <__aeabi_ldivmod>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	461d      	mov	r5, r3
								+ (100-motor->pid.filterGain)*(error - motor->pid.previousError)/100;
 80012b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012b4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80012b8:	2100      	movs	r1, #0
 80012ba:	f1d2 0064 	rsbs	r0, r2, #100	@ 0x64
 80012be:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 80012c2:	eb61 0303 	sbc.w	r3, r1, r3
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80012ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012ce:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 80012d2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80012d6:	1a16      	subs	r6, r2, r0
 80012d8:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 80012dc:	eb63 0301 	sbc.w	r3, r3, r1
 80012e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012e4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80012e8:	464b      	mov	r3, r9
 80012ea:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80012ee:	4652      	mov	r2, sl
 80012f0:	fb02 f203 	mul.w	r2, r2, r3
 80012f4:	465b      	mov	r3, fp
 80012f6:	4641      	mov	r1, r8
 80012f8:	fb01 f303 	mul.w	r3, r1, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	4642      	mov	r2, r8
 8001300:	4651      	mov	r1, sl
 8001302:	fba2 1201 	umull	r1, r2, r2, r1
 8001306:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800130a:	460a      	mov	r2, r1
 800130c:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8001310:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001314:	4413      	add	r3, r2
 8001316:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800131a:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001326:	f7fe ff77 	bl	8000218 <__aeabi_ldivmod>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 800132e:	18a1      	adds	r1, r4, r2
 8001330:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001332:	eb45 0303 	adc.w	r3, r5, r3
 8001336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001338:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800133c:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

		int64_t derivative = (currentFilter) * 1000/PID_CALC_TIMING; // Derivative term
 8001340:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	1894      	adds	r4, r2, r2
 800134a:	643c      	str	r4, [r7, #64]	@ 0x40
 800134c:	415b      	adcs	r3, r3
 800134e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001350:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001354:	1814      	adds	r4, r2, r0
 8001356:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001358:	414b      	adcs	r3, r1
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 8001368:	4634      	mov	r4, r6
 800136a:	00e3      	lsls	r3, r4, #3
 800136c:	462c      	mov	r4, r5
 800136e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001372:	462c      	mov	r4, r5
 8001374:	00e2      	lsls	r2, r4, #3
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	4623      	mov	r3, r4
 800137c:	181b      	adds	r3, r3, r0
 800137e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001380:	462b      	mov	r3, r5
 8001382:	eb41 0303 	adc.w	r3, r1, r3
 8001386:	637b      	str	r3, [r7, #52]	@ 0x34
 8001388:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800138c:	460b      	mov	r3, r1
 800138e:	18db      	adds	r3, r3, r3
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001392:	4613      	mov	r3, r2
 8001394:	eb42 0303 	adc.w	r3, r2, r3
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800139a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800139e:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		motor->pid.previousFilter = currentFilter;
 80013a2:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80013a6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80013aa:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		motor->pid.previousError = error;
 80013ae:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80013b2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80013b6:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		// Compute the new PWM value using the PID formula
		int64_t output = motor->pid.Kp * error + motor->pid.Ki * motor->pid.integral + motor->pid.Kd * derivative;
 80013ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80013c2:	17da      	asrs	r2, r3, #31
 80013c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80013cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80013d0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013d4:	462a      	mov	r2, r5
 80013d6:	fb02 f203 	mul.w	r2, r2, r3
 80013da:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80013de:	4621      	mov	r1, r4
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	441a      	add	r2, r3
 80013e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80013ea:	4621      	mov	r1, r4
 80013ec:	fba3 1301 	umull	r1, r3, r3, r1
 80013f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80013f4:	460b      	mov	r3, r1
 80013f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80013fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013fe:	18d3      	adds	r3, r2, r3
 8001400:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001404:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800140c:	17da      	asrs	r2, r3, #31
 800140e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001412:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001416:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800141a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800141e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001422:	4629      	mov	r1, r5
 8001424:	fb02 f001 	mul.w	r0, r2, r1
 8001428:	4621      	mov	r1, r4
 800142a:	fb01 f103 	mul.w	r1, r1, r3
 800142e:	4401      	add	r1, r0
 8001430:	4620      	mov	r0, r4
 8001432:	fba0 2302 	umull	r2, r3, r0, r2
 8001436:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800143a:	4613      	mov	r3, r2
 800143c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001444:	18cb      	adds	r3, r1, r3
 8001446:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800144a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800144e:	4623      	mov	r3, r4
 8001450:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001454:	4602      	mov	r2, r0
 8001456:	189b      	adds	r3, r3, r2
 8001458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800145c:	460b      	mov	r3, r1
 800145e:	462a      	mov	r2, r5
 8001460:	eb42 0303 	adc.w	r3, r2, r3
 8001464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001468:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800146c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001470:	17da      	asrs	r2, r3, #31
 8001472:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001474:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001476:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800147a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800147e:	462a      	mov	r2, r5
 8001480:	fb02 f203 	mul.w	r2, r2, r3
 8001484:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001488:	4621      	mov	r1, r4
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	441a      	add	r2, r3
 8001490:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001494:	4621      	mov	r1, r4
 8001496:	fba3 1301 	umull	r1, r3, r3, r1
 800149a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800149e:	460b      	mov	r3, r1
 80014a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80014a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014a8:	18d3      	adds	r3, r2, r3
 80014aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014ae:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80014b2:	4623      	mov	r3, r4
 80014b4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80014b8:	4602      	mov	r2, r0
 80014ba:	189b      	adds	r3, r3, r2
 80014bc:	623b      	str	r3, [r7, #32]
 80014be:	460b      	mov	r3, r1
 80014c0:	462a      	mov	r2, r5
 80014c2:	eb42 0303 	adc.w	r3, r2, r3
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80014cc:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150

		// Clamp the output to the valid PWM range
		if(motor->pid.set_speed > 0) {
 80014d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014d4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80014d8:	2a01      	cmp	r2, #1
 80014da:	f173 0300 	sbcs.w	r3, r3, #0
 80014de:	db16      	blt.n	800150e <Motor_Calculate+0x6aa>
			if (output > OUTPUT_MAX_VAL) output = OUTPUT_MAX_VAL;
 80014e0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80014e4:	495f      	ldr	r1, [pc, #380]	@ (8001664 <Motor_Calculate+0x800>)
 80014e6:	428a      	cmp	r2, r1
 80014e8:	f173 0300 	sbcs.w	r3, r3, #0
 80014ec:	db04      	blt.n	80014f8 <Motor_Calculate+0x694>
 80014ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001668 <Motor_Calculate+0x804>)
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output < 0) output = 0;
 80014f8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da37      	bge.n	8001570 <Motor_Calculate+0x70c>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 800150c:	e030      	b.n	8001570 <Motor_Calculate+0x70c>
		}
		else if(motor->pid.set_speed < 0) {
 800150e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001512:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001516:	2b00      	cmp	r3, #0
 8001518:	da24      	bge.n	8001564 <Motor_Calculate+0x700>
			if (output < -OUTPUT_MAX_VAL) output = -OUTPUT_MAX_VAL;
 800151a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800151e:	4953      	ldr	r1, [pc, #332]	@ (800166c <Motor_Calculate+0x808>)
 8001520:	428a      	cmp	r2, r1
 8001522:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001526:	da04      	bge.n	8001532 <Motor_Calculate+0x6ce>
 8001528:	4a50      	ldr	r2, [pc, #320]	@ (800166c <Motor_Calculate+0x808>)
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output > 0) output = 0;
 8001532:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001536:	2a01      	cmp	r2, #1
 8001538:	f173 0300 	sbcs.w	r3, r3, #0
 800153c:	db05      	blt.n	800154a <Motor_Calculate+0x6e6>
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			output*=-1;
 800154a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800154e:	2100      	movs	r1, #0
 8001550:	4250      	negs	r0, r2
 8001552:	61b8      	str	r0, [r7, #24]
 8001554:	eb61 0303 	sbc.w	r3, r1, r3
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800155e:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 8001562:	e005      	b.n	8001570 <Motor_Calculate+0x70c>
		}
		else {
			output = 0;
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		}

		//shift the output itself to avoid the deadband range of the motor.
		//output is also divided by a factor to allow for more granular kp, ki, and kd values
		output = output/OUTPUT_TO_PWM_MULT + PWM_MIN_VAL;
 8001570:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8001574:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	f7fe fe4c 	bl	8000218 <__aeabi_ldivmod>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	f112 01af 	adds.w	r1, r2, #175	@ 0xaf
 8001588:	6139      	str	r1, [r7, #16]
 800158a:	f143 0300 	adc.w	r3, r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001594:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(output - motor->pid.pwmVal > PWM_MAX_CHANGE) output = motor->pid.pwmVal + PWM_MAX_CHANGE;
 8001598:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800159c:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	17da      	asrs	r2, r3, #31
 80015a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80015a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80015a8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80015ac:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80015b0:	4621      	mov	r1, r4
 80015b2:	1a51      	subs	r1, r2, r1
 80015b4:	66b9      	str	r1, [r7, #104]	@ 0x68
 80015b6:	4629      	mov	r1, r5
 80015b8:	eb63 0301 	sbc.w	r3, r3, r1
 80015bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80015be:	f240 3321 	movw	r3, #801	@ 0x321
 80015c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80015c6:	4602      	mov	r2, r0
 80015c8:	429a      	cmp	r2, r3
 80015ca:	460b      	mov	r3, r1
 80015cc:	f173 0300 	sbcs.w	r3, r3, #0
 80015d0:	db0c      	blt.n	80015ec <Motor_Calculate+0x788>
 80015d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015d6:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80015da:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80015de:	17da      	asrs	r2, r3, #31
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e8:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(motor->pid.pwmVal - output > PWM_MAX_CHANGE) output = motor->pid.pwmVal - PWM_MAX_CHANGE;
 80015ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015f0:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	17da      	asrs	r2, r3, #31
 80015f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80015fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80015fc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001600:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001604:	4621      	mov	r1, r4
 8001606:	1a89      	subs	r1, r1, r2
 8001608:	65b9      	str	r1, [r7, #88]	@ 0x58
 800160a:	4629      	mov	r1, r5
 800160c:	eb61 0303 	sbc.w	r3, r1, r3
 8001610:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001612:	f240 3321 	movw	r3, #801	@ 0x321
 8001616:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800161a:	4602      	mov	r2, r0
 800161c:	429a      	cmp	r2, r3
 800161e:	460b      	mov	r3, r1
 8001620:	f173 0300 	sbcs.w	r3, r3, #0
 8001624:	db0c      	blt.n	8001640 <Motor_Calculate+0x7dc>
 8001626:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800162a:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 800162e:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001632:	17da      	asrs	r2, r3, #31
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	e9d7 3400 	ldrd	r3, r4, [r7]
 800163c:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		// Apply the PWM value
		Motor_SetPwm(motor, (int16_t)output);
 8001640:	f9b7 3150 	ldrsh.w	r3, [r7, #336]	@ 0x150
 8001644:	4619      	mov	r1, r3
 8001646:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800164a:	f7ff fadf 	bl	8000c0c <Motor_SetPwm>

		// Update the last update time
		motor->pid.lastUpdateTime = currentTime;
 800164e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001652:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
}
 800165a:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800165e:	46bd      	mov	sp, r7
 8001660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001664:	000c96a9 	.word	0x000c96a9
 8001668:	000c96a8 	.word	0x000c96a8
 800166c:	fff36958 	.word	0xfff36958

08001670 <Motor_Update>:

// Update the motor state (optional, e.g., for monitoring or control logic)
void Motor_Update(Motor *motor) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

	CalculateHallTiming(motor);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f944 	bl	8001906 <CalculateHallTiming>

	ReadHallSensors(motor);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f911 	bl	80018a6 <ReadHallSensors>

	bool direction = motor->isDirInverted ? !motor->direction : motor->direction;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00e      	beq.n	80016ac <Motor_Update+0x3c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f083 0301 	eor.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e007      	b.n	80016bc <Motor_Update+0x4c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	73fb      	strb	r3, [r7, #15]

	if(motor->hallState == motor->commutationOrder[0]) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d106      	bne.n	80016dc <Motor_Update+0x6c>
		SetPhases(motor, PHASE_A_IDX, PHASE_C_IDX, direction);
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2202      	movs	r2, #2
 80016d2:	2100      	movs	r1, #0
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f84f 	bl	8001778 <SetPhases>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
	}
	else if(motor->hallState == motor->commutationOrder[5]) {
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
	}
}
 80016da:	e049      	b.n	8001770 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[1]) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d106      	bne.n	80016fa <Motor_Update+0x8a>
		SetPhases(motor, PHASE_A_IDX, PHASE_B_IDX, direction);
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2201      	movs	r2, #1
 80016f0:	2100      	movs	r1, #0
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f840 	bl	8001778 <SetPhases>
}
 80016f8:	e03a      	b.n	8001770 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[2]) {
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001706:	429a      	cmp	r2, r3
 8001708:	d106      	bne.n	8001718 <Motor_Update+0xa8>
		SetPhases(motor, PHASE_C_IDX, PHASE_B_IDX, direction);
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2201      	movs	r2, #1
 800170e:	2102      	movs	r1, #2
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f831 	bl	8001778 <SetPhases>
}
 8001716:	e02b      	b.n	8001770 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[3]) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001724:	429a      	cmp	r2, r3
 8001726:	d106      	bne.n	8001736 <Motor_Update+0xc6>
		SetPhases(motor, PHASE_C_IDX, PHASE_A_IDX, direction);
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2200      	movs	r2, #0
 800172c:	2102      	movs	r1, #2
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f822 	bl	8001778 <SetPhases>
}
 8001734:	e01c      	b.n	8001770 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[4]) {
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001742:	429a      	cmp	r2, r3
 8001744:	d106      	bne.n	8001754 <Motor_Update+0xe4>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2200      	movs	r2, #0
 800174a:	2101      	movs	r1, #1
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f813 	bl	8001778 <SetPhases>
}
 8001752:	e00d      	b.n	8001770 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[5]) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001760:	429a      	cmp	r2, r3
 8001762:	d105      	bne.n	8001770 <Motor_Update+0x100>
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2202      	movs	r2, #2
 8001768:	2101      	movs	r1, #1
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f804 	bl	8001778 <SetPhases>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <SetPhases>:

void SetPhases(Motor *motor, uint8_t highPhase, uint8_t lowPhase, bool direction) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	460b      	mov	r3, r1
 800178c:	70bb      	strb	r3, [r7, #2]
 800178e:	4613      	mov	r3, r2
 8001790:	707b      	strb	r3, [r7, #1]
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d82b      	bhi.n	80017f0 <SetPhases+0x78>
 8001798:	78bb      	ldrb	r3, [r7, #2]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d828      	bhi.n	80017f0 <SetPhases+0x78>
	if(highPhase == lowPhase) return;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	78bb      	ldrb	r3, [r7, #2]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d026      	beq.n	80017f4 <SetPhases+0x7c>

	uint8_t extraPhase = PHASE_A_IDX + PHASE_B_IDX + PHASE_C_IDX - highPhase - lowPhase;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	78bb      	ldrb	r3, [r7, #2]
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f1c3 0303 	rsb	r3, r3, #3
 80017b2:	73fb      	strb	r3, [r7, #15]

	SetPhase(motor, extraPhase, false, false);
 80017b4:	7bf9      	ldrb	r1, [r7, #15]
 80017b6:	2300      	movs	r3, #0
 80017b8:	2200      	movs	r2, #0
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f81e 	bl	80017fc <SetPhase>

	SetPhase(motor, highPhase, true, direction);
 80017c0:	787b      	ldrb	r3, [r7, #1]
 80017c2:	78f9      	ldrb	r1, [r7, #3]
 80017c4:	2201      	movs	r2, #1
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f818 	bl	80017fc <SetPhase>
	SetPhase(motor, lowPhase, true, !direction);
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	78b9      	ldrb	r1, [r7, #2]
 80017e6:	2201      	movs	r2, #1
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f807 	bl	80017fc <SetPhase>
 80017ee:	e002      	b.n	80017f6 <SetPhases+0x7e>
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <SetPhases+0x7e>
	if(highPhase == lowPhase) return;
 80017f4:	bf00      	nop

}
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <SetPhase>:

void SetPhase(Motor *motor, uint8_t phase,  bool OnorOff, bool HighOrLow) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	4608      	mov	r0, r1
 8001806:	4611      	mov	r1, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4603      	mov	r3, r0
 800180c:	70fb      	strb	r3, [r7, #3]
 800180e:	460b      	mov	r3, r1
 8001810:	70bb      	strb	r3, [r7, #2]
 8001812:	4613      	mov	r3, r2
 8001814:	707b      	strb	r3, [r7, #1]
	if(OnorOff) {
 8001816:	78bb      	ldrb	r3, [r7, #2]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d02c      	beq.n	8001876 <SetPhase+0x7a>
		if(HighOrLow) {
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d014      	beq.n	800184c <SetPhase+0x50>
			HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3218      	adds	r2, #24
 800182c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001830:	4619      	mov	r1, r3
 8001832:	f008 fccf 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(motor->Timer, motor->phaseChannel[phase]);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3218      	adds	r2, #24
 8001840:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001844:	4619      	mov	r1, r3
 8001846:	f006 fe57 	bl	80084f8 <HAL_TIM_PWM_Start>
		}
	} else {
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
	}
}
 800184a:	e028      	b.n	800189e <SetPhase+0xa2>
			HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3218      	adds	r2, #24
 8001856:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800185a:	4619      	mov	r1, r3
 800185c:	f006 ff5e 	bl	800871c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(motor->Timer, motor->phaseChannel[phase]);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3218      	adds	r2, #24
 800186a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800186e:	4619      	mov	r1, r3
 8001870:	f008 fbee 	bl	800a050 <HAL_TIMEx_PWMN_Start>
}
 8001874:	e013      	b.n	800189e <SetPhase+0xa2>
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3218      	adds	r2, #24
 8001880:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001884:	4619      	mov	r1, r3
 8001886:	f006 ff49 	bl	800871c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3218      	adds	r2, #24
 8001894:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001898:	4619      	mov	r1, r3
 800189a:	f008 fc9b 	bl	800a1d4 <HAL_TIMEx_PWMN_Stop>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <ReadHallSensors>:

void ReadHallSensors(Motor *motor) {
 80018a6:	b590      	push	{r4, r7, lr}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	8a9b      	ldrh	r3, [r3, #20]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4610      	mov	r0, r2
 80018ba:	f004 ff4d 	bl	8006758 <HAL_GPIO_ReadPin>
 80018be:	4603      	mov	r3, r0
 80018c0:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall2_Port, motor->Hall2_Pin)) << 1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8b9b      	ldrh	r3, [r3, #28]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f004 ff43 	bl	8006758 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	4323      	orrs	r3, r4
 80018da:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall3_Port, motor->Hall3_Pin) << 2);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f004 ff36 	bl	8006758 <HAL_GPIO_ReadPin>
 80018ec:	4603      	mov	r3, r0
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	4323      	orrs	r3, r4
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	b2da      	uxtb	r2, r3
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}

08001906 <CalculateHallTiming>:


void CalculateHallTiming(Motor *motor) {
 8001906:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	uint32_t currentMicroTime = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]

	if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	7f1b      	ldrb	r3, [r3, #28]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d109      	bne.n	8001932 <CalculateHallTiming+0x2c>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall1_Channel);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4610      	mov	r0, r2
 800192a:	f007 fd5b 	bl	80093e4 <HAL_TIM_ReadCapturedValue>
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	e01c      	b.n	800196c <CalculateHallTiming+0x66>
	} else if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	7f1b      	ldrb	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d109      	bne.n	8001950 <CalculateHallTiming+0x4a>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall2_Channel);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	885b      	ldrh	r3, [r3, #2]
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f007 fd4c 	bl	80093e4 <HAL_TIM_ReadCapturedValue>
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	e00d      	b.n	800196c <CalculateHallTiming+0x66>
	} else if (motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	7f1b      	ldrb	r3, [r3, #28]
 8001956:	2b04      	cmp	r3, #4
 8001958:	d108      	bne.n	800196c <CalculateHallTiming+0x66>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall3_Channel);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	889b      	ldrh	r3, [r3, #4]
 8001962:	4619      	mov	r1, r3
 8001964:	4610      	mov	r0, r2
 8001966:	f007 fd3d 	bl	80093e4 <HAL_TIM_ReadCapturedValue>
 800196a:	60f8      	str	r0, [r7, #12]
	}

	motor->pid.totalHallTime += currentMicroTime - motor->pid.lastHallTime;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	1acb      	subs	r3, r1, r3
 8001978:	441a      	add	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	675a      	str	r2, [r3, #116]	@ 0x74

	motor->pid.lastHallTime = currentMicroTime;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	671a      	str	r2, [r3, #112]	@ 0x70

	if(motor->direction) motor->pid.hallCount++;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00a      	beq.n	80019a4 <CalculateHallTiming+0x9e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001994:	f112 0801 	adds.w	r8, r2, #1
 8001998:	f143 0900 	adc.w	r9, r3, #0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	e9c3 8918 	strd	r8, r9, [r3, #96]	@ 0x60
	else motor->pid.hallCount--;
}
 80019a2:	e008      	b.n	80019b6 <CalculateHallTiming+0xb0>
	else motor->pid.hallCount--;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80019aa:	1e54      	subs	r4, r2, #1
 80019ac:	f143 35ff 	adc.w	r5, r3, #4294967295
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	e9c3 4518 	strd	r4, r5, [r3, #96]	@ 0x60
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080019c0 <CommandHandler_ProcessCommand>:
    // Initialize any peripherals or variables related to command handling
    // Example: GPIO, Timers, etc.
}

// Function to process a received command
void CommandHandler_ProcessCommand(SerialCommand_t *command, DriveSystem *drive) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    // Check for NULL pointer
    if (command == NULL) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05b      	beq.n	8001a88 <CommandHandler_ProcessCommand+0xc8>
        return;
    }
    int16_t value = (command->data[0] << 8) | command->data[1];
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	789b      	ldrb	r3, [r3, #2]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	78db      	ldrb	r3, [r3, #3]
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	81fb      	strh	r3, [r7, #14]

    if (command->invalid && command->newCommand) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7b1b      	ldrb	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <CommandHandler_ProcessCommand+0x3e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7adb      	ldrb	r3, [r3, #11]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <CommandHandler_ProcessCommand+0x3e>
    	SerialCommands_Send(COMMAND_INVALID, value);
 80019f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019f6:	4619      	mov	r1, r3
 80019f8:	20fe      	movs	r0, #254	@ 0xfe
 80019fa:	f001 f91f 	bl	8002c3c <SerialCommands_Send>
    }

    if (command->newCommand && !command->invalid) {
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7adb      	ldrb	r3, [r3, #11]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03c      	beq.n	8001a80 <CommandHandler_ProcessCommand+0xc0>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7b1b      	ldrb	r3, [r3, #12]
 8001a0a:	f083 0301 	eor.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d035      	beq.n	8001a80 <CommandHandler_ProcessCommand+0xc0>
    	// Handle the command based on the command ID
		switch (command->command) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	f240 1203 	movw	r2, #259	@ 0x103
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d024      	beq.n	8001a6a <CommandHandler_ProcessCommand+0xaa>
 8001a20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a24:	da25      	bge.n	8001a72 <CommandHandler_ProcessCommand+0xb2>
 8001a26:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a2a:	d017      	beq.n	8001a5c <CommandHandler_ProcessCommand+0x9c>
 8001a2c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a30:	dc1f      	bgt.n	8001a72 <CommandHandler_ProcessCommand+0xb2>
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d004      	beq.n	8001a40 <CommandHandler_ProcessCommand+0x80>
 8001a36:	f240 1201 	movw	r2, #257	@ 0x101
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <CommandHandler_ProcessCommand+0x8e>
 8001a3e:	e018      	b.n	8001a72 <CommandHandler_ProcessCommand+0xb2>

			case 0x0001: // Example: Motor 1 Speed
				{
					SerialCommands_Send(COMMAND_READY, value);
 8001a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a44:	4619      	mov	r1, r3
 8001a46:	2001      	movs	r0, #1
 8001a48:	f001 f8f8 	bl	8002c3c <SerialCommands_Send>
				}
				break;
 8001a4c:	e018      	b.n	8001a80 <CommandHandler_ProcessCommand+0xc0>
			case 0x0101: // Example: Motor 1 Speed
				{
					DriveSystem_SetLeftSpeed(drive, value);
 8001a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a52:	4619      	mov	r1, r3
 8001a54:	6838      	ldr	r0, [r7, #0]
 8001a56:	f000 f855 	bl	8001b04 <DriveSystem_SetLeftSpeed>
					//SerialCommands_Send(COMMAND_OK, command->value);
				}
				break;
 8001a5a:	e011      	b.n	8001a80 <CommandHandler_ProcessCommand+0xc0>

			case 0x0102: // Example: Motor 2 Speed
				{
					DriveSystem_SetRightSpeed(drive, value);
 8001a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a60:	4619      	mov	r1, r3
 8001a62:	6838      	ldr	r0, [r7, #0]
 8001a64:	f000 f863 	bl	8001b2e <DriveSystem_SetRightSpeed>
					//SerialCommands_Send(COMMAND_OK, command->value);
				}
				break;
 8001a68:	e00a      	b.n	8001a80 <CommandHandler_ProcessCommand+0xc0>

			case 0x0103: // Example: Enable Motor Blade
				{
					DriveSystem_Stop(drive);
 8001a6a:	6838      	ldr	r0, [r7, #0]
 8001a6c:	f000 f876 	bl	8001b5c <DriveSystem_Stop>
					//SerialCommands_Send(COMMAND_OK, command->value);
				}
				break;
 8001a70:	e006      	b.n	8001a80 <CommandHandler_ProcessCommand+0xc0>

			default: // Unknown command
				// Handle invalid or unrecognized commands
				SerialCommands_Send(COMMAND_NOACTION, value);
 8001a72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a76:	4619      	mov	r1, r3
 8001a78:	20fd      	movs	r0, #253	@ 0xfd
 8001a7a:	f001 f8df 	bl	8002c3c <SerialCommands_Send>
				break;
 8001a7e:	bf00      	nop
		}
    }

    command->newCommand = false;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	72da      	strb	r2, [r3, #11]
 8001a86:	e000      	b.n	8001a8a <CommandHandler_ProcessCommand+0xca>
        return;
 8001a88:	bf00      	nop

}
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <DriveSystem_Init>:
 */

#include "drive_system.h"

// Initialize the drive system with configurations for the left and right motors
void DriveSystem_Init(DriveSystem *driveSystem, Motor leftMotorConfig, Motor rightMotorConfig) {
 8001a90:	b082      	sub	sp, #8
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	f107 0110 	add.w	r1, r7, #16
 8001a9e:	e881 000c 	stmia.w	r1, {r2, r3}
    // Copy configurations into the drive system
    driveSystem->leftWheel = leftMotorConfig;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	22c0      	movs	r2, #192	@ 0xc0
 8001aac:	4619      	mov	r1, r3
 8001aae:	f00a faa3 	bl	800bff8 <memcpy>
    driveSystem->rightWheel = rightMotorConfig;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	33c0      	adds	r3, #192	@ 0xc0
 8001ab6:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001aba:	22c0      	movs	r2, #192	@ 0xc0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00a fa9b 	bl	800bff8 <memcpy>

    HAL_DAC_Start(driveSystem->currentLimitDAC, driveSystem->currentLimitDACChannel);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f003 f8b5 	bl	8004c40 <HAL_DAC_Start>

    DriveSystem_SetCurrentLimit(driveSystem, MAX_CURRENT_LIMIT);
 8001ad6:	210a      	movs	r1, #10
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f8a9 	bl	8001c30 <DriveSystem_SetCurrentLimit>

    // Initialize the left and right motors
    Motor_Init(&driveSystem->leftWheel);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe ffc7 	bl	8000a74 <Motor_Init>
    Motor_Init(&driveSystem->rightWheel);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	33c0      	adds	r3, #192	@ 0xc0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe ffc2 	bl	8000a74 <Motor_Init>

    DriveSystem_Enable(driveSystem);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f872 	bl	8001bda <DriveSystem_Enable>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b00:	b002      	add	sp, #8
 8001b02:	4770      	bx	lr

08001b04 <DriveSystem_SetLeftSpeed>:
void DriveSystem_SetSpeed(DriveSystem *driveSystem, int16_t leftSpeed, int16_t rightSpeed) {
    Motor_SetSpeed(&driveSystem->leftWheel, leftSpeed);
    Motor_SetSpeed(&driveSystem->rightWheel, rightSpeed);
}

void DriveSystem_SetLeftSpeed(DriveSystem *driveSystem, int16_t leftSpeed) {
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
	Motor_SetSpeed(&driveSystem->leftWheel, leftSpeed);
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b16:	17da      	asrs	r2, r3, #31
 8001b18:	461c      	mov	r4, r3
 8001b1a:	4615      	mov	r5, r2
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	462b      	mov	r3, r5
 8001b20:	4608      	mov	r0, r1
 8001b22:	f7ff f817 	bl	8000b54 <Motor_SetSpeed>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}

08001b2e <DriveSystem_SetRightSpeed>:

void DriveSystem_SetRightSpeed(DriveSystem *driveSystem, int16_t rightSpeed) {
 8001b2e:	b5b0      	push	{r4, r5, r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]
	Motor_SetSpeed(&driveSystem->rightWheel, rightSpeed);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8001b40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b44:	17da      	asrs	r2, r3, #31
 8001b46:	461c      	mov	r4, r3
 8001b48:	4615      	mov	r5, r2
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	4608      	mov	r0, r1
 8001b50:	f7ff f800 	bl	8000b54 <Motor_SetSpeed>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bdb0      	pop	{r4, r5, r7, pc}

08001b5c <DriveSystem_Stop>:

// Stop both motors in the drive system
void DriveSystem_Stop(DriveSystem *driveSystem) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    Motor_Stop(&driveSystem->leftWheel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f95b 	bl	8000e22 <Motor_Stop>
    Motor_Stop(&driveSystem->rightWheel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	33c0      	adds	r3, #192	@ 0xc0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f956 	bl	8000e22 <Motor_Stop>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <DriveSystem_Calculate>:

void DriveSystem_Calculate(DriveSystem *driveSystem) {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	Motor_Calculate(&driveSystem->leftWheel);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f96b 	bl	8000e64 <Motor_Calculate>
	Motor_Calculate(&driveSystem->rightWheel);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	33c0      	adds	r3, #192	@ 0xc0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f966 	bl	8000e64 <Motor_Calculate>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <DriveSystem_InterruptHandler>:

void DriveSystem_InterruptHandler(DriveSystem *driveSystem, TIM_HandleTypeDef *htim) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	if (htim == driveSystem->leftWheel.HallTimer) {
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d103      	bne.n	8001bbc <DriveSystem_InterruptHandler+0x1c>
		Motor_Update(&driveSystem->leftWheel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fd5a 	bl	8001670 <Motor_Update>
	}

	if (htim == driveSystem->rightWheel.HallTimer) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d104      	bne.n	8001bd2 <DriveSystem_InterruptHandler+0x32>
		Motor_Update(&driveSystem->rightWheel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	33c0      	adds	r3, #192	@ 0xc0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fd4f 	bl	8001670 <Motor_Update>
	}
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <DriveSystem_Enable>:

void DriveSystem_Enable (DriveSystem *driveSystem) {
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
	DriveSystem_SetEnablePin(driveSystem, true);
 8001be2:	2101      	movs	r1, #1
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f804 	bl	8001bf2 <DriveSystem_SetEnablePin>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <DriveSystem_SetEnablePin>:

void DriveSystem_Disable (DriveSystem *driveSystem) {
	DriveSystem_SetEnablePin(driveSystem, false);
}

void DriveSystem_SetEnablePin(DriveSystem *driveSystem, bool onOrOff) {
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
	bool setValue = true;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
	if(onOrOff) setValue = true;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <DriveSystem_SetEnablePin+0x1c>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e001      	b.n	8001c12 <DriveSystem_SetEnablePin+0x20>
	else setValue = false;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(driveSystem->Enable_Port, driveSystem->Enable_Pin, setValue);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f004 fdb1 	bl	8006788 <HAL_GPIO_WritePin>
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <DriveSystem_SetCurrentLimit>:

void DriveSystem_SetCurrentLimit(DriveSystem *driveSystem, uint16_t currentLimit) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
	if(currentLimit > MAX_CURRENT_LIMIT) {
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	2b0a      	cmp	r3, #10
 8001c40:	d901      	bls.n	8001c46 <DriveSystem_SetCurrentLimit+0x16>
		currentLimit = MAX_CURRENT_LIMIT;
 8001c42:	230a      	movs	r3, #10
 8001c44:	807b      	strh	r3, [r7, #2]
	}
	driveSystem->currentLimit = currentLimit;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	887a      	ldrh	r2, [r7, #2]
 8001c4a:	f8a3 218e 	strh.w	r2, [r3, #398]	@ 0x18e

	uint32_t voltage = currentLimit * SHUNT_RESISTOR * RESISTORS / RESISTOR2;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	f245 32fc 	movw	r2, #21500	@ 0x53fc
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	4a11      	ldr	r2, [pc, #68]	@ (8001ca0 <DriveSystem_SetCurrentLimit+0x70>)
 8001c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c5e:	10d2      	asrs	r2, r2, #3
 8001c60:	17db      	asrs	r3, r3, #31
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	60fb      	str	r3, [r7, #12]
	uint32_t dac_value = 4095 * voltage / 3300; // Convert voltage to digital value
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	031b      	lsls	r3, r3, #12
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <DriveSystem_SetCurrentLimit+0x74>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(driveSystem->currentLimitDAC, driveSystem->currentLimitDACChannel, DAC_ALIGN_12B_R, dac_value);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 0188 	ldr.w	r0, [r3, #392]	@ 0x188
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 8001c86:	4619      	mov	r1, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f003 f844 	bl	8004d18 <HAL_DAC_SetValue>
	HAL_Delay(25);
 8001c90:	2019      	movs	r0, #25
 8001c92:	f001 fd81 	bl	8003798 <HAL_Delay>
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	1b4e81b5 	.word	0x1b4e81b5
 8001ca4:	09ee009f 	.word	0x09ee009f

08001ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b0df      	sub	sp, #380	@ 0x17c
 8001cac:	af5e      	add	r7, sp, #376	@ 0x178
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cae:	f001 fd02 	bl	80036b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb2:	f000 f85b 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb6:	f000 fd67 	bl	8002788 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cba:	f000 fd3b 	bl	8002734 <MX_DMA_Init>
  MX_ADC3_Init();
 8001cbe:	f000 f919 	bl	8001ef4 <MX_ADC3_Init>
  MX_DAC2_Init();
 8001cc2:	f000 f98f 	bl	8001fe4 <MX_DAC2_Init>
  MX_USART2_UART_Init();
 8001cc6:	f000 fce9 	bl	800269c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001cca:	f000 fa0b 	bl	80020e4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001cce:	f000 f899 	bl	8001e04 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001cd2:	f000 fa45 	bl	8002160 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001cd6:	f000 fc19 	bl	800250c <MX_TIM8_Init>
  MX_TIM2_Init();
 8001cda:	f000 fb09 	bl	80022f0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001cde:	f000 fb8d 	bl	80023fc <MX_TIM5_Init>
  MX_FDCAN1_Init();
 8001ce2:	f000 f9b9 	bl	8002058 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  IMU_Init(&imu);
 8001ce6:	481a      	ldr	r0, [pc, #104]	@ (8001d50 <main+0xa8>)
 8001ce8:	f7fe fdbd 	bl	8000866 <IMU_Init>
  DriveSystem_Init(&drive, leftWheel, rightWheel);
 8001cec:	4c19      	ldr	r4, [pc, #100]	@ (8001d54 <main+0xac>)
 8001cee:	4a1a      	ldr	r2, [pc, #104]	@ (8001d58 <main+0xb0>)
 8001cf0:	ab2e      	add	r3, sp, #184	@ 0xb8
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	22c0      	movs	r2, #192	@ 0xc0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00a f97e 	bl	800bff8 <memcpy>
 8001cfc:	4668      	mov	r0, sp
 8001cfe:	f104 0308 	add.w	r3, r4, #8
 8001d02:	22b8      	movs	r2, #184	@ 0xb8
 8001d04:	4619      	mov	r1, r3
 8001d06:	f00a f977 	bl	800bff8 <memcpy>
 8001d0a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001d0e:	4813      	ldr	r0, [pc, #76]	@ (8001d5c <main+0xb4>)
 8001d10:	f7ff febe 	bl	8001a90 <DriveSystem_Init>
  SerialCommands_Init(&huart2, &hdma_usart2_rx);
 8001d14:	4912      	ldr	r1, [pc, #72]	@ (8001d60 <main+0xb8>)
 8001d16:	4813      	ldr	r0, [pc, #76]	@ (8001d64 <main+0xbc>)
 8001d18:	f000 fe9a 	bl	8002a50 <SerialCommands_Init>
  CAN_Init(&hfdcan1);
 8001d1c:	4812      	ldr	r0, [pc, #72]	@ (8001d68 <main+0xc0>)
 8001d1e:	f7fe fc43 	bl	80005a8 <CAN_Init>

  SerialCommands_Send(COMMAND_READY, 0xFFFF);
 8001d22:	f04f 31ff 	mov.w	r1, #4294967295
 8001d26:	2001      	movs	r0, #1
 8001d28:	f000 ff88 	bl	8002c3c <SerialCommands_Send>


  while (1)
  {

	  DriveSystem_Calculate(&drive);
 8001d2c:	480b      	ldr	r0, [pc, #44]	@ (8001d5c <main+0xb4>)
 8001d2e:	f7ff ff26 	bl	8001b7e <DriveSystem_Calculate>
	  SerialCommands_DoEvents();
 8001d32:	f000 ffe3 	bl	8002cfc <SerialCommands_DoEvents>
	  CommandHandler_ProcessCommand(SerialCommands_GetCommand(), &drive);
 8001d36:	f000 ffb9 	bl	8002cac <SerialCommands_GetCommand>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4907      	ldr	r1, [pc, #28]	@ (8001d5c <main+0xb4>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fe3e 	bl	80019c0 <CommandHandler_ProcessCommand>
	  CAN_SendWakeMessage(&hfdcan1);
 8001d44:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <main+0xc0>)
 8001d46:	f7fe fc83 	bl	8000650 <CAN_SendWakeMessage>
	  DriveSystem_Calculate(&drive);
 8001d4a:	bf00      	nop
 8001d4c:	e7ee      	b.n	8001d2c <main+0x84>
 8001d4e:	bf00      	nop
 8001d50:	20000000 	.word	0x20000000
 8001d54:	200001b0 	.word	0x200001b0
 8001d58:	20000270 	.word	0x20000270
 8001d5c:	20000020 	.word	0x20000020
 8001d60:	200006e4 	.word	0x200006e4
 8001d64:	20000650 	.word	0x20000650
 8001d68:	20000458 	.word	0x20000458

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b094      	sub	sp, #80	@ 0x50
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	2238      	movs	r2, #56	@ 0x38
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00a f910 	bl	800bfa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f004 fd2a 	bl	80067e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d9e:	2340      	movs	r3, #64	@ 0x40
 8001da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da2:	2302      	movs	r3, #2
 8001da4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001da6:	2302      	movs	r3, #2
 8001da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001daa:	2304      	movs	r3, #4
 8001dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001dae:	2355      	movs	r3, #85	@ 0x55
 8001db0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001db6:	2302      	movs	r3, #2
 8001db8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 fdc4 	bl	8006950 <HAL_RCC_OscConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001dce:	f000 fe39 	bl	8002a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2104      	movs	r1, #4
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 f8c2 	bl	8006f74 <HAL_RCC_ClockConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001df6:	f000 fe25 	bl	8002a44 <Error_Handler>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3750      	adds	r7, #80	@ 0x50
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2220      	movs	r2, #32
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f00a f8bf 	bl	800bfa0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e22:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e24:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e2a:	4b30      	ldr	r3, [pc, #192]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e2c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e32:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e38:	4b2c      	ldr	r3, [pc, #176]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e44:	4b29      	ldr	r3, [pc, #164]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e4a:	4b28      	ldr	r3, [pc, #160]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e50:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e56:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001e5c:	4b23      	ldr	r3, [pc, #140]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e62:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e70:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e76:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e8c:	4817      	ldr	r0, [pc, #92]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001e8e:	f001 fe7b 	bl	8003b88 <HAL_ADC_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001e98:	f000 fdd4 	bl	8002a44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4811      	ldr	r0, [pc, #68]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001ea8:	f002 fc90 	bl	80047cc <HAL_ADCEx_MultiModeConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001eb2:	f000 fdc7 	bl	8002a44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <MX_ADC1_Init+0xec>)
 8001eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eba:	2306      	movs	r3, #6
 8001ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ec2:	237f      	movs	r3, #127	@ 0x7f
 8001ec4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <MX_ADC1_Init+0xe8>)
 8001ed4:	f002 f814 	bl	8003f00 <HAL_ADC_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001ede:	f000 fdb1 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	3730      	adds	r7, #48	@ 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000036c 	.word	0x2000036c
 8001ef0:	10c00010 	.word	0x10c00010

08001ef4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	@ 0x30
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2220      	movs	r2, #32
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f00a f847 	bl	800bfa0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001f12:	4b31      	ldr	r3, [pc, #196]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f14:	4a31      	ldr	r2, [pc, #196]	@ (8001fdc <MX_ADC3_Init+0xe8>)
 8001f16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f18:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f1a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f32:	4b29      	ldr	r3, [pc, #164]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f38:	4b27      	ldr	r3, [pc, #156]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001f44:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001f4a:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f50:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f64:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f7a:	4817      	ldr	r0, [pc, #92]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f7c:	f001 fe04 	bl	8003b88 <HAL_ADC_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001f86:	f000 fd5d 	bl	8002a44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f92:	4619      	mov	r1, r3
 8001f94:	4810      	ldr	r0, [pc, #64]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001f96:	f002 fc19 	bl	80047cc <HAL_ADCEx_MultiModeConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001fa0:	f000 fd50 	bl	8002a44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_ADC3_Init+0xec>)
 8001fa6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fa8:	2306      	movs	r3, #6
 8001faa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fb0:	237f      	movs	r3, #127	@ 0x7f
 8001fb2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_ADC3_Init+0xe4>)
 8001fc2:	f001 ff9d 	bl	8003f00 <HAL_ADC_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001fcc:	f000 fd3a 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3730      	adds	r7, #48	@ 0x30
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200003d8 	.word	0x200003d8
 8001fdc:	50000400 	.word	0x50000400
 8001fe0:	1d500080 	.word	0x1d500080

08001fe4 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	@ 0x30
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001fea:	463b      	mov	r3, r7
 8001fec:	2230      	movs	r2, #48	@ 0x30
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f009 ffd5 	bl	800bfa0 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <MX_DAC2_Init+0x6c>)
 8001ff8:	4a16      	ldr	r2, [pc, #88]	@ (8002054 <MX_DAC2_Init+0x70>)
 8001ffa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001ffc:	4814      	ldr	r0, [pc, #80]	@ (8002050 <MX_DAC2_Init+0x6c>)
 8001ffe:	f002 fdfc 	bl	8004bfa <HAL_DAC_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8002008:	f000 fd1c 	bl	8002a44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800200c:	2302      	movs	r3, #2
 800200e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002028:	2301      	movs	r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <MX_DAC2_Init+0x6c>)
 8002038:	f002 fe9c 	bl	8004d74 <HAL_DAC_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8002042:	f000 fcff 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3730      	adds	r7, #48	@ 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000444 	.word	0x20000444
 8002054:	50000c00 	.word	0x50000c00

08002058 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 800205e:	4a20      	ldr	r2, [pc, #128]	@ (80020e0 <MX_FDCAN1_Init+0x88>)
 8002060:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002062:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800206e:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 8002070:	2200      	movs	r2, #0
 8002072:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 8002076:	2200      	movs	r2, #0
 8002078:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800207a:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 800207c:	2200      	movs	r2, #0
 800207e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 8002082:	2200      	movs	r2, #0
 8002084:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 8002088:	2201      	movs	r2, #1
 800208a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 800208e:	2201      	movs	r2, #1
 8002090:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 8002094:	2208      	movs	r2, #8
 8002096:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8002098:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 800209a:	2208      	movs	r2, #8
 800209c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80020bc:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 80020be:	2200      	movs	r2, #0
 80020c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80020c8:	4804      	ldr	r0, [pc, #16]	@ (80020dc <MX_FDCAN1_Init+0x84>)
 80020ca:	f003 fb3f 	bl	800574c <HAL_FDCAN_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80020d4:	f000 fcb6 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000458 	.word	0x20000458
 80020e0:	40006400 	.word	0x40006400

080020e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <MX_SPI1_Init+0x74>)
 80020ea:	4a1c      	ldr	r2, [pc, #112]	@ (800215c <MX_SPI1_Init+0x78>)
 80020ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <MX_SPI1_Init+0x74>)
 80020f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020f6:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <MX_SPI1_Init+0x74>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020fc:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <MX_SPI1_Init+0x74>)
 80020fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002102:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <MX_SPI1_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800210a:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <MX_SPI1_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <MX_SPI1_Init+0x74>)
 8002112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002116:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002118:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <MX_SPI1_Init+0x74>)
 800211a:	2218      	movs	r2, #24
 800211c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <MX_SPI1_Init+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <MX_SPI1_Init+0x74>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <MX_SPI1_Init+0x74>)
 800212c:	2200      	movs	r2, #0
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <MX_SPI1_Init+0x74>)
 8002132:	2207      	movs	r2, #7
 8002134:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002136:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <MX_SPI1_Init+0x74>)
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <MX_SPI1_Init+0x74>)
 800213e:	2208      	movs	r2, #8
 8002140:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	@ (8002158 <MX_SPI1_Init+0x74>)
 8002144:	f005 fb7c 	bl	8007840 <HAL_SPI_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800214e:	f000 fc79 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200004bc 	.word	0x200004bc
 800215c:	40013000 	.word	0x40013000

08002160 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b09c      	sub	sp, #112	@ 0x70
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002166:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002174:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002180:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2234      	movs	r2, #52	@ 0x34
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f009 ff00 	bl	800bfa0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021a0:	4b51      	ldr	r3, [pc, #324]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021a2:	4a52      	ldr	r2, [pc, #328]	@ (80022ec <MX_TIM1_Init+0x18c>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80021a6:	4b50      	ldr	r3, [pc, #320]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021a8:	2210      	movs	r2, #16
 80021aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b4e      	ldr	r3, [pc, #312]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80021b2:	4b4d      	ldr	r3, [pc, #308]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021b4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80021b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b4b      	ldr	r3, [pc, #300]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021c0:	4b49      	ldr	r3, [pc, #292]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b48      	ldr	r3, [pc, #288]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021cc:	4846      	ldr	r0, [pc, #280]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021ce:	f006 f8db 	bl	8008388 <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80021d8:	f000 fc34 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021e6:	4619      	mov	r1, r3
 80021e8:	483f      	ldr	r0, [pc, #252]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021ea:	f006 ffe5 	bl	80091b8 <HAL_TIM_ConfigClockSource>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80021f4:	f000 fc26 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021f8:	483b      	ldr	r0, [pc, #236]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80021fa:	f006 f91c 	bl	8008436 <HAL_TIM_PWM_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002204:	f000 fc1e 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002214:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002218:	4619      	mov	r1, r3
 800221a:	4833      	ldr	r0, [pc, #204]	@ (80022e8 <MX_TIM1_Init+0x188>)
 800221c:	f008 f838 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002226:	f000 fc0d 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222a:	2360      	movs	r3, #96	@ 0x60
 800222c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002232:	2300      	movs	r3, #0
 8002234:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002236:	2300      	movs	r3, #0
 8002238:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002246:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800224a:	2200      	movs	r2, #0
 800224c:	4619      	mov	r1, r3
 800224e:	4826      	ldr	r0, [pc, #152]	@ (80022e8 <MX_TIM1_Init+0x188>)
 8002250:	f006 fe9e 	bl	8008f90 <HAL_TIM_PWM_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800225a:	f000 fbf3 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800225e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002262:	2204      	movs	r2, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4820      	ldr	r0, [pc, #128]	@ (80022e8 <MX_TIM1_Init+0x188>)
 8002268:	f006 fe92 	bl	8008f90 <HAL_TIM_PWM_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002272:	f000 fbe7 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002276:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800227a:	2208      	movs	r2, #8
 800227c:	4619      	mov	r1, r3
 800227e:	481a      	ldr	r0, [pc, #104]	@ (80022e8 <MX_TIM1_Init+0x188>)
 8002280:	f006 fe86 	bl	8008f90 <HAL_TIM_PWM_ConfigChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800228a:	f000 fbdb 	bl	8002a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022be:	2300      	movs	r3, #0
 80022c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4807      	ldr	r0, [pc, #28]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80022cc:	f008 f876 	bl	800a3bc <HAL_TIMEx_ConfigBreakDeadTime>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80022d6:	f000 fbb5 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022da:	4803      	ldr	r0, [pc, #12]	@ (80022e8 <MX_TIM1_Init+0x188>)
 80022dc:	f000 ffd2 	bl	8003284 <HAL_TIM_MspPostInit>

}
 80022e0:	bf00      	nop
 80022e2:	3770      	adds	r7, #112	@ 0x70
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000520 	.word	0x20000520
 80022ec:	40012c00 	.word	0x40012c00

080022f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	@ 0x30
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f6:	f107 0320 	add.w	r3, r7, #32
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800231c:	4b36      	ldr	r3, [pc, #216]	@ (80023f8 <MX_TIM2_Init+0x108>)
 800231e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8002324:	4b34      	ldr	r3, [pc, #208]	@ (80023f8 <MX_TIM2_Init+0x108>)
 8002326:	22a9      	movs	r2, #169	@ 0xa9
 8002328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <MX_TIM2_Init+0x108>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002330:	4b31      	ldr	r3, [pc, #196]	@ (80023f8 <MX_TIM2_Init+0x108>)
 8002332:	f04f 32ff 	mov.w	r2, #4294967295
 8002336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b2f      	ldr	r3, [pc, #188]	@ (80023f8 <MX_TIM2_Init+0x108>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b2e      	ldr	r3, [pc, #184]	@ (80023f8 <MX_TIM2_Init+0x108>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002344:	482c      	ldr	r0, [pc, #176]	@ (80023f8 <MX_TIM2_Init+0x108>)
 8002346:	f006 f81f 	bl	8008388 <HAL_TIM_Base_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002350:	f000 fb78 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002358:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	4619      	mov	r1, r3
 8002360:	4825      	ldr	r0, [pc, #148]	@ (80023f8 <MX_TIM2_Init+0x108>)
 8002362:	f006 ff29 	bl	80091b8 <HAL_TIM_ConfigClockSource>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800236c:	f000 fb6a 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002370:	4821      	ldr	r0, [pc, #132]	@ (80023f8 <MX_TIM2_Init+0x108>)
 8002372:	f006 fa6f 	bl	8008854 <HAL_TIM_IC_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800237c:	f000 fb62 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	481a      	ldr	r0, [pc, #104]	@ (80023f8 <MX_TIM2_Init+0x108>)
 8002390:	f007 ff7e 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800239a:	f000 fb53 	bl	8002a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800239e:	230a      	movs	r3, #10
 80023a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023a2:	2301      	movs	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	4619      	mov	r1, r3
 80023b4:	4810      	ldr	r0, [pc, #64]	@ (80023f8 <MX_TIM2_Init+0x108>)
 80023b6:	f006 fd4e 	bl	8008e56 <HAL_TIM_IC_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80023c0:	f000 fb40 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2204      	movs	r2, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	480b      	ldr	r0, [pc, #44]	@ (80023f8 <MX_TIM2_Init+0x108>)
 80023cc:	f006 fd43 	bl	8008e56 <HAL_TIM_IC_ConfigChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80023d6:	f000 fb35 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2208      	movs	r2, #8
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <MX_TIM2_Init+0x108>)
 80023e2:	f006 fd38 	bl	8008e56 <HAL_TIM_IC_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80023ec:	f000 fb2a 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	3730      	adds	r7, #48	@ 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	2000056c 	.word	0x2000056c

080023fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	@ 0x30
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002402:	f107 0320 	add.w	r3, r7, #32
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002428:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <MX_TIM5_Init+0x108>)
 800242a:	4a37      	ldr	r2, [pc, #220]	@ (8002508 <MX_TIM5_Init+0x10c>)
 800242c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 800242e:	4b35      	ldr	r3, [pc, #212]	@ (8002504 <MX_TIM5_Init+0x108>)
 8002430:	22a9      	movs	r2, #169	@ 0xa9
 8002432:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002434:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <MX_TIM5_Init+0x108>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800243a:	4b32      	ldr	r3, [pc, #200]	@ (8002504 <MX_TIM5_Init+0x108>)
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002442:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <MX_TIM5_Init+0x108>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002448:	4b2e      	ldr	r3, [pc, #184]	@ (8002504 <MX_TIM5_Init+0x108>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800244e:	482d      	ldr	r0, [pc, #180]	@ (8002504 <MX_TIM5_Init+0x108>)
 8002450:	f005 ff9a 	bl	8008388 <HAL_TIM_Base_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800245a:	f000 faf3 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002462:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002464:	f107 0320 	add.w	r3, r7, #32
 8002468:	4619      	mov	r1, r3
 800246a:	4826      	ldr	r0, [pc, #152]	@ (8002504 <MX_TIM5_Init+0x108>)
 800246c:	f006 fea4 	bl	80091b8 <HAL_TIM_ConfigClockSource>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002476:	f000 fae5 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800247a:	4822      	ldr	r0, [pc, #136]	@ (8002504 <MX_TIM5_Init+0x108>)
 800247c:	f006 f9ea 	bl	8008854 <HAL_TIM_IC_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002486:	f000 fadd 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	481a      	ldr	r0, [pc, #104]	@ (8002504 <MX_TIM5_Init+0x108>)
 800249a:	f007 fef9 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80024a4:	f000 face 	bl	8002a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80024a8:	230a      	movs	r3, #10
 80024aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024ac:	2301      	movs	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	4811      	ldr	r0, [pc, #68]	@ (8002504 <MX_TIM5_Init+0x108>)
 80024c0:	f006 fcc9 	bl	8008e56 <HAL_TIM_IC_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80024ca:	f000 fabb 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2204      	movs	r2, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	480b      	ldr	r0, [pc, #44]	@ (8002504 <MX_TIM5_Init+0x108>)
 80024d6:	f006 fcbe 	bl	8008e56 <HAL_TIM_IC_ConfigChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 80024e0:	f000 fab0 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2208      	movs	r2, #8
 80024e8:	4619      	mov	r1, r3
 80024ea:	4806      	ldr	r0, [pc, #24]	@ (8002504 <MX_TIM5_Init+0x108>)
 80024ec:	f006 fcb3 	bl	8008e56 <HAL_TIM_IC_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 80024f6:	f000 faa5 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	3730      	adds	r7, #48	@ 0x30
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200005b8 	.word	0x200005b8
 8002508:	40000c00 	.word	0x40000c00

0800250c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b09c      	sub	sp, #112	@ 0x70
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002512:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002520:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800252c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
 800253c:	615a      	str	r2, [r3, #20]
 800253e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2234      	movs	r2, #52	@ 0x34
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f009 fd2a 	bl	800bfa0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800254c:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <MX_TIM8_Init+0x188>)
 800254e:	4a52      	ldr	r2, [pc, #328]	@ (8002698 <MX_TIM8_Init+0x18c>)
 8002550:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 8002552:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <MX_TIM8_Init+0x188>)
 8002554:	2210      	movs	r2, #16
 8002556:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b4e      	ldr	r3, [pc, #312]	@ (8002694 <MX_TIM8_Init+0x188>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 800255e:	4b4d      	ldr	r3, [pc, #308]	@ (8002694 <MX_TIM8_Init+0x188>)
 8002560:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002564:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002566:	4b4b      	ldr	r3, [pc, #300]	@ (8002694 <MX_TIM8_Init+0x188>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800256c:	4b49      	ldr	r3, [pc, #292]	@ (8002694 <MX_TIM8_Init+0x188>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002572:	4b48      	ldr	r3, [pc, #288]	@ (8002694 <MX_TIM8_Init+0x188>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002578:	4846      	ldr	r0, [pc, #280]	@ (8002694 <MX_TIM8_Init+0x188>)
 800257a:	f005 ff05 	bl	8008388 <HAL_TIM_Base_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002584:	f000 fa5e 	bl	8002a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800258e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002592:	4619      	mov	r1, r3
 8002594:	483f      	ldr	r0, [pc, #252]	@ (8002694 <MX_TIM8_Init+0x188>)
 8002596:	f006 fe0f 	bl	80091b8 <HAL_TIM_ConfigClockSource>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80025a0:	f000 fa50 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80025a4:	483b      	ldr	r0, [pc, #236]	@ (8002694 <MX_TIM8_Init+0x188>)
 80025a6:	f005 ff46 	bl	8008436 <HAL_TIM_PWM_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80025b0:	f000 fa48 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025c4:	4619      	mov	r1, r3
 80025c6:	4833      	ldr	r0, [pc, #204]	@ (8002694 <MX_TIM8_Init+0x188>)
 80025c8:	f007 fe62 	bl	800a290 <HAL_TIMEx_MasterConfigSynchronization>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80025d2:	f000 fa37 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d6:	2360      	movs	r3, #96	@ 0x60
 80025d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025de:	2300      	movs	r3, #0
 80025e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025e2:	2300      	movs	r3, #0
 80025e4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025f6:	2200      	movs	r2, #0
 80025f8:	4619      	mov	r1, r3
 80025fa:	4826      	ldr	r0, [pc, #152]	@ (8002694 <MX_TIM8_Init+0x188>)
 80025fc:	f006 fcc8 	bl	8008f90 <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002606:	f000 fa1d 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800260a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800260e:	2204      	movs	r2, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4820      	ldr	r0, [pc, #128]	@ (8002694 <MX_TIM8_Init+0x188>)
 8002614:	f006 fcbc 	bl	8008f90 <HAL_TIM_PWM_ConfigChannel>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800261e:	f000 fa11 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002622:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002626:	2208      	movs	r2, #8
 8002628:	4619      	mov	r1, r3
 800262a:	481a      	ldr	r0, [pc, #104]	@ (8002694 <MX_TIM8_Init+0x188>)
 800262c:	f006 fcb0 	bl	8008f90 <HAL_TIM_PWM_ConfigChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8002636:	f000 fa05 	bl	8002a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800264e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002652:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002664:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800266a:	2300      	movs	r3, #0
 800266c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4807      	ldr	r0, [pc, #28]	@ (8002694 <MX_TIM8_Init+0x188>)
 8002678:	f007 fea0 	bl	800a3bc <HAL_TIMEx_ConfigBreakDeadTime>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8002682:	f000 f9df 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002686:	4803      	ldr	r0, [pc, #12]	@ (8002694 <MX_TIM8_Init+0x188>)
 8002688:	f000 fdfc 	bl	8003284 <HAL_TIM_MspPostInit>

}
 800268c:	bf00      	nop
 800268e:	3770      	adds	r7, #112	@ 0x70
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000604 	.word	0x20000604
 8002698:	40013400 	.word	0x40013400

0800269c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026a0:	4b22      	ldr	r3, [pc, #136]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026a2:	4a23      	ldr	r2, [pc, #140]	@ (8002730 <MX_USART2_UART_Init+0x94>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80026a6:	4b21      	ldr	r3, [pc, #132]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026a8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80026ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b19      	ldr	r3, [pc, #100]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d2:	4b16      	ldr	r3, [pc, #88]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026da:	2200      	movs	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026de:	4b13      	ldr	r3, [pc, #76]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e4:	4811      	ldr	r0, [pc, #68]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026e6:	f007 ff68 	bl	800a5ba <HAL_UART_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80026f0:	f000 f9a8 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f4:	2100      	movs	r1, #0
 80026f6:	480d      	ldr	r0, [pc, #52]	@ (800272c <MX_USART2_UART_Init+0x90>)
 80026f8:	f009 fb34 	bl	800bd64 <HAL_UARTEx_SetTxFifoThreshold>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002702:	f000 f99f 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002706:	2100      	movs	r1, #0
 8002708:	4808      	ldr	r0, [pc, #32]	@ (800272c <MX_USART2_UART_Init+0x90>)
 800270a:	f009 fb69 	bl	800bde0 <HAL_UARTEx_SetRxFifoThreshold>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002714:	f000 f996 	bl	8002a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002718:	4804      	ldr	r0, [pc, #16]	@ (800272c <MX_USART2_UART_Init+0x90>)
 800271a:	f009 faea 	bl	800bcf2 <HAL_UARTEx_DisableFifoMode>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002724:	f000 f98e 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000650 	.word	0x20000650
 8002730:	40004400 	.word	0x40004400

08002734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800273a:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <MX_DMA_Init+0x50>)
 800273c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273e:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <MX_DMA_Init+0x50>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6493      	str	r3, [r2, #72]	@ 0x48
 8002746:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <MX_DMA_Init+0x50>)
 8002748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002752:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <MX_DMA_Init+0x50>)
 8002754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002756:	4a0b      	ldr	r2, [pc, #44]	@ (8002784 <MX_DMA_Init+0x50>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6493      	str	r3, [r2, #72]	@ 0x48
 800275e:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <MX_DMA_Init+0x50>)
 8002760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	200b      	movs	r0, #11
 8002770:	f002 fa0f 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002774:	200b      	movs	r0, #11
 8002776:	f002 fa26 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000

08002788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	@ 0x30
 800278c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	4b7a      	ldr	r3, [pc, #488]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a2:	4a79      	ldr	r2, [pc, #484]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027aa:	4b77      	ldr	r3, [pc, #476]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027b6:	4b74      	ldr	r3, [pc, #464]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ba:	4a73      	ldr	r2, [pc, #460]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027bc:	f043 0320 	orr.w	r3, r3, #32
 80027c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027c2:	4b71      	ldr	r3, [pc, #452]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027da:	4b6b      	ldr	r3, [pc, #428]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	4b68      	ldr	r3, [pc, #416]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	4a67      	ldr	r2, [pc, #412]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f2:	4b65      	ldr	r3, [pc, #404]	@ (8002988 <MX_GPIO_Init+0x200>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027fe:	4b62      	ldr	r3, [pc, #392]	@ (8002988 <MX_GPIO_Init+0x200>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	4a61      	ldr	r2, [pc, #388]	@ (8002988 <MX_GPIO_Init+0x200>)
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280a:	4b5f      	ldr	r3, [pc, #380]	@ (8002988 <MX_GPIO_Init+0x200>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002816:	4b5c      	ldr	r3, [pc, #368]	@ (8002988 <MX_GPIO_Init+0x200>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	4a5b      	ldr	r2, [pc, #364]	@ (8002988 <MX_GPIO_Init+0x200>)
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002822:	4b59      	ldr	r3, [pc, #356]	@ (8002988 <MX_GPIO_Init+0x200>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800282e:	4b56      	ldr	r3, [pc, #344]	@ (8002988 <MX_GPIO_Init+0x200>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002832:	4a55      	ldr	r2, [pc, #340]	@ (8002988 <MX_GPIO_Init+0x200>)
 8002834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800283a:	4b53      	ldr	r3, [pc, #332]	@ (8002988 <MX_GPIO_Init+0x200>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nAUX2_EN_Pin|LED_A_INT_Pin, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800284c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002850:	f003 ff9a 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, nDEBUG_LED2_Pin|nDEBUG_LED1_Pin, GPIO_PIN_RESET);
 8002854:	2200      	movs	r2, #0
 8002856:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 800285a:	484c      	ldr	r0, [pc, #304]	@ (800298c <MX_GPIO_Init+0x204>)
 800285c:	f003 ff94 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX2_OUTPUT_GPIO_Port, AUX2_OUTPUT_Pin, GPIO_PIN_RESET);
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002866:	484a      	ldr	r0, [pc, #296]	@ (8002990 <MX_GPIO_Init+0x208>)
 8002868:	f003 ff8e 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCM_GYRO_SPI_GPIO_Port, nCS_MCM_GYRO_SPI_Pin, GPIO_PIN_SET);
 800286c:	2201      	movs	r2, #1
 800286e:	2102      	movs	r1, #2
 8002870:	4848      	ldr	r0, [pc, #288]	@ (8002994 <MX_GPIO_Init+0x20c>)
 8002872:	f003 ff89 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCM_KILL_Pin|nCAN_STBY_Pin, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800287c:	4845      	ldr	r0, [pc, #276]	@ (8002994 <MX_GPIO_Init+0x20c>)
 800287e:	f003 ff83 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nWHEEL_MOTOR_SHDN_GPIO_Port, nWHEEL_MOTOR_SHDN_Pin, GPIO_PIN_SET);
 8002882:	2201      	movs	r2, #1
 8002884:	2102      	movs	r1, #2
 8002886:	4844      	ldr	r0, [pc, #272]	@ (8002998 <MX_GPIO_Init+0x210>)
 8002888:	f003 ff7e 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nAUX2_EN_Pin LED_A_INT_Pin */
  GPIO_InitStruct.Pin = nAUX2_EN_Pin|LED_A_INT_Pin;
 800288c:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8002890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002892:	2301      	movs	r3, #1
 8002894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a8:	f003 fdd4 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pins : nDEBUG_LED2_Pin nDEBUG_LED1_Pin */
  GPIO_InitStruct.Pin = nDEBUG_LED2_Pin|nDEBUG_LED1_Pin;
 80028ac:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80028b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028be:	f107 031c 	add.w	r3, r7, #28
 80028c2:	4619      	mov	r1, r3
 80028c4:	4831      	ldr	r0, [pc, #196]	@ (800298c <MX_GPIO_Init+0x204>)
 80028c6:	f003 fdc5 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRMC_CURRFAULT_Pin */
  GPIO_InitStruct.Pin = nRMC_CURRFAULT_Pin;
 80028ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nRMC_CURRFAULT_GPIO_Port, &GPIO_InitStruct);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	482f      	ldr	r0, [pc, #188]	@ (800299c <MX_GPIO_Init+0x214>)
 80028e0:	f003 fdb8 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pins : V_3V3_DIAG_Pin V_5V_DIAG_Pin nLMC_CURRFAULT_Pin */
  GPIO_InitStruct.Pin = V_3V3_DIAG_Pin|V_5V_DIAG_Pin|nLMC_CURRFAULT_Pin;
 80028e4:	f44f 7341 	mov.w	r3, #772	@ 0x304
 80028e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f2:	f107 031c 	add.w	r3, r7, #28
 80028f6:	4619      	mov	r1, r3
 80028f8:	4825      	ldr	r0, [pc, #148]	@ (8002990 <MX_GPIO_Init+0x208>)
 80028fa:	f003 fdab 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX2_OUTPUT_Pin */
  GPIO_InitStruct.Pin = AUX2_OUTPUT_Pin;
 80028fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002904:	2301      	movs	r3, #1
 8002906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUX2_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	481e      	ldr	r0, [pc, #120]	@ (8002990 <MX_GPIO_Init+0x208>)
 8002918:	f003 fd9c 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT_Pin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 800291c:	2301      	movs	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002920:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4818      	ldr	r0, [pc, #96]	@ (8002994 <MX_GPIO_Init+0x20c>)
 8002932:	f003 fd8f 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pins : nCS_MCM_GYRO_SPI_Pin MCM_KILL_Pin nCAN_STBY_Pin */
  GPIO_InitStruct.Pin = nCS_MCM_GYRO_SPI_Pin|MCM_KILL_Pin|nCAN_STBY_Pin;
 8002936:	f240 2382 	movw	r3, #642	@ 0x282
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4811      	ldr	r0, [pc, #68]	@ (8002994 <MX_GPIO_Init+0x20c>)
 8002950:	f003 fd80 	bl	8006454 <HAL_GPIO_Init>

  /*Configure GPIO pin : nWHEEL_MOTOR_SHDN_Pin */
  GPIO_InitStruct.Pin = nWHEEL_MOTOR_SHDN_Pin;
 8002954:	2302      	movs	r3, #2
 8002956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002958:	2301      	movs	r3, #1
 800295a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nWHEEL_MOTOR_SHDN_GPIO_Port, &GPIO_InitStruct);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	4619      	mov	r1, r3
 800296a:	480b      	ldr	r0, [pc, #44]	@ (8002998 <MX_GPIO_Init+0x210>)
 800296c:	f003 fd72 	bl	8006454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2101      	movs	r1, #1
 8002974:	2006      	movs	r0, #6
 8002976:	f002 f90c 	bl	8004b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800297a:	2006      	movs	r0, #6
 800297c:	f002 f923 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002980:	bf00      	nop
 8002982:	3730      	adds	r7, #48	@ 0x30
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	48001400 	.word	0x48001400
 8002990:	48000c00 	.word	0x48000c00
 8002994:	48001800 	.word	0x48001800
 8002998:	48001000 	.word	0x48001000
 800299c:	48000400 	.word	0x48000400

080029a0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	DriveSystem_InterruptHandler(&drive, htim);
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4803      	ldr	r0, [pc, #12]	@ (80029b8 <HAL_TIM_IC_CaptureCallback+0x18>)
 80029ac:	f7ff f8f8 	bl	8001ba0 <DriveSystem_InterruptHandler>
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000020 	.word	0x20000020

080029bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	80fb      	strh	r3, [r7, #6]
	IMU_InterruptHandler(&imu, GPIO_Pin);
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	4619      	mov	r1, r3
 80029ca:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80029cc:	f7fe f83f 	bl	8000a4e <IMU_InterruptHandler>

}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000000 	.word	0x20000000

080029dc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]

	//if(huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
		SerialCommands_HandleUARTInterrupt();
 80029e8:	f000 f8e4 	bl	8002bb4 <SerialCommands_HandleUARTInterrupt>
	//}

}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d014      	beq.n	8002a32 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002a08:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <HAL_FDCAN_RxFifo0Callback+0x48>)
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a40 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002a0c:	2140      	movs	r1, #64	@ 0x40
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f003 f8bc 	bl	8005b8c <HAL_FDCAN_GetRxMessage>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8002a1a:	f000 f813 	bl	8002a44 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2101      	movs	r1, #1
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f003 f9ba 	bl	8005d9c <HAL_FDCAN_ActivateNotification>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8002a2e:	f000 f809 	bl	8002a44 <Error_Handler>
    }
  }
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000076c 	.word	0x2000076c
 8002a40:	20000744 	.word	0x20000744

08002a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a48:	b672      	cpsid	i
}
 8002a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <Error_Handler+0x8>

08002a50 <SerialCommands_Init>:
		.invalid = true,
		.newCommand = false
};

// Initialize the serial commands system
void SerialCommands_Init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
    serial_huart = huart;                     // Save the UART handle
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <SerialCommands_Init+0x34>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6013      	str	r3, [r2, #0]
    hdma_huartrx = hdma;
 8002a60:	4a09      	ldr	r2, [pc, #36]	@ (8002a88 <SerialCommands_Init+0x38>)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6013      	str	r3, [r2, #0]
    buf.recieveIdx = 0;
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <SerialCommands_Init+0x3c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
    buf.sendIdx = 0;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <SerialCommands_Init+0x3c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	705a      	strb	r2, [r3, #1]
    buf.processIdx = 0;
 8002a72:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <SerialCommands_Init+0x3c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	709a      	strb	r2, [r3, #2]
    // Start UART reception in interrupt mode
    SerialCommands_SetupRecieve();
 8002a78:	f000 f8c4 	bl	8002c04 <SerialCommands_SetupRecieve>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000778 	.word	0x20000778
 8002a88:	2000077c 	.word	0x2000077c
 8002a8c:	20000890 	.word	0x20000890

08002a90 <SerialCommands_IncrementIdx>:

static uint8_t SerialCommands_IncrementIdx(uint8_t idx) {
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
	idx++;
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	71fb      	strb	r3, [r7, #7]
	if(idx >= CMD_BUF_SIZE) idx = 0;
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	d901      	bls.n	8002aaa <SerialCommands_IncrementIdx+0x1a>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	71fb      	strb	r3, [r7, #7]

	return idx;
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <SerialCommands_ProcessPacket>:

// Process a complete packet
static SerialCommand_t SerialCommands_ProcessPacket(uint8_t *packet) {
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]

	SerialCommand_t cmd = {
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	819a      	strh	r2, [r3, #12]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	763b      	strb	r3, [r7, #24]
		.invalid = true
	};
	uint8_t length = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	77fb      	strb	r3, [r7, #31]

	cmd.invalid = false;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	763b      	strb	r3, [r7, #24]

    if (packet[0] != START_BYTE) {
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2baa      	cmp	r3, #170	@ 0xaa
 8002ae2:	d001      	beq.n	8002ae8 <SerialCommands_ProcessPacket+0x30>
    	cmd.invalid = true; // Invalid start byte, discard packet
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	763b      	strb	r3, [r7, #24]
    }

    cmd.length = packet[1];
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	785b      	ldrb	r3, [r3, #1]
 8002aec:	75bb      	strb	r3, [r7, #22]
    if (packet[1] > MAX_DATA_SIZE) {
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d903      	bls.n	8002b00 <SerialCommands_ProcessPacket+0x48>
		cmd.invalid = true;
 8002af8:	2301      	movs	r3, #1
 8002afa:	763b      	strb	r3, [r7, #24]
		cmd.length = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75bb      	strb	r3, [r7, #22]
	}

    for(uint8_t i = (RX_BUFFER_SIZE - 1); i > 1 ; i--) {
 8002b00:	230f      	movs	r3, #15
 8002b02:	77bb      	strb	r3, [r7, #30]
 8002b04:	e00b      	b.n	8002b1e <SerialCommands_ProcessPacket+0x66>
    	if(packet[i] != 0) {
 8002b06:	7fbb      	ldrb	r3, [r7, #30]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <SerialCommands_ProcessPacket+0x60>
    		length = i;
 8002b12:	7fbb      	ldrb	r3, [r7, #30]
 8002b14:	77fb      	strb	r3, [r7, #31]
    		break;
 8002b16:	e005      	b.n	8002b24 <SerialCommands_ProcessPacket+0x6c>
    for(uint8_t i = (RX_BUFFER_SIZE - 1); i > 1 ; i--) {
 8002b18:	7fbb      	ldrb	r3, [r7, #30]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	77bb      	strb	r3, [r7, #30]
 8002b1e:	7fbb      	ldrb	r3, [r7, #30]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d8f0      	bhi.n	8002b06 <SerialCommands_ProcessPacket+0x4e>
    	}
    }

    uint8_t checksum = packet[0];
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	777b      	strb	r3, [r7, #29]
    for(uint8_t i = 1; i < length; i++) {
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	773b      	strb	r3, [r7, #28]
 8002b2e:	e009      	b.n	8002b44 <SerialCommands_ProcessPacket+0x8c>
		checksum ^= packet[i];
 8002b30:	7f3b      	ldrb	r3, [r7, #28]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	7f7b      	ldrb	r3, [r7, #29]
 8002b3a:	4053      	eors	r3, r2
 8002b3c:	777b      	strb	r3, [r7, #29]
    for(uint8_t i = 1; i < length; i++) {
 8002b3e:	7f3b      	ldrb	r3, [r7, #28]
 8002b40:	3301      	adds	r3, #1
 8002b42:	773b      	strb	r3, [r7, #28]
 8002b44:	7f3a      	ldrb	r2, [r7, #28]
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3f1      	bcc.n	8002b30 <SerialCommands_ProcessPacket+0x78>
	}

	if(checksum != packet[length]) {
 8002b4c:	7ffb      	ldrb	r3, [r7, #31]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	7f7a      	ldrb	r2, [r7, #29]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d001      	beq.n	8002b5e <SerialCommands_ProcessPacket+0xa6>
		cmd.invalid = true;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	763b      	strb	r3, [r7, #24]
	}

    // Populate the command structure
    cmd.command = (packet[2] << 8) | packet[3];
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	3302      	adds	r3, #2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	b21a      	sxth	r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	3303      	adds	r3, #3
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	4313      	orrs	r3, r2
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	81bb      	strh	r3, [r7, #12]

    if(cmd.length != 0) {
 8002b78:	7dbb      	ldrb	r3, [r7, #22]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <SerialCommands_ProcessPacket+0xda>
    	memcpy(cmd.data, &packet[4], cmd.length);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	1d19      	adds	r1, r3, #4
 8002b82:	7dbb      	ldrb	r3, [r7, #22]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f107 030c 	add.w	r3, r7, #12
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f009 fa33 	bl	800bff8 <memcpy>
    }
    cmd.newCommand = true;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]

    return cmd;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	461c      	mov	r4, r3
 8002b9a:	f107 030c 	add.w	r3, r7, #12
 8002b9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ba0:	6020      	str	r0, [r4, #0]
 8002ba2:	6061      	str	r1, [r4, #4]
 8002ba4:	60a2      	str	r2, [r4, #8]
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	81a3      	strh	r3, [r4, #12]

}
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	3724      	adds	r7, #36	@ 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
	...

08002bb4 <SerialCommands_HandleUARTInterrupt>:

// Handle the UART interrupt callback
void SerialCommands_HandleUARTInterrupt(void) {
 8002bb4:	b5b0      	push	{r4, r5, r7, lr}
 8002bb6:	af00      	add	r7, sp, #0

	memcpy(rx_buffer[buf.recieveIdx], rx_rec_buf, RX_BUFFER_SIZE);
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf8 <SerialCommands_HandleUARTInterrupt+0x44>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002bfc <SerialCommands_HandleUARTInterrupt+0x48>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002c00 <SerialCommands_HandleUARTInterrupt+0x4c>)
 8002bc4:	461c      	mov	r4, r3
 8002bc6:	4615      	mov	r5, r2
 8002bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bca:	6020      	str	r0, [r4, #0]
 8002bcc:	6061      	str	r1, [r4, #4]
 8002bce:	60a2      	str	r2, [r4, #8]
 8002bd0:	60e3      	str	r3, [r4, #12]
	buf.recieveIdx = SerialCommands_IncrementIdx(buf.recieveIdx);
 8002bd2:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <SerialCommands_HandleUARTInterrupt+0x44>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff5a 	bl	8002a90 <SerialCommands_IncrementIdx>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <SerialCommands_HandleUARTInterrupt+0x44>)
 8002be2:	701a      	strb	r2, [r3, #0]
	memset(rx_rec_buf, 0, RX_BUFFER_SIZE);
 8002be4:	2210      	movs	r2, #16
 8002be6:	2100      	movs	r1, #0
 8002be8:	4805      	ldr	r0, [pc, #20]	@ (8002c00 <SerialCommands_HandleUARTInterrupt+0x4c>)
 8002bea:	f009 f9d9 	bl	800bfa0 <memset>
	// Restart UART reception

	SerialCommands_SetupRecieve();
 8002bee:	f000 f809 	bl	8002c04 <SerialCommands_SetupRecieve>
}
 8002bf2:	bf00      	nop
 8002bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000890 	.word	0x20000890
 8002bfc:	20000790 	.word	0x20000790
 8002c00:	20000780 	.word	0x20000780

08002c04 <SerialCommands_SetupRecieve>:

void SerialCommands_SetupRecieve(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(serial_huart, rx_rec_buf, RX_BUFFER_SIZE);
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <SerialCommands_SetupRecieve+0x2c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	4909      	ldr	r1, [pc, #36]	@ (8002c34 <SerialCommands_SetupRecieve+0x30>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f009 f923 	bl	800be5c <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(hdma_huartrx, DMA_IT_HT);
 8002c16:	4b08      	ldr	r3, [pc, #32]	@ (8002c38 <SerialCommands_SetupRecieve+0x34>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <SerialCommands_SetupRecieve+0x34>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0204 	bic.w	r2, r2, #4
 8002c28:	601a      	str	r2, [r3, #0]

}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000778 	.word	0x20000778
 8002c34:	20000780 	.word	0x20000780
 8002c38:	2000077c 	.word	0x2000077c

08002c3c <SerialCommands_Send>:

void SerialCommands_Send(uint16_t command, int16_t value) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	460a      	mov	r2, r1
 8002c46:	80fb      	strh	r3, [r7, #6]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_buffer[PACKET_SIZE];

	tx_buffer[0] = START_BYTE;
 8002c4c:	23aa      	movs	r3, #170	@ 0xaa
 8002c4e:	723b      	strb	r3, [r7, #8]
	tx_buffer[1] = (command & 0xFF00) >> 8;
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	727b      	strb	r3, [r7, #9]
	tx_buffer[2] = (command & 0x00FF);
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	72bb      	strb	r3, [r7, #10]
	tx_buffer[3] = (value & 0xFF00) >> 8;
 8002c60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c64:	121b      	asrs	r3, r3, #8
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	72fb      	strb	r3, [r7, #11]
	tx_buffer[4] = (value & 0x00FF);
 8002c6a:	88bb      	ldrh	r3, [r7, #4]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	733b      	strb	r3, [r7, #12]
	tx_buffer[5] = tx_buffer[0] ^ tx_buffer[1] ^ tx_buffer[2] ^ tx_buffer[3] ^ tx_buffer[4];
 8002c70:	7a3a      	ldrb	r2, [r7, #8]
 8002c72:	7a7b      	ldrb	r3, [r7, #9]
 8002c74:	4053      	eors	r3, r2
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	7abb      	ldrb	r3, [r7, #10]
 8002c7a:	4053      	eors	r3, r2
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
 8002c80:	4053      	eors	r3, r2
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	7b3b      	ldrb	r3, [r7, #12]
 8002c86:	4053      	eors	r3, r2
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(serial_huart, tx_buffer, PACKET_SIZE, 0xFFFF);
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <SerialCommands_Send+0x6c>)
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	f107 0108 	add.w	r1, r7, #8
 8002c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c98:	2206      	movs	r2, #6
 8002c9a:	f007 fcde 	bl	800a65a <HAL_UART_Transmit>
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000778 	.word	0x20000778

08002cac <SerialCommands_GetCommand>:

void SerialCommands_BigSend(uint8_t *input, uint8_t length) {
	HAL_UART_Transmit(serial_huart, input, length, 0xFFFF);
}

SerialCommand_t * SerialCommands_GetCommand() {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
	uint8_t idx = buf.sendIdx;
 8002cb2:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <SerialCommands_GetCommand+0x48>)
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	71fb      	strb	r3, [r7, #7]

	if(buf.sendIdx == buf.recieveIdx) return &nullCmd;
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <SerialCommands_GetCommand+0x48>)
 8002cba:	785a      	ldrb	r2, [r3, #1]
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <SerialCommands_GetCommand+0x48>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d101      	bne.n	8002cc8 <SerialCommands_GetCommand+0x1c>
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <SerialCommands_GetCommand+0x4c>)
 8002cc6:	e010      	b.n	8002cea <SerialCommands_GetCommand+0x3e>

	buf.sendIdx = SerialCommands_IncrementIdx(buf.sendIdx);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <SerialCommands_GetCommand+0x48>)
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fedf 	bl	8002a90 <SerialCommands_IncrementIdx>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <SerialCommands_GetCommand+0x48>)
 8002cd8:	705a      	strb	r2, [r3, #1]

	return &buf.command[idx];
 8002cda:	79fa      	ldrb	r2, [r7, #7]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4a03      	ldr	r2, [pc, #12]	@ (8002cf4 <SerialCommands_GetCommand+0x48>)
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3304      	adds	r3, #4
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000890 	.word	0x20000890
 8002cf8:	20000330 	.word	0x20000330

08002cfc <SerialCommands_DoEvents>:

void SerialCommands_DoEvents() {
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0

	if(buf.recieveIdx == buf.processIdx) return;
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	4b1f      	ldr	r3, [pc, #124]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d08:	789b      	ldrb	r3, [r3, #2]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d035      	beq.n	8002d7a <SerialCommands_DoEvents+0x7e>

	memset(buf.command[buf.processIdx].data, 0, MAX_DATA_SIZE);
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	461a      	mov	r2, r3
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4a19      	ldr	r2, [pc, #100]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	3306      	adds	r3, #6
 8002d22:	2208      	movs	r2, #8
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f009 f93a 	bl	800bfa0 <memset>
	buf.command[buf.processIdx] = SerialCommands_ProcessPacket(rx_buffer[buf.processIdx]);
 8002d2c:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d2e:	789b      	ldrb	r3, [r3, #2]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <SerialCommands_DoEvents+0x8c>)
 8002d34:	441a      	add	r2, r3
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d38:	789b      	ldrb	r3, [r3, #2]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4911      	ldr	r1, [pc, #68]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d3e:	4603      	mov	r3, r0
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a1b      	subs	r3, r3, r0
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	18cc      	adds	r4, r1, r3
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff feb3 	bl	8002ab8 <SerialCommands_ProcessPacket>
 8002d52:	1d23      	adds	r3, r4, #4
 8002d54:	463a      	mov	r2, r7
 8002d56:	6814      	ldr	r4, [r2, #0]
 8002d58:	6850      	ldr	r0, [r2, #4]
 8002d5a:	6891      	ldr	r1, [r2, #8]
 8002d5c:	601c      	str	r4, [r3, #0]
 8002d5e:	6058      	str	r0, [r3, #4]
 8002d60:	6099      	str	r1, [r3, #8]
 8002d62:	8992      	ldrh	r2, [r2, #12]
 8002d64:	819a      	strh	r2, [r3, #12]

	buf.processIdx = SerialCommands_IncrementIdx(buf.processIdx);
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d68:	789b      	ldrb	r3, [r3, #2]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fe90 	bl	8002a90 <SerialCommands_IncrementIdx>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b03      	ldr	r3, [pc, #12]	@ (8002d84 <SerialCommands_DoEvents+0x88>)
 8002d76:	709a      	strb	r2, [r3, #2]
 8002d78:	e000      	b.n	8002d7c <SerialCommands_DoEvents+0x80>
	if(buf.recieveIdx == buf.processIdx) return;
 8002d7a:	bf00      	nop


}
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd90      	pop	{r4, r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000890 	.word	0x20000890
 8002d88:	20000790 	.word	0x20000790

08002d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <HAL_MspInit+0x44>)
 8002d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d96:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd0 <HAL_MspInit+0x44>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <HAL_MspInit+0x44>)
 8002da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_MspInit+0x44>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_MspInit+0x44>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_MspInit+0x44>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002dc2:	f003 fdb5 	bl	8006930 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0a2      	sub	sp, #136	@ 0x88
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dec:	f107 0320 	add.w	r3, r7, #32
 8002df0:	2254      	movs	r2, #84	@ 0x54
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f009 f8d3 	bl	800bfa0 <memset>
  if(hadc->Instance==ADC1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e02:	d14e      	bne.n	8002ea2 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e08:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002e0a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002e0e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e10:	f107 0320 	add.w	r3, r7, #32
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 fac5 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002e20:	f7ff fe10 	bl	8002a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e24:	4b4a      	ldr	r3, [pc, #296]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e28:	4a49      	ldr	r2, [pc, #292]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e30:	4b47      	ldr	r3, [pc, #284]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3c:	4b44      	ldr	r3, [pc, #272]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e40:	4a43      	ldr	r2, [pc, #268]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e48:	4b41      	ldr	r3, [pc, #260]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e54:	4b3e      	ldr	r3, [pc, #248]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e58:	4a3d      	ldr	r2, [pc, #244]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e60:	4b3b      	ldr	r3, [pc, #236]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOARD_TEMP_Pin;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e70:	2303      	movs	r3, #3
 8002e72:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(BOARD_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e82:	f003 fae7 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMC_CURRSENSE_Pin;
 8002e86:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e8a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 8002e94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002e98:	4619      	mov	r1, r3
 8002e9a:	482e      	ldr	r0, [pc, #184]	@ (8002f54 <HAL_ADC_MspInit+0x180>)
 8002e9c:	f003 fada 	bl	8006454 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ea0:	e051      	b.n	8002f46 <HAL_ADC_MspInit+0x172>
  else if(hadc->Instance==ADC3)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f58 <HAL_ADC_MspInit+0x184>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d14c      	bne.n	8002f46 <HAL_ADC_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002eb0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002eb2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb8:	f107 0320 	add.w	r3, r7, #32
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 fa71 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 8002ec8:	f7ff fdbc 	bl	8002a44 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8002ecc:	4b20      	ldr	r3, [pc, #128]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee8:	4a19      	ldr	r2, [pc, #100]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002eea:	f043 0310 	orr.w	r3, r3, #16
 8002eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ef0:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002efc:	4b14      	ldr	r3, [pc, #80]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f00:	4a13      	ldr	r2, [pc, #76]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002f02:	f043 0308 	orr.w	r3, r3, #8
 8002f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <HAL_ADC_MspInit+0x17c>)
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LMC_CURRSENSE_Pin;
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 8002f20:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002f24:	4619      	mov	r1, r3
 8002f26:	480d      	ldr	r0, [pc, #52]	@ (8002f5c <HAL_ADC_MspInit+0x188>)
 8002f28:	f003 fa94 	bl	8006454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBAT_SW_DIAG_Pin;
 8002f2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f30:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f32:	2303      	movs	r3, #3
 8002f34:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VBAT_SW_DIAG_GPIO_Port, &GPIO_InitStruct);
 8002f3a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4807      	ldr	r0, [pc, #28]	@ (8002f60 <HAL_ADC_MspInit+0x18c>)
 8002f42:	f003 fa87 	bl	8006454 <HAL_GPIO_Init>
}
 8002f46:	bf00      	nop
 8002f48:	3788      	adds	r7, #136	@ 0x88
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	48000400 	.word	0x48000400
 8002f58:	50000400 	.word	0x50000400
 8002f5c:	48001000 	.word	0x48001000
 8002f60:	48000c00 	.word	0x48000c00

08002f64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a15      	ldr	r2, [pc, #84]	@ (8002fd8 <HAL_DAC_MspInit+0x74>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d124      	bne.n	8002fd0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_DAC_MspInit+0x78>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	4a14      	ldr	r2, [pc, #80]	@ (8002fdc <HAL_DAC_MspInit+0x78>)
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f92:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <HAL_DAC_MspInit+0x78>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <HAL_DAC_MspInit+0x78>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8002fdc <HAL_DAC_MspInit+0x78>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002faa:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <HAL_DAC_MspInit+0x78>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = WHEEL_MOTOR_CURRENT_LIMIT_Pin;
 8002fb6:	2340      	movs	r3, #64	@ 0x40
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WHEEL_MOTOR_CURRENT_LIMIT_GPIO_Port, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fcc:	f003 fa42 	bl	8006454 <HAL_GPIO_Init>

  /* USER CODE END DAC2_MspInit 1 */

  }

}
 8002fd0:	bf00      	nop
 8002fd2:	3728      	adds	r7, #40	@ 0x28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	50000c00 	.word	0x50000c00
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b09e      	sub	sp, #120	@ 0x78
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	2254      	movs	r2, #84	@ 0x54
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f008 ffcd 	bl	800bfa0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <HAL_FDCAN_MspInit+0xb8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d13f      	bne.n	8003090 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003014:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003016:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800301a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4618      	mov	r0, r3
 8003022:	f004 f9bf 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800302c:	f7ff fd0a 	bl	8002a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003030:	4b1a      	ldr	r3, [pc, #104]	@ (800309c <HAL_FDCAN_MspInit+0xbc>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	4a19      	ldr	r2, [pc, #100]	@ (800309c <HAL_FDCAN_MspInit+0xbc>)
 8003036:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800303a:	6593      	str	r3, [r2, #88]	@ 0x58
 800303c:	4b17      	ldr	r3, [pc, #92]	@ (800309c <HAL_FDCAN_MspInit+0xbc>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003048:	4b14      	ldr	r3, [pc, #80]	@ (800309c <HAL_FDCAN_MspInit+0xbc>)
 800304a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304c:	4a13      	ldr	r2, [pc, #76]	@ (800309c <HAL_FDCAN_MspInit+0xbc>)
 800304e:	f043 0308 	orr.w	r3, r3, #8
 8003052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003054:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_FDCAN_MspInit+0xbc>)
 8003056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003060:	2303      	movs	r3, #3
 8003062:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003070:	2309      	movs	r3, #9
 8003072:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003074:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003078:	4619      	mov	r1, r3
 800307a:	4809      	ldr	r0, [pc, #36]	@ (80030a0 <HAL_FDCAN_MspInit+0xc0>)
 800307c:	f003 f9ea 	bl	8006454 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	2015      	movs	r0, #21
 8003086:	f001 fd84 	bl	8004b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800308a:	2015      	movs	r0, #21
 800308c:	f001 fd9b 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8003090:	bf00      	nop
 8003092:	3778      	adds	r7, #120	@ 0x78
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40006400 	.word	0x40006400
 800309c:	40021000 	.word	0x40021000
 80030a0:	48000c00 	.word	0x48000c00

080030a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	@ 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a17      	ldr	r2, [pc, #92]	@ (8003120 <HAL_SPI_MspInit+0x7c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d127      	bne.n	8003116 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030c6:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <HAL_SPI_MspInit+0x80>)
 80030c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ca:	4a16      	ldr	r2, [pc, #88]	@ (8003124 <HAL_SPI_MspInit+0x80>)
 80030cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80030d2:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <HAL_SPI_MspInit+0x80>)
 80030d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030de:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_SPI_MspInit+0x80>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e2:	4a10      	ldr	r2, [pc, #64]	@ (8003124 <HAL_SPI_MspInit+0x80>)
 80030e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003124 <HAL_SPI_MspInit+0x80>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80030f6:	231c      	movs	r3, #28
 80030f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2302      	movs	r3, #2
 80030fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003106:	2305      	movs	r3, #5
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800310a:	f107 0314 	add.w	r3, r7, #20
 800310e:	4619      	mov	r1, r3
 8003110:	4805      	ldr	r0, [pc, #20]	@ (8003128 <HAL_SPI_MspInit+0x84>)
 8003112:	f003 f99f 	bl	8006454 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003116:	bf00      	nop
 8003118:	3728      	adds	r7, #40	@ 0x28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40013000 	.word	0x40013000
 8003124:	40021000 	.word	0x40021000
 8003128:	48001800 	.word	0x48001800

0800312c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	@ 0x38
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a48      	ldr	r2, [pc, #288]	@ (800326c <HAL_TIM_Base_MspInit+0x140>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10c      	bne.n	8003168 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800314e:	4b48      	ldr	r3, [pc, #288]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	4a47      	ldr	r2, [pc, #284]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003154:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003158:	6613      	str	r3, [r2, #96]	@ 0x60
 800315a:	4b45      	ldr	r3, [pc, #276]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 800315c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003166:	e07d      	b.n	8003264 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d130      	bne.n	80031d4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003172:	4b3f      	ldr	r3, [pc, #252]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	4a3e      	ldr	r2, [pc, #248]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6593      	str	r3, [r2, #88]	@ 0x58
 800317e:	4b3c      	ldr	r3, [pc, #240]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800318a:	4b39      	ldr	r3, [pc, #228]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	4a38      	ldr	r2, [pc, #224]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003196:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LMC_HALL1_Pin|LMC_HALL2_Pin|LMC_HALL3_Pin;
 80031a2:	2398      	movs	r3, #152	@ 0x98
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80031b2:	2302      	movs	r3, #2
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ba:	4619      	mov	r1, r3
 80031bc:	482d      	ldr	r0, [pc, #180]	@ (8003274 <HAL_TIM_Base_MspInit+0x148>)
 80031be:	f003 f949 	bl	8006454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2102      	movs	r1, #2
 80031c6:	201c      	movs	r0, #28
 80031c8:	f001 fce3 	bl	8004b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031cc:	201c      	movs	r0, #28
 80031ce:	f001 fcfa 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
}
 80031d2:	e047      	b.n	8003264 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM5)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a27      	ldr	r2, [pc, #156]	@ (8003278 <HAL_TIM_Base_MspInit+0x14c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d131      	bne.n	8003242 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031de:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ea:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 80031fc:	f043 0320 	orr.w	r3, r3, #32
 8003200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003202:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RMC_HALL2_Pin|RMC_HALL3_Pin|RMC_HALL1_Pin;
 800320e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2300      	movs	r3, #0
 800321e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8003220:	2306      	movs	r3, #6
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003228:	4619      	mov	r1, r3
 800322a:	4814      	ldr	r0, [pc, #80]	@ (800327c <HAL_TIM_Base_MspInit+0x150>)
 800322c:	f003 f912 	bl	8006454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2102      	movs	r1, #2
 8003234:	2032      	movs	r0, #50	@ 0x32
 8003236:	f001 fcac 	bl	8004b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800323a:	2032      	movs	r0, #50	@ 0x32
 800323c:	f001 fcc3 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
}
 8003240:	e010      	b.n	8003264 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0e      	ldr	r2, [pc, #56]	@ (8003280 <HAL_TIM_Base_MspInit+0x154>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d10b      	bne.n	8003264 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800324c:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 800324e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003250:	4a07      	ldr	r2, [pc, #28]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 8003252:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003256:	6613      	str	r3, [r2, #96]	@ 0x60
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_TIM_Base_MspInit+0x144>)
 800325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	bf00      	nop
 8003266:	3738      	adds	r7, #56	@ 0x38
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40021000 	.word	0x40021000
 8003274:	48000c00 	.word	0x48000c00
 8003278:	40000c00 	.word	0x40000c00
 800327c:	48001400 	.word	0x48001400
 8003280:	40013400 	.word	0x40013400

08003284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	@ 0x30
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a64      	ldr	r2, [pc, #400]	@ (8003434 <HAL_TIM_MspPostInit+0x1b0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d166      	bne.n	8003374 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a6:	4b64      	ldr	r3, [pc, #400]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	4a63      	ldr	r2, [pc, #396]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032b2:	4b61      	ldr	r3, [pc, #388]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	4b5e      	ldr	r3, [pc, #376]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032d6:	4b58      	ldr	r3, [pc, #352]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	4a57      	ldr	r2, [pc, #348]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032dc:	f043 0310 	orr.w	r3, r3, #16
 80032e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032e2:	4b55      	ldr	r3, [pc, #340]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_AL_RMC_Pin;
 80032ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	2302      	movs	r3, #2
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003300:	2304      	movs	r3, #4
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	4619      	mov	r1, r3
 800330a:	484c      	ldr	r0, [pc, #304]	@ (800343c <HAL_TIM_MspPostInit+0x1b8>)
 800330c:	f003 f8a2 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_AH_RMC_Pin|PWM_BH_RMC_Pin|PWM_CH_RMC_Pin;
 8003310:	2307      	movs	r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003320:	2302      	movs	r3, #2
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	4844      	ldr	r0, [pc, #272]	@ (800343c <HAL_TIM_MspPostInit+0x1b8>)
 800332c:	f003 f892 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_BL_RMC_Pin;
 8003330:	2301      	movs	r3, #1
 8003332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2302      	movs	r3, #2
 8003336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	2300      	movs	r3, #0
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003340:	2306      	movs	r3, #6
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_BL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003344:	f107 031c 	add.w	r3, r7, #28
 8003348:	4619      	mov	r1, r3
 800334a:	483d      	ldr	r0, [pc, #244]	@ (8003440 <HAL_TIM_MspPostInit+0x1bc>)
 800334c:	f003 f882 	bl	8006454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_CL_RMC_Pin;
 8003350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003362:	2302      	movs	r3, #2
 8003364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003366:	f107 031c 	add.w	r3, r7, #28
 800336a:	4619      	mov	r1, r3
 800336c:	4835      	ldr	r0, [pc, #212]	@ (8003444 <HAL_TIM_MspPostInit+0x1c0>)
 800336e:	f003 f871 	bl	8006454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003372:	e05a      	b.n	800342a <HAL_TIM_MspPostInit+0x1a6>
  else if(htim->Instance==TIM8)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a33      	ldr	r2, [pc, #204]	@ (8003448 <HAL_TIM_MspPostInit+0x1c4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d155      	bne.n	800342a <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800337e:	4b2e      	ldr	r3, [pc, #184]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	4a2d      	ldr	r2, [pc, #180]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800338a:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 800338c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339a:	4a27      	ldr	r2, [pc, #156]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033a2:	4b25      	ldr	r3, [pc, #148]	@ (8003438 <HAL_TIM_MspPostInit+0x1b4>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_LMC_Pin|PWM_AL_LMC_Pin|PWM_BL_LMC_Pin|PWM_CL_LMC_Pin;
 80033ae:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 80033b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033bc:	2300      	movs	r3, #0
 80033be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80033c0:	2304      	movs	r3, #4
 80033c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	4619      	mov	r1, r3
 80033ca:	481c      	ldr	r0, [pc, #112]	@ (800343c <HAL_TIM_MspPostInit+0x1b8>)
 80033cc:	f003 f842 	bl	8006454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AH_LMC_Pin;
 80033d0:	2340      	movs	r3, #64	@ 0x40
 80033d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80033e0:	2305      	movs	r3, #5
 80033e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AH_LMC_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f107 031c 	add.w	r3, r7, #28
 80033e8:	4619      	mov	r1, r3
 80033ea:	4815      	ldr	r0, [pc, #84]	@ (8003440 <HAL_TIM_MspPostInit+0x1bc>)
 80033ec:	f003 f832 	bl	8006454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_CH_LMC_Pin;
 80033f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003402:	230a      	movs	r3, #10
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	480c      	ldr	r0, [pc, #48]	@ (8003440 <HAL_TIM_MspPostInit+0x1bc>)
 800340e:	f003 f821 	bl	8006454 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <HAL_TIM_MspPostInit+0x1c8>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a0d      	ldr	r2, [pc, #52]	@ (800344c <HAL_TIM_MspPostInit+0x1c8>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341c:	6053      	str	r3, [r2, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800341e:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_TIM_MspPostInit+0x1c8>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <HAL_TIM_MspPostInit+0x1c8>)
 8003424:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003428:	6053      	str	r3, [r2, #4]
}
 800342a:	bf00      	nop
 800342c:	3730      	adds	r7, #48	@ 0x30
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40021000 	.word	0x40021000
 800343c:	48000800 	.word	0x48000800
 8003440:	48000400 	.word	0x48000400
 8003444:	48001000 	.word	0x48001000
 8003448:	40013400 	.word	0x40013400
 800344c:	40010000 	.word	0x40010000

08003450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b09e      	sub	sp, #120	@ 0x78
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	2254      	movs	r2, #84	@ 0x54
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f008 fd95 	bl	800bfa0 <memset>
  if(huart->Instance==USART2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a38      	ldr	r2, [pc, #224]	@ (800355c <HAL_UART_MspInit+0x10c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d168      	bne.n	8003552 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003480:	2302      	movs	r3, #2
 8003482:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	4618      	mov	r0, r3
 800348e:	f003 ff89 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003498:	f7ff fad4 	bl	8002a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800349c:	4b30      	ldr	r3, [pc, #192]	@ (8003560 <HAL_UART_MspInit+0x110>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003560 <HAL_UART_MspInit+0x110>)
 80034a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80034a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <HAL_UART_MspInit+0x110>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <HAL_UART_MspInit+0x110>)
 80034b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b8:	4a29      	ldr	r2, [pc, #164]	@ (8003560 <HAL_UART_MspInit+0x110>)
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034c0:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <HAL_UART_MspInit+0x110>)
 80034c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = AUX2_TX_Pin|AUX2_RX_Pin;
 80034cc:	2360      	movs	r3, #96	@ 0x60
 80034ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034dc:	2307      	movs	r3, #7
 80034de:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80034e4:	4619      	mov	r1, r3
 80034e6:	481f      	ldr	r0, [pc, #124]	@ (8003564 <HAL_UART_MspInit+0x114>)
 80034e8:	f002 ffb4 	bl	8006454 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80034ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <HAL_UART_MspInit+0x118>)
 80034ee:	4a1f      	ldr	r2, [pc, #124]	@ (800356c <HAL_UART_MspInit+0x11c>)
 80034f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80034f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <HAL_UART_MspInit+0x118>)
 80034f4:	221a      	movs	r2, #26
 80034f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_UART_MspInit+0x118>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <HAL_UART_MspInit+0x118>)
 8003500:	2200      	movs	r2, #0
 8003502:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003504:	4b18      	ldr	r3, [pc, #96]	@ (8003568 <HAL_UART_MspInit+0x118>)
 8003506:	2280      	movs	r2, #128	@ 0x80
 8003508:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800350a:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <HAL_UART_MspInit+0x118>)
 800350c:	2200      	movs	r2, #0
 800350e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003510:	4b15      	ldr	r3, [pc, #84]	@ (8003568 <HAL_UART_MspInit+0x118>)
 8003512:	2200      	movs	r2, #0
 8003514:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003516:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <HAL_UART_MspInit+0x118>)
 8003518:	2200      	movs	r2, #0
 800351a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800351c:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <HAL_UART_MspInit+0x118>)
 800351e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003522:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003524:	4810      	ldr	r0, [pc, #64]	@ (8003568 <HAL_UART_MspInit+0x118>)
 8003526:	f001 fddf 	bl	80050e8 <HAL_DMA_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003530:	f7ff fa88 	bl	8002a44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0c      	ldr	r2, [pc, #48]	@ (8003568 <HAL_UART_MspInit+0x118>)
 8003538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800353c:	4a0a      	ldr	r2, [pc, #40]	@ (8003568 <HAL_UART_MspInit+0x118>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	2026      	movs	r0, #38	@ 0x26
 8003548:	f001 fb23 	bl	8004b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800354c:	2026      	movs	r0, #38	@ 0x26
 800354e:	f001 fb3a 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003552:	bf00      	nop
 8003554:	3778      	adds	r7, #120	@ 0x78
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40004400 	.word	0x40004400
 8003560:	40021000 	.word	0x40021000
 8003564:	48000c00 	.word	0x48000c00
 8003568:	200006e4 	.word	0x200006e4
 800356c:	40020008 	.word	0x40020008

08003570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <NMI_Handler+0x4>

08003578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <HardFault_Handler+0x4>

08003580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <MemManage_Handler+0x4>

08003588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <BusFault_Handler+0x4>

08003590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <UsageFault_Handler+0x4>

08003598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c6:	f000 f8c9 	bl	800375c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}

080035ce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 80035d2:	2001      	movs	r0, #1
 80035d4:	f003 f8f0 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}

080035dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035e0:	4802      	ldr	r0, [pc, #8]	@ (80035ec <DMA1_Channel1_IRQHandler+0x10>)
 80035e2:	f001 ff64 	bl	80054ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200006e4 	.word	0x200006e4

080035f0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80035f4:	4802      	ldr	r0, [pc, #8]	@ (8003600 <FDCAN1_IT0_IRQHandler+0x10>)
 80035f6:	f002 fcb7 	bl	8005f68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000458 	.word	0x20000458

08003604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003608:	4802      	ldr	r0, [pc, #8]	@ (8003614 <TIM2_IRQHandler+0x10>)
 800360a:	f005 fad5 	bl	8008bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2000056c 	.word	0x2000056c

08003618 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800361c:	4802      	ldr	r0, [pc, #8]	@ (8003628 <USART2_IRQHandler+0x10>)
 800361e:	f007 f8ab 	bl	800a778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000650 	.word	0x20000650

0800362c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003630:	4802      	ldr	r0, [pc, #8]	@ (800363c <TIM5_IRQHandler+0x10>)
 8003632:	f005 fac1 	bl	8008bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200005b8 	.word	0x200005b8

08003640 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003644:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <SystemInit+0x20>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	4a05      	ldr	r2, [pc, #20]	@ (8003660 <SystemInit+0x20>)
 800364c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003664:	480d      	ldr	r0, [pc, #52]	@ (800369c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003666:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003668:	f7ff ffea 	bl	8003640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800366c:	480c      	ldr	r0, [pc, #48]	@ (80036a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800366e:	490d      	ldr	r1, [pc, #52]	@ (80036a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003670:	4a0d      	ldr	r2, [pc, #52]	@ (80036a8 <LoopForever+0xe>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003674:	e002      	b.n	800367c <LoopCopyDataInit>

08003676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367a:	3304      	adds	r3, #4

0800367c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800367c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003680:	d3f9      	bcc.n	8003676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003684:	4c0a      	ldr	r4, [pc, #40]	@ (80036b0 <LoopForever+0x16>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003688:	e001      	b.n	800368e <LoopFillZerobss>

0800368a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800368c:	3204      	adds	r2, #4

0800368e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003690:	d3fb      	bcc.n	800368a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003692:	f008 fc8d 	bl	800bfb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003696:	f7fe fb07 	bl	8001ca8 <main>

0800369a <LoopForever>:

LoopForever:
    b LoopForever
 800369a:	e7fe      	b.n	800369a <LoopForever>
  ldr   r0, =_estack
 800369c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a4:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80036a8:	0800c09c 	.word	0x0800c09c
  ldr r2, =_sbss
 80036ac:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80036b0:	20000978 	.word	0x20000978

080036b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036b4:	e7fe      	b.n	80036b4 <ADC1_2_IRQHandler>

080036b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c0:	2003      	movs	r0, #3
 80036c2:	f001 fa5b 	bl	8004b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036c6:	200f      	movs	r0, #15
 80036c8:	f000 f80e 	bl	80036e8 <HAL_InitTick>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	71fb      	strb	r3, [r7, #7]
 80036d6:	e001      	b.n	80036dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036d8:	f7ff fb58 	bl	8002d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036dc:	79fb      	ldrb	r3, [r7, #7]

}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80036f4:	4b16      	ldr	r3, [pc, #88]	@ (8003750 <HAL_InitTick+0x68>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d022      	beq.n	8003742 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80036fc:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <HAL_InitTick+0x6c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b13      	ldr	r3, [pc, #76]	@ (8003750 <HAL_InitTick+0x68>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003708:	fbb1 f3f3 	udiv	r3, r1, r3
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	4618      	mov	r0, r3
 8003712:	f001 fa66 	bl	8004be2 <HAL_SYSTICK_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10f      	bne.n	800373c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	d809      	bhi.n	8003736 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003722:	2200      	movs	r2, #0
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	f04f 30ff 	mov.w	r0, #4294967295
 800372a:	f001 fa32 	bl	8004b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800372e:	4a0a      	ldr	r2, [pc, #40]	@ (8003758 <HAL_InitTick+0x70>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e007      	b.n	8003746 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e004      	b.n	8003746 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e001      	b.n	8003746 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000348 	.word	0x20000348
 8003754:	20000340 	.word	0x20000340
 8003758:	20000344 	.word	0x20000344

0800375c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <HAL_IncTick+0x1c>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_IncTick+0x20>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4413      	add	r3, r2
 800376a:	4a03      	ldr	r2, [pc, #12]	@ (8003778 <HAL_IncTick+0x1c>)
 800376c:	6013      	str	r3, [r2, #0]
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	20000974 	.word	0x20000974
 800377c:	20000348 	.word	0x20000348

08003780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return uwTick;
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_GetTick+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000974 	.word	0x20000974

08003798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff ffee 	bl	8003780 <HAL_GetTick>
 80037a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d004      	beq.n	80037bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80037b2:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_Delay+0x40>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037bc:	bf00      	nop
 80037be:	f7ff ffdf 	bl	8003780 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d8f7      	bhi.n	80037be <HAL_Delay+0x26>
  {
  }
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000348 	.word	0x20000348

080037dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	609a      	str	r2, [r3, #8]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3360      	adds	r3, #96	@ 0x60
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <LL_ADC_SetOffset+0x44>)
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	4313      	orrs	r3, r2
 8003874:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	03fff000 	.word	0x03fff000

0800388c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3360      	adds	r3, #96	@ 0x60
 800389a:	461a      	mov	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3360      	adds	r3, #96	@ 0x60
 80038c8:	461a      	mov	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	431a      	orrs	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b087      	sub	sp, #28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3360      	adds	r3, #96	@ 0x60
 80038fe:	461a      	mov	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	431a      	orrs	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3360      	adds	r3, #96	@ 0x60
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	431a      	orrs	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	615a      	str	r2, [r3, #20]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3330      	adds	r3, #48	@ 0x30
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	4413      	add	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	211f      	movs	r1, #31
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0e9b      	lsrs	r3, r3, #26
 80039b8:	f003 011f 	and.w	r1, r3, #31
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	431a      	orrs	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3314      	adds	r3, #20
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	0e5b      	lsrs	r3, r3, #25
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	4413      	add	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	0d1b      	lsrs	r3, r3, #20
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	2107      	movs	r1, #7
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	0d1b      	lsrs	r3, r3, #20
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0318 	and.w	r3, r3, #24
 8003a52:	4908      	ldr	r1, [pc, #32]	@ (8003a74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a54:	40d9      	lsrs	r1, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	400b      	ands	r3, r1
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	0007ffff 	.word	0x0007ffff

08003a78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6093      	str	r3, [r2, #8]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab0:	d101      	bne.n	8003ab6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ad4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ad8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_IsEnabled+0x18>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_ADC_IsEnabled+0x1a>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d101      	bne.n	8003b78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b089      	sub	sp, #36	@ 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e1a9      	b.n	8003ef6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff f90f 	bl	8002dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff67 	bl	8003a9c <LL_ADC_IsDeepPowerDownEnabled>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff4d 	bl	8003a78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff82 	bl	8003aec <LL_ADC_IsInternalRegulatorEnabled>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d115      	bne.n	8003c1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff66 	bl	8003ac4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf8:	4b9c      	ldr	r3, [pc, #624]	@ (8003e6c <HAL_ADC_Init+0x2e4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	4a9c      	ldr	r2, [pc, #624]	@ (8003e70 <HAL_ADC_Init+0x2e8>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c0c:	e002      	b.n	8003c14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f9      	bne.n	8003c0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ff64 	bl	8003aec <LL_ADC_IsInternalRegulatorEnabled>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10d      	bne.n	8003c46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	f043 0210 	orr.w	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3a:	f043 0201 	orr.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ff75 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003c50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 8142 	bne.w	8003ee4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 813e 	bne.w	8003ee4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003c70:	f043 0202 	orr.w	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff49 	bl	8003b14 <LL_ADC_IsEnabled>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d141      	bne.n	8003d0c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c90:	d004      	beq.n	8003c9c <HAL_ADC_Init+0x114>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a77      	ldr	r2, [pc, #476]	@ (8003e74 <HAL_ADC_Init+0x2ec>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d10f      	bne.n	8003cbc <HAL_ADC_Init+0x134>
 8003c9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ca0:	f7ff ff38 	bl	8003b14 <LL_ADC_IsEnabled>
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	4873      	ldr	r0, [pc, #460]	@ (8003e74 <HAL_ADC_Init+0x2ec>)
 8003ca8:	f7ff ff34 	bl	8003b14 <LL_ADC_IsEnabled>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4323      	orrs	r3, r4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e012      	b.n	8003ce2 <HAL_ADC_Init+0x15a>
 8003cbc:	486e      	ldr	r0, [pc, #440]	@ (8003e78 <HAL_ADC_Init+0x2f0>)
 8003cbe:	f7ff ff29 	bl	8003b14 <LL_ADC_IsEnabled>
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	486d      	ldr	r0, [pc, #436]	@ (8003e7c <HAL_ADC_Init+0x2f4>)
 8003cc6:	f7ff ff25 	bl	8003b14 <LL_ADC_IsEnabled>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	431c      	orrs	r4, r3
 8003cce:	486c      	ldr	r0, [pc, #432]	@ (8003e80 <HAL_ADC_Init+0x2f8>)
 8003cd0:	f7ff ff20 	bl	8003b14 <LL_ADC_IsEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4323      	orrs	r3, r4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf0c      	ite	eq
 8003cdc:	2301      	moveq	r3, #1
 8003cde:	2300      	movne	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cee:	d004      	beq.n	8003cfa <HAL_ADC_Init+0x172>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a5f      	ldr	r2, [pc, #380]	@ (8003e74 <HAL_ADC_Init+0x2ec>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_Init+0x176>
 8003cfa:	4a62      	ldr	r2, [pc, #392]	@ (8003e84 <HAL_ADC_Init+0x2fc>)
 8003cfc:	e000      	b.n	8003d00 <HAL_ADC_Init+0x178>
 8003cfe:	4a62      	ldr	r2, [pc, #392]	@ (8003e88 <HAL_ADC_Init+0x300>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7ff fd68 	bl	80037dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	7f5b      	ldrb	r3, [r3, #29]
 8003d10:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d16:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003d1c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003d22:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d2a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d106      	bne.n	8003d48 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	045b      	lsls	r3, r3, #17
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	4b48      	ldr	r3, [pc, #288]	@ (8003e8c <HAL_ADC_Init+0x304>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	69b9      	ldr	r1, [r7, #24]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fee4 	bl	8003b60 <LL_ADC_INJ_IsConversionOngoing>
 8003d98:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d17f      	bne.n	8003ea0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d17c      	bne.n	8003ea0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003daa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003db2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dc2:	f023 0302 	bic.w	r3, r3, #2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	69b9      	ldr	r1, [r7, #24]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d017      	beq.n	8003e08 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003de6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003df0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003df4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6911      	ldr	r1, [r2, #16]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003e06:	e013      	b.n	8003e30 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e2c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d12a      	bne.n	8003e90 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e56:	4311      	orrs	r1, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	611a      	str	r2, [r3, #16]
 8003e6a:	e019      	b.n	8003ea0 <HAL_ADC_Init+0x318>
 8003e6c:	20000340 	.word	0x20000340
 8003e70:	053e2d63 	.word	0x053e2d63
 8003e74:	50000100 	.word	0x50000100
 8003e78:	50000400 	.word	0x50000400
 8003e7c:	50000500 	.word	0x50000500
 8003e80:	50000600 	.word	0x50000600
 8003e84:	50000300 	.word	0x50000300
 8003e88:	50000700 	.word	0x50000700
 8003e8c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f023 010f 	bic.w	r1, r3, #15
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	1e5a      	subs	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ec0:	e007      	b.n	8003ed2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 020f 	bic.w	r2, r2, #15
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ee2:	e007      	b.n	8003ef4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	f043 0210 	orr.w	r2, r3, #16
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	@ 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	bf00      	nop

08003f00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b0b6      	sub	sp, #216	@ 0xd8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x24>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	f000 bc13 	b.w	800474a <HAL_ADC_ConfigChannel+0x84a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fe02 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f040 83f3 	bne.w	8004724 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f7ff fd18 	bl	8003980 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fdf0 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003f5a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fdfc 	bl	8003b60 <LL_ADC_INJ_IsConversionOngoing>
 8003f68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f040 81d9 	bne.w	8004328 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 81d4 	bne.w	8004328 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f88:	d10f      	bne.n	8003faa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	4619      	mov	r1, r3
 8003f96:	f7ff fd1f 	bl	80039d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fcd9 	bl	800395a <LL_ADC_SetSamplingTimeCommonConfig>
 8003fa8:	e00e      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f7ff fd0e 	bl	80039d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fcc9 	bl	800395a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	08db      	lsrs	r3, r3, #3
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d022      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6919      	ldr	r1, [r3, #16]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ffa:	f7ff fc23 	bl	8003844 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6919      	ldr	r1, [r3, #16]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	461a      	mov	r2, r3
 800400c:	f7ff fc6f 	bl	80038ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800401c:	2b01      	cmp	r3, #1
 800401e:	d102      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x126>
 8004020:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004024:	e000      	b.n	8004028 <HAL_ADC_ConfigChannel+0x128>
 8004026:	2300      	movs	r3, #0
 8004028:	461a      	mov	r2, r3
 800402a:	f7ff fc7b 	bl	8003924 <LL_ADC_SetOffsetSaturation>
 800402e:	e17b      	b.n	8004328 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fc28 	bl	800388c <LL_ADC_GetOffsetChannel>
 800403c:	4603      	mov	r3, r0
 800403e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <HAL_ADC_ConfigChannel+0x15c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fc1d 	bl	800388c <LL_ADC_GetOffsetChannel>
 8004052:	4603      	mov	r3, r0
 8004054:	0e9b      	lsrs	r3, r3, #26
 8004056:	f003 021f 	and.w	r2, r3, #31
 800405a:	e01e      	b.n	800409a <HAL_ADC_ConfigChannel+0x19a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fc12 	bl	800388c <LL_ADC_GetOffsetChannel>
 8004068:	4603      	mov	r3, r0
 800406a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800407a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800407e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004082:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800408a:	2320      	movs	r3, #32
 800408c:	e004      	b.n	8004098 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800408e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x1b2>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	0e9b      	lsrs	r3, r3, #26
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	e018      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x1e4>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80040c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80040ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80040d6:	2320      	movs	r3, #32
 80040d8:	e004      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80040da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d106      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fbe1 	bl	80038b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fbc5 	bl	800388c <LL_ADC_GetOffsetChannel>
 8004102:	4603      	mov	r3, r0
 8004104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x222>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fbba 	bl	800388c <LL_ADC_GetOffsetChannel>
 8004118:	4603      	mov	r3, r0
 800411a:	0e9b      	lsrs	r3, r3, #26
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	e01e      	b.n	8004160 <HAL_ADC_ConfigChannel+0x260>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2101      	movs	r1, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fbaf 	bl	800388c <LL_ADC_GetOffsetChannel>
 800412e:	4603      	mov	r3, r0
 8004130:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004150:	2320      	movs	r3, #32
 8004152:	e004      	b.n	800415e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x278>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0e9b      	lsrs	r3, r3, #26
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	e018      	b.n	80041aa <HAL_ADC_ConfigChannel+0x2aa>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800418c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004190:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004194:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800419c:	2320      	movs	r3, #32
 800419e:	e004      	b.n	80041aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80041a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d106      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	2101      	movs	r1, #1
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fb7e 	bl	80038b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2102      	movs	r1, #2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fb62 	bl	800388c <LL_ADC_GetOffsetChannel>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x2e8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fb57 	bl	800388c <LL_ADC_GetOffsetChannel>
 80041de:	4603      	mov	r3, r0
 80041e0:	0e9b      	lsrs	r3, r3, #26
 80041e2:	f003 021f 	and.w	r2, r3, #31
 80041e6:	e01e      	b.n	8004226 <HAL_ADC_ConfigChannel+0x326>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2102      	movs	r1, #2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fb4c 	bl	800388c <LL_ADC_GetOffsetChannel>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004206:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800420a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800420e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004216:	2320      	movs	r3, #32
 8004218:	e004      	b.n	8004224 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800421a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <HAL_ADC_ConfigChannel+0x33e>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	0e9b      	lsrs	r3, r3, #26
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	e016      	b.n	800426c <HAL_ADC_ConfigChannel+0x36c>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800424a:	fa93 f3a3 	rbit	r3, r3
 800424e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004250:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004252:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004256:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800425e:	2320      	movs	r3, #32
 8004260:	e004      	b.n	800426c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004262:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800426c:	429a      	cmp	r2, r3
 800426e:	d106      	bne.n	800427e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2200      	movs	r2, #0
 8004276:	2102      	movs	r1, #2
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fb1d 	bl	80038b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2103      	movs	r1, #3
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fb01 	bl	800388c <LL_ADC_GetOffsetChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x3aa>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2103      	movs	r1, #3
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff faf6 	bl	800388c <LL_ADC_GetOffsetChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	0e9b      	lsrs	r3, r3, #26
 80042a4:	f003 021f 	and.w	r2, r3, #31
 80042a8:	e017      	b.n	80042da <HAL_ADC_ConfigChannel+0x3da>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2103      	movs	r1, #3
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff faeb 	bl	800388c <LL_ADC_GetOffsetChannel>
 80042b6:	4603      	mov	r3, r0
 80042b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042bc:	fa93 f3a3 	rbit	r3, r3
 80042c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80042c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80042c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80042cc:	2320      	movs	r3, #32
 80042ce:	e003      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80042d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x3f2>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	0e9b      	lsrs	r3, r3, #26
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	e011      	b.n	8004316 <HAL_ADC_ConfigChannel+0x416>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004302:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800430a:	2320      	movs	r3, #32
 800430c:	e003      	b.n	8004316 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800430e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004316:	429a      	cmp	r2, r3
 8004318:	d106      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	2103      	movs	r1, #3
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fac8 	bl	80038b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fbf1 	bl	8003b14 <LL_ADC_IsEnabled>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 813d 	bne.w	80045b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	461a      	mov	r2, r3
 8004348:	f7ff fb72 	bl	8003a30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4aa2      	ldr	r2, [pc, #648]	@ (80045dc <HAL_ADC_ConfigChannel+0x6dc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	f040 812e 	bne.w	80045b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x480>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	3301      	adds	r3, #1
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2b09      	cmp	r3, #9
 8004376:	bf94      	ite	ls
 8004378:	2301      	movls	r3, #1
 800437a:	2300      	movhi	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e019      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x4b4>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800438e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004390:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004398:	2320      	movs	r3, #32
 800439a:	e003      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800439c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2b09      	cmp	r3, #9
 80043ac:	bf94      	ite	ls
 80043ae:	2301      	movls	r3, #1
 80043b0:	2300      	movhi	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d079      	beq.n	80044ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x4d4>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	3301      	adds	r3, #1
 80043cc:	069b      	lsls	r3, r3, #26
 80043ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043d2:	e015      	b.n	8004400 <HAL_ADC_ConfigChannel+0x500>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80043ec:	2320      	movs	r3, #32
 80043ee:	e003      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80043f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	069b      	lsls	r3, r3, #26
 80043fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x520>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0e9b      	lsrs	r3, r3, #26
 8004412:	3301      	adds	r3, #1
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	e017      	b.n	8004450 <HAL_ADC_ConfigChannel+0x550>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800442e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004430:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004438:	2320      	movs	r3, #32
 800443a:	e003      	b.n	8004444 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800443c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2101      	movs	r1, #1
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	ea42 0103 	orr.w	r1, r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x576>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	0e9b      	lsrs	r3, r3, #26
 8004466:	3301      	adds	r3, #1
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	051b      	lsls	r3, r3, #20
 8004474:	e018      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x5a8>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800448e:	2320      	movs	r3, #32
 8004490:	e003      	b.n	800449a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004494:	fab3 f383 	clz	r3, r3
 8004498:	b2db      	uxtb	r3, r3
 800449a:	3301      	adds	r3, #1
 800449c:	f003 021f 	and.w	r2, r3, #31
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044a8:	430b      	orrs	r3, r1
 80044aa:	e07e      	b.n	80045aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d107      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x5c8>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	0e9b      	lsrs	r3, r3, #26
 80044be:	3301      	adds	r3, #1
 80044c0:	069b      	lsls	r3, r3, #26
 80044c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044c6:	e015      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x5f4>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d0:	fa93 f3a3 	rbit	r3, r3
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80044d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80044e0:	2320      	movs	r3, #32
 80044e2:	e003      	b.n	80044ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3301      	adds	r3, #1
 80044ee:	069b      	lsls	r3, r3, #26
 80044f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x614>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0e9b      	lsrs	r3, r3, #26
 8004506:	3301      	adds	r3, #1
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	e017      	b.n	8004544 <HAL_ADC_ConfigChannel+0x644>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	fa93 f3a3 	rbit	r3, r3
 8004520:	61fb      	str	r3, [r7, #28]
  return result;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800452c:	2320      	movs	r3, #32
 800452e:	e003      	b.n	8004538 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	fab3 f383 	clz	r3, r3
 8004536:	b2db      	uxtb	r3, r3
 8004538:	3301      	adds	r3, #1
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2101      	movs	r1, #1
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	ea42 0103 	orr.w	r1, r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x670>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	0e9b      	lsrs	r3, r3, #26
 800455a:	3301      	adds	r3, #1
 800455c:	f003 021f 	and.w	r2, r3, #31
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	3b1e      	subs	r3, #30
 8004568:	051b      	lsls	r3, r3, #20
 800456a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800456e:	e01b      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x6a8>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	613b      	str	r3, [r7, #16]
  return result;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e003      	b.n	8004594 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3301      	adds	r3, #1
 8004596:	f003 021f 	and.w	r2, r3, #31
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	3b1e      	subs	r3, #30
 80045a2:	051b      	lsls	r3, r3, #20
 80045a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7ff fa12 	bl	80039d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80be 	beq.w	800473e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045ca:	d004      	beq.n	80045d6 <HAL_ADC_ConfigChannel+0x6d6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a04      	ldr	r2, [pc, #16]	@ (80045e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d10a      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x6ec>
 80045d6:	4b04      	ldr	r3, [pc, #16]	@ (80045e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80045d8:	e009      	b.n	80045ee <HAL_ADC_ConfigChannel+0x6ee>
 80045da:	bf00      	nop
 80045dc:	407f0000 	.word	0x407f0000
 80045e0:	80080000 	.word	0x80080000
 80045e4:	50000100 	.word	0x50000100
 80045e8:	50000300 	.word	0x50000300
 80045ec:	4b59      	ldr	r3, [pc, #356]	@ (8004754 <HAL_ADC_ConfigChannel+0x854>)
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff f91a 	bl	8003828 <LL_ADC_GetCommonPathInternalCh>
 80045f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a56      	ldr	r2, [pc, #344]	@ (8004758 <HAL_ADC_ConfigChannel+0x858>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_ADC_ConfigChannel+0x70c>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a55      	ldr	r2, [pc, #340]	@ (800475c <HAL_ADC_ConfigChannel+0x85c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d13a      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800460c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004610:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d134      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004620:	d005      	beq.n	800462e <HAL_ADC_ConfigChannel+0x72e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a4e      	ldr	r2, [pc, #312]	@ (8004760 <HAL_ADC_ConfigChannel+0x860>)
 8004628:	4293      	cmp	r3, r2
 800462a:	f040 8085 	bne.w	8004738 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004636:	d004      	beq.n	8004642 <HAL_ADC_ConfigChannel+0x742>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a49      	ldr	r2, [pc, #292]	@ (8004764 <HAL_ADC_ConfigChannel+0x864>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x746>
 8004642:	4a49      	ldr	r2, [pc, #292]	@ (8004768 <HAL_ADC_ConfigChannel+0x868>)
 8004644:	e000      	b.n	8004648 <HAL_ADC_ConfigChannel+0x748>
 8004646:	4a43      	ldr	r2, [pc, #268]	@ (8004754 <HAL_ADC_ConfigChannel+0x854>)
 8004648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800464c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7ff f8d5 	bl	8003802 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004658:	4b44      	ldr	r3, [pc, #272]	@ (800476c <HAL_ADC_ConfigChannel+0x86c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	099b      	lsrs	r3, r3, #6
 800465e:	4a44      	ldr	r2, [pc, #272]	@ (8004770 <HAL_ADC_ConfigChannel+0x870>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	4613      	mov	r3, r2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004672:	e002      	b.n	800467a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b01      	subs	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f9      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004680:	e05a      	b.n	8004738 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a3b      	ldr	r2, [pc, #236]	@ (8004774 <HAL_ADC_ConfigChannel+0x874>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d125      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800468c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004690:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11f      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a31      	ldr	r2, [pc, #196]	@ (8004764 <HAL_ADC_ConfigChannel+0x864>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d104      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x7ac>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a34      	ldr	r2, [pc, #208]	@ (8004778 <HAL_ADC_ConfigChannel+0x878>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d047      	beq.n	800473c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046b4:	d004      	beq.n	80046c0 <HAL_ADC_ConfigChannel+0x7c0>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004764 <HAL_ADC_ConfigChannel+0x864>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x7c4>
 80046c0:	4a29      	ldr	r2, [pc, #164]	@ (8004768 <HAL_ADC_ConfigChannel+0x868>)
 80046c2:	e000      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x7c6>
 80046c4:	4a23      	ldr	r2, [pc, #140]	@ (8004754 <HAL_ADC_ConfigChannel+0x854>)
 80046c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ce:	4619      	mov	r1, r3
 80046d0:	4610      	mov	r0, r2
 80046d2:	f7ff f896 	bl	8003802 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046d6:	e031      	b.n	800473c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a27      	ldr	r2, [pc, #156]	@ (800477c <HAL_ADC_ConfigChannel+0x87c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d12d      	bne.n	800473e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d127      	bne.n	800473e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004764 <HAL_ADC_ConfigChannel+0x864>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004700:	d004      	beq.n	800470c <HAL_ADC_ConfigChannel+0x80c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a17      	ldr	r2, [pc, #92]	@ (8004764 <HAL_ADC_ConfigChannel+0x864>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x810>
 800470c:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <HAL_ADC_ConfigChannel+0x868>)
 800470e:	e000      	b.n	8004712 <HAL_ADC_ConfigChannel+0x812>
 8004710:	4a10      	ldr	r2, [pc, #64]	@ (8004754 <HAL_ADC_ConfigChannel+0x854>)
 8004712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004716:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f7ff f870 	bl	8003802 <LL_ADC_SetCommonPathInternalCh>
 8004722:	e00c      	b.n	800473e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004736:	e002      	b.n	800473e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800473c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004746:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800474a:	4618      	mov	r0, r3
 800474c:	37d8      	adds	r7, #216	@ 0xd8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	50000700 	.word	0x50000700
 8004758:	c3210000 	.word	0xc3210000
 800475c:	90c00010 	.word	0x90c00010
 8004760:	50000600 	.word	0x50000600
 8004764:	50000100 	.word	0x50000100
 8004768:	50000300 	.word	0x50000300
 800476c:	20000340 	.word	0x20000340
 8004770:	053e2d63 	.word	0x053e2d63
 8004774:	c7520000 	.word	0xc7520000
 8004778:	50000500 	.word	0x50000500
 800477c:	cb840000 	.word	0xcb840000

08004780 <LL_ADC_IsEnabled>:
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <LL_ADC_IsEnabled+0x18>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <LL_ADC_IsEnabled+0x1a>
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d101      	bne.n	80047be <LL_ADC_REG_IsConversionOngoing+0x18>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b0a1      	sub	sp, #132	@ 0x84
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e0e7      	b.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047f2:	2300      	movs	r3, #0
 80047f4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047f6:	2300      	movs	r3, #0
 80047f8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004802:	d102      	bne.n	800480a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004804:	4b6f      	ldr	r3, [pc, #444]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	e009      	b.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6e      	ldr	r2, [pc, #440]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d102      	bne.n	800481a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004814:	4b6d      	ldr	r3, [pc, #436]	@ (80049cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	e001      	b.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0be      	b.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ffb1 	bl	80047a6 <LL_ADC_REG_IsConversionOngoing>
 8004844:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff ffab 	bl	80047a6 <LL_ADC_REG_IsConversionOngoing>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 80a0 	bne.w	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 809c 	bne.w	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004868:	d004      	beq.n	8004874 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a55      	ldr	r2, [pc, #340]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d101      	bne.n	8004878 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004874:	4b56      	ldr	r3, [pc, #344]	@ (80049d0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004876:	e000      	b.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004878:	4b56      	ldr	r3, [pc, #344]	@ (80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800487a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d04b      	beq.n	800491c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004884:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004896:	035b      	lsls	r3, r3, #13
 8004898:	430b      	orrs	r3, r1
 800489a:	431a      	orrs	r2, r3
 800489c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800489e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048a8:	d004      	beq.n	80048b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a45      	ldr	r2, [pc, #276]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10f      	bne.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80048b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80048b8:	f7ff ff62 	bl	8004780 <LL_ADC_IsEnabled>
 80048bc:	4604      	mov	r4, r0
 80048be:	4841      	ldr	r0, [pc, #260]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048c0:	f7ff ff5e 	bl	8004780 <LL_ADC_IsEnabled>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4323      	orrs	r3, r4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e012      	b.n	80048fa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80048d4:	483c      	ldr	r0, [pc, #240]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048d6:	f7ff ff53 	bl	8004780 <LL_ADC_IsEnabled>
 80048da:	4604      	mov	r4, r0
 80048dc:	483b      	ldr	r0, [pc, #236]	@ (80049cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048de:	f7ff ff4f 	bl	8004780 <LL_ADC_IsEnabled>
 80048e2:	4603      	mov	r3, r0
 80048e4:	431c      	orrs	r4, r3
 80048e6:	483c      	ldr	r0, [pc, #240]	@ (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80048e8:	f7ff ff4a 	bl	8004780 <LL_ADC_IsEnabled>
 80048ec:	4603      	mov	r3, r0
 80048ee:	4323      	orrs	r3, r4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d056      	beq.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004906:	f023 030f 	bic.w	r3, r3, #15
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	6811      	ldr	r1, [r2, #0]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	6892      	ldr	r2, [r2, #8]
 8004912:	430a      	orrs	r2, r1
 8004914:	431a      	orrs	r2, r3
 8004916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004918:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800491a:	e047      	b.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800491c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004926:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004930:	d004      	beq.n	800493c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a23      	ldr	r2, [pc, #140]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d10f      	bne.n	800495c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800493c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004940:	f7ff ff1e 	bl	8004780 <LL_ADC_IsEnabled>
 8004944:	4604      	mov	r4, r0
 8004946:	481f      	ldr	r0, [pc, #124]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004948:	f7ff ff1a 	bl	8004780 <LL_ADC_IsEnabled>
 800494c:	4603      	mov	r3, r0
 800494e:	4323      	orrs	r3, r4
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e012      	b.n	8004982 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800495c:	481a      	ldr	r0, [pc, #104]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800495e:	f7ff ff0f 	bl	8004780 <LL_ADC_IsEnabled>
 8004962:	4604      	mov	r4, r0
 8004964:	4819      	ldr	r0, [pc, #100]	@ (80049cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004966:	f7ff ff0b 	bl	8004780 <LL_ADC_IsEnabled>
 800496a:	4603      	mov	r3, r0
 800496c:	431c      	orrs	r4, r3
 800496e:	481a      	ldr	r0, [pc, #104]	@ (80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004970:	f7ff ff06 	bl	8004780 <LL_ADC_IsEnabled>
 8004974:	4603      	mov	r3, r0
 8004976:	4323      	orrs	r3, r4
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d012      	beq.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800498e:	f023 030f 	bic.w	r3, r3, #15
 8004992:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004994:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004996:	e009      	b.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80049aa:	e000      	b.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80049b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3784      	adds	r7, #132	@ 0x84
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	50000100 	.word	0x50000100
 80049c8:	50000400 	.word	0x50000400
 80049cc:	50000500 	.word	0x50000500
 80049d0:	50000300 	.word	0x50000300
 80049d4:	50000700 	.word	0x50000700
 80049d8:	50000600 	.word	0x50000600

080049dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <__NVIC_SetPriorityGrouping+0x44>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049f8:	4013      	ands	r3, r2
 80049fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a0e:	4a04      	ldr	r2, [pc, #16]	@ (8004a20 <__NVIC_SetPriorityGrouping+0x44>)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	60d3      	str	r3, [r2, #12]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a28:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <__NVIC_GetPriorityGrouping+0x18>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 0307 	and.w	r3, r3, #7
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	db0b      	blt.n	8004a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	f003 021f 	and.w	r2, r3, #31
 8004a58:	4907      	ldr	r1, [pc, #28]	@ (8004a78 <__NVIC_EnableIRQ+0x38>)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2001      	movs	r0, #1
 8004a62:	fa00 f202 	lsl.w	r2, r0, r2
 8004a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	e000e100 	.word	0xe000e100

08004a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	6039      	str	r1, [r7, #0]
 8004a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	db0a      	blt.n	8004aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	490c      	ldr	r1, [pc, #48]	@ (8004ac8 <__NVIC_SetPriority+0x4c>)
 8004a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9a:	0112      	lsls	r2, r2, #4
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa4:	e00a      	b.n	8004abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4908      	ldr	r1, [pc, #32]	@ (8004acc <__NVIC_SetPriority+0x50>)
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	3b04      	subs	r3, #4
 8004ab4:	0112      	lsls	r2, r2, #4
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	440b      	add	r3, r1
 8004aba:	761a      	strb	r2, [r3, #24]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000e100 	.word	0xe000e100
 8004acc:	e000ed00 	.word	0xe000ed00

08004ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b089      	sub	sp, #36	@ 0x24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f1c3 0307 	rsb	r3, r3, #7
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf28      	it	cs
 8004aee:	2304      	movcs	r3, #4
 8004af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3304      	adds	r3, #4
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d902      	bls.n	8004b00 <NVIC_EncodePriority+0x30>
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3b03      	subs	r3, #3
 8004afe:	e000      	b.n	8004b02 <NVIC_EncodePriority+0x32>
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	401a      	ands	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b18:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	43d9      	mvns	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b28:	4313      	orrs	r3, r2
         );
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3724      	adds	r7, #36	@ 0x24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b48:	d301      	bcc.n	8004b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e00f      	b.n	8004b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b78 <SysTick_Config+0x40>)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b56:	210f      	movs	r1, #15
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	f7ff ff8e 	bl	8004a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <SysTick_Config+0x40>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b66:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <SysTick_Config+0x40>)
 8004b68:	2207      	movs	r2, #7
 8004b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	e000e010 	.word	0xe000e010

08004b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff29 	bl	80049dc <__NVIC_SetPriorityGrouping>
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	4603      	mov	r3, r0
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ba0:	f7ff ff40 	bl	8004a24 <__NVIC_GetPriorityGrouping>
 8004ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7ff ff90 	bl	8004ad0 <NVIC_EncodePriority>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff5f 	bl	8004a7c <__NVIC_SetPriority>
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4603      	mov	r3, r0
 8004bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff33 	bl	8004a40 <__NVIC_EnableIRQ>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff ffa4 	bl	8004b38 <SysTick_Config>
 8004bf0:	4603      	mov	r3, r0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e014      	b.n	8004c36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	791b      	ldrb	r3, [r3, #4]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fe f9a1 	bl	8002f64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e056      	b.n	8004d02 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	795b      	ldrb	r3, [r3, #5]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_DAC_Start+0x20>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e050      	b.n	8004d02 <HAL_DAC_Start+0xc2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6819      	ldr	r1, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2201      	movs	r2, #1
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c84:	4b22      	ldr	r3, [pc, #136]	@ (8004d10 <HAL_DAC_Start+0xd0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	4a22      	ldr	r2, [pc, #136]	@ (8004d14 <HAL_DAC_Start+0xd4>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004c96:	e002      	b.n	8004c9e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f9      	bne.n	8004c98 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d11d      	bne.n	8004cf4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	605a      	str	r2, [r3, #4]
 8004cc8:	e014      	b.n	8004cf4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2102      	movs	r1, #2
 8004cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d107      	bne.n	8004cf4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0202 	orr.w	r2, r2, #2
 8004cf2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000340 	.word	0x20000340
 8004d14:	053e2d63 	.word	0x053e2d63

08004d18 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e018      	b.n	8004d66 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d105      	bne.n	8004d52 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e004      	b.n	8004d5c <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	3314      	adds	r3, #20
 8004d5a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08a      	sub	sp, #40	@ 0x28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_DAC_ConfigChannel+0x1c>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e1a1      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	795b      	ldrb	r3, [r3, #5]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_DAC_ConfigChannel+0x32>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e198      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x364>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2202      	movs	r2, #2
 8004db0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d17a      	bne.n	8004eb0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004dba:	f7fe fce1 	bl	8003780 <HAL_GetTick>
 8004dbe:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d13d      	bne.n	8004e42 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dc6:	e018      	b.n	8004dfa <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004dc8:	f7fe fcda 	bl	8003780 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d911      	bls.n	8004dfa <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f043 0208 	orr.w	r2, r3, #8
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2203      	movs	r2, #3
 8004df4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e16e      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1df      	bne.n	8004dc8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e10:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e12:	e020      	b.n	8004e56 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e14:	f7fe fcb4 	bl	8003780 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d90f      	bls.n	8004e42 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da0a      	bge.n	8004e42 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f043 0208 	orr.w	r2, r3, #8
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e14a      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	dbe3      	blt.n	8004e14 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	ea02 0103 	and.w	r1, r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	21ff      	movs	r1, #255	@ 0xff
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	ea02 0103 	and.w	r1, r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d11d      	bne.n	8004ef4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	221f      	movs	r2, #31
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2207      	movs	r2, #7
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d102      	bne.n	8004f1e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	623b      	str	r3, [r7, #32]
 8004f1c:	e00f      	b.n	8004f3e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d102      	bne.n	8004f2c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f26:	2301      	movs	r3, #1
 8004f28:	623b      	str	r3, [r7, #32]
 8004f2a:	e008      	b.n	8004f3e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004f34:	2301      	movs	r3, #1
 8004f36:	623b      	str	r3, [r7, #32]
 8004f38:	e001      	b.n	8004f3e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f60:	4013      	ands	r3, r2
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	791b      	ldrb	r3, [r3, #4]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d102      	bne.n	8004f72 <HAL_DAC_ConfigChannel+0x1fe>
 8004f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f70:	e000      	b.n	8004f74 <HAL_DAC_ConfigChannel+0x200>
 8004f72:	2300      	movs	r3, #0
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	795b      	ldrb	r3, [r3, #5]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d102      	bne.n	8004f9e <HAL_DAC_ConfigChannel+0x22a>
 8004f98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f9c:	e000      	b.n	8004fa0 <HAL_DAC_ConfigChannel+0x22c>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d114      	bne.n	8004fe0 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004fb6:	f002 f979 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 8004fba:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4a48      	ldr	r2, [pc, #288]	@ (80050e0 <HAL_DAC_ConfigChannel+0x36c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d904      	bls.n	8004fce <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fcc:	e00f      	b.n	8004fee <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4a44      	ldr	r2, [pc, #272]	@ (80050e4 <HAL_DAC_ConfigChannel+0x370>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d90a      	bls.n	8004fec <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fde:	e006      	b.n	8004fee <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fea:	e000      	b.n	8004fee <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004fec:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005006:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43da      	mvns	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	400a      	ands	r2, r1
 8005024:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005040:	4013      	ands	r3, r2
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005058:	4313      	orrs	r3, r2
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005062:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	22c0      	movs	r2, #192	@ 0xc0
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	400a      	ands	r2, r1
 800507e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	43db      	mvns	r3, r3
 80050b4:	ea02 0103 	and.w	r1, r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	409a      	lsls	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80050d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3728      	adds	r7, #40	@ 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	09896800 	.word	0x09896800
 80050e4:	04c4b400 	.word	0x04c4b400

080050e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e08d      	b.n	8005216 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	4b47      	ldr	r3, [pc, #284]	@ (8005220 <HAL_DMA_Init+0x138>)
 8005102:	429a      	cmp	r2, r3
 8005104:	d80f      	bhi.n	8005126 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	4b45      	ldr	r3, [pc, #276]	@ (8005224 <HAL_DMA_Init+0x13c>)
 800510e:	4413      	add	r3, r2
 8005110:	4a45      	ldr	r2, [pc, #276]	@ (8005228 <HAL_DMA_Init+0x140>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	009a      	lsls	r2, r3, #2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a42      	ldr	r2, [pc, #264]	@ (800522c <HAL_DMA_Init+0x144>)
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40
 8005124:	e00e      	b.n	8005144 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	4b40      	ldr	r3, [pc, #256]	@ (8005230 <HAL_DMA_Init+0x148>)
 800512e:	4413      	add	r3, r2
 8005130:	4a3d      	ldr	r2, [pc, #244]	@ (8005228 <HAL_DMA_Init+0x140>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	009a      	lsls	r2, r3, #2
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a3c      	ldr	r2, [pc, #240]	@ (8005234 <HAL_DMA_Init+0x14c>)
 8005142:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800515a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa76 	bl	8005688 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051a4:	d102      	bne.n	80051ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d010      	beq.n	80051ec <HAL_DMA_Init+0x104>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d80c      	bhi.n	80051ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa96 	bl	8005704 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	e008      	b.n	80051fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40020407 	.word	0x40020407
 8005224:	bffdfff8 	.word	0xbffdfff8
 8005228:	cccccccd 	.word	0xcccccccd
 800522c:	40020000 	.word	0x40020000
 8005230:	bffdfbf8 	.word	0xbffdfbf8
 8005234:	40020400 	.word	0x40020400

08005238 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_DMA_Start_IT+0x20>
 8005254:	2302      	movs	r3, #2
 8005256:	e066      	b.n	8005326 <HAL_DMA_Start_IT+0xee>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d155      	bne.n	8005318 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f9bb 	bl	800560c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 020e 	orr.w	r2, r2, #14
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e00f      	b.n	80052d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0204 	bic.w	r2, r2, #4
 80052be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 020a 	orr.w	r2, r2, #10
 80052ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005304:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e005      	b.n	8005324 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005320:	2302      	movs	r3, #2
 8005322:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d005      	beq.n	8005352 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	e037      	b.n	80053c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 020e 	bic.w	r2, r2, #14
 8005360:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005370:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f003 021f 	and.w	r2, r3, #31
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f202 	lsl.w	r2, r1, r2
 8005394:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800539e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00c      	beq.n	80053c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d00d      	beq.n	8005414 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2204      	movs	r2, #4
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
 8005412:	e047      	b.n	80054a4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 020e 	bic.w	r2, r2, #14
 8005422:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800543e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	f003 021f 	and.w	r2, r3, #31
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005450:	2101      	movs	r1, #1
 8005452:	fa01 f202 	lsl.w	r2, r1, r2
 8005456:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005460:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005478:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005482:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	4798      	blx	r3
    }
  }
  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	2204      	movs	r2, #4
 80054d0:	409a      	lsls	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d026      	beq.n	8005528 <HAL_DMA_IRQHandler+0x7a>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d021      	beq.n	8005528 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0204 	bic.w	r2, r2, #4
 8005500:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005506:	f003 021f 	and.w	r2, r3, #31
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2104      	movs	r1, #4
 8005510:	fa01 f202 	lsl.w	r2, r1, r2
 8005514:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	2b00      	cmp	r3, #0
 800551c:	d071      	beq.n	8005602 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005526:	e06c      	b.n	8005602 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2202      	movs	r2, #2
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02e      	beq.n	800559a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d029      	beq.n	800559a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 020a 	bic.w	r2, r2, #10
 8005562:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005570:	f003 021f 	and.w	r2, r3, #31
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	2102      	movs	r1, #2
 800557a:	fa01 f202 	lsl.w	r2, r1, r2
 800557e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d038      	beq.n	8005602 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005598:	e033      	b.n	8005602 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2208      	movs	r2, #8
 80055a4:	409a      	lsls	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d02a      	beq.n	8005604 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d025      	beq.n	8005604 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 020e 	bic.w	r2, r2, #14
 80055c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	f003 021f 	and.w	r2, r3, #31
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	2101      	movs	r1, #1
 80055d6:	fa01 f202 	lsl.w	r2, r1, r2
 80055da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005602:	bf00      	nop
 8005604:	bf00      	nop
}
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005622:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005634:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	f003 021f 	and.w	r2, r3, #31
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	2101      	movs	r1, #1
 8005644:	fa01 f202 	lsl.w	r2, r1, r2
 8005648:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b10      	cmp	r3, #16
 8005658:	d108      	bne.n	800566c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800566a:	e007      	b.n	800567c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	4b16      	ldr	r3, [pc, #88]	@ (80056f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005698:	429a      	cmp	r2, r3
 800569a:	d802      	bhi.n	80056a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800569c:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e001      	b.n	80056a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80056a2:	4b15      	ldr	r3, [pc, #84]	@ (80056f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80056a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	3b08      	subs	r3, #8
 80056b2:	4a12      	ldr	r2, [pc, #72]	@ (80056fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c0:	089b      	lsrs	r3, r3, #2
 80056c2:	009a      	lsls	r2, r3, #2
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	461a      	mov	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005700 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80056d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2201      	movs	r2, #1
 80056dc:	409a      	lsls	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40020407 	.word	0x40020407
 80056f4:	40020800 	.word	0x40020800
 80056f8:	40020820 	.word	0x40020820
 80056fc:	cccccccd 	.word	0xcccccccd
 8005700:	40020880 	.word	0x40020880

08005704 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	461a      	mov	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a08      	ldr	r2, [pc, #32]	@ (8005748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005726:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3b01      	subs	r3, #1
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	2201      	movs	r2, #1
 8005732:	409a      	lsls	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	1000823f 	.word	0x1000823f
 8005748:	40020940 	.word	0x40020940

0800574c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e147      	b.n	80059ee <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fd fc34 	bl	8002fe0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0210 	bic.w	r2, r2, #16
 8005786:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005788:	f7fd fffa 	bl	8003780 <HAL_GetTick>
 800578c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800578e:	e012      	b.n	80057b6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005790:	f7fd fff6 	bl	8003780 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b0a      	cmp	r3, #10
 800579c:	d90b      	bls.n	80057b6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a2:	f043 0201 	orr.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2203      	movs	r2, #3
 80057ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e11b      	b.n	80059ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d0e5      	beq.n	8005790 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057d4:	f7fd ffd4 	bl	8003780 <HAL_GetTick>
 80057d8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057da:	e012      	b.n	8005802 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057dc:	f7fd ffd0 	bl	8003780 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b0a      	cmp	r3, #10
 80057e8:	d90b      	bls.n	8005802 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2203      	movs	r2, #3
 80057fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0f5      	b.n	80059ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0e5      	beq.n	80057dc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0202 	orr.w	r2, r2, #2
 800581e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a74      	ldr	r2, [pc, #464]	@ (80059f8 <HAL_FDCAN_Init+0x2ac>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d103      	bne.n	8005832 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800582a:	4a74      	ldr	r2, [pc, #464]	@ (80059fc <HAL_FDCAN_Init+0x2b0>)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7c1b      	ldrb	r3, [r3, #16]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d108      	bne.n	800584c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005848:	619a      	str	r2, [r3, #24]
 800584a:	e007      	b.n	800585c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800585a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7c5b      	ldrb	r3, [r3, #17]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d108      	bne.n	8005876 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005872:	619a      	str	r2, [r3, #24]
 8005874:	e007      	b.n	8005886 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005884:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7c9b      	ldrb	r3, [r3, #18]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d108      	bne.n	80058a0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800589c:	619a      	str	r2, [r3, #24]
 800589e:	e007      	b.n	80058b0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058ae:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80058d4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0210 	bic.w	r2, r2, #16
 80058e4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d108      	bne.n	8005900 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0204 	orr.w	r2, r2, #4
 80058fc:	619a      	str	r2, [r3, #24]
 80058fe:	e02c      	b.n	800595a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d028      	beq.n	800595a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d01c      	beq.n	800594a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800591e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0210 	orr.w	r2, r2, #16
 800592e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d110      	bne.n	800595a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0220 	orr.w	r2, r2, #32
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	e007      	b.n	800595a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0220 	orr.w	r2, r2, #32
 8005958:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	3b01      	subs	r3, #1
 8005960:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	3b01      	subs	r3, #1
 8005968:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800596a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005972:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	3b01      	subs	r3, #1
 800597c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005982:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005984:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800598e:	d115      	bne.n	80059bc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	3b01      	subs	r3, #1
 800599c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800599e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a4:	3b01      	subs	r3, #1
 80059a6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80059a8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	3b01      	subs	r3, #1
 80059b2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80059b8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059ba:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fc56 	bl	8006284 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40006400 	.word	0x40006400
 80059fc:	40006500 	.word	0x40006500

08005a00 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a10:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d002      	beq.n	8005a1e <HAL_FDCAN_ConfigFilter+0x1e>
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d13d      	bne.n	8005a9a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d119      	bne.n	8005a5a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a32:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005a3a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e01d      	b.n	8005a96 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	075a      	lsls	r2, r3, #29
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	079a      	lsls	r2, r3, #30
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e006      	b.n	8005aa8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9e:	f043 0202 	orr.w	r2, r3, #2
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
  }
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d110      	bne.n	8005aea <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0201 	bic.w	r2, r2, #1
 8005ade:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e006      	b.n	8005af8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aee:	f043 0204 	orr.w	r2, r3, #4
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
  }
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d12c      	bne.n	8005b76 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e023      	b.n	8005b84 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fc02 	bl	800635c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	fa01 f202 	lsl.w	r2, r1, r2
 8005b64:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005b68:	2201      	movs	r2, #1
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	409a      	lsls	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e006      	b.n	8005b84 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7a:	f043 0208 	orr.w	r2, r3, #8
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b08b      	sub	sp, #44	@ 0x2c
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ba4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005ba6:	7efb      	ldrb	r3, [r7, #27]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	f040 80e8 	bne.w	8005d7e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	d137      	bne.n	8005c24 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0db      	b.n	8005d8c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bdc:	0e1b      	lsrs	r3, r3, #24
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10a      	bne.n	8005bfc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bee:	0a5b      	lsrs	r3, r3, #9
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c04:	0a1b      	lsrs	r3, r3, #8
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	440b      	add	r3, r1
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c22:	e036      	b.n	8005c92 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d107      	bne.n	8005c44 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0a3      	b.n	8005d8c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c4c:	0e1b      	lsrs	r3, r3, #24
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d10a      	bne.n	8005c6c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	440b      	add	r3, r1
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d107      	bne.n	8005cb6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	0c9b      	lsrs	r3, r3, #18
 8005cac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e005      	b.n	8005cc2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	3304      	adds	r3, #4
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	0c1b      	lsrs	r3, r3, #16
 8005cf0:	f003 020f 	and.w	r2, r3, #15
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	0e1b      	lsrs	r3, r3, #24
 8005d16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	0fda      	lsrs	r2, r3, #31
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	623b      	str	r3, [r7, #32]
 8005d36:	e00a      	b.n	8005d4e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	441a      	add	r2, r3
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	440b      	add	r3, r1
 8005d44:	7812      	ldrb	r2, [r2, #0]
 8005d46:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	4a11      	ldr	r2, [pc, #68]	@ (8005d98 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005d54:	5cd3      	ldrb	r3, [r2, r3]
 8005d56:	461a      	mov	r2, r3
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d3ec      	bcc.n	8005d38 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d105      	bne.n	8005d70 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005d6e:	e004      	b.n	8005d7a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e006      	b.n	8005d8c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d82:	f043 0208 	orr.w	r2, r3, #8
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
  }
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	372c      	adds	r7, #44	@ 0x2c
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	0800c054 	.word	0x0800c054

08005d9c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005dae:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d003      	beq.n	8005dbe <HAL_FDCAN_ActivateNotification+0x22>
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	f040 80c8 	bne.w	8005f4e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d03b      	beq.n	8005e52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d031      	beq.n	8005e52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d027      	beq.n	8005e52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01d      	beq.n	8005e52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d013      	beq.n	8005e52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00c      	beq.n	8005e62 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d13b      	bne.n	8005eee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d131      	bne.n	8005eee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d127      	bne.n	8005eee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d11d      	bne.n	8005eee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d113      	bne.n	8005eee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00c      	beq.n	8005efe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0202 	orr.w	r2, r2, #2
 8005efc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e006      	b.n	8005f5c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f52:	f043 0202 	orr.w	r2, r3, #2
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08c      	sub	sp, #48	@ 0x30
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f76:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f84:	4013      	ands	r3, r2
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbe:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005fc2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005fda:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2240      	movs	r2, #64	@ 0x40
 8006012:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f916 	bl	8006246 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006020:	2b00      	cmp	r3, #0
 8006022:	d019      	beq.n	8006058 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d014      	beq.n	8006058 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006036:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4013      	ands	r3, r2
 8006044:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800604e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006050:	6939      	ldr	r1, [r7, #16]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f8d8 	bl	8006208 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006064:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8a2 	bl	80061b2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800607a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800607c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fc fcb8 	bl	80029f4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006090:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006092:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f897 	bl	80061c8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00c      	beq.n	80060be <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f890 	bl	80061de <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d018      	beq.n	80060fa <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d013      	beq.n	80060fa <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80060da:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4013      	ands	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2280      	movs	r2, #128	@ 0x80
 80060f0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f87c 	bl	80061f2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006116:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f880 	bl	800621e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800613a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f878 	bl	8006232 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00f      	beq.n	800616c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800615e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800617a:	69f9      	ldr	r1, [r7, #28]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f876 	bl	800626e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a3a      	ldr	r2, [r7, #32]
 800618e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f858 	bl	800625a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80061aa:	bf00      	nop
 80061ac:	3730      	adds	r7, #48	@ 0x30
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800628c:	4b30      	ldr	r3, [pc, #192]	@ (8006350 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800628e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2f      	ldr	r2, [pc, #188]	@ (8006354 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d103      	bne.n	80062a2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062a0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006358 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d103      	bne.n	80062b4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80062b2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062c2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ca:	041a      	lsls	r2, r3, #16
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	061a      	lsls	r2, r3, #24
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e005      	b.n	8006336 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3304      	adds	r3, #4
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	429a      	cmp	r2, r3
 8006340:	d3f3      	bcc.n	800632a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	4000a400 	.word	0x4000a400
 8006354:	40006800 	.word	0x40006800
 8006358:	40006c00 	.word	0x40006c00

0800635c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800635c:	b480      	push	{r7}
 800635e:	b089      	sub	sp, #36	@ 0x24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800637a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006382:	4313      	orrs	r3, r2
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	e00a      	b.n	800639e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006390:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006396:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800639c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80063a8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80063ae:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80063b4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	4613      	mov	r3, r2
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4413      	add	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	440b      	add	r3, r1
 80063d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	3304      	adds	r3, #4
 80063dc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	3304      	adds	r3, #4
 80063e8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e020      	b.n	8006432 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	3303      	adds	r3, #3
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	3302      	adds	r3, #2
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	440b      	add	r3, r1
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006408:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	3301      	adds	r3, #1
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	440b      	add	r3, r1
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006416:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	440a      	add	r2, r1
 800641e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006420:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	3304      	adds	r3, #4
 800642a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	3304      	adds	r3, #4
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	4a06      	ldr	r2, [pc, #24]	@ (8006450 <FDCAN_CopyMessageToRAM+0xf4>)
 8006438:	5cd3      	ldrb	r3, [r2, r3]
 800643a:	461a      	mov	r2, r3
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4293      	cmp	r3, r2
 8006440:	d3d6      	bcc.n	80063f0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006442:	bf00      	nop
 8006444:	bf00      	nop
 8006446:	3724      	adds	r7, #36	@ 0x24
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	0800c054 	.word	0x0800c054

08006454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006462:	e15a      	b.n	800671a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	2101      	movs	r1, #1
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	4013      	ands	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 814c 	beq.w	8006714 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	2b01      	cmp	r3, #1
 8006486:	d005      	beq.n	8006494 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006490:	2b02      	cmp	r3, #2
 8006492:	d130      	bne.n	80064f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	2203      	movs	r2, #3
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4013      	ands	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064ca:	2201      	movs	r2, #1
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	43db      	mvns	r3, r3
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4013      	ands	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	091b      	lsrs	r3, r3, #4
 80064e0:	f003 0201 	and.w	r2, r3, #1
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d017      	beq.n	8006532 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	2203      	movs	r2, #3
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43db      	mvns	r3, r3
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4013      	ands	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d123      	bne.n	8006586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	08da      	lsrs	r2, r3, #3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3208      	adds	r2, #8
 8006546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	220f      	movs	r2, #15
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43db      	mvns	r3, r3
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4013      	ands	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	08da      	lsrs	r2, r3, #3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3208      	adds	r2, #8
 8006580:	6939      	ldr	r1, [r7, #16]
 8006582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	2203      	movs	r2, #3
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43db      	mvns	r3, r3
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4013      	ands	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f003 0203 	and.w	r2, r3, #3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80a6 	beq.w	8006714 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c8:	4b5b      	ldr	r3, [pc, #364]	@ (8006738 <HAL_GPIO_Init+0x2e4>)
 80065ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006738 <HAL_GPIO_Init+0x2e4>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80065d4:	4b58      	ldr	r3, [pc, #352]	@ (8006738 <HAL_GPIO_Init+0x2e4>)
 80065d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065e0:	4a56      	ldr	r2, [pc, #344]	@ (800673c <HAL_GPIO_Init+0x2e8>)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	089b      	lsrs	r3, r3, #2
 80065e6:	3302      	adds	r3, #2
 80065e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	220f      	movs	r2, #15
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	43db      	mvns	r3, r3
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4013      	ands	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800660a:	d01f      	beq.n	800664c <HAL_GPIO_Init+0x1f8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a4c      	ldr	r2, [pc, #304]	@ (8006740 <HAL_GPIO_Init+0x2ec>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d019      	beq.n	8006648 <HAL_GPIO_Init+0x1f4>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a4b      	ldr	r2, [pc, #300]	@ (8006744 <HAL_GPIO_Init+0x2f0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <HAL_GPIO_Init+0x1f0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a4a      	ldr	r2, [pc, #296]	@ (8006748 <HAL_GPIO_Init+0x2f4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00d      	beq.n	8006640 <HAL_GPIO_Init+0x1ec>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a49      	ldr	r2, [pc, #292]	@ (800674c <HAL_GPIO_Init+0x2f8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d007      	beq.n	800663c <HAL_GPIO_Init+0x1e8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a48      	ldr	r2, [pc, #288]	@ (8006750 <HAL_GPIO_Init+0x2fc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d101      	bne.n	8006638 <HAL_GPIO_Init+0x1e4>
 8006634:	2305      	movs	r3, #5
 8006636:	e00a      	b.n	800664e <HAL_GPIO_Init+0x1fa>
 8006638:	2306      	movs	r3, #6
 800663a:	e008      	b.n	800664e <HAL_GPIO_Init+0x1fa>
 800663c:	2304      	movs	r3, #4
 800663e:	e006      	b.n	800664e <HAL_GPIO_Init+0x1fa>
 8006640:	2303      	movs	r3, #3
 8006642:	e004      	b.n	800664e <HAL_GPIO_Init+0x1fa>
 8006644:	2302      	movs	r3, #2
 8006646:	e002      	b.n	800664e <HAL_GPIO_Init+0x1fa>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <HAL_GPIO_Init+0x1fa>
 800664c:	2300      	movs	r3, #0
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	f002 0203 	and.w	r2, r2, #3
 8006654:	0092      	lsls	r2, r2, #2
 8006656:	4093      	lsls	r3, r2
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800665e:	4937      	ldr	r1, [pc, #220]	@ (800673c <HAL_GPIO_Init+0x2e8>)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	089b      	lsrs	r3, r3, #2
 8006664:	3302      	adds	r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800666c:	4b39      	ldr	r3, [pc, #228]	@ (8006754 <HAL_GPIO_Init+0x300>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	43db      	mvns	r3, r3
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4013      	ands	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006690:	4a30      	ldr	r2, [pc, #192]	@ (8006754 <HAL_GPIO_Init+0x300>)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006696:	4b2f      	ldr	r3, [pc, #188]	@ (8006754 <HAL_GPIO_Init+0x300>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	43db      	mvns	r3, r3
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4013      	ands	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066ba:	4a26      	ldr	r2, [pc, #152]	@ (8006754 <HAL_GPIO_Init+0x300>)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80066c0:	4b24      	ldr	r3, [pc, #144]	@ (8006754 <HAL_GPIO_Init+0x300>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	43db      	mvns	r3, r3
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4013      	ands	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80066e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006754 <HAL_GPIO_Init+0x300>)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80066ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006754 <HAL_GPIO_Init+0x300>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	43db      	mvns	r3, r3
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4013      	ands	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800670e:	4a11      	ldr	r2, [pc, #68]	@ (8006754 <HAL_GPIO_Init+0x300>)
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3301      	adds	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	f47f ae9d 	bne.w	8006464 <HAL_GPIO_Init+0x10>
  }
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	40021000 	.word	0x40021000
 800673c:	40010000 	.word	0x40010000
 8006740:	48000400 	.word	0x48000400
 8006744:	48000800 	.word	0x48000800
 8006748:	48000c00 	.word	0x48000c00
 800674c:	48001000 	.word	0x48001000
 8006750:	48001400 	.word	0x48001400
 8006754:	40010400 	.word	0x40010400

08006758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	887b      	ldrh	r3, [r7, #2]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
 8006774:	e001      	b.n	800677a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	807b      	strh	r3, [r7, #2]
 8006794:	4613      	mov	r3, r2
 8006796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006798:	787b      	ldrb	r3, [r7, #1]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800679e:	887a      	ldrh	r2, [r7, #2]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067a4:	e002      	b.n	80067ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067a6:	887a      	ldrh	r2, [r7, #2]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80067c2:	4b08      	ldr	r3, [pc, #32]	@ (80067e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d006      	beq.n	80067dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ce:	4a05      	ldr	r2, [pc, #20]	@ (80067e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fc f8f0 	bl	80029bc <HAL_GPIO_EXTI_Callback>
  }
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40010400 	.word	0x40010400

080067e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d141      	bne.n	800687a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067f6:	4b4b      	ldr	r3, [pc, #300]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006802:	d131      	bne.n	8006868 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006804:	4b47      	ldr	r3, [pc, #284]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680a:	4a46      	ldr	r2, [pc, #280]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006810:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006814:	4b43      	ldr	r3, [pc, #268]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800681c:	4a41      	ldr	r2, [pc, #260]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006822:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006824:	4b40      	ldr	r3, [pc, #256]	@ (8006928 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2232      	movs	r2, #50	@ 0x32
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	4a3f      	ldr	r2, [pc, #252]	@ (800692c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	0c9b      	lsrs	r3, r3, #18
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800683a:	e002      	b.n	8006842 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3b01      	subs	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006842:	4b38      	ldr	r3, [pc, #224]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800684e:	d102      	bne.n	8006856 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f2      	bne.n	800683c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006856:	4b33      	ldr	r3, [pc, #204]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006862:	d158      	bne.n	8006916 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e057      	b.n	8006918 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006868:	4b2e      	ldr	r3, [pc, #184]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800686e:	4a2d      	ldr	r2, [pc, #180]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006878:	e04d      	b.n	8006916 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006880:	d141      	bne.n	8006906 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006882:	4b28      	ldr	r3, [pc, #160]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800688a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800688e:	d131      	bne.n	80068f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006890:	4b24      	ldr	r3, [pc, #144]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006896:	4a23      	ldr	r2, [pc, #140]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800689c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068a0:	4b20      	ldr	r3, [pc, #128]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2232      	movs	r2, #50	@ 0x32
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	4a1c      	ldr	r2, [pc, #112]	@ (800692c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068bc:	fba2 2303 	umull	r2, r3, r2, r3
 80068c0:	0c9b      	lsrs	r3, r3, #18
 80068c2:	3301      	adds	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068c6:	e002      	b.n	80068ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ce:	4b15      	ldr	r3, [pc, #84]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068da:	d102      	bne.n	80068e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f2      	bne.n	80068c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ee:	d112      	bne.n	8006916 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e011      	b.n	8006918 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006900:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006904:	e007      	b.n	8006916 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006906:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800690e:	4a05      	ldr	r2, [pc, #20]	@ (8006924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006910:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006914:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40007000 	.word	0x40007000
 8006928:	20000340 	.word	0x20000340
 800692c:	431bde83 	.word	0x431bde83

08006930 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006934:	4b05      	ldr	r3, [pc, #20]	@ (800694c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4a04      	ldr	r2, [pc, #16]	@ (800694c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800693a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800693e:	6093      	str	r3, [r2, #8]
}
 8006940:	bf00      	nop
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40007000 	.word	0x40007000

08006950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e2fe      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d075      	beq.n	8006a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800696e:	4b97      	ldr	r3, [pc, #604]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006978:	4b94      	ldr	r3, [pc, #592]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b0c      	cmp	r3, #12
 8006986:	d102      	bne.n	800698e <HAL_RCC_OscConfig+0x3e>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2b03      	cmp	r3, #3
 800698c:	d002      	beq.n	8006994 <HAL_RCC_OscConfig+0x44>
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	2b08      	cmp	r3, #8
 8006992:	d10b      	bne.n	80069ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006994:	4b8d      	ldr	r3, [pc, #564]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d05b      	beq.n	8006a58 <HAL_RCC_OscConfig+0x108>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d157      	bne.n	8006a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e2d9      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b4:	d106      	bne.n	80069c4 <HAL_RCC_OscConfig+0x74>
 80069b6:	4b85      	ldr	r3, [pc, #532]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a84      	ldr	r2, [pc, #528]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	e01d      	b.n	8006a00 <HAL_RCC_OscConfig+0xb0>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCC_OscConfig+0x98>
 80069ce:	4b7f      	ldr	r3, [pc, #508]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	4b7c      	ldr	r3, [pc, #496]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a7b      	ldr	r2, [pc, #492]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	e00b      	b.n	8006a00 <HAL_RCC_OscConfig+0xb0>
 80069e8:	4b78      	ldr	r3, [pc, #480]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a77      	ldr	r2, [pc, #476]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	4b75      	ldr	r3, [pc, #468]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a74      	ldr	r2, [pc, #464]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 80069fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d013      	beq.n	8006a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a08:	f7fc feba 	bl	8003780 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a10:	f7fc feb6 	bl	8003780 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b64      	cmp	r3, #100	@ 0x64
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e29e      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a22:	4b6a      	ldr	r3, [pc, #424]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0f0      	beq.n	8006a10 <HAL_RCC_OscConfig+0xc0>
 8006a2e:	e014      	b.n	8006a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fc fea6 	bl	8003780 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a38:	f7fc fea2 	bl	8003780 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b64      	cmp	r3, #100	@ 0x64
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e28a      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a4a:	4b60      	ldr	r3, [pc, #384]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0xe8>
 8006a56:	e000      	b.n	8006a5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d075      	beq.n	8006b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a66:	4b59      	ldr	r3, [pc, #356]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 030c 	and.w	r3, r3, #12
 8006a6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a70:	4b56      	ldr	r3, [pc, #344]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0303 	and.w	r3, r3, #3
 8006a78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b0c      	cmp	r3, #12
 8006a7e:	d102      	bne.n	8006a86 <HAL_RCC_OscConfig+0x136>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d002      	beq.n	8006a8c <HAL_RCC_OscConfig+0x13c>
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d11f      	bne.n	8006acc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a8c:	4b4f      	ldr	r3, [pc, #316]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x154>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e25d      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa4:	4b49      	ldr	r3, [pc, #292]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	061b      	lsls	r3, r3, #24
 8006ab2:	4946      	ldr	r1, [pc, #280]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ab8:	4b45      	ldr	r3, [pc, #276]	@ (8006bd0 <HAL_RCC_OscConfig+0x280>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fc fe13 	bl	80036e8 <HAL_InitTick>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d043      	beq.n	8006b50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e249      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d023      	beq.n	8006b1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae0:	f7fc fe4e 	bl	8003780 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae8:	f7fc fe4a 	bl	8003780 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e232      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006afa:	4b34      	ldr	r3, [pc, #208]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b06:	4b31      	ldr	r3, [pc, #196]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	061b      	lsls	r3, r3, #24
 8006b14:	492d      	ldr	r1, [pc, #180]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	604b      	str	r3, [r1, #4]
 8006b1a:	e01a      	b.n	8006b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a2a      	ldr	r2, [pc, #168]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b28:	f7fc fe2a 	bl	8003780 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b30:	f7fc fe26 	bl	8003780 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e20e      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b42:	4b22      	ldr	r3, [pc, #136]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f0      	bne.n	8006b30 <HAL_RCC_OscConfig+0x1e0>
 8006b4e:	e000      	b.n	8006b52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d041      	beq.n	8006be2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01c      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b66:	4b19      	ldr	r3, [pc, #100]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b6c:	4a17      	ldr	r2, [pc, #92]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b76:	f7fc fe03 	bl	8003780 <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b7c:	e008      	b.n	8006b90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b7e:	f7fc fdff 	bl	8003780 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e1e7      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b90:	4b0e      	ldr	r3, [pc, #56]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0ef      	beq.n	8006b7e <HAL_RCC_OscConfig+0x22e>
 8006b9e:	e020      	b.n	8006be2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba6:	4a09      	ldr	r2, [pc, #36]	@ (8006bcc <HAL_RCC_OscConfig+0x27c>)
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb0:	f7fc fde6 	bl	8003780 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bb6:	e00d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb8:	f7fc fde2 	bl	8003780 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d906      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e1ca      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
 8006bca:	bf00      	nop
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	20000344 	.word	0x20000344
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1ea      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 80a6 	beq.w	8006d3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006bf4:	4b84      	ldr	r3, [pc, #528]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_RCC_OscConfig+0x2b4>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <HAL_RCC_OscConfig+0x2b6>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00d      	beq.n	8006c26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c16:	4b7c      	ldr	r3, [pc, #496]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c22:	2301      	movs	r3, #1
 8006c24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c26:	4b79      	ldr	r3, [pc, #484]	@ (8006e0c <HAL_RCC_OscConfig+0x4bc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d118      	bne.n	8006c64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c32:	4b76      	ldr	r3, [pc, #472]	@ (8006e0c <HAL_RCC_OscConfig+0x4bc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a75      	ldr	r2, [pc, #468]	@ (8006e0c <HAL_RCC_OscConfig+0x4bc>)
 8006c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c3e:	f7fc fd9f 	bl	8003780 <HAL_GetTick>
 8006c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c46:	f7fc fd9b 	bl	8003780 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e183      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c58:	4b6c      	ldr	r3, [pc, #432]	@ (8006e0c <HAL_RCC_OscConfig+0x4bc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0f0      	beq.n	8006c46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d108      	bne.n	8006c7e <HAL_RCC_OscConfig+0x32e>
 8006c6c:	4b66      	ldr	r3, [pc, #408]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c72:	4a65      	ldr	r2, [pc, #404]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c7c:	e024      	b.n	8006cc8 <HAL_RCC_OscConfig+0x378>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d110      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x358>
 8006c86:	4b60      	ldr	r3, [pc, #384]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8c:	4a5e      	ldr	r2, [pc, #376]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c8e:	f043 0304 	orr.w	r3, r3, #4
 8006c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c96:	4b5c      	ldr	r3, [pc, #368]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9c:	4a5a      	ldr	r2, [pc, #360]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ca6:	e00f      	b.n	8006cc8 <HAL_RCC_OscConfig+0x378>
 8006ca8:	4b57      	ldr	r3, [pc, #348]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cae:	4a56      	ldr	r2, [pc, #344]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cb8:	4b53      	ldr	r3, [pc, #332]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cbe:	4a52      	ldr	r2, [pc, #328]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d016      	beq.n	8006cfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd0:	f7fc fd56 	bl	8003780 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd6:	e00a      	b.n	8006cee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd8:	f7fc fd52 	bl	8003780 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e138      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cee:	4b46      	ldr	r3, [pc, #280]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0ed      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x388>
 8006cfc:	e015      	b.n	8006d2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfe:	f7fc fd3f 	bl	8003780 <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d04:	e00a      	b.n	8006d1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d06:	f7fc fd3b 	bl	8003780 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e121      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1ed      	bne.n	8006d06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d2a:	7ffb      	ldrb	r3, [r7, #31]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d105      	bne.n	8006d3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d30:	4b35      	ldr	r3, [pc, #212]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d34:	4a34      	ldr	r2, [pc, #208]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d03c      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01c      	beq.n	8006d8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d50:	4b2d      	ldr	r3, [pc, #180]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d56:	4a2c      	ldr	r2, [pc, #176]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fc fd0e 	bl	8003780 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d68:	f7fc fd0a 	bl	8003780 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e0f2      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d7a:	4b23      	ldr	r3, [pc, #140]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0ef      	beq.n	8006d68 <HAL_RCC_OscConfig+0x418>
 8006d88:	e01b      	b.n	8006dc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d90:	4a1d      	ldr	r2, [pc, #116]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d9a:	f7fc fcf1 	bl	8003780 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006da2:	f7fc fced 	bl	8003780 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e0d5      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006db4:	4b14      	ldr	r3, [pc, #80]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1ef      	bne.n	8006da2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 80c9 	beq.w	8006f5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 030c 	and.w	r3, r3, #12
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	f000 8083 	beq.w	8006ee0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d15e      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de2:	4b09      	ldr	r3, [pc, #36]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a08      	ldr	r2, [pc, #32]	@ (8006e08 <HAL_RCC_OscConfig+0x4b8>)
 8006de8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dee:	f7fc fcc7 	bl	8003780 <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df4:	e00c      	b.n	8006e10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df6:	f7fc fcc3 	bl	8003780 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d905      	bls.n	8006e10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e0ab      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e10:	4b55      	ldr	r3, [pc, #340]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1ec      	bne.n	8006df6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e1c:	4b52      	ldr	r3, [pc, #328]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	4b52      	ldr	r3, [pc, #328]	@ (8006f6c <HAL_RCC_OscConfig+0x61c>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6a11      	ldr	r1, [r2, #32]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e2c:	3a01      	subs	r2, #1
 8006e2e:	0112      	lsls	r2, r2, #4
 8006e30:	4311      	orrs	r1, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006e36:	0212      	lsls	r2, r2, #8
 8006e38:	4311      	orrs	r1, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e3e:	0852      	lsrs	r2, r2, #1
 8006e40:	3a01      	subs	r2, #1
 8006e42:	0552      	lsls	r2, r2, #21
 8006e44:	4311      	orrs	r1, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e4a:	0852      	lsrs	r2, r2, #1
 8006e4c:	3a01      	subs	r2, #1
 8006e4e:	0652      	lsls	r2, r2, #25
 8006e50:	4311      	orrs	r1, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e56:	06d2      	lsls	r2, r2, #27
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	4943      	ldr	r1, [pc, #268]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e60:	4b41      	ldr	r3, [pc, #260]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a40      	ldr	r2, [pc, #256]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	4a3d      	ldr	r2, [pc, #244]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e78:	f7fc fc82 	bl	8003780 <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e80:	f7fc fc7e 	bl	8003780 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e066      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e92:	4b35      	ldr	r3, [pc, #212]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0x530>
 8006e9e:	e05e      	b.n	8006f5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ea0:	4b31      	ldr	r3, [pc, #196]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a30      	ldr	r2, [pc, #192]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eac:	f7fc fc68 	bl	8003780 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb4:	f7fc fc64 	bl	8003780 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e04c      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec6:	4b28      	ldr	r3, [pc, #160]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f0      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006ed2:	4b25      	ldr	r3, [pc, #148]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	4924      	ldr	r1, [pc, #144]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006ed8:	4b25      	ldr	r3, [pc, #148]	@ (8006f70 <HAL_RCC_OscConfig+0x620>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	60cb      	str	r3, [r1, #12]
 8006ede:	e03e      	b.n	8006f5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e039      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006eec:	4b1e      	ldr	r3, [pc, #120]	@ (8006f68 <HAL_RCC_OscConfig+0x618>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f003 0203 	and.w	r2, r3, #3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d12c      	bne.n	8006f5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d123      	bne.n	8006f5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d11b      	bne.n	8006f5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d113      	bne.n	8006f5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3c:	085b      	lsrs	r3, r3, #1
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d109      	bne.n	8006f5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	3b01      	subs	r3, #1
 8006f54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d001      	beq.n	8006f5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	019f800c 	.word	0x019f800c
 8006f70:	feeefffc 	.word	0xfeeefffc

08006f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e11e      	b.n	80071ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f8c:	4b91      	ldr	r3, [pc, #580]	@ (80071d4 <HAL_RCC_ClockConfig+0x260>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d910      	bls.n	8006fbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f9a:	4b8e      	ldr	r3, [pc, #568]	@ (80071d4 <HAL_RCC_ClockConfig+0x260>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f023 020f 	bic.w	r2, r3, #15
 8006fa2:	498c      	ldr	r1, [pc, #560]	@ (80071d4 <HAL_RCC_ClockConfig+0x260>)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006faa:	4b8a      	ldr	r3, [pc, #552]	@ (80071d4 <HAL_RCC_ClockConfig+0x260>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e106      	b.n	80071ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d073      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d129      	bne.n	8007024 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fd0:	4b81      	ldr	r3, [pc, #516]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0f4      	b.n	80071ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006fe0:	f000 f99c 	bl	800731c <RCC_GetSysClockFreqFromPLLSource>
 8006fe4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	4a7c      	ldr	r2, [pc, #496]	@ (80071dc <HAL_RCC_ClockConfig+0x268>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d93f      	bls.n	800706e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006fee:	4b7a      	ldr	r3, [pc, #488]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007002:	2b00      	cmp	r3, #0
 8007004:	d033      	beq.n	800706e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800700a:	2b00      	cmp	r3, #0
 800700c:	d12f      	bne.n	800706e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800700e:	4b72      	ldr	r3, [pc, #456]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007016:	4a70      	ldr	r2, [pc, #448]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 8007018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800701c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800701e:	2380      	movs	r3, #128	@ 0x80
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e024      	b.n	800706e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d107      	bne.n	800703c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800702c:	4b6a      	ldr	r3, [pc, #424]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e0c6      	b.n	80071ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800703c:	4b66      	ldr	r3, [pc, #408]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e0be      	b.n	80071ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800704c:	f000 f8ce 	bl	80071ec <HAL_RCC_GetSysClockFreq>
 8007050:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4a61      	ldr	r2, [pc, #388]	@ (80071dc <HAL_RCC_ClockConfig+0x268>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d909      	bls.n	800706e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800705a:	4b5f      	ldr	r3, [pc, #380]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007062:	4a5d      	ldr	r2, [pc, #372]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 8007064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007068:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800706a:	2380      	movs	r3, #128	@ 0x80
 800706c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800706e:	4b5a      	ldr	r3, [pc, #360]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f023 0203 	bic.w	r2, r3, #3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4957      	ldr	r1, [pc, #348]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800707c:	4313      	orrs	r3, r2
 800707e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007080:	f7fc fb7e 	bl	8003780 <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007086:	e00a      	b.n	800709e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007088:	f7fc fb7a 	bl	8003780 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e095      	b.n	80071ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709e:	4b4e      	ldr	r3, [pc, #312]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 020c 	and.w	r2, r3, #12
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d1eb      	bne.n	8007088 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d023      	beq.n	8007104 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070c8:	4b43      	ldr	r3, [pc, #268]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4a42      	ldr	r2, [pc, #264]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 80070ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80070d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80070e0:	4b3d      	ldr	r3, [pc, #244]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070e8:	4a3b      	ldr	r2, [pc, #236]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 80070ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80070ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f0:	4b39      	ldr	r3, [pc, #228]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	4936      	ldr	r1, [pc, #216]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	608b      	str	r3, [r1, #8]
 8007102:	e008      	b.n	8007116 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b80      	cmp	r3, #128	@ 0x80
 8007108:	d105      	bne.n	8007116 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800710a:	4b33      	ldr	r3, [pc, #204]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	4a32      	ldr	r2, [pc, #200]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 8007110:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007114:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007116:	4b2f      	ldr	r3, [pc, #188]	@ (80071d4 <HAL_RCC_ClockConfig+0x260>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d21d      	bcs.n	8007160 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007124:	4b2b      	ldr	r3, [pc, #172]	@ (80071d4 <HAL_RCC_ClockConfig+0x260>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f023 020f 	bic.w	r2, r3, #15
 800712c:	4929      	ldr	r1, [pc, #164]	@ (80071d4 <HAL_RCC_ClockConfig+0x260>)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	4313      	orrs	r3, r2
 8007132:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007134:	f7fc fb24 	bl	8003780 <HAL_GetTick>
 8007138:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800713a:	e00a      	b.n	8007152 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800713c:	f7fc fb20 	bl	8003780 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800714a:	4293      	cmp	r3, r2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e03b      	b.n	80071ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007152:	4b20      	ldr	r3, [pc, #128]	@ (80071d4 <HAL_RCC_ClockConfig+0x260>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d1ed      	bne.n	800713c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d008      	beq.n	800717e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800716c:	4b1a      	ldr	r3, [pc, #104]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	4917      	ldr	r1, [pc, #92]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800717a:	4313      	orrs	r3, r2
 800717c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800718a:	4b13      	ldr	r3, [pc, #76]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	490f      	ldr	r1, [pc, #60]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800719e:	f000 f825 	bl	80071ec <HAL_RCC_GetSysClockFreq>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b0c      	ldr	r3, [pc, #48]	@ (80071d8 <HAL_RCC_ClockConfig+0x264>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	091b      	lsrs	r3, r3, #4
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	490c      	ldr	r1, [pc, #48]	@ (80071e0 <HAL_RCC_ClockConfig+0x26c>)
 80071b0:	5ccb      	ldrb	r3, [r1, r3]
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	4a0a      	ldr	r2, [pc, #40]	@ (80071e4 <HAL_RCC_ClockConfig+0x270>)
 80071bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80071be:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <HAL_RCC_ClockConfig+0x274>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fc fa90 	bl	80036e8 <HAL_InitTick>
 80071c8:	4603      	mov	r3, r0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40022000 	.word	0x40022000
 80071d8:	40021000 	.word	0x40021000
 80071dc:	04c4b400 	.word	0x04c4b400
 80071e0:	0800c03c 	.word	0x0800c03c
 80071e4:	20000340 	.word	0x20000340
 80071e8:	20000344 	.word	0x20000344

080071ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80071f2:	4b2c      	ldr	r3, [pc, #176]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 030c 	and.w	r3, r3, #12
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d102      	bne.n	8007204 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071fe:	4b2a      	ldr	r3, [pc, #168]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e047      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007204:	4b27      	ldr	r3, [pc, #156]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 030c 	and.w	r3, r3, #12
 800720c:	2b08      	cmp	r3, #8
 800720e:	d102      	bne.n	8007216 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007210:	4b25      	ldr	r3, [pc, #148]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	e03e      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007216:	4b23      	ldr	r3, [pc, #140]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 030c 	and.w	r3, r3, #12
 800721e:	2b0c      	cmp	r3, #12
 8007220:	d136      	bne.n	8007290 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007222:	4b20      	ldr	r3, [pc, #128]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800722c:	4b1d      	ldr	r3, [pc, #116]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	091b      	lsrs	r3, r3, #4
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	3301      	adds	r3, #1
 8007238:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b03      	cmp	r3, #3
 800723e:	d10c      	bne.n	800725a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007240:	4a19      	ldr	r2, [pc, #100]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	fbb2 f3f3 	udiv	r3, r2, r3
 8007248:	4a16      	ldr	r2, [pc, #88]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800724a:	68d2      	ldr	r2, [r2, #12]
 800724c:	0a12      	lsrs	r2, r2, #8
 800724e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007252:	fb02 f303 	mul.w	r3, r2, r3
 8007256:	617b      	str	r3, [r7, #20]
      break;
 8007258:	e00c      	b.n	8007274 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800725a:	4a13      	ldr	r2, [pc, #76]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	4a10      	ldr	r2, [pc, #64]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007264:	68d2      	ldr	r2, [r2, #12]
 8007266:	0a12      	lsrs	r2, r2, #8
 8007268:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800726c:	fb02 f303 	mul.w	r3, r2, r3
 8007270:	617b      	str	r3, [r7, #20]
      break;
 8007272:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007274:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	0e5b      	lsrs	r3, r3, #25
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	3301      	adds	r3, #1
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	e001      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007294:	693b      	ldr	r3, [r7, #16]
}
 8007296:	4618      	mov	r0, r3
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40021000 	.word	0x40021000
 80072a8:	00f42400 	.word	0x00f42400

080072ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072b0:	4b03      	ldr	r3, [pc, #12]	@ (80072c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072b2:	681b      	ldr	r3, [r3, #0]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000340 	.word	0x20000340

080072c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072c8:	f7ff fff0 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4b06      	ldr	r3, [pc, #24]	@ (80072e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	0a1b      	lsrs	r3, r3, #8
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	4904      	ldr	r1, [pc, #16]	@ (80072ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80072da:	5ccb      	ldrb	r3, [r1, r3]
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40021000 	.word	0x40021000
 80072ec:	0800c04c 	.word	0x0800c04c

080072f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80072f4:	f7ff ffda 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 80072f8:	4602      	mov	r2, r0
 80072fa:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	0adb      	lsrs	r3, r3, #11
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	4904      	ldr	r1, [pc, #16]	@ (8007318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007306:	5ccb      	ldrb	r3, [r1, r3]
 8007308:	f003 031f 	and.w	r3, r3, #31
 800730c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007310:	4618      	mov	r0, r3
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40021000 	.word	0x40021000
 8007318:	0800c04c 	.word	0x0800c04c

0800731c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007322:	4b1e      	ldr	r3, [pc, #120]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800732c:	4b1b      	ldr	r3, [pc, #108]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d10c      	bne.n	800735a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007340:	4a17      	ldr	r2, [pc, #92]	@ (80073a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	fbb2 f3f3 	udiv	r3, r2, r3
 8007348:	4a14      	ldr	r2, [pc, #80]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800734a:	68d2      	ldr	r2, [r2, #12]
 800734c:	0a12      	lsrs	r2, r2, #8
 800734e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	617b      	str	r3, [r7, #20]
    break;
 8007358:	e00c      	b.n	8007374 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800735a:	4a11      	ldr	r2, [pc, #68]	@ (80073a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	4a0e      	ldr	r2, [pc, #56]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007364:	68d2      	ldr	r2, [r2, #12]
 8007366:	0a12      	lsrs	r2, r2, #8
 8007368:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
    break;
 8007372:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007374:	4b09      	ldr	r3, [pc, #36]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	0e5b      	lsrs	r3, r3, #25
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	3301      	adds	r3, #1
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800738e:	687b      	ldr	r3, [r7, #4]
}
 8007390:	4618      	mov	r0, r3
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40021000 	.word	0x40021000
 80073a0:	00f42400 	.word	0x00f42400

080073a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073ac:	2300      	movs	r3, #0
 80073ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073b0:	2300      	movs	r3, #0
 80073b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8098 	beq.w	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073c2:	2300      	movs	r3, #0
 80073c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073c6:	4b43      	ldr	r3, [pc, #268]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10d      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d2:	4b40      	ldr	r3, [pc, #256]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d6:	4a3f      	ldr	r2, [pc, #252]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80073de:	4b3d      	ldr	r3, [pc, #244]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ea:	2301      	movs	r3, #1
 80073ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073ee:	4b3a      	ldr	r3, [pc, #232]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a39      	ldr	r2, [pc, #228]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073fa:	f7fc f9c1 	bl	8003780 <HAL_GetTick>
 80073fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007400:	e009      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007402:	f7fc f9bd 	bl	8003780 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d902      	bls.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	74fb      	strb	r3, [r7, #19]
        break;
 8007414:	e005      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007416:	4b30      	ldr	r3, [pc, #192]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0ef      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007422:	7cfb      	ldrb	r3, [r7, #19]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d159      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007428:	4b2a      	ldr	r3, [pc, #168]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007432:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01e      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	429a      	cmp	r2, r3
 8007442:	d019      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007444:	4b23      	ldr	r3, [pc, #140]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800744e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007450:	4b20      	ldr	r3, [pc, #128]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007456:	4a1f      	ldr	r2, [pc, #124]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800745c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007460:	4b1c      	ldr	r3, [pc, #112]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007466:	4a1b      	ldr	r2, [pc, #108]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800746c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007470:	4a18      	ldr	r2, [pc, #96]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d016      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007482:	f7fc f97d 	bl	8003780 <HAL_GetTick>
 8007486:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007488:	e00b      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748a:	f7fc f979 	bl	8003780 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007498:	4293      	cmp	r3, r2
 800749a:	d902      	bls.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	74fb      	strb	r3, [r7, #19]
            break;
 80074a0:	e006      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074a2:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0ec      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80074b0:	7cfb      	ldrb	r3, [r7, #19]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b6:	4b07      	ldr	r3, [pc, #28]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c4:	4903      	ldr	r1, [pc, #12]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80074cc:	e008      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074ce:	7cfb      	ldrb	r3, [r7, #19]
 80074d0:	74bb      	strb	r3, [r7, #18]
 80074d2:	e005      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074dc:	7cfb      	ldrb	r3, [r7, #19]
 80074de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074e0:	7c7b      	ldrb	r3, [r7, #17]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d105      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e6:	4ba7      	ldr	r3, [pc, #668]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ea:	4aa6      	ldr	r2, [pc, #664]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074fe:	4ba1      	ldr	r3, [pc, #644]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007504:	f023 0203 	bic.w	r2, r3, #3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	499d      	ldr	r1, [pc, #628]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750e:	4313      	orrs	r3, r2
 8007510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007520:	4b98      	ldr	r3, [pc, #608]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007526:	f023 020c 	bic.w	r2, r3, #12
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	4995      	ldr	r1, [pc, #596]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007530:	4313      	orrs	r3, r2
 8007532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007542:	4b90      	ldr	r3, [pc, #576]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007548:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	498c      	ldr	r1, [pc, #560]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007564:	4b87      	ldr	r3, [pc, #540]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	4984      	ldr	r1, [pc, #528]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007574:	4313      	orrs	r3, r2
 8007576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007586:	4b7f      	ldr	r3, [pc, #508]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	497b      	ldr	r1, [pc, #492]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007596:	4313      	orrs	r3, r2
 8007598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075a8:	4b76      	ldr	r3, [pc, #472]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	4973      	ldr	r1, [pc, #460]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ca:	4b6e      	ldr	r3, [pc, #440]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	496a      	ldr	r1, [pc, #424]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075ec:	4b65      	ldr	r3, [pc, #404]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	4962      	ldr	r1, [pc, #392]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800760e:	4b5d      	ldr	r3, [pc, #372]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007614:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761c:	4959      	ldr	r1, [pc, #356]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007630:	4b54      	ldr	r3, [pc, #336]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007632:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007636:	f023 0203 	bic.w	r2, r3, #3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	4951      	ldr	r1, [pc, #324]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007652:	4b4c      	ldr	r3, [pc, #304]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007658:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	4948      	ldr	r1, [pc, #288]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007674:	4b43      	ldr	r3, [pc, #268]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	4940      	ldr	r1, [pc, #256]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007692:	d105      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007694:	4b3b      	ldr	r3, [pc, #236]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	4a3a      	ldr	r2, [pc, #232]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800769e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d015      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076ac:	4b35      	ldr	r3, [pc, #212]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ba:	4932      	ldr	r1, [pc, #200]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ca:	d105      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076d6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d015      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076e4:	4b27      	ldr	r3, [pc, #156]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f2:	4924      	ldr	r1, [pc, #144]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007702:	d105      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007704:	4b1f      	ldr	r3, [pc, #124]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4a1e      	ldr	r2, [pc, #120]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800770e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d015      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800771c:	4b19      	ldr	r3, [pc, #100]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007722:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772a:	4916      	ldr	r1, [pc, #88]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800773a:	d105      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800773c:	4b11      	ldr	r3, [pc, #68]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4a10      	ldr	r2, [pc, #64]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007746:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d019      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007754:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	4908      	ldr	r1, [pc, #32]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007764:	4313      	orrs	r3, r2
 8007766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007772:	d109      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007774:	4b03      	ldr	r3, [pc, #12]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4a02      	ldr	r2, [pc, #8]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800777e:	60d3      	str	r3, [r2, #12]
 8007780:	e002      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007782:	bf00      	nop
 8007784:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007794:	4b29      	ldr	r3, [pc, #164]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a2:	4926      	ldr	r1, [pc, #152]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077b2:	d105      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077b4:	4b21      	ldr	r3, [pc, #132]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a20      	ldr	r2, [pc, #128]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80077cc:	4b1b      	ldr	r3, [pc, #108]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077da:	4918      	ldr	r1, [pc, #96]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ea:	d105      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077ec:	4b13      	ldr	r3, [pc, #76]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a12      	ldr	r2, [pc, #72]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d015      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007804:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800780a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007812:	490a      	ldr	r1, [pc, #40]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007814:	4313      	orrs	r3, r2
 8007816:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800781e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007822:	d105      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007824:	4b05      	ldr	r3, [pc, #20]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	4a04      	ldr	r2, [pc, #16]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800782a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800782e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007830:	7cbb      	ldrb	r3, [r7, #18]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40021000 	.word	0x40021000

08007840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e09d      	b.n	800798e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007856:	2b00      	cmp	r3, #0
 8007858:	d108      	bne.n	800786c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007862:	d009      	beq.n	8007878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	61da      	str	r2, [r3, #28]
 800786a:	e005      	b.n	8007878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fb fc06 	bl	80030a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078b8:	d902      	bls.n	80078c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	e002      	b.n	80078c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80078ce:	d007      	beq.n	80078e0 <HAL_SPI_Init+0xa0>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078d8:	d002      	beq.n	80078e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007922:	ea42 0103 	orr.w	r1, r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	0c1b      	lsrs	r3, r3, #16
 800793c:	f003 0204 	and.w	r2, r3, #4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800795c:	ea42 0103 	orr.w	r1, r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800797c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b088      	sub	sp, #32
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	603b      	str	r3, [r7, #0]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079a6:	f7fb feeb 	bl	8003780 <HAL_GetTick>
 80079aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d001      	beq.n	80079c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80079bc:	2302      	movs	r3, #2
 80079be:	e15c      	b.n	8007c7a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_SPI_Transmit+0x36>
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e154      	b.n	8007c7a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_SPI_Transmit+0x48>
 80079da:	2302      	movs	r3, #2
 80079dc:	e14d      	b.n	8007c7a <HAL_SPI_Transmit+0x2e4>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2203      	movs	r2, #3
 80079ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	88fa      	ldrh	r2, [r7, #6]
 8007a04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a30:	d10f      	bne.n	8007a52 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5c:	2b40      	cmp	r3, #64	@ 0x40
 8007a5e:	d007      	beq.n	8007a70 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a78:	d952      	bls.n	8007b20 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <HAL_SPI_Transmit+0xf2>
 8007a82:	8b7b      	ldrh	r3, [r7, #26]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d145      	bne.n	8007b14 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8c:	881a      	ldrh	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a98:	1c9a      	adds	r2, r3, #2
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007aac:	e032      	b.n	8007b14 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d112      	bne.n	8007ae2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac0:	881a      	ldrh	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007acc:	1c9a      	adds	r2, r3, #2
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ae0:	e018      	b.n	8007b14 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae2:	f7fb fe4d 	bl	8003780 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d803      	bhi.n	8007afa <HAL_SPI_Transmit+0x164>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d102      	bne.n	8007b00 <HAL_SPI_Transmit+0x16a>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d109      	bne.n	8007b14 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e0b2      	b.n	8007c7a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1c7      	bne.n	8007aae <HAL_SPI_Transmit+0x118>
 8007b1e:	e083      	b.n	8007c28 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <HAL_SPI_Transmit+0x198>
 8007b28:	8b7b      	ldrh	r3, [r7, #26]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d177      	bne.n	8007c1e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d912      	bls.n	8007b5e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	881a      	ldrh	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b48:	1c9a      	adds	r2, r3, #2
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b02      	subs	r3, #2
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b5c:	e05f      	b.n	8007c1e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b84:	e04b      	b.n	8007c1e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d12b      	bne.n	8007bec <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d912      	bls.n	8007bc4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba2:	881a      	ldrh	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bae:	1c9a      	adds	r2, r3, #2
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b02      	subs	r3, #2
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bc2:	e02c      	b.n	8007c1e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	7812      	ldrb	r2, [r2, #0]
 8007bd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bea:	e018      	b.n	8007c1e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bec:	f7fb fdc8 	bl	8003780 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d803      	bhi.n	8007c04 <HAL_SPI_Transmit+0x26e>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d102      	bne.n	8007c0a <HAL_SPI_Transmit+0x274>
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d109      	bne.n	8007c1e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e02d      	b.n	8007c7a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1ae      	bne.n	8007b86 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c28:	69fa      	ldr	r2, [r7, #28]
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 fb65 	bl	80082fc <SPI_EndRxTxTransaction>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007c78:	2300      	movs	r3, #0
  }
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3720      	adds	r7, #32
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b08a      	sub	sp, #40	@ 0x28
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c90:	2301      	movs	r3, #1
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c94:	f7fb fd74 	bl	8003780 <HAL_GetTick>
 8007c98:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ca0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ca8:	887b      	ldrh	r3, [r7, #2]
 8007caa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007cac:	887b      	ldrh	r3, [r7, #2]
 8007cae:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007cb0:	7ffb      	ldrb	r3, [r7, #31]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d00c      	beq.n	8007cd0 <HAL_SPI_TransmitReceive+0x4e>
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cbc:	d106      	bne.n	8007ccc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <HAL_SPI_TransmitReceive+0x4a>
 8007cc6:	7ffb      	ldrb	r3, [r7, #31]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d001      	beq.n	8007cd0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e1f3      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <HAL_SPI_TransmitReceive+0x60>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <HAL_SPI_TransmitReceive+0x60>
 8007cdc:	887b      	ldrh	r3, [r7, #2]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e1e8      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_SPI_TransmitReceive+0x72>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e1e1      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x436>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d003      	beq.n	8007d10 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2205      	movs	r2, #5
 8007d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	887a      	ldrh	r2, [r7, #2]
 8007d20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	887a      	ldrh	r2, [r7, #2]
 8007d28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	887a      	ldrh	r2, [r7, #2]
 8007d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	887a      	ldrh	r2, [r7, #2]
 8007d3c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d52:	d802      	bhi.n	8007d5a <HAL_SPI_TransmitReceive+0xd8>
 8007d54:	8abb      	ldrh	r3, [r7, #20]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d908      	bls.n	8007d6c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d68:	605a      	str	r2, [r3, #4]
 8007d6a:	e007      	b.n	8007d7c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d7a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d86:	2b40      	cmp	r3, #64	@ 0x40
 8007d88:	d007      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007da2:	f240 8083 	bls.w	8007eac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <HAL_SPI_TransmitReceive+0x132>
 8007dae:	8afb      	ldrh	r3, [r7, #22]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d16f      	bne.n	8007e94 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	881a      	ldrh	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	1c9a      	adds	r2, r3, #2
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dd8:	e05c      	b.n	8007e94 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d11b      	bne.n	8007e20 <HAL_SPI_TransmitReceive+0x19e>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d016      	beq.n	8007e20 <HAL_SPI_TransmitReceive+0x19e>
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d113      	bne.n	8007e20 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfc:	881a      	ldrh	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e08:	1c9a      	adds	r2, r3, #2
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	3b01      	subs	r3, #1
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d11c      	bne.n	8007e68 <HAL_SPI_TransmitReceive+0x1e6>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d016      	beq.n	8007e68 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e44:	b292      	uxth	r2, r2
 8007e46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4c:	1c9a      	adds	r2, r3, #2
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e64:	2301      	movs	r3, #1
 8007e66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e68:	f7fb fc8a 	bl	8003780 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d80d      	bhi.n	8007e94 <HAL_SPI_TransmitReceive+0x212>
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	d009      	beq.n	8007e94 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e111      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d19d      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x158>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d197      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x158>
 8007eaa:	e0e5      	b.n	8008078 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <HAL_SPI_TransmitReceive+0x23a>
 8007eb4:	8afb      	ldrh	r3, [r7, #22]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	f040 80d1 	bne.w	800805e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d912      	bls.n	8007eec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eca:	881a      	ldrh	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed6:	1c9a      	adds	r2, r3, #2
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b02      	subs	r3, #2
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007eea:	e0b8      	b.n	800805e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	330c      	adds	r3, #12
 8007ef6:	7812      	ldrb	r2, [r2, #0]
 8007ef8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f12:	e0a4      	b.n	800805e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d134      	bne.n	8007f8c <HAL_SPI_TransmitReceive+0x30a>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d02f      	beq.n	8007f8c <HAL_SPI_TransmitReceive+0x30a>
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d12c      	bne.n	8007f8c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d912      	bls.n	8007f62 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f40:	881a      	ldrh	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	1c9a      	adds	r2, r3, #2
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b02      	subs	r3, #2
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f60:	e012      	b.n	8007f88 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	7812      	ldrb	r2, [r2, #0]
 8007f6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d148      	bne.n	800802c <HAL_SPI_TransmitReceive+0x3aa>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d042      	beq.n	800802c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d923      	bls.n	8007ffa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	b292      	uxth	r2, r2
 8007fbe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc4:	1c9a      	adds	r2, r3, #2
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b02      	subs	r3, #2
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d81f      	bhi.n	8008028 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ff6:	605a      	str	r2, [r3, #4]
 8007ff8:	e016      	b.n	8008028 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f103 020c 	add.w	r2, r3, #12
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	7812      	ldrb	r2, [r2, #0]
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29a      	uxth	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008028:	2301      	movs	r3, #1
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800802c:	f7fb fba8 	bl	8003780 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008038:	429a      	cmp	r2, r3
 800803a:	d803      	bhi.n	8008044 <HAL_SPI_TransmitReceive+0x3c2>
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d102      	bne.n	800804a <HAL_SPI_TransmitReceive+0x3c8>
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e02c      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008062:	b29b      	uxth	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	f47f af55 	bne.w	8007f14 <HAL_SPI_TransmitReceive+0x292>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	f47f af4e 	bne.w	8007f14 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008078:	6a3a      	ldr	r2, [r7, #32]
 800807a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f93d 	bl	80082fc <SPI_EndRxTxTransaction>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d008      	beq.n	800809a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2220      	movs	r2, #32
 800808c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e00e      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e000      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80080b6:	2300      	movs	r3, #0
  }
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3728      	adds	r7, #40	@ 0x28
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080d0:	f7fb fb56 	bl	8003780 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	1a9b      	subs	r3, r3, r2
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4413      	add	r3, r2
 80080de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080e0:	f7fb fb4e 	bl	8003780 <HAL_GetTick>
 80080e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080e6:	4b39      	ldr	r3, [pc, #228]	@ (80081cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	015b      	lsls	r3, r3, #5
 80080ec:	0d1b      	lsrs	r3, r3, #20
 80080ee:	69fa      	ldr	r2, [r7, #28]
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080f6:	e054      	b.n	80081a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d050      	beq.n	80081a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008100:	f7fb fb3e 	bl	8003780 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	429a      	cmp	r2, r3
 800810e:	d902      	bls.n	8008116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d13d      	bne.n	8008192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800812e:	d111      	bne.n	8008154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008138:	d004      	beq.n	8008144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008142:	d107      	bne.n	8008154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800815c:	d10f      	bne.n	800817e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800817c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e017      	b.n	80081c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	3b01      	subs	r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	4013      	ands	r3, r2
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	bf0c      	ite	eq
 80081b2:	2301      	moveq	r3, #1
 80081b4:	2300      	movne	r3, #0
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	461a      	mov	r2, r3
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d19b      	bne.n	80080f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000340 	.word	0x20000340

080081d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08a      	sub	sp, #40	@ 0x28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081e2:	f7fb facd 	bl	8003780 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	1a9b      	subs	r3, r3, r2
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	4413      	add	r3, r2
 80081f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80081f2:	f7fb fac5 	bl	8003780 <HAL_GetTick>
 80081f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008200:	4b3d      	ldr	r3, [pc, #244]	@ (80082f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	00da      	lsls	r2, r3, #3
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	0d1b      	lsrs	r3, r3, #20
 8008210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008212:	fb02 f303 	mul.w	r3, r2, r3
 8008216:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008218:	e060      	b.n	80082dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008220:	d107      	bne.n	8008232 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008230:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d050      	beq.n	80082dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800823a:	f7fb faa1 	bl	8003780 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008246:	429a      	cmp	r2, r3
 8008248:	d902      	bls.n	8008250 <SPI_WaitFifoStateUntilTimeout+0x80>
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	d13d      	bne.n	80082cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800825e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008268:	d111      	bne.n	800828e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008272:	d004      	beq.n	800827e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800827c:	d107      	bne.n	800828e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800828c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008296:	d10f      	bne.n	80082b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e010      	b.n	80082ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	3b01      	subs	r3, #1
 80082da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689a      	ldr	r2, [r3, #8]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4013      	ands	r3, r2
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d196      	bne.n	800821a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3728      	adds	r7, #40	@ 0x28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20000340 	.word	0x20000340

080082fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff ff5b 	bl	80081d0 <SPI_WaitFifoStateUntilTimeout>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008324:	f043 0220 	orr.w	r2, r3, #32
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e027      	b.n	8008380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2200      	movs	r2, #0
 8008338:	2180      	movs	r1, #128	@ 0x80
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff fec0 	bl	80080c0 <SPI_WaitFlagStateUntilTimeout>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800834a:	f043 0220 	orr.w	r2, r3, #32
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e014      	b.n	8008380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2200      	movs	r2, #0
 800835e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f7ff ff34 	bl	80081d0 <SPI_WaitFifoStateUntilTimeout>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008372:	f043 0220 	orr.w	r2, r3, #32
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e000      	b.n	8008380 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e049      	b.n	800842e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7fa febc 	bl	800312c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4619      	mov	r1, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	f001 f878 	bl	80094bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b082      	sub	sp, #8
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e049      	b.n	80084dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f841 	bl	80084e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2202      	movs	r2, #2
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f001 f821 	bl	80094bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d109      	bne.n	800851c <HAL_TIM_PWM_Start+0x24>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b01      	cmp	r3, #1
 8008512:	bf14      	ite	ne
 8008514:	2301      	movne	r3, #1
 8008516:	2300      	moveq	r3, #0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	e03c      	b.n	8008596 <HAL_TIM_PWM_Start+0x9e>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b04      	cmp	r3, #4
 8008520:	d109      	bne.n	8008536 <HAL_TIM_PWM_Start+0x3e>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b01      	cmp	r3, #1
 800852c:	bf14      	ite	ne
 800852e:	2301      	movne	r3, #1
 8008530:	2300      	moveq	r3, #0
 8008532:	b2db      	uxtb	r3, r3
 8008534:	e02f      	b.n	8008596 <HAL_TIM_PWM_Start+0x9e>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b08      	cmp	r3, #8
 800853a:	d109      	bne.n	8008550 <HAL_TIM_PWM_Start+0x58>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	e022      	b.n	8008596 <HAL_TIM_PWM_Start+0x9e>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b0c      	cmp	r3, #12
 8008554:	d109      	bne.n	800856a <HAL_TIM_PWM_Start+0x72>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b01      	cmp	r3, #1
 8008560:	bf14      	ite	ne
 8008562:	2301      	movne	r3, #1
 8008564:	2300      	moveq	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	e015      	b.n	8008596 <HAL_TIM_PWM_Start+0x9e>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b10      	cmp	r3, #16
 800856e:	d109      	bne.n	8008584 <HAL_TIM_PWM_Start+0x8c>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b01      	cmp	r3, #1
 800857a:	bf14      	ite	ne
 800857c:	2301      	movne	r3, #1
 800857e:	2300      	moveq	r3, #0
 8008580:	b2db      	uxtb	r3, r3
 8008582:	e008      	b.n	8008596 <HAL_TIM_PWM_Start+0x9e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	bf14      	ite	ne
 8008590:	2301      	movne	r3, #1
 8008592:	2300      	moveq	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e0a6      	b.n	80086ec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <HAL_TIM_PWM_Start+0xb6>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085ac:	e023      	b.n	80085f6 <HAL_TIM_PWM_Start+0xfe>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d104      	bne.n	80085be <HAL_TIM_PWM_Start+0xc6>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085bc:	e01b      	b.n	80085f6 <HAL_TIM_PWM_Start+0xfe>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d104      	bne.n	80085ce <HAL_TIM_PWM_Start+0xd6>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085cc:	e013      	b.n	80085f6 <HAL_TIM_PWM_Start+0xfe>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b0c      	cmp	r3, #12
 80085d2:	d104      	bne.n	80085de <HAL_TIM_PWM_Start+0xe6>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085dc:	e00b      	b.n	80085f6 <HAL_TIM_PWM_Start+0xfe>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d104      	bne.n	80085ee <HAL_TIM_PWM_Start+0xf6>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085ec:	e003      	b.n	80085f6 <HAL_TIM_PWM_Start+0xfe>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2202      	movs	r2, #2
 80085f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2201      	movs	r2, #1
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 fd00 	bl	800a004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a3a      	ldr	r2, [pc, #232]	@ (80086f4 <HAL_TIM_PWM_Start+0x1fc>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d018      	beq.n	8008640 <HAL_TIM_PWM_Start+0x148>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a39      	ldr	r2, [pc, #228]	@ (80086f8 <HAL_TIM_PWM_Start+0x200>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d013      	beq.n	8008640 <HAL_TIM_PWM_Start+0x148>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a37      	ldr	r2, [pc, #220]	@ (80086fc <HAL_TIM_PWM_Start+0x204>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d00e      	beq.n	8008640 <HAL_TIM_PWM_Start+0x148>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a36      	ldr	r2, [pc, #216]	@ (8008700 <HAL_TIM_PWM_Start+0x208>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d009      	beq.n	8008640 <HAL_TIM_PWM_Start+0x148>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a34      	ldr	r2, [pc, #208]	@ (8008704 <HAL_TIM_PWM_Start+0x20c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d004      	beq.n	8008640 <HAL_TIM_PWM_Start+0x148>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a33      	ldr	r2, [pc, #204]	@ (8008708 <HAL_TIM_PWM_Start+0x210>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d101      	bne.n	8008644 <HAL_TIM_PWM_Start+0x14c>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <HAL_TIM_PWM_Start+0x14e>
 8008644:	2300      	movs	r3, #0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d007      	beq.n	800865a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008658:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a25      	ldr	r2, [pc, #148]	@ (80086f4 <HAL_TIM_PWM_Start+0x1fc>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d022      	beq.n	80086aa <HAL_TIM_PWM_Start+0x1b2>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800866c:	d01d      	beq.n	80086aa <HAL_TIM_PWM_Start+0x1b2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a26      	ldr	r2, [pc, #152]	@ (800870c <HAL_TIM_PWM_Start+0x214>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d018      	beq.n	80086aa <HAL_TIM_PWM_Start+0x1b2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a24      	ldr	r2, [pc, #144]	@ (8008710 <HAL_TIM_PWM_Start+0x218>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d013      	beq.n	80086aa <HAL_TIM_PWM_Start+0x1b2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a23      	ldr	r2, [pc, #140]	@ (8008714 <HAL_TIM_PWM_Start+0x21c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00e      	beq.n	80086aa <HAL_TIM_PWM_Start+0x1b2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a19      	ldr	r2, [pc, #100]	@ (80086f8 <HAL_TIM_PWM_Start+0x200>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d009      	beq.n	80086aa <HAL_TIM_PWM_Start+0x1b2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a18      	ldr	r2, [pc, #96]	@ (80086fc <HAL_TIM_PWM_Start+0x204>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d004      	beq.n	80086aa <HAL_TIM_PWM_Start+0x1b2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a18      	ldr	r2, [pc, #96]	@ (8008708 <HAL_TIM_PWM_Start+0x210>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d115      	bne.n	80086d6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	4b19      	ldr	r3, [pc, #100]	@ (8008718 <HAL_TIM_PWM_Start+0x220>)
 80086b2:	4013      	ands	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b06      	cmp	r3, #6
 80086ba:	d015      	beq.n	80086e8 <HAL_TIM_PWM_Start+0x1f0>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c2:	d011      	beq.n	80086e8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0201 	orr.w	r2, r2, #1
 80086d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d4:	e008      	b.n	80086e8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0201 	orr.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	e000      	b.n	80086ea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	40012c00 	.word	0x40012c00
 80086f8:	40013400 	.word	0x40013400
 80086fc:	40014000 	.word	0x40014000
 8008700:	40014400 	.word	0x40014400
 8008704:	40014800 	.word	0x40014800
 8008708:	40015000 	.word	0x40015000
 800870c:	40000400 	.word	0x40000400
 8008710:	40000800 	.word	0x40000800
 8008714:	40000c00 	.word	0x40000c00
 8008718:	00010007 	.word	0x00010007

0800871c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fc68 	bl	800a004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a40      	ldr	r2, [pc, #256]	@ (800883c <HAL_TIM_PWM_Stop+0x120>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d018      	beq.n	8008770 <HAL_TIM_PWM_Stop+0x54>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a3f      	ldr	r2, [pc, #252]	@ (8008840 <HAL_TIM_PWM_Stop+0x124>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d013      	beq.n	8008770 <HAL_TIM_PWM_Stop+0x54>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a3d      	ldr	r2, [pc, #244]	@ (8008844 <HAL_TIM_PWM_Stop+0x128>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00e      	beq.n	8008770 <HAL_TIM_PWM_Stop+0x54>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a3c      	ldr	r2, [pc, #240]	@ (8008848 <HAL_TIM_PWM_Stop+0x12c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d009      	beq.n	8008770 <HAL_TIM_PWM_Stop+0x54>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a3a      	ldr	r2, [pc, #232]	@ (800884c <HAL_TIM_PWM_Stop+0x130>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d004      	beq.n	8008770 <HAL_TIM_PWM_Stop+0x54>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a39      	ldr	r2, [pc, #228]	@ (8008850 <HAL_TIM_PWM_Stop+0x134>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d101      	bne.n	8008774 <HAL_TIM_PWM_Stop+0x58>
 8008770:	2301      	movs	r3, #1
 8008772:	e000      	b.n	8008776 <HAL_TIM_PWM_Stop+0x5a>
 8008774:	2300      	movs	r3, #0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d017      	beq.n	80087aa <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008784:	4013      	ands	r3, r2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10f      	bne.n	80087aa <HAL_TIM_PWM_Stop+0x8e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6a1a      	ldr	r2, [r3, #32]
 8008790:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008794:	4013      	ands	r3, r2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d107      	bne.n	80087aa <HAL_TIM_PWM_Stop+0x8e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6a1a      	ldr	r2, [r3, #32]
 80087b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80087b4:	4013      	ands	r3, r2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10f      	bne.n	80087da <HAL_TIM_PWM_Stop+0xbe>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6a1a      	ldr	r2, [r3, #32]
 80087c0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d107      	bne.n	80087da <HAL_TIM_PWM_Stop+0xbe>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0201 	bic.w	r2, r2, #1
 80087d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <HAL_TIM_PWM_Stop+0xce>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087e8:	e023      	b.n	8008832 <HAL_TIM_PWM_Stop+0x116>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d104      	bne.n	80087fa <HAL_TIM_PWM_Stop+0xde>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087f8:	e01b      	b.n	8008832 <HAL_TIM_PWM_Stop+0x116>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	d104      	bne.n	800880a <HAL_TIM_PWM_Stop+0xee>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008808:	e013      	b.n	8008832 <HAL_TIM_PWM_Stop+0x116>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b0c      	cmp	r3, #12
 800880e:	d104      	bne.n	800881a <HAL_TIM_PWM_Stop+0xfe>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008818:	e00b      	b.n	8008832 <HAL_TIM_PWM_Stop+0x116>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b10      	cmp	r3, #16
 800881e:	d104      	bne.n	800882a <HAL_TIM_PWM_Stop+0x10e>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008828:	e003      	b.n	8008832 <HAL_TIM_PWM_Stop+0x116>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	40012c00 	.word	0x40012c00
 8008840:	40013400 	.word	0x40013400
 8008844:	40014000 	.word	0x40014000
 8008848:	40014400 	.word	0x40014400
 800884c:	40014800 	.word	0x40014800
 8008850:	40015000 	.word	0x40015000

08008854 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e049      	b.n	80088fa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f841 	bl	8008902 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3304      	adds	r3, #4
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	f000 fe12 	bl	80094bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d104      	bne.n	8008936 <HAL_TIM_IC_Start_IT+0x1e>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008932:	b2db      	uxtb	r3, r3
 8008934:	e023      	b.n	800897e <HAL_TIM_IC_Start_IT+0x66>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b04      	cmp	r3, #4
 800893a:	d104      	bne.n	8008946 <HAL_TIM_IC_Start_IT+0x2e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008942:	b2db      	uxtb	r3, r3
 8008944:	e01b      	b.n	800897e <HAL_TIM_IC_Start_IT+0x66>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d104      	bne.n	8008956 <HAL_TIM_IC_Start_IT+0x3e>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008952:	b2db      	uxtb	r3, r3
 8008954:	e013      	b.n	800897e <HAL_TIM_IC_Start_IT+0x66>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b0c      	cmp	r3, #12
 800895a:	d104      	bne.n	8008966 <HAL_TIM_IC_Start_IT+0x4e>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008962:	b2db      	uxtb	r3, r3
 8008964:	e00b      	b.n	800897e <HAL_TIM_IC_Start_IT+0x66>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b10      	cmp	r3, #16
 800896a:	d104      	bne.n	8008976 <HAL_TIM_IC_Start_IT+0x5e>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008972:	b2db      	uxtb	r3, r3
 8008974:	e003      	b.n	800897e <HAL_TIM_IC_Start_IT+0x66>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800897c:	b2db      	uxtb	r3, r3
 800897e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d104      	bne.n	8008990 <HAL_TIM_IC_Start_IT+0x78>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800898c:	b2db      	uxtb	r3, r3
 800898e:	e013      	b.n	80089b8 <HAL_TIM_IC_Start_IT+0xa0>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b04      	cmp	r3, #4
 8008994:	d104      	bne.n	80089a0 <HAL_TIM_IC_Start_IT+0x88>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800899c:	b2db      	uxtb	r3, r3
 800899e:	e00b      	b.n	80089b8 <HAL_TIM_IC_Start_IT+0xa0>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b08      	cmp	r3, #8
 80089a4:	d104      	bne.n	80089b0 <HAL_TIM_IC_Start_IT+0x98>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	e003      	b.n	80089b8 <HAL_TIM_IC_Start_IT+0xa0>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d102      	bne.n	80089c6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80089c0:	7b7b      	ldrb	r3, [r7, #13]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d001      	beq.n	80089ca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e0e2      	b.n	8008b90 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <HAL_TIM_IC_Start_IT+0xc2>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089d8:	e023      	b.n	8008a22 <HAL_TIM_IC_Start_IT+0x10a>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d104      	bne.n	80089ea <HAL_TIM_IC_Start_IT+0xd2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089e8:	e01b      	b.n	8008a22 <HAL_TIM_IC_Start_IT+0x10a>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d104      	bne.n	80089fa <HAL_TIM_IC_Start_IT+0xe2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089f8:	e013      	b.n	8008a22 <HAL_TIM_IC_Start_IT+0x10a>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b0c      	cmp	r3, #12
 80089fe:	d104      	bne.n	8008a0a <HAL_TIM_IC_Start_IT+0xf2>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a08:	e00b      	b.n	8008a22 <HAL_TIM_IC_Start_IT+0x10a>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b10      	cmp	r3, #16
 8008a0e:	d104      	bne.n	8008a1a <HAL_TIM_IC_Start_IT+0x102>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a18:	e003      	b.n	8008a22 <HAL_TIM_IC_Start_IT+0x10a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d104      	bne.n	8008a32 <HAL_TIM_IC_Start_IT+0x11a>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a30:	e013      	b.n	8008a5a <HAL_TIM_IC_Start_IT+0x142>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d104      	bne.n	8008a42 <HAL_TIM_IC_Start_IT+0x12a>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a40:	e00b      	b.n	8008a5a <HAL_TIM_IC_Start_IT+0x142>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d104      	bne.n	8008a52 <HAL_TIM_IC_Start_IT+0x13a>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a50:	e003      	b.n	8008a5a <HAL_TIM_IC_Start_IT+0x142>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2202      	movs	r2, #2
 8008a56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b0c      	cmp	r3, #12
 8008a5e:	d841      	bhi.n	8008ae4 <HAL_TIM_IC_Start_IT+0x1cc>
 8008a60:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <HAL_TIM_IC_Start_IT+0x150>)
 8008a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a66:	bf00      	nop
 8008a68:	08008a9d 	.word	0x08008a9d
 8008a6c:	08008ae5 	.word	0x08008ae5
 8008a70:	08008ae5 	.word	0x08008ae5
 8008a74:	08008ae5 	.word	0x08008ae5
 8008a78:	08008aaf 	.word	0x08008aaf
 8008a7c:	08008ae5 	.word	0x08008ae5
 8008a80:	08008ae5 	.word	0x08008ae5
 8008a84:	08008ae5 	.word	0x08008ae5
 8008a88:	08008ac1 	.word	0x08008ac1
 8008a8c:	08008ae5 	.word	0x08008ae5
 8008a90:	08008ae5 	.word	0x08008ae5
 8008a94:	08008ae5 	.word	0x08008ae5
 8008a98:	08008ad3 	.word	0x08008ad3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68da      	ldr	r2, [r3, #12]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0202 	orr.w	r2, r2, #2
 8008aaa:	60da      	str	r2, [r3, #12]
      break;
 8008aac:	e01d      	b.n	8008aea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f042 0204 	orr.w	r2, r2, #4
 8008abc:	60da      	str	r2, [r3, #12]
      break;
 8008abe:	e014      	b.n	8008aea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0208 	orr.w	r2, r2, #8
 8008ace:	60da      	str	r2, [r3, #12]
      break;
 8008ad0:	e00b      	b.n	8008aea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 0210 	orr.w	r2, r2, #16
 8008ae0:	60da      	str	r2, [r3, #12]
      break;
 8008ae2:	e002      	b.n	8008aea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae8:	bf00      	nop
  }

  if (status == HAL_OK)
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d14e      	bne.n	8008b8e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2201      	movs	r2, #1
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f001 fa83 	bl	800a004 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a25      	ldr	r2, [pc, #148]	@ (8008b98 <HAL_TIM_IC_Start_IT+0x280>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d022      	beq.n	8008b4e <HAL_TIM_IC_Start_IT+0x236>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b10:	d01d      	beq.n	8008b4e <HAL_TIM_IC_Start_IT+0x236>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a21      	ldr	r2, [pc, #132]	@ (8008b9c <HAL_TIM_IC_Start_IT+0x284>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d018      	beq.n	8008b4e <HAL_TIM_IC_Start_IT+0x236>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a1f      	ldr	r2, [pc, #124]	@ (8008ba0 <HAL_TIM_IC_Start_IT+0x288>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d013      	beq.n	8008b4e <HAL_TIM_IC_Start_IT+0x236>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ba4 <HAL_TIM_IC_Start_IT+0x28c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d00e      	beq.n	8008b4e <HAL_TIM_IC_Start_IT+0x236>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba8 <HAL_TIM_IC_Start_IT+0x290>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d009      	beq.n	8008b4e <HAL_TIM_IC_Start_IT+0x236>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8008bac <HAL_TIM_IC_Start_IT+0x294>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d004      	beq.n	8008b4e <HAL_TIM_IC_Start_IT+0x236>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a19      	ldr	r2, [pc, #100]	@ (8008bb0 <HAL_TIM_IC_Start_IT+0x298>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d115      	bne.n	8008b7a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	4b17      	ldr	r3, [pc, #92]	@ (8008bb4 <HAL_TIM_IC_Start_IT+0x29c>)
 8008b56:	4013      	ands	r3, r2
 8008b58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2b06      	cmp	r3, #6
 8008b5e:	d015      	beq.n	8008b8c <HAL_TIM_IC_Start_IT+0x274>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b66:	d011      	beq.n	8008b8c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b78:	e008      	b.n	8008b8c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f042 0201 	orr.w	r2, r2, #1
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	e000      	b.n	8008b8e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b8c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	40012c00 	.word	0x40012c00
 8008b9c:	40000400 	.word	0x40000400
 8008ba0:	40000800 	.word	0x40000800
 8008ba4:	40000c00 	.word	0x40000c00
 8008ba8:	40013400 	.word	0x40013400
 8008bac:	40014000 	.word	0x40014000
 8008bb0:	40015000 	.word	0x40015000
 8008bb4:	00010007 	.word	0x00010007

08008bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d020      	beq.n	8008c1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d01b      	beq.n	8008c1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f06f 0202 	mvn.w	r2, #2
 8008bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7f9 fecc 	bl	80029a0 <HAL_TIM_IC_CaptureCallback>
 8008c08:	e005      	b.n	8008c16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fc38 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fc3f 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d020      	beq.n	8008c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01b      	beq.n	8008c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f06f 0204 	mvn.w	r2, #4
 8008c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7f9 fea6 	bl	80029a0 <HAL_TIM_IC_CaptureCallback>
 8008c54:	e005      	b.n	8008c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fc12 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fc19 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f003 0308 	and.w	r3, r3, #8
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d020      	beq.n	8008cb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01b      	beq.n	8008cb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f06f 0208 	mvn.w	r2, #8
 8008c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2204      	movs	r2, #4
 8008c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7f9 fe80 	bl	80029a0 <HAL_TIM_IC_CaptureCallback>
 8008ca0:	e005      	b.n	8008cae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fbec 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fbf3 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f003 0310 	and.w	r3, r3, #16
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d020      	beq.n	8008d00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f003 0310 	and.w	r3, r3, #16
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01b      	beq.n	8008d00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f06f 0210 	mvn.w	r2, #16
 8008cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7f9 fe5a 	bl	80029a0 <HAL_TIM_IC_CaptureCallback>
 8008cec:	e005      	b.n	8008cfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fbc6 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fbcd 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00c      	beq.n	8008d24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d007      	beq.n	8008d24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f06f 0201 	mvn.w	r2, #1
 8008d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fba4 	bl	800946c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d104      	bne.n	8008d38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00c      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fbd3 	bl	800a4f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00c      	beq.n	8008d76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 fbcb 	bl	800a50c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00c      	beq.n	8008d9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fb87 	bl	80094a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f003 0320 	and.w	r3, r3, #32
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00c      	beq.n	8008dbe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d007      	beq.n	8008dbe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f06f 0220 	mvn.w	r2, #32
 8008db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fb93 	bl	800a4e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00c      	beq.n	8008de2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d007      	beq.n	8008de2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fb9f 	bl	800a520 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00c      	beq.n	8008e06 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d007      	beq.n	8008e06 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 fb97 	bl	800a534 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 fb8f 	bl	800a548 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00c      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d007      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 fb87 	bl	800a55c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d101      	bne.n	8008e74 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008e70:	2302      	movs	r3, #2
 8008e72:	e088      	b.n	8008f86 <HAL_TIM_IC_ConfigChannel+0x130>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d11b      	bne.n	8008eba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008e92:	f000 fef1 	bl	8009c78 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	699a      	ldr	r2, [r3, #24]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 020c 	bic.w	r2, r2, #12
 8008ea4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6999      	ldr	r1, [r3, #24]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	619a      	str	r2, [r3, #24]
 8008eb8:	e060      	b.n	8008f7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d11c      	bne.n	8008efa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008ed0:	f000 ff75 	bl	8009dbe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008ee2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6999      	ldr	r1, [r3, #24]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	021a      	lsls	r2, r3, #8
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	619a      	str	r2, [r3, #24]
 8008ef8:	e040      	b.n	8008f7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d11b      	bne.n	8008f38 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008f10:	f000 ffc2 	bl	8009e98 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69da      	ldr	r2, [r3, #28]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 020c 	bic.w	r2, r2, #12
 8008f22:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69d9      	ldr	r1, [r3, #28]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	61da      	str	r2, [r3, #28]
 8008f36:	e021      	b.n	8008f7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b0c      	cmp	r3, #12
 8008f3c:	d11c      	bne.n	8008f78 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008f4e:	f000 ffdf 	bl	8009f10 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69da      	ldr	r2, [r3, #28]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008f60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69d9      	ldr	r1, [r3, #28]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	021a      	lsls	r2, r3, #8
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	61da      	str	r2, [r3, #28]
 8008f76:	e001      	b.n	8008f7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008faa:	2302      	movs	r3, #2
 8008fac:	e0ff      	b.n	80091ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b14      	cmp	r3, #20
 8008fba:	f200 80f0 	bhi.w	800919e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08009019 	.word	0x08009019
 8008fc8:	0800919f 	.word	0x0800919f
 8008fcc:	0800919f 	.word	0x0800919f
 8008fd0:	0800919f 	.word	0x0800919f
 8008fd4:	08009059 	.word	0x08009059
 8008fd8:	0800919f 	.word	0x0800919f
 8008fdc:	0800919f 	.word	0x0800919f
 8008fe0:	0800919f 	.word	0x0800919f
 8008fe4:	0800909b 	.word	0x0800909b
 8008fe8:	0800919f 	.word	0x0800919f
 8008fec:	0800919f 	.word	0x0800919f
 8008ff0:	0800919f 	.word	0x0800919f
 8008ff4:	080090db 	.word	0x080090db
 8008ff8:	0800919f 	.word	0x0800919f
 8008ffc:	0800919f 	.word	0x0800919f
 8009000:	0800919f 	.word	0x0800919f
 8009004:	0800911d 	.word	0x0800911d
 8009008:	0800919f 	.word	0x0800919f
 800900c:	0800919f 	.word	0x0800919f
 8009010:	0800919f 	.word	0x0800919f
 8009014:	0800915d 	.word	0x0800915d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fb00 	bl	8009624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0208 	orr.w	r2, r2, #8
 8009032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0204 	bic.w	r2, r2, #4
 8009042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6999      	ldr	r1, [r3, #24]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	691a      	ldr	r2, [r3, #16]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	619a      	str	r2, [r3, #24]
      break;
 8009056:	e0a5      	b.n	80091a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fb7a 	bl	8009758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6999      	ldr	r1, [r3, #24]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	021a      	lsls	r2, r3, #8
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	619a      	str	r2, [r3, #24]
      break;
 8009098:	e084      	b.n	80091a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 fbed 	bl	8009880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69da      	ldr	r2, [r3, #28]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0208 	orr.w	r2, r2, #8
 80090b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69da      	ldr	r2, [r3, #28]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 0204 	bic.w	r2, r2, #4
 80090c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69d9      	ldr	r1, [r3, #28]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	61da      	str	r2, [r3, #28]
      break;
 80090d8:	e064      	b.n	80091a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fc5f 	bl	80099a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69da      	ldr	r2, [r3, #28]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69da      	ldr	r2, [r3, #28]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69d9      	ldr	r1, [r3, #28]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	021a      	lsls	r2, r3, #8
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	61da      	str	r2, [r3, #28]
      break;
 800911a:	e043      	b.n	80091a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fcd2 	bl	8009acc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0208 	orr.w	r2, r2, #8
 8009136:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f022 0204 	bic.w	r2, r2, #4
 8009146:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	691a      	ldr	r2, [r3, #16]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800915a:	e023      	b.n	80091a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fd1c 	bl	8009ba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009176:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009186:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	021a      	lsls	r2, r3, #8
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800919c:	e002      	b.n	80091a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	75fb      	strb	r3, [r7, #23]
      break;
 80091a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop

080091b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_TIM_ConfigClockSource+0x1c>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e0f6      	b.n	80093c2 <HAL_TIM_ConfigClockSource+0x20a>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80091f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80091f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a6f      	ldr	r2, [pc, #444]	@ (80093cc <HAL_TIM_ConfigClockSource+0x214>)
 800920e:	4293      	cmp	r3, r2
 8009210:	f000 80c1 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 8009214:	4a6d      	ldr	r2, [pc, #436]	@ (80093cc <HAL_TIM_ConfigClockSource+0x214>)
 8009216:	4293      	cmp	r3, r2
 8009218:	f200 80c6 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800921c:	4a6c      	ldr	r2, [pc, #432]	@ (80093d0 <HAL_TIM_ConfigClockSource+0x218>)
 800921e:	4293      	cmp	r3, r2
 8009220:	f000 80b9 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 8009224:	4a6a      	ldr	r2, [pc, #424]	@ (80093d0 <HAL_TIM_ConfigClockSource+0x218>)
 8009226:	4293      	cmp	r3, r2
 8009228:	f200 80be 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800922c:	4a69      	ldr	r2, [pc, #420]	@ (80093d4 <HAL_TIM_ConfigClockSource+0x21c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	f000 80b1 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 8009234:	4a67      	ldr	r2, [pc, #412]	@ (80093d4 <HAL_TIM_ConfigClockSource+0x21c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	f200 80b6 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800923c:	4a66      	ldr	r2, [pc, #408]	@ (80093d8 <HAL_TIM_ConfigClockSource+0x220>)
 800923e:	4293      	cmp	r3, r2
 8009240:	f000 80a9 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 8009244:	4a64      	ldr	r2, [pc, #400]	@ (80093d8 <HAL_TIM_ConfigClockSource+0x220>)
 8009246:	4293      	cmp	r3, r2
 8009248:	f200 80ae 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800924c:	4a63      	ldr	r2, [pc, #396]	@ (80093dc <HAL_TIM_ConfigClockSource+0x224>)
 800924e:	4293      	cmp	r3, r2
 8009250:	f000 80a1 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 8009254:	4a61      	ldr	r2, [pc, #388]	@ (80093dc <HAL_TIM_ConfigClockSource+0x224>)
 8009256:	4293      	cmp	r3, r2
 8009258:	f200 80a6 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800925c:	4a60      	ldr	r2, [pc, #384]	@ (80093e0 <HAL_TIM_ConfigClockSource+0x228>)
 800925e:	4293      	cmp	r3, r2
 8009260:	f000 8099 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 8009264:	4a5e      	ldr	r2, [pc, #376]	@ (80093e0 <HAL_TIM_ConfigClockSource+0x228>)
 8009266:	4293      	cmp	r3, r2
 8009268:	f200 809e 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800926c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009270:	f000 8091 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 8009274:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009278:	f200 8096 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800927c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009280:	f000 8089 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 8009284:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009288:	f200 808e 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800928c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009290:	d03e      	beq.n	8009310 <HAL_TIM_ConfigClockSource+0x158>
 8009292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009296:	f200 8087 	bhi.w	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 800929a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800929e:	f000 8086 	beq.w	80093ae <HAL_TIM_ConfigClockSource+0x1f6>
 80092a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a6:	d87f      	bhi.n	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092a8:	2b70      	cmp	r3, #112	@ 0x70
 80092aa:	d01a      	beq.n	80092e2 <HAL_TIM_ConfigClockSource+0x12a>
 80092ac:	2b70      	cmp	r3, #112	@ 0x70
 80092ae:	d87b      	bhi.n	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092b0:	2b60      	cmp	r3, #96	@ 0x60
 80092b2:	d050      	beq.n	8009356 <HAL_TIM_ConfigClockSource+0x19e>
 80092b4:	2b60      	cmp	r3, #96	@ 0x60
 80092b6:	d877      	bhi.n	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092b8:	2b50      	cmp	r3, #80	@ 0x50
 80092ba:	d03c      	beq.n	8009336 <HAL_TIM_ConfigClockSource+0x17e>
 80092bc:	2b50      	cmp	r3, #80	@ 0x50
 80092be:	d873      	bhi.n	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092c0:	2b40      	cmp	r3, #64	@ 0x40
 80092c2:	d058      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x1be>
 80092c4:	2b40      	cmp	r3, #64	@ 0x40
 80092c6:	d86f      	bhi.n	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092c8:	2b30      	cmp	r3, #48	@ 0x30
 80092ca:	d064      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 80092cc:	2b30      	cmp	r3, #48	@ 0x30
 80092ce:	d86b      	bhi.n	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092d0:	2b20      	cmp	r3, #32
 80092d2:	d060      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 80092d4:	2b20      	cmp	r3, #32
 80092d6:	d867      	bhi.n	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d05c      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 80092dc:	2b10      	cmp	r3, #16
 80092de:	d05a      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x1de>
 80092e0:	e062      	b.n	80093a8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092f2:	f000 fe67 	bl	8009fc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009304:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	609a      	str	r2, [r3, #8]
      break;
 800930e:	e04f      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009320:	f000 fe50 	bl	8009fc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689a      	ldr	r2, [r3, #8]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009332:	609a      	str	r2, [r3, #8]
      break;
 8009334:	e03c      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009342:	461a      	mov	r2, r3
 8009344:	f000 fd0c 	bl	8009d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2150      	movs	r1, #80	@ 0x50
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fe1b 	bl	8009f8a <TIM_ITRx_SetConfig>
      break;
 8009354:	e02c      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009362:	461a      	mov	r2, r3
 8009364:	f000 fd68 	bl	8009e38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2160      	movs	r1, #96	@ 0x60
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fe0b 	bl	8009f8a <TIM_ITRx_SetConfig>
      break;
 8009374:	e01c      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009382:	461a      	mov	r2, r3
 8009384:	f000 fcec 	bl	8009d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2140      	movs	r1, #64	@ 0x40
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fdfb 	bl	8009f8a <TIM_ITRx_SetConfig>
      break;
 8009394:	e00c      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4619      	mov	r1, r3
 80093a0:	4610      	mov	r0, r2
 80093a2:	f000 fdf2 	bl	8009f8a <TIM_ITRx_SetConfig>
      break;
 80093a6:	e003      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
      break;
 80093ac:	e000      	b.n	80093b0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80093ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	00100070 	.word	0x00100070
 80093d0:	00100060 	.word	0x00100060
 80093d4:	00100050 	.word	0x00100050
 80093d8:	00100040 	.word	0x00100040
 80093dc:	00100030 	.word	0x00100030
 80093e0:	00100020 	.word	0x00100020

080093e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b0c      	cmp	r3, #12
 80093f6:	d831      	bhi.n	800945c <HAL_TIM_ReadCapturedValue+0x78>
 80093f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009400 <HAL_TIM_ReadCapturedValue+0x1c>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009435 	.word	0x08009435
 8009404:	0800945d 	.word	0x0800945d
 8009408:	0800945d 	.word	0x0800945d
 800940c:	0800945d 	.word	0x0800945d
 8009410:	0800943f 	.word	0x0800943f
 8009414:	0800945d 	.word	0x0800945d
 8009418:	0800945d 	.word	0x0800945d
 800941c:	0800945d 	.word	0x0800945d
 8009420:	08009449 	.word	0x08009449
 8009424:	0800945d 	.word	0x0800945d
 8009428:	0800945d 	.word	0x0800945d
 800942c:	0800945d 	.word	0x0800945d
 8009430:	08009453 	.word	0x08009453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800943a:	60fb      	str	r3, [r7, #12]

      break;
 800943c:	e00f      	b.n	800945e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009444:	60fb      	str	r3, [r7, #12]

      break;
 8009446:	e00a      	b.n	800945e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944e:	60fb      	str	r3, [r7, #12]

      break;
 8009450:	e005      	b.n	800945e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009458:	60fb      	str	r3, [r7, #12]

      break;
 800945a:	e000      	b.n	800945e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800945c:	bf00      	nop
  }

  return tmpreg;
 800945e:	68fb      	ldr	r3, [r7, #12]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a4c      	ldr	r2, [pc, #304]	@ (8009600 <TIM_Base_SetConfig+0x144>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d017      	beq.n	8009504 <TIM_Base_SetConfig+0x48>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094da:	d013      	beq.n	8009504 <TIM_Base_SetConfig+0x48>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a49      	ldr	r2, [pc, #292]	@ (8009604 <TIM_Base_SetConfig+0x148>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00f      	beq.n	8009504 <TIM_Base_SetConfig+0x48>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a48      	ldr	r2, [pc, #288]	@ (8009608 <TIM_Base_SetConfig+0x14c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00b      	beq.n	8009504 <TIM_Base_SetConfig+0x48>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a47      	ldr	r2, [pc, #284]	@ (800960c <TIM_Base_SetConfig+0x150>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d007      	beq.n	8009504 <TIM_Base_SetConfig+0x48>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a46      	ldr	r2, [pc, #280]	@ (8009610 <TIM_Base_SetConfig+0x154>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d003      	beq.n	8009504 <TIM_Base_SetConfig+0x48>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a45      	ldr	r2, [pc, #276]	@ (8009614 <TIM_Base_SetConfig+0x158>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d108      	bne.n	8009516 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800950a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a39      	ldr	r2, [pc, #228]	@ (8009600 <TIM_Base_SetConfig+0x144>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d023      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009524:	d01f      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a36      	ldr	r2, [pc, #216]	@ (8009604 <TIM_Base_SetConfig+0x148>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d01b      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a35      	ldr	r2, [pc, #212]	@ (8009608 <TIM_Base_SetConfig+0x14c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d017      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a34      	ldr	r2, [pc, #208]	@ (800960c <TIM_Base_SetConfig+0x150>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d013      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a33      	ldr	r2, [pc, #204]	@ (8009610 <TIM_Base_SetConfig+0x154>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00f      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a33      	ldr	r2, [pc, #204]	@ (8009618 <TIM_Base_SetConfig+0x15c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00b      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a32      	ldr	r2, [pc, #200]	@ (800961c <TIM_Base_SetConfig+0x160>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d007      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a31      	ldr	r2, [pc, #196]	@ (8009620 <TIM_Base_SetConfig+0x164>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d003      	beq.n	8009566 <TIM_Base_SetConfig+0xaa>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a2c      	ldr	r2, [pc, #176]	@ (8009614 <TIM_Base_SetConfig+0x158>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d108      	bne.n	8009578 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800956c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a18      	ldr	r2, [pc, #96]	@ (8009600 <TIM_Base_SetConfig+0x144>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d013      	beq.n	80095cc <TIM_Base_SetConfig+0x110>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009610 <TIM_Base_SetConfig+0x154>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d00f      	beq.n	80095cc <TIM_Base_SetConfig+0x110>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009618 <TIM_Base_SetConfig+0x15c>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00b      	beq.n	80095cc <TIM_Base_SetConfig+0x110>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a19      	ldr	r2, [pc, #100]	@ (800961c <TIM_Base_SetConfig+0x160>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d007      	beq.n	80095cc <TIM_Base_SetConfig+0x110>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a18      	ldr	r2, [pc, #96]	@ (8009620 <TIM_Base_SetConfig+0x164>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d003      	beq.n	80095cc <TIM_Base_SetConfig+0x110>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a13      	ldr	r2, [pc, #76]	@ (8009614 <TIM_Base_SetConfig+0x158>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d103      	bne.n	80095d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	691a      	ldr	r2, [r3, #16]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d105      	bne.n	80095f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f023 0201 	bic.w	r2, r3, #1
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	611a      	str	r2, [r3, #16]
  }
}
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40012c00 	.word	0x40012c00
 8009604:	40000400 	.word	0x40000400
 8009608:	40000800 	.word	0x40000800
 800960c:	40000c00 	.word	0x40000c00
 8009610:	40013400 	.word	0x40013400
 8009614:	40015000 	.word	0x40015000
 8009618:	40014000 	.word	0x40014000
 800961c:	40014400 	.word	0x40014400
 8009620:	40014800 	.word	0x40014800

08009624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	f023 0201 	bic.w	r2, r3, #1
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f023 0303 	bic.w	r3, r3, #3
 800965e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f023 0302 	bic.w	r3, r3, #2
 8009670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	4313      	orrs	r3, r2
 800967a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a30      	ldr	r2, [pc, #192]	@ (8009740 <TIM_OC1_SetConfig+0x11c>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d013      	beq.n	80096ac <TIM_OC1_SetConfig+0x88>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a2f      	ldr	r2, [pc, #188]	@ (8009744 <TIM_OC1_SetConfig+0x120>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d00f      	beq.n	80096ac <TIM_OC1_SetConfig+0x88>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a2e      	ldr	r2, [pc, #184]	@ (8009748 <TIM_OC1_SetConfig+0x124>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00b      	beq.n	80096ac <TIM_OC1_SetConfig+0x88>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a2d      	ldr	r2, [pc, #180]	@ (800974c <TIM_OC1_SetConfig+0x128>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d007      	beq.n	80096ac <TIM_OC1_SetConfig+0x88>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a2c      	ldr	r2, [pc, #176]	@ (8009750 <TIM_OC1_SetConfig+0x12c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d003      	beq.n	80096ac <TIM_OC1_SetConfig+0x88>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a2b      	ldr	r2, [pc, #172]	@ (8009754 <TIM_OC1_SetConfig+0x130>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d10c      	bne.n	80096c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f023 0308 	bic.w	r3, r3, #8
 80096b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f023 0304 	bic.w	r3, r3, #4
 80096c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009740 <TIM_OC1_SetConfig+0x11c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d013      	beq.n	80096f6 <TIM_OC1_SetConfig+0xd2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009744 <TIM_OC1_SetConfig+0x120>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00f      	beq.n	80096f6 <TIM_OC1_SetConfig+0xd2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009748 <TIM_OC1_SetConfig+0x124>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00b      	beq.n	80096f6 <TIM_OC1_SetConfig+0xd2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a1a      	ldr	r2, [pc, #104]	@ (800974c <TIM_OC1_SetConfig+0x128>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d007      	beq.n	80096f6 <TIM_OC1_SetConfig+0xd2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a19      	ldr	r2, [pc, #100]	@ (8009750 <TIM_OC1_SetConfig+0x12c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d003      	beq.n	80096f6 <TIM_OC1_SetConfig+0xd2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a18      	ldr	r2, [pc, #96]	@ (8009754 <TIM_OC1_SetConfig+0x130>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d111      	bne.n	800971a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4313      	orrs	r3, r2
 800970e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4313      	orrs	r3, r2
 8009718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	621a      	str	r2, [r3, #32]
}
 8009734:	bf00      	nop
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	40012c00 	.word	0x40012c00
 8009744:	40013400 	.word	0x40013400
 8009748:	40014000 	.word	0x40014000
 800974c:	40014400 	.word	0x40014400
 8009750:	40014800 	.word	0x40014800
 8009754:	40015000 	.word	0x40015000

08009758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	f023 0210 	bic.w	r2, r3, #16
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800978a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f023 0320 	bic.w	r3, r3, #32
 80097a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a2c      	ldr	r2, [pc, #176]	@ (8009868 <TIM_OC2_SetConfig+0x110>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d007      	beq.n	80097cc <TIM_OC2_SetConfig+0x74>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a2b      	ldr	r2, [pc, #172]	@ (800986c <TIM_OC2_SetConfig+0x114>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d003      	beq.n	80097cc <TIM_OC2_SetConfig+0x74>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009870 <TIM_OC2_SetConfig+0x118>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d10d      	bne.n	80097e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	011b      	lsls	r3, r3, #4
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4313      	orrs	r3, r2
 80097de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009868 <TIM_OC2_SetConfig+0x110>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d013      	beq.n	8009818 <TIM_OC2_SetConfig+0xc0>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a1e      	ldr	r2, [pc, #120]	@ (800986c <TIM_OC2_SetConfig+0x114>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d00f      	beq.n	8009818 <TIM_OC2_SetConfig+0xc0>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009874 <TIM_OC2_SetConfig+0x11c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00b      	beq.n	8009818 <TIM_OC2_SetConfig+0xc0>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a1d      	ldr	r2, [pc, #116]	@ (8009878 <TIM_OC2_SetConfig+0x120>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d007      	beq.n	8009818 <TIM_OC2_SetConfig+0xc0>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a1c      	ldr	r2, [pc, #112]	@ (800987c <TIM_OC2_SetConfig+0x124>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d003      	beq.n	8009818 <TIM_OC2_SetConfig+0xc0>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a17      	ldr	r2, [pc, #92]	@ (8009870 <TIM_OC2_SetConfig+0x118>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d113      	bne.n	8009840 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800981e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	4313      	orrs	r3, r2
 800983e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40012c00 	.word	0x40012c00
 800986c:	40013400 	.word	0x40013400
 8009870:	40015000 	.word	0x40015000
 8009874:	40014000 	.word	0x40014000
 8009878:	40014400 	.word	0x40014400
 800987c:	40014800 	.word	0x40014800

08009880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	021b      	lsls	r3, r3, #8
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a2b      	ldr	r2, [pc, #172]	@ (800998c <TIM_OC3_SetConfig+0x10c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_OC3_SetConfig+0x72>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009990 <TIM_OC3_SetConfig+0x110>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_OC3_SetConfig+0x72>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a29      	ldr	r2, [pc, #164]	@ (8009994 <TIM_OC3_SetConfig+0x114>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d10d      	bne.n	800990e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	021b      	lsls	r3, r3, #8
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800990c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a1e      	ldr	r2, [pc, #120]	@ (800998c <TIM_OC3_SetConfig+0x10c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d013      	beq.n	800993e <TIM_OC3_SetConfig+0xbe>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a1d      	ldr	r2, [pc, #116]	@ (8009990 <TIM_OC3_SetConfig+0x110>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d00f      	beq.n	800993e <TIM_OC3_SetConfig+0xbe>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a1d      	ldr	r2, [pc, #116]	@ (8009998 <TIM_OC3_SetConfig+0x118>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00b      	beq.n	800993e <TIM_OC3_SetConfig+0xbe>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a1c      	ldr	r2, [pc, #112]	@ (800999c <TIM_OC3_SetConfig+0x11c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d007      	beq.n	800993e <TIM_OC3_SetConfig+0xbe>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a1b      	ldr	r2, [pc, #108]	@ (80099a0 <TIM_OC3_SetConfig+0x120>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d003      	beq.n	800993e <TIM_OC3_SetConfig+0xbe>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a16      	ldr	r2, [pc, #88]	@ (8009994 <TIM_OC3_SetConfig+0x114>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d113      	bne.n	8009966 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800994c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	011b      	lsls	r3, r3, #4
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	4313      	orrs	r3, r2
 8009964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	621a      	str	r2, [r3, #32]
}
 8009980:	bf00      	nop
 8009982:	371c      	adds	r7, #28
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	40012c00 	.word	0x40012c00
 8009990:	40013400 	.word	0x40013400
 8009994:	40015000 	.word	0x40015000
 8009998:	40014000 	.word	0x40014000
 800999c:	40014400 	.word	0x40014400
 80099a0:	40014800 	.word	0x40014800

080099a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a1b      	ldr	r3, [r3, #32]
 80099b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	021b      	lsls	r3, r3, #8
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80099f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	031b      	lsls	r3, r3, #12
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a2c      	ldr	r2, [pc, #176]	@ (8009ab4 <TIM_OC4_SetConfig+0x110>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d007      	beq.n	8009a18 <TIM_OC4_SetConfig+0x74>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8009ab8 <TIM_OC4_SetConfig+0x114>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d003      	beq.n	8009a18 <TIM_OC4_SetConfig+0x74>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a2a      	ldr	r2, [pc, #168]	@ (8009abc <TIM_OC4_SetConfig+0x118>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d10d      	bne.n	8009a34 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	031b      	lsls	r3, r3, #12
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a1f      	ldr	r2, [pc, #124]	@ (8009ab4 <TIM_OC4_SetConfig+0x110>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d013      	beq.n	8009a64 <TIM_OC4_SetConfig+0xc0>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ab8 <TIM_OC4_SetConfig+0x114>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d00f      	beq.n	8009a64 <TIM_OC4_SetConfig+0xc0>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac0 <TIM_OC4_SetConfig+0x11c>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d00b      	beq.n	8009a64 <TIM_OC4_SetConfig+0xc0>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ac4 <TIM_OC4_SetConfig+0x120>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d007      	beq.n	8009a64 <TIM_OC4_SetConfig+0xc0>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac8 <TIM_OC4_SetConfig+0x124>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d003      	beq.n	8009a64 <TIM_OC4_SetConfig+0xc0>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a17      	ldr	r2, [pc, #92]	@ (8009abc <TIM_OC4_SetConfig+0x118>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d113      	bne.n	8009a8c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	019b      	lsls	r3, r3, #6
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	019b      	lsls	r3, r3, #6
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	621a      	str	r2, [r3, #32]
}
 8009aa6:	bf00      	nop
 8009aa8:	371c      	adds	r7, #28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	40012c00 	.word	0x40012c00
 8009ab8:	40013400 	.word	0x40013400
 8009abc:	40015000 	.word	0x40015000
 8009ac0:	40014000 	.word	0x40014000
 8009ac4:	40014400 	.word	0x40014400
 8009ac8:	40014800 	.word	0x40014800

08009acc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009b10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	041b      	lsls	r3, r3, #16
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a19      	ldr	r2, [pc, #100]	@ (8009b88 <TIM_OC5_SetConfig+0xbc>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d013      	beq.n	8009b4e <TIM_OC5_SetConfig+0x82>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a18      	ldr	r2, [pc, #96]	@ (8009b8c <TIM_OC5_SetConfig+0xc0>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d00f      	beq.n	8009b4e <TIM_OC5_SetConfig+0x82>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a17      	ldr	r2, [pc, #92]	@ (8009b90 <TIM_OC5_SetConfig+0xc4>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d00b      	beq.n	8009b4e <TIM_OC5_SetConfig+0x82>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a16      	ldr	r2, [pc, #88]	@ (8009b94 <TIM_OC5_SetConfig+0xc8>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d007      	beq.n	8009b4e <TIM_OC5_SetConfig+0x82>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a15      	ldr	r2, [pc, #84]	@ (8009b98 <TIM_OC5_SetConfig+0xcc>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d003      	beq.n	8009b4e <TIM_OC5_SetConfig+0x82>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a14      	ldr	r2, [pc, #80]	@ (8009b9c <TIM_OC5_SetConfig+0xd0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d109      	bne.n	8009b62 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	021b      	lsls	r3, r3, #8
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	621a      	str	r2, [r3, #32]
}
 8009b7c:	bf00      	nop
 8009b7e:	371c      	adds	r7, #28
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	40012c00 	.word	0x40012c00
 8009b8c:	40013400 	.word	0x40013400
 8009b90:	40014000 	.word	0x40014000
 8009b94:	40014400 	.word	0x40014400
 8009b98:	40014800 	.word	0x40014800
 8009b9c:	40015000 	.word	0x40015000

08009ba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	021b      	lsls	r3, r3, #8
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	051b      	lsls	r3, r3, #20
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8009c60 <TIM_OC6_SetConfig+0xc0>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d013      	beq.n	8009c24 <TIM_OC6_SetConfig+0x84>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a19      	ldr	r2, [pc, #100]	@ (8009c64 <TIM_OC6_SetConfig+0xc4>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d00f      	beq.n	8009c24 <TIM_OC6_SetConfig+0x84>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a18      	ldr	r2, [pc, #96]	@ (8009c68 <TIM_OC6_SetConfig+0xc8>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00b      	beq.n	8009c24 <TIM_OC6_SetConfig+0x84>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a17      	ldr	r2, [pc, #92]	@ (8009c6c <TIM_OC6_SetConfig+0xcc>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d007      	beq.n	8009c24 <TIM_OC6_SetConfig+0x84>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a16      	ldr	r2, [pc, #88]	@ (8009c70 <TIM_OC6_SetConfig+0xd0>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d003      	beq.n	8009c24 <TIM_OC6_SetConfig+0x84>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a15      	ldr	r2, [pc, #84]	@ (8009c74 <TIM_OC6_SetConfig+0xd4>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d109      	bne.n	8009c38 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	029b      	lsls	r3, r3, #10
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	40012c00 	.word	0x40012c00
 8009c64:	40013400 	.word	0x40013400
 8009c68:	40014000 	.word	0x40014000
 8009c6c:	40014400 	.word	0x40014400
 8009c70:	40014800 	.word	0x40014800
 8009c74:	40015000 	.word	0x40015000

08009c78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	f023 0201 	bic.w	r2, r3, #1
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4a28      	ldr	r2, [pc, #160]	@ (8009d44 <TIM_TI1_SetConfig+0xcc>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d01b      	beq.n	8009cde <TIM_TI1_SetConfig+0x66>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cac:	d017      	beq.n	8009cde <TIM_TI1_SetConfig+0x66>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4a25      	ldr	r2, [pc, #148]	@ (8009d48 <TIM_TI1_SetConfig+0xd0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d013      	beq.n	8009cde <TIM_TI1_SetConfig+0x66>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a24      	ldr	r2, [pc, #144]	@ (8009d4c <TIM_TI1_SetConfig+0xd4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00f      	beq.n	8009cde <TIM_TI1_SetConfig+0x66>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4a23      	ldr	r2, [pc, #140]	@ (8009d50 <TIM_TI1_SetConfig+0xd8>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00b      	beq.n	8009cde <TIM_TI1_SetConfig+0x66>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4a22      	ldr	r2, [pc, #136]	@ (8009d54 <TIM_TI1_SetConfig+0xdc>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d007      	beq.n	8009cde <TIM_TI1_SetConfig+0x66>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4a21      	ldr	r2, [pc, #132]	@ (8009d58 <TIM_TI1_SetConfig+0xe0>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_TI1_SetConfig+0x66>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4a20      	ldr	r2, [pc, #128]	@ (8009d5c <TIM_TI1_SetConfig+0xe4>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d101      	bne.n	8009ce2 <TIM_TI1_SetConfig+0x6a>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <TIM_TI1_SetConfig+0x6c>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d008      	beq.n	8009cfa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	e003      	b.n	8009d02 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f043 0301 	orr.w	r3, r3, #1
 8009d00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	011b      	lsls	r3, r3, #4
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f023 030a 	bic.w	r3, r3, #10
 8009d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f003 030a 	and.w	r3, r3, #10
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	621a      	str	r2, [r3, #32]
}
 8009d36:	bf00      	nop
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	40012c00 	.word	0x40012c00
 8009d48:	40000400 	.word	0x40000400
 8009d4c:	40000800 	.word	0x40000800
 8009d50:	40000c00 	.word	0x40000c00
 8009d54:	40013400 	.word	0x40013400
 8009d58:	40014000 	.word	0x40014000
 8009d5c:	40015000 	.word	0x40015000

08009d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b087      	sub	sp, #28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6a1b      	ldr	r3, [r3, #32]
 8009d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	f023 0201 	bic.w	r2, r3, #1
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f023 030a 	bic.w	r3, r3, #10
 8009d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	621a      	str	r2, [r3, #32]
}
 8009db2:	bf00      	nop
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b087      	sub	sp, #28
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
 8009dca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	f023 0210 	bic.w	r2, r3, #16
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	021b      	lsls	r3, r3, #8
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	031b      	lsls	r3, r3, #12
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	621a      	str	r2, [r3, #32]
}
 8009e2c:	bf00      	nop
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	f023 0210 	bic.w	r2, r3, #16
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	031b      	lsls	r3, r3, #12
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	011b      	lsls	r3, r3, #4
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	621a      	str	r2, [r3, #32]
}
 8009e8c:	bf00      	nop
 8009e8e:	371c      	adds	r7, #28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	69db      	ldr	r3, [r3, #28]
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f023 0303 	bic.w	r3, r3, #3
 8009ec4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ed4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	011b      	lsls	r3, r3, #4
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	021b      	lsls	r3, r3, #8
 8009eee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	621a      	str	r2, [r3, #32]
}
 8009f04:	bf00      	nop
 8009f06:	371c      	adds	r7, #28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a1b      	ldr	r3, [r3, #32]
 8009f28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	021b      	lsls	r3, r3, #8
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	031b      	lsls	r3, r3, #12
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009f62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	031b      	lsls	r3, r3, #12
 8009f68:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	621a      	str	r2, [r3, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	f043 0307 	orr.w	r3, r3, #7
 8009fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	609a      	str	r2, [r3, #8]
}
 8009fb8:	bf00      	nop
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	021a      	lsls	r2, r3, #8
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	609a      	str	r2, [r3, #8]
}
 8009ff8:	bf00      	nop
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f003 031f 	and.w	r3, r3, #31
 800a016:	2201      	movs	r2, #1
 800a018:	fa02 f303 	lsl.w	r3, r2, r3
 800a01c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6a1a      	ldr	r2, [r3, #32]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	43db      	mvns	r3, r3
 800a026:	401a      	ands	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a1a      	ldr	r2, [r3, #32]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f003 031f 	and.w	r3, r3, #31
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	fa01 f303 	lsl.w	r3, r1, r3
 800a03c:	431a      	orrs	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	621a      	str	r2, [r3, #32]
}
 800a042:	bf00      	nop
 800a044:	371c      	adds	r7, #28
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
	...

0800a050 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <HAL_TIMEx_PWMN_Start+0x24>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b01      	cmp	r3, #1
 800a06a:	bf14      	ite	ne
 800a06c:	2301      	movne	r3, #1
 800a06e:	2300      	moveq	r3, #0
 800a070:	b2db      	uxtb	r3, r3
 800a072:	e022      	b.n	800a0ba <HAL_TIMEx_PWMN_Start+0x6a>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b04      	cmp	r3, #4
 800a078:	d109      	bne.n	800a08e <HAL_TIMEx_PWMN_Start+0x3e>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b01      	cmp	r3, #1
 800a084:	bf14      	ite	ne
 800a086:	2301      	movne	r3, #1
 800a088:	2300      	moveq	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	e015      	b.n	800a0ba <HAL_TIMEx_PWMN_Start+0x6a>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b08      	cmp	r3, #8
 800a092:	d109      	bne.n	800a0a8 <HAL_TIMEx_PWMN_Start+0x58>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	bf14      	ite	ne
 800a0a0:	2301      	movne	r3, #1
 800a0a2:	2300      	moveq	r3, #0
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	e008      	b.n	800a0ba <HAL_TIMEx_PWMN_Start+0x6a>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	bf14      	ite	ne
 800a0b4:	2301      	movne	r3, #1
 800a0b6:	2300      	moveq	r3, #0
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e073      	b.n	800a1aa <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d104      	bne.n	800a0d2 <HAL_TIMEx_PWMN_Start+0x82>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0d0:	e013      	b.n	800a0fa <HAL_TIMEx_PWMN_Start+0xaa>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d104      	bne.n	800a0e2 <HAL_TIMEx_PWMN_Start+0x92>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0e0:	e00b      	b.n	800a0fa <HAL_TIMEx_PWMN_Start+0xaa>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d104      	bne.n	800a0f2 <HAL_TIMEx_PWMN_Start+0xa2>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0f0:	e003      	b.n	800a0fa <HAL_TIMEx_PWMN_Start+0xaa>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2204      	movs	r2, #4
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fa34 	bl	800a570 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a116:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a25      	ldr	r2, [pc, #148]	@ (800a1b4 <HAL_TIMEx_PWMN_Start+0x164>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d022      	beq.n	800a168 <HAL_TIMEx_PWMN_Start+0x118>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12a:	d01d      	beq.n	800a168 <HAL_TIMEx_PWMN_Start+0x118>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a21      	ldr	r2, [pc, #132]	@ (800a1b8 <HAL_TIMEx_PWMN_Start+0x168>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d018      	beq.n	800a168 <HAL_TIMEx_PWMN_Start+0x118>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a20      	ldr	r2, [pc, #128]	@ (800a1bc <HAL_TIMEx_PWMN_Start+0x16c>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d013      	beq.n	800a168 <HAL_TIMEx_PWMN_Start+0x118>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a1e      	ldr	r2, [pc, #120]	@ (800a1c0 <HAL_TIMEx_PWMN_Start+0x170>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d00e      	beq.n	800a168 <HAL_TIMEx_PWMN_Start+0x118>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c4 <HAL_TIMEx_PWMN_Start+0x174>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d009      	beq.n	800a168 <HAL_TIMEx_PWMN_Start+0x118>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c8 <HAL_TIMEx_PWMN_Start+0x178>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d004      	beq.n	800a168 <HAL_TIMEx_PWMN_Start+0x118>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a1a      	ldr	r2, [pc, #104]	@ (800a1cc <HAL_TIMEx_PWMN_Start+0x17c>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d115      	bne.n	800a194 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	4b18      	ldr	r3, [pc, #96]	@ (800a1d0 <HAL_TIMEx_PWMN_Start+0x180>)
 800a170:	4013      	ands	r3, r2
 800a172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b06      	cmp	r3, #6
 800a178:	d015      	beq.n	800a1a6 <HAL_TIMEx_PWMN_Start+0x156>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a180:	d011      	beq.n	800a1a6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f042 0201 	orr.w	r2, r2, #1
 800a190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a192:	e008      	b.n	800a1a6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f042 0201 	orr.w	r2, r2, #1
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e000      	b.n	800a1a8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40012c00 	.word	0x40012c00
 800a1b8:	40000400 	.word	0x40000400
 800a1bc:	40000800 	.word	0x40000800
 800a1c0:	40000c00 	.word	0x40000c00
 800a1c4:	40013400 	.word	0x40013400
 800a1c8:	40014000 	.word	0x40014000
 800a1cc:	40015000 	.word	0x40015000
 800a1d0:	00010007 	.word	0x00010007

0800a1d4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 f9c2 	bl	800a570 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6a1a      	ldr	r2, [r3, #32]
 800a1f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10f      	bne.n	800a21c <HAL_TIMEx_PWMN_Stop+0x48>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6a1a      	ldr	r2, [r3, #32]
 800a202:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a206:	4013      	ands	r3, r2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d107      	bne.n	800a21c <HAL_TIMEx_PWMN_Stop+0x48>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a21a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6a1a      	ldr	r2, [r3, #32]
 800a222:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a226:	4013      	ands	r3, r2
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10f      	bne.n	800a24c <HAL_TIMEx_PWMN_Stop+0x78>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6a1a      	ldr	r2, [r3, #32]
 800a232:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d107      	bne.n	800a24c <HAL_TIMEx_PWMN_Stop+0x78>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 0201 	bic.w	r2, r2, #1
 800a24a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d104      	bne.n	800a25c <HAL_TIMEx_PWMN_Stop+0x88>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a25a:	e013      	b.n	800a284 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d104      	bne.n	800a26c <HAL_TIMEx_PWMN_Stop+0x98>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a26a:	e00b      	b.n	800a284 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b08      	cmp	r3, #8
 800a270:	d104      	bne.n	800a27c <HAL_TIMEx_PWMN_Stop+0xa8>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a27a:	e003      	b.n	800a284 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e074      	b.n	800a392 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a34      	ldr	r2, [pc, #208]	@ (800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d009      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a33      	ldr	r2, [pc, #204]	@ (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d004      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a31      	ldr	r2, [pc, #196]	@ (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d108      	bne.n	800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a2ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a2fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a21      	ldr	r2, [pc, #132]	@ (800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d022      	beq.n	800a366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a328:	d01d      	beq.n	800a366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a1f      	ldr	r2, [pc, #124]	@ (800a3ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d018      	beq.n	800a366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a1d      	ldr	r2, [pc, #116]	@ (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d013      	beq.n	800a366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a1c      	ldr	r2, [pc, #112]	@ (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d00e      	beq.n	800a366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a15      	ldr	r2, [pc, #84]	@ (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d009      	beq.n	800a366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a18      	ldr	r2, [pc, #96]	@ (800a3b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d004      	beq.n	800a366 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a11      	ldr	r2, [pc, #68]	@ (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d10c      	bne.n	800a380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a36c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	4313      	orrs	r3, r2
 800a376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	40012c00 	.word	0x40012c00
 800a3a4:	40013400 	.word	0x40013400
 800a3a8:	40015000 	.word	0x40015000
 800a3ac:	40000400 	.word	0x40000400
 800a3b0:	40000800 	.word	0x40000800
 800a3b4:	40000c00 	.word	0x40000c00
 800a3b8:	40014000 	.word	0x40014000

0800a3bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d101      	bne.n	800a3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e078      	b.n	800a4ca <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4313      	orrs	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	4313      	orrs	r3, r2
 800a424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	4313      	orrs	r3, r2
 800a432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	041b      	lsls	r3, r3, #16
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1c      	ldr	r2, [pc, #112]	@ (800a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d009      	beq.n	800a47e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1b      	ldr	r2, [pc, #108]	@ (800a4dc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d004      	beq.n	800a47e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a19      	ldr	r2, [pc, #100]	@ (800a4e0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d11c      	bne.n	800a4b8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a488:	051b      	lsls	r3, r3, #20
 800a48a:	4313      	orrs	r3, r2
 800a48c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	4313      	orrs	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	40012c00 	.word	0x40012c00
 800a4dc:	40013400 	.word	0x40013400
 800a4e0:	40015000 	.word	0x40015000

0800a4e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	2204      	movs	r2, #4
 800a584:	fa02 f303 	lsl.w	r3, r2, r3
 800a588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6a1a      	ldr	r2, [r3, #32]
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	43db      	mvns	r3, r3
 800a592:	401a      	ands	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a1a      	ldr	r2, [r3, #32]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f003 030f 	and.w	r3, r3, #15
 800a5a2:	6879      	ldr	r1, [r7, #4]
 800a5a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a8:	431a      	orrs	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	621a      	str	r2, [r3, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	371c      	adds	r7, #28
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e042      	b.n	800a652 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d106      	bne.n	800a5e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7f8 ff36 	bl	8003450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2224      	movs	r2, #36	@ 0x24
 800a5e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0201 	bic.w	r2, r2, #1
 800a5fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 ff1d 	bl	800b444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fc1e 	bl	800ae4c <UART_SetConfig>
 800a610:	4603      	mov	r3, r0
 800a612:	2b01      	cmp	r3, #1
 800a614:	d101      	bne.n	800a61a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e01b      	b.n	800a652 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a628:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a638:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f042 0201 	orr.w	r2, r2, #1
 800a648:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 ff9c 	bl	800b588 <UART_CheckIdleState>
 800a650:	4603      	mov	r3, r0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b08a      	sub	sp, #40	@ 0x28
 800a65e:	af02      	add	r7, sp, #8
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	603b      	str	r3, [r7, #0]
 800a666:	4613      	mov	r3, r2
 800a668:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a670:	2b20      	cmp	r3, #32
 800a672:	d17b      	bne.n	800a76c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <HAL_UART_Transmit+0x26>
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d101      	bne.n	800a684 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e074      	b.n	800a76e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2221      	movs	r2, #33	@ 0x21
 800a690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a694:	f7f9 f874 	bl	8003780 <HAL_GetTick>
 800a698:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	88fa      	ldrh	r2, [r7, #6]
 800a69e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	88fa      	ldrh	r2, [r7, #6]
 800a6a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6b2:	d108      	bne.n	800a6c6 <HAL_UART_Transmit+0x6c>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	61bb      	str	r3, [r7, #24]
 800a6c4:	e003      	b.n	800a6ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a6ce:	e030      	b.n	800a732 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2180      	movs	r1, #128	@ 0x80
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 fffe 	bl	800b6dc <UART_WaitOnFlagUntilTimeout>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d005      	beq.n	800a6f2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e03d      	b.n	800a76e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10b      	bne.n	800a710 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a706:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	3302      	adds	r3, #2
 800a70c:	61bb      	str	r3, [r7, #24]
 800a70e:	e007      	b.n	800a720 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	781a      	ldrb	r2, [r3, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	3301      	adds	r3, #1
 800a71e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a726:	b29b      	uxth	r3, r3
 800a728:	3b01      	subs	r3, #1
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a738:	b29b      	uxth	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1c8      	bne.n	800a6d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2200      	movs	r2, #0
 800a746:	2140      	movs	r1, #64	@ 0x40
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 ffc7 	bl	800b6dc <UART_WaitOnFlagUntilTimeout>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d005      	beq.n	800a760 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2220      	movs	r2, #32
 800a758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e006      	b.n	800a76e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2220      	movs	r2, #32
 800a764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	e000      	b.n	800a76e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a76c:	2302      	movs	r3, #2
  }
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3720      	adds	r7, #32
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b0ba      	sub	sp, #232	@ 0xe8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a79e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a7a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a7ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d11b      	bne.n	800a7ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d015      	beq.n	800a7ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d009      	beq.n	800a7ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 8300 	beq.w	800ade2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
      }
      return;
 800a7ea:	e2fa      	b.n	800ade2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 8123 	beq.w	800aa3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a7f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a7fa:	4b8d      	ldr	r3, [pc, #564]	@ (800aa30 <HAL_UART_IRQHandler+0x2b8>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d106      	bne.n	800a810 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a802:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a806:	4b8b      	ldr	r3, [pc, #556]	@ (800aa34 <HAL_UART_IRQHandler+0x2bc>)
 800a808:	4013      	ands	r3, r2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 8116 	beq.w	800aa3c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d011      	beq.n	800a840 <HAL_UART_IRQHandler+0xc8>
 800a81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00b      	beq.n	800a840 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2201      	movs	r2, #1
 800a82e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a836:	f043 0201 	orr.w	r2, r3, #1
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d011      	beq.n	800a870 <HAL_UART_IRQHandler+0xf8>
 800a84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2202      	movs	r2, #2
 800a85e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a866:	f043 0204 	orr.w	r2, r3, #4
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d011      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x128>
 800a87c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00b      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2204      	movs	r2, #4
 800a88e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a896:	f043 0202 	orr.w	r2, r3, #2
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8a4:	f003 0308 	and.w	r3, r3, #8
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d017      	beq.n	800a8dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8b0:	f003 0320 	and.w	r3, r3, #32
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d105      	bne.n	800a8c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a8b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a8bc:	4b5c      	ldr	r3, [pc, #368]	@ (800aa30 <HAL_UART_IRQHandler+0x2b8>)
 800a8be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00b      	beq.n	800a8dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8d2:	f043 0208 	orr.w	r2, r3, #8
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d012      	beq.n	800a90e <HAL_UART_IRQHandler+0x196>
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00c      	beq.n	800a90e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a904:	f043 0220 	orr.w	r2, r3, #32
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 8266 	beq.w	800ade6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a91a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a91e:	f003 0320 	and.w	r3, r3, #32
 800a922:	2b00      	cmp	r3, #0
 800a924:	d013      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d105      	bne.n	800a93e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d007      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a954:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a962:	2b40      	cmp	r3, #64	@ 0x40
 800a964:	d005      	beq.n	800a972 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a96a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d054      	beq.n	800aa1c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 f807 	bl	800b986 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a982:	2b40      	cmp	r3, #64	@ 0x40
 800a984:	d146      	bne.n	800aa14 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3308      	adds	r3, #8
 800a98c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a99c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a9a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a9b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a9b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a9be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a9c2:	e841 2300 	strex	r3, r2, [r1]
 800a9c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a9ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1d9      	bne.n	800a986 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d017      	beq.n	800aa0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e2:	4a15      	ldr	r2, [pc, #84]	@ (800aa38 <HAL_UART_IRQHandler+0x2c0>)
 800a9e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fa fcf7 	bl	80053e0 <HAL_DMA_Abort_IT>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d019      	beq.n	800aa2c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aa06:	4610      	mov	r0, r2
 800aa08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0a:	e00f      	b.n	800aa2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fa13 	bl	800ae38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa12:	e00b      	b.n	800aa2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fa0f 	bl	800ae38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa1a:	e007      	b.n	800aa2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fa0b 	bl	800ae38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aa2a:	e1dc      	b.n	800ade6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa2c:	bf00      	nop
    return;
 800aa2e:	e1da      	b.n	800ade6 <HAL_UART_IRQHandler+0x66e>
 800aa30:	10000001 	.word	0x10000001
 800aa34:	04000120 	.word	0x04000120
 800aa38:	0800bc3d 	.word	0x0800bc3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	f040 8170 	bne.w	800ad26 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa4a:	f003 0310 	and.w	r3, r3, #16
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 8169 	beq.w	800ad26 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa58:	f003 0310 	and.w	r3, r3, #16
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 8162 	beq.w	800ad26 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2210      	movs	r2, #16
 800aa68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa74:	2b40      	cmp	r3, #64	@ 0x40
 800aa76:	f040 80d8 	bne.w	800ac2a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 80af 	beq.w	800abf0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	f080 80a7 	bcs.w	800abf0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aaa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f040 8087 	bne.w	800abce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aacc:	e853 3f00 	ldrex	r3, [r3]
 800aad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aadc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	461a      	mov	r2, r3
 800aae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aaea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aaee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aaf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ab02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1da      	bne.n	800aac0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3308      	adds	r3, #8
 800ab10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab14:	e853 3f00 	ldrex	r3, [r3]
 800ab18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab1c:	f023 0301 	bic.w	r3, r3, #1
 800ab20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ab32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab3a:	e841 2300 	strex	r3, r2, [r1]
 800ab3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1e1      	bne.n	800ab0a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3308      	adds	r3, #8
 800ab4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ab56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3308      	adds	r3, #8
 800ab66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab72:	e841 2300 	strex	r3, r2, [r1]
 800ab76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1e3      	bne.n	800ab46 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2220      	movs	r2, #32
 800ab82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab94:	e853 3f00 	ldrex	r3, [r3]
 800ab98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab9c:	f023 0310 	bic.w	r3, r3, #16
 800aba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	461a      	mov	r2, r3
 800abaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800abb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abb6:	e841 2300 	strex	r3, r2, [r1]
 800abba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800abbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e4      	bne.n	800ab8c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fa fbb0 	bl	800532e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2202      	movs	r2, #2
 800abd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7f7 fef7 	bl	80029dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800abee:	e0fc      	b.n	800adea <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800abfa:	429a      	cmp	r2, r3
 800abfc:	f040 80f5 	bne.w	800adea <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b20      	cmp	r3, #32
 800ac10:	f040 80eb 	bne.w	800adea <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7f7 feda 	bl	80029dc <HAL_UARTEx_RxEventCallback>
      return;
 800ac28:	e0df      	b.n	800adea <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f000 80d1 	beq.w	800adee <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ac4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 80cc 	beq.w	800adee <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5e:	e853 3f00 	ldrex	r3, [r3]
 800ac62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e4      	bne.n	800ac56 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3308      	adds	r3, #8
 800ac92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	e853 3f00 	ldrex	r3, [r3]
 800ac9a:	623b      	str	r3, [r7, #32]
   return(result);
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aca2:	f023 0301 	bic.w	r3, r3, #1
 800aca6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3308      	adds	r3, #8
 800acb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800acb4:	633a      	str	r2, [r7, #48]	@ 0x30
 800acb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acbc:	e841 2300 	strex	r3, r2, [r1]
 800acc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1e1      	bne.n	800ac8c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2220      	movs	r2, #32
 800accc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	60fb      	str	r3, [r7, #12]
   return(result);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f023 0310 	bic.w	r3, r3, #16
 800acf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	461a      	mov	r2, r3
 800acfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800acfe:	61fb      	str	r3, [r7, #28]
 800ad00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad02:	69b9      	ldr	r1, [r7, #24]
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	e841 2300 	strex	r3, r2, [r1]
 800ad0a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e4      	bne.n	800acdc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2202      	movs	r2, #2
 800ad16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7f7 fe5c 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad24:	e063      	b.n	800adee <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00e      	beq.n	800ad50 <HAL_UART_IRQHandler+0x5d8>
 800ad32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d008      	beq.n	800ad50 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ad46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 ffb4 	bl	800bcb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad4e:	e051      	b.n	800adf4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d014      	beq.n	800ad86 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d105      	bne.n	800ad74 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d008      	beq.n	800ad86 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d03a      	beq.n	800adf2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	4798      	blx	r3
    }
    return;
 800ad84:	e035      	b.n	800adf2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d009      	beq.n	800ada6 <HAL_UART_IRQHandler+0x62e>
 800ad92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 ff5e 	bl	800bc60 <UART_EndTransmit_IT>
    return;
 800ada4:	e026      	b.n	800adf4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ada6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d009      	beq.n	800adc6 <HAL_UART_IRQHandler+0x64e>
 800adb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adb6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d003      	beq.n	800adc6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 ff8d 	bl	800bcde <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adc4:	e016      	b.n	800adf4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800adc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adce:	2b00      	cmp	r3, #0
 800add0:	d010      	beq.n	800adf4 <HAL_UART_IRQHandler+0x67c>
 800add2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800add6:	2b00      	cmp	r3, #0
 800add8:	da0c      	bge.n	800adf4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 ff75 	bl	800bcca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ade0:	e008      	b.n	800adf4 <HAL_UART_IRQHandler+0x67c>
      return;
 800ade2:	bf00      	nop
 800ade4:	e006      	b.n	800adf4 <HAL_UART_IRQHandler+0x67c>
    return;
 800ade6:	bf00      	nop
 800ade8:	e004      	b.n	800adf4 <HAL_UART_IRQHandler+0x67c>
      return;
 800adea:	bf00      	nop
 800adec:	e002      	b.n	800adf4 <HAL_UART_IRQHandler+0x67c>
      return;
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <HAL_UART_IRQHandler+0x67c>
    return;
 800adf2:	bf00      	nop
  }
}
 800adf4:	37e8      	adds	r7, #232	@ 0xe8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop

0800adfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae50:	b08c      	sub	sp, #48	@ 0x30
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	689a      	ldr	r2, [r3, #8]
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	431a      	orrs	r2, r3
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	4baa      	ldr	r3, [pc, #680]	@ (800b124 <UART_SetConfig+0x2d8>)
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	6812      	ldr	r2, [r2, #0]
 800ae82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae84:	430b      	orrs	r3, r1
 800ae86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a9f      	ldr	r2, [pc, #636]	@ (800b128 <UART_SetConfig+0x2dc>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d004      	beq.n	800aeb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aec2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	6812      	ldr	r2, [r2, #0]
 800aeca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aecc:	430b      	orrs	r3, r1
 800aece:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed6:	f023 010f 	bic.w	r1, r3, #15
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a90      	ldr	r2, [pc, #576]	@ (800b12c <UART_SetConfig+0x2e0>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d125      	bne.n	800af3c <UART_SetConfig+0xf0>
 800aef0:	4b8f      	ldr	r3, [pc, #572]	@ (800b130 <UART_SetConfig+0x2e4>)
 800aef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aef6:	f003 0303 	and.w	r3, r3, #3
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d81a      	bhi.n	800af34 <UART_SetConfig+0xe8>
 800aefe:	a201      	add	r2, pc, #4	@ (adr r2, 800af04 <UART_SetConfig+0xb8>)
 800af00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af04:	0800af15 	.word	0x0800af15
 800af08:	0800af25 	.word	0x0800af25
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af2d 	.word	0x0800af2d
 800af14:	2301      	movs	r3, #1
 800af16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af1a:	e116      	b.n	800b14a <UART_SetConfig+0x2fe>
 800af1c:	2302      	movs	r3, #2
 800af1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af22:	e112      	b.n	800b14a <UART_SetConfig+0x2fe>
 800af24:	2304      	movs	r3, #4
 800af26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af2a:	e10e      	b.n	800b14a <UART_SetConfig+0x2fe>
 800af2c:	2308      	movs	r3, #8
 800af2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af32:	e10a      	b.n	800b14a <UART_SetConfig+0x2fe>
 800af34:	2310      	movs	r3, #16
 800af36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af3a:	e106      	b.n	800b14a <UART_SetConfig+0x2fe>
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a7c      	ldr	r2, [pc, #496]	@ (800b134 <UART_SetConfig+0x2e8>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d138      	bne.n	800afb8 <UART_SetConfig+0x16c>
 800af46:	4b7a      	ldr	r3, [pc, #488]	@ (800b130 <UART_SetConfig+0x2e4>)
 800af48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af4c:	f003 030c 	and.w	r3, r3, #12
 800af50:	2b0c      	cmp	r3, #12
 800af52:	d82d      	bhi.n	800afb0 <UART_SetConfig+0x164>
 800af54:	a201      	add	r2, pc, #4	@ (adr r2, 800af5c <UART_SetConfig+0x110>)
 800af56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5a:	bf00      	nop
 800af5c:	0800af91 	.word	0x0800af91
 800af60:	0800afb1 	.word	0x0800afb1
 800af64:	0800afb1 	.word	0x0800afb1
 800af68:	0800afb1 	.word	0x0800afb1
 800af6c:	0800afa1 	.word	0x0800afa1
 800af70:	0800afb1 	.word	0x0800afb1
 800af74:	0800afb1 	.word	0x0800afb1
 800af78:	0800afb1 	.word	0x0800afb1
 800af7c:	0800af99 	.word	0x0800af99
 800af80:	0800afb1 	.word	0x0800afb1
 800af84:	0800afb1 	.word	0x0800afb1
 800af88:	0800afb1 	.word	0x0800afb1
 800af8c:	0800afa9 	.word	0x0800afa9
 800af90:	2300      	movs	r3, #0
 800af92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af96:	e0d8      	b.n	800b14a <UART_SetConfig+0x2fe>
 800af98:	2302      	movs	r3, #2
 800af9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af9e:	e0d4      	b.n	800b14a <UART_SetConfig+0x2fe>
 800afa0:	2304      	movs	r3, #4
 800afa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afa6:	e0d0      	b.n	800b14a <UART_SetConfig+0x2fe>
 800afa8:	2308      	movs	r3, #8
 800afaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afae:	e0cc      	b.n	800b14a <UART_SetConfig+0x2fe>
 800afb0:	2310      	movs	r3, #16
 800afb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afb6:	e0c8      	b.n	800b14a <UART_SetConfig+0x2fe>
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a5e      	ldr	r2, [pc, #376]	@ (800b138 <UART_SetConfig+0x2ec>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d125      	bne.n	800b00e <UART_SetConfig+0x1c2>
 800afc2:	4b5b      	ldr	r3, [pc, #364]	@ (800b130 <UART_SetConfig+0x2e4>)
 800afc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800afcc:	2b30      	cmp	r3, #48	@ 0x30
 800afce:	d016      	beq.n	800affe <UART_SetConfig+0x1b2>
 800afd0:	2b30      	cmp	r3, #48	@ 0x30
 800afd2:	d818      	bhi.n	800b006 <UART_SetConfig+0x1ba>
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	d00a      	beq.n	800afee <UART_SetConfig+0x1a2>
 800afd8:	2b20      	cmp	r3, #32
 800afda:	d814      	bhi.n	800b006 <UART_SetConfig+0x1ba>
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <UART_SetConfig+0x19a>
 800afe0:	2b10      	cmp	r3, #16
 800afe2:	d008      	beq.n	800aff6 <UART_SetConfig+0x1aa>
 800afe4:	e00f      	b.n	800b006 <UART_SetConfig+0x1ba>
 800afe6:	2300      	movs	r3, #0
 800afe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afec:	e0ad      	b.n	800b14a <UART_SetConfig+0x2fe>
 800afee:	2302      	movs	r3, #2
 800aff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aff4:	e0a9      	b.n	800b14a <UART_SetConfig+0x2fe>
 800aff6:	2304      	movs	r3, #4
 800aff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800affc:	e0a5      	b.n	800b14a <UART_SetConfig+0x2fe>
 800affe:	2308      	movs	r3, #8
 800b000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b004:	e0a1      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b006:	2310      	movs	r3, #16
 800b008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b00c:	e09d      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a4a      	ldr	r2, [pc, #296]	@ (800b13c <UART_SetConfig+0x2f0>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d125      	bne.n	800b064 <UART_SetConfig+0x218>
 800b018:	4b45      	ldr	r3, [pc, #276]	@ (800b130 <UART_SetConfig+0x2e4>)
 800b01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b01e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b022:	2bc0      	cmp	r3, #192	@ 0xc0
 800b024:	d016      	beq.n	800b054 <UART_SetConfig+0x208>
 800b026:	2bc0      	cmp	r3, #192	@ 0xc0
 800b028:	d818      	bhi.n	800b05c <UART_SetConfig+0x210>
 800b02a:	2b80      	cmp	r3, #128	@ 0x80
 800b02c:	d00a      	beq.n	800b044 <UART_SetConfig+0x1f8>
 800b02e:	2b80      	cmp	r3, #128	@ 0x80
 800b030:	d814      	bhi.n	800b05c <UART_SetConfig+0x210>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <UART_SetConfig+0x1f0>
 800b036:	2b40      	cmp	r3, #64	@ 0x40
 800b038:	d008      	beq.n	800b04c <UART_SetConfig+0x200>
 800b03a:	e00f      	b.n	800b05c <UART_SetConfig+0x210>
 800b03c:	2300      	movs	r3, #0
 800b03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b042:	e082      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b044:	2302      	movs	r3, #2
 800b046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b04a:	e07e      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b04c:	2304      	movs	r3, #4
 800b04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b052:	e07a      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b054:	2308      	movs	r3, #8
 800b056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b05a:	e076      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b05c:	2310      	movs	r3, #16
 800b05e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b062:	e072      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a35      	ldr	r2, [pc, #212]	@ (800b140 <UART_SetConfig+0x2f4>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d12a      	bne.n	800b0c4 <UART_SetConfig+0x278>
 800b06e:	4b30      	ldr	r3, [pc, #192]	@ (800b130 <UART_SetConfig+0x2e4>)
 800b070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b07c:	d01a      	beq.n	800b0b4 <UART_SetConfig+0x268>
 800b07e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b082:	d81b      	bhi.n	800b0bc <UART_SetConfig+0x270>
 800b084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b088:	d00c      	beq.n	800b0a4 <UART_SetConfig+0x258>
 800b08a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b08e:	d815      	bhi.n	800b0bc <UART_SetConfig+0x270>
 800b090:	2b00      	cmp	r3, #0
 800b092:	d003      	beq.n	800b09c <UART_SetConfig+0x250>
 800b094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b098:	d008      	beq.n	800b0ac <UART_SetConfig+0x260>
 800b09a:	e00f      	b.n	800b0bc <UART_SetConfig+0x270>
 800b09c:	2300      	movs	r3, #0
 800b09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0a2:	e052      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0aa:	e04e      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0b2:	e04a      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b0b4:	2308      	movs	r3, #8
 800b0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ba:	e046      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b0bc:	2310      	movs	r3, #16
 800b0be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0c2:	e042      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a17      	ldr	r2, [pc, #92]	@ (800b128 <UART_SetConfig+0x2dc>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d13a      	bne.n	800b144 <UART_SetConfig+0x2f8>
 800b0ce:	4b18      	ldr	r3, [pc, #96]	@ (800b130 <UART_SetConfig+0x2e4>)
 800b0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b0d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0dc:	d01a      	beq.n	800b114 <UART_SetConfig+0x2c8>
 800b0de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0e2:	d81b      	bhi.n	800b11c <UART_SetConfig+0x2d0>
 800b0e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0e8:	d00c      	beq.n	800b104 <UART_SetConfig+0x2b8>
 800b0ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0ee:	d815      	bhi.n	800b11c <UART_SetConfig+0x2d0>
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <UART_SetConfig+0x2b0>
 800b0f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0f8:	d008      	beq.n	800b10c <UART_SetConfig+0x2c0>
 800b0fa:	e00f      	b.n	800b11c <UART_SetConfig+0x2d0>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b102:	e022      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b104:	2302      	movs	r3, #2
 800b106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b10a:	e01e      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b10c:	2304      	movs	r3, #4
 800b10e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b112:	e01a      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b114:	2308      	movs	r3, #8
 800b116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b11a:	e016      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b11c:	2310      	movs	r3, #16
 800b11e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b122:	e012      	b.n	800b14a <UART_SetConfig+0x2fe>
 800b124:	cfff69f3 	.word	0xcfff69f3
 800b128:	40008000 	.word	0x40008000
 800b12c:	40013800 	.word	0x40013800
 800b130:	40021000 	.word	0x40021000
 800b134:	40004400 	.word	0x40004400
 800b138:	40004800 	.word	0x40004800
 800b13c:	40004c00 	.word	0x40004c00
 800b140:	40005000 	.word	0x40005000
 800b144:	2310      	movs	r3, #16
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4aae      	ldr	r2, [pc, #696]	@ (800b408 <UART_SetConfig+0x5bc>)
 800b150:	4293      	cmp	r3, r2
 800b152:	f040 8097 	bne.w	800b284 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b15a:	2b08      	cmp	r3, #8
 800b15c:	d823      	bhi.n	800b1a6 <UART_SetConfig+0x35a>
 800b15e:	a201      	add	r2, pc, #4	@ (adr r2, 800b164 <UART_SetConfig+0x318>)
 800b160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b164:	0800b189 	.word	0x0800b189
 800b168:	0800b1a7 	.word	0x0800b1a7
 800b16c:	0800b191 	.word	0x0800b191
 800b170:	0800b1a7 	.word	0x0800b1a7
 800b174:	0800b197 	.word	0x0800b197
 800b178:	0800b1a7 	.word	0x0800b1a7
 800b17c:	0800b1a7 	.word	0x0800b1a7
 800b180:	0800b1a7 	.word	0x0800b1a7
 800b184:	0800b19f 	.word	0x0800b19f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b188:	f7fc f89c 	bl	80072c4 <HAL_RCC_GetPCLK1Freq>
 800b18c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b18e:	e010      	b.n	800b1b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b190:	4b9e      	ldr	r3, [pc, #632]	@ (800b40c <UART_SetConfig+0x5c0>)
 800b192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b194:	e00d      	b.n	800b1b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b196:	f7fc f829 	bl	80071ec <HAL_RCC_GetSysClockFreq>
 800b19a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b19c:	e009      	b.n	800b1b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b19e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b1a4:	e005      	b.n	800b1b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b1b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8130 	beq.w	800b41a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1be:	4a94      	ldr	r2, [pc, #592]	@ (800b410 <UART_SetConfig+0x5c4>)
 800b1c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	4413      	add	r3, r2
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d305      	bcc.n	800b1ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d903      	bls.n	800b1f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1f0:	e113      	b.n	800b41a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	60bb      	str	r3, [r7, #8]
 800b1f8:	60fa      	str	r2, [r7, #12]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fe:	4a84      	ldr	r2, [pc, #528]	@ (800b410 <UART_SetConfig+0x5c4>)
 800b200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b204:	b29b      	uxth	r3, r3
 800b206:	2200      	movs	r2, #0
 800b208:	603b      	str	r3, [r7, #0]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b210:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b214:	f7f5 f850 	bl	80002b8 <__aeabi_uldivmod>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	4610      	mov	r0, r2
 800b21e:	4619      	mov	r1, r3
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	f04f 0300 	mov.w	r3, #0
 800b228:	020b      	lsls	r3, r1, #8
 800b22a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b22e:	0202      	lsls	r2, r0, #8
 800b230:	6979      	ldr	r1, [r7, #20]
 800b232:	6849      	ldr	r1, [r1, #4]
 800b234:	0849      	lsrs	r1, r1, #1
 800b236:	2000      	movs	r0, #0
 800b238:	460c      	mov	r4, r1
 800b23a:	4605      	mov	r5, r0
 800b23c:	eb12 0804 	adds.w	r8, r2, r4
 800b240:	eb43 0905 	adc.w	r9, r3, r5
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	469a      	mov	sl, r3
 800b24c:	4693      	mov	fp, r2
 800b24e:	4652      	mov	r2, sl
 800b250:	465b      	mov	r3, fp
 800b252:	4640      	mov	r0, r8
 800b254:	4649      	mov	r1, r9
 800b256:	f7f5 f82f 	bl	80002b8 <__aeabi_uldivmod>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4613      	mov	r3, r2
 800b260:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b268:	d308      	bcc.n	800b27c <UART_SetConfig+0x430>
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b270:	d204      	bcs.n	800b27c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6a3a      	ldr	r2, [r7, #32]
 800b278:	60da      	str	r2, [r3, #12]
 800b27a:	e0ce      	b.n	800b41a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b282:	e0ca      	b.n	800b41a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	69db      	ldr	r3, [r3, #28]
 800b288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b28c:	d166      	bne.n	800b35c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b28e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b292:	2b08      	cmp	r3, #8
 800b294:	d827      	bhi.n	800b2e6 <UART_SetConfig+0x49a>
 800b296:	a201      	add	r2, pc, #4	@ (adr r2, 800b29c <UART_SetConfig+0x450>)
 800b298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29c:	0800b2c1 	.word	0x0800b2c1
 800b2a0:	0800b2c9 	.word	0x0800b2c9
 800b2a4:	0800b2d1 	.word	0x0800b2d1
 800b2a8:	0800b2e7 	.word	0x0800b2e7
 800b2ac:	0800b2d7 	.word	0x0800b2d7
 800b2b0:	0800b2e7 	.word	0x0800b2e7
 800b2b4:	0800b2e7 	.word	0x0800b2e7
 800b2b8:	0800b2e7 	.word	0x0800b2e7
 800b2bc:	0800b2df 	.word	0x0800b2df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2c0:	f7fc f800 	bl	80072c4 <HAL_RCC_GetPCLK1Freq>
 800b2c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2c6:	e014      	b.n	800b2f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2c8:	f7fc f812 	bl	80072f0 <HAL_RCC_GetPCLK2Freq>
 800b2cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2ce:	e010      	b.n	800b2f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2d0:	4b4e      	ldr	r3, [pc, #312]	@ (800b40c <UART_SetConfig+0x5c0>)
 800b2d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2d4:	e00d      	b.n	800b2f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2d6:	f7fb ff89 	bl	80071ec <HAL_RCC_GetSysClockFreq>
 800b2da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b2dc:	e009      	b.n	800b2f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b2e4:	e005      	b.n	800b2f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b2f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 8090 	beq.w	800b41a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fe:	4a44      	ldr	r2, [pc, #272]	@ (800b410 <UART_SetConfig+0x5c4>)
 800b300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b304:	461a      	mov	r2, r3
 800b306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b308:	fbb3 f3f2 	udiv	r3, r3, r2
 800b30c:	005a      	lsls	r2, r3, #1
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	085b      	lsrs	r3, r3, #1
 800b314:	441a      	add	r2, r3
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b31e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b320:	6a3b      	ldr	r3, [r7, #32]
 800b322:	2b0f      	cmp	r3, #15
 800b324:	d916      	bls.n	800b354 <UART_SetConfig+0x508>
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b32c:	d212      	bcs.n	800b354 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	b29b      	uxth	r3, r3
 800b332:	f023 030f 	bic.w	r3, r3, #15
 800b336:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	085b      	lsrs	r3, r3, #1
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	f003 0307 	and.w	r3, r3, #7
 800b342:	b29a      	uxth	r2, r3
 800b344:	8bfb      	ldrh	r3, [r7, #30]
 800b346:	4313      	orrs	r3, r2
 800b348:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	8bfa      	ldrh	r2, [r7, #30]
 800b350:	60da      	str	r2, [r3, #12]
 800b352:	e062      	b.n	800b41a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b35a:	e05e      	b.n	800b41a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b35c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b360:	2b08      	cmp	r3, #8
 800b362:	d828      	bhi.n	800b3b6 <UART_SetConfig+0x56a>
 800b364:	a201      	add	r2, pc, #4	@ (adr r2, 800b36c <UART_SetConfig+0x520>)
 800b366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36a:	bf00      	nop
 800b36c:	0800b391 	.word	0x0800b391
 800b370:	0800b399 	.word	0x0800b399
 800b374:	0800b3a1 	.word	0x0800b3a1
 800b378:	0800b3b7 	.word	0x0800b3b7
 800b37c:	0800b3a7 	.word	0x0800b3a7
 800b380:	0800b3b7 	.word	0x0800b3b7
 800b384:	0800b3b7 	.word	0x0800b3b7
 800b388:	0800b3b7 	.word	0x0800b3b7
 800b38c:	0800b3af 	.word	0x0800b3af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b390:	f7fb ff98 	bl	80072c4 <HAL_RCC_GetPCLK1Freq>
 800b394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b396:	e014      	b.n	800b3c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b398:	f7fb ffaa 	bl	80072f0 <HAL_RCC_GetPCLK2Freq>
 800b39c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b39e:	e010      	b.n	800b3c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b40c <UART_SetConfig+0x5c0>)
 800b3a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3a4:	e00d      	b.n	800b3c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3a6:	f7fb ff21 	bl	80071ec <HAL_RCC_GetSysClockFreq>
 800b3aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3ac:	e009      	b.n	800b3c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3b4:	e005      	b.n	800b3c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b3c0:	bf00      	nop
    }

    if (pclk != 0U)
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d028      	beq.n	800b41a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3cc:	4a10      	ldr	r2, [pc, #64]	@ (800b410 <UART_SetConfig+0x5c4>)
 800b3ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	085b      	lsrs	r3, r3, #1
 800b3e0:	441a      	add	r2, r3
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	2b0f      	cmp	r3, #15
 800b3f0:	d910      	bls.n	800b414 <UART_SetConfig+0x5c8>
 800b3f2:	6a3b      	ldr	r3, [r7, #32]
 800b3f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3f8:	d20c      	bcs.n	800b414 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	60da      	str	r2, [r3, #12]
 800b404:	e009      	b.n	800b41a <UART_SetConfig+0x5ce>
 800b406:	bf00      	nop
 800b408:	40008000 	.word	0x40008000
 800b40c:	00f42400 	.word	0x00f42400
 800b410:	0800c064 	.word	0x0800c064
      }
      else
      {
        ret = HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2201      	movs	r2, #1
 800b426:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2200      	movs	r2, #0
 800b42e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2200      	movs	r2, #0
 800b434:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b436:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3730      	adds	r7, #48	@ 0x30
 800b43e:	46bd      	mov	sp, r7
 800b440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b450:	f003 0308 	and.w	r3, r3, #8
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00a      	beq.n	800b46e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	430a      	orrs	r2, r1
 800b46c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	430a      	orrs	r2, r1
 800b48e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b494:	f003 0302 	and.w	r3, r3, #2
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b6:	f003 0304 	and.w	r3, r3, #4
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d8:	f003 0310 	and.w	r3, r3, #16
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00a      	beq.n	800b4f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fa:	f003 0320 	and.w	r3, r3, #32
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b520:	2b00      	cmp	r3, #0
 800b522:	d01a      	beq.n	800b55a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b53e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b542:	d10a      	bne.n	800b55a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	430a      	orrs	r2, r1
 800b558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	430a      	orrs	r2, r1
 800b57a:	605a      	str	r2, [r3, #4]
  }
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b098      	sub	sp, #96	@ 0x60
 800b58c:	af02      	add	r7, sp, #8
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b598:	f7f8 f8f2 	bl	8003780 <HAL_GetTick>
 800b59c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0308 	and.w	r3, r3, #8
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d12f      	bne.n	800b60c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f88e 	bl	800b6dc <UART_WaitOnFlagUntilTimeout>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d022      	beq.n	800b60c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ce:	e853 3f00 	ldrex	r3, [r3]
 800b5d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5da:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b5ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5ec:	e841 2300 	strex	r3, r2, [r1]
 800b5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1e6      	bne.n	800b5c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b608:	2303      	movs	r3, #3
 800b60a:	e063      	b.n	800b6d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 0304 	and.w	r3, r3, #4
 800b616:	2b04      	cmp	r3, #4
 800b618:	d149      	bne.n	800b6ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b61a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b622:	2200      	movs	r2, #0
 800b624:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f857 	bl	800b6dc <UART_WaitOnFlagUntilTimeout>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d03c      	beq.n	800b6ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	e853 3f00 	ldrex	r3, [r3]
 800b640:	623b      	str	r3, [r7, #32]
   return(result);
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b652:	633b      	str	r3, [r7, #48]	@ 0x30
 800b654:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b65a:	e841 2300 	strex	r3, r2, [r1]
 800b65e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1e6      	bne.n	800b634 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3308      	adds	r3, #8
 800b66c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	e853 3f00 	ldrex	r3, [r3]
 800b674:	60fb      	str	r3, [r7, #12]
   return(result);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f023 0301 	bic.w	r3, r3, #1
 800b67c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3308      	adds	r3, #8
 800b684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b686:	61fa      	str	r2, [r7, #28]
 800b688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	69b9      	ldr	r1, [r7, #24]
 800b68c:	69fa      	ldr	r2, [r7, #28]
 800b68e:	e841 2300 	strex	r3, r2, [r1]
 800b692:	617b      	str	r3, [r7, #20]
   return(result);
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1e5      	bne.n	800b666 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2220      	movs	r2, #32
 800b69e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e012      	b.n	800b6d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2220      	movs	r2, #32
 800b6ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3758      	adds	r7, #88	@ 0x58
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	603b      	str	r3, [r7, #0]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6ec:	e04f      	b.n	800b78e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d04b      	beq.n	800b78e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6f6:	f7f8 f843 	bl	8003780 <HAL_GetTick>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	429a      	cmp	r2, r3
 800b704:	d302      	bcc.n	800b70c <UART_WaitOnFlagUntilTimeout+0x30>
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d101      	bne.n	800b710 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e04e      	b.n	800b7ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 0304 	and.w	r3, r3, #4
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d037      	beq.n	800b78e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2b80      	cmp	r3, #128	@ 0x80
 800b722:	d034      	beq.n	800b78e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2b40      	cmp	r3, #64	@ 0x40
 800b728:	d031      	beq.n	800b78e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	f003 0308 	and.w	r3, r3, #8
 800b734:	2b08      	cmp	r3, #8
 800b736:	d110      	bne.n	800b75a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2208      	movs	r2, #8
 800b73e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 f920 	bl	800b986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2208      	movs	r2, #8
 800b74a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e029      	b.n	800b7ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b768:	d111      	bne.n	800b78e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f000 f906 	bl	800b986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e00f      	b.n	800b7ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	69da      	ldr	r2, [r3, #28]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4013      	ands	r3, r2
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	bf0c      	ite	eq
 800b79e:	2301      	moveq	r3, #1
 800b7a0:	2300      	movne	r3, #0
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d0a0      	beq.n	800b6ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
	...

0800b7b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b096      	sub	sp, #88	@ 0x58
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	88fa      	ldrh	r2, [r7, #6]
 800b7d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2222      	movs	r2, #34	@ 0x22
 800b7e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d02d      	beq.n	800b84a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7f4:	4a40      	ldr	r2, [pc, #256]	@ (800b8f8 <UART_Start_Receive_DMA+0x140>)
 800b7f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7fe:	4a3f      	ldr	r2, [pc, #252]	@ (800b8fc <UART_Start_Receive_DMA+0x144>)
 800b800:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b808:	4a3d      	ldr	r2, [pc, #244]	@ (800b900 <UART_Start_Receive_DMA+0x148>)
 800b80a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b812:	2200      	movs	r2, #0
 800b814:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3324      	adds	r3, #36	@ 0x24
 800b822:	4619      	mov	r1, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b828:	461a      	mov	r2, r3
 800b82a:	88fb      	ldrh	r3, [r7, #6]
 800b82c:	f7f9 fd04 	bl	8005238 <HAL_DMA_Start_IT>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d009      	beq.n	800b84a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2210      	movs	r2, #16
 800b83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2220      	movs	r2, #32
 800b842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e051      	b.n	800b8ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d018      	beq.n	800b884 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b85a:	e853 3f00 	ldrex	r3, [r3]
 800b85e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b866:	657b      	str	r3, [r7, #84]	@ 0x54
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	461a      	mov	r2, r3
 800b86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b870:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b872:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b874:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b878:	e841 2300 	strex	r3, r2, [r1]
 800b87c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b87e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e6      	bne.n	800b852 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3308      	adds	r3, #8
 800b88a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88e:	e853 3f00 	ldrex	r3, [r3]
 800b892:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8a4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b8a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8ac:	e841 2300 	strex	r3, r2, [r1]
 800b8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e5      	bne.n	800b884 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3308      	adds	r3, #8
 800b8be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	e853 3f00 	ldrex	r3, [r3]
 800b8c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b8d8:	623a      	str	r2, [r7, #32]
 800b8da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	69f9      	ldr	r1, [r7, #28]
 800b8de:	6a3a      	ldr	r2, [r7, #32]
 800b8e0:	e841 2300 	strex	r3, r2, [r1]
 800b8e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e5      	bne.n	800b8b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3758      	adds	r7, #88	@ 0x58
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	0800ba53 	.word	0x0800ba53
 800b8fc:	0800bb7f 	.word	0x0800bb7f
 800b900:	0800bbbd 	.word	0x0800bbbd

0800b904 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b904:	b480      	push	{r7}
 800b906:	b08f      	sub	sp, #60	@ 0x3c
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	e853 3f00 	ldrex	r3, [r3]
 800b918:	61fb      	str	r3, [r7, #28]
   return(result);
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b920:	637b      	str	r3, [r7, #52]	@ 0x34
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b92a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b92c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e6      	bne.n	800b90c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3308      	adds	r3, #8
 800b944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	e853 3f00 	ldrex	r3, [r3]
 800b94c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b954:	633b      	str	r3, [r7, #48]	@ 0x30
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3308      	adds	r3, #8
 800b95c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b95e:	61ba      	str	r2, [r7, #24]
 800b960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b962:	6979      	ldr	r1, [r7, #20]
 800b964:	69ba      	ldr	r2, [r7, #24]
 800b966:	e841 2300 	strex	r3, r2, [r1]
 800b96a:	613b      	str	r3, [r7, #16]
   return(result);
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1e5      	bne.n	800b93e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2220      	movs	r2, #32
 800b976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b97a:	bf00      	nop
 800b97c:	373c      	adds	r7, #60	@ 0x3c
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b986:	b480      	push	{r7}
 800b988:	b095      	sub	sp, #84	@ 0x54
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e6      	bne.n	800b98e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	e853 3f00 	ldrex	r3, [r3]
 800b9ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9d6:	f023 0301 	bic.w	r3, r3, #1
 800b9da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e3      	bne.n	800b9c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d118      	bne.n	800ba32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	f023 0310 	bic.w	r3, r3, #16
 800ba14:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba1e:	61bb      	str	r3, [r7, #24]
 800ba20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	6979      	ldr	r1, [r7, #20]
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e6      	bne.n	800ba00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2220      	movs	r2, #32
 800ba36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba46:	bf00      	nop
 800ba48:	3754      	adds	r7, #84	@ 0x54
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b09c      	sub	sp, #112	@ 0x70
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f003 0320 	and.w	r3, r3, #32
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d171      	bne.n	800bb52 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ba6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba70:	2200      	movs	r2, #0
 800ba72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba7e:	e853 3f00 	ldrex	r3, [r3]
 800ba82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ba84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	461a      	mov	r2, r3
 800ba92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba96:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ba9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba9c:	e841 2300 	strex	r3, r2, [r1]
 800baa0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800baa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e6      	bne.n	800ba76 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3308      	adds	r3, #8
 800baae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab2:	e853 3f00 	ldrex	r3, [r3]
 800bab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baba:	f023 0301 	bic.w	r3, r3, #1
 800babe:	667b      	str	r3, [r7, #100]	@ 0x64
 800bac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3308      	adds	r3, #8
 800bac6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bac8:	647a      	str	r2, [r7, #68]	@ 0x44
 800baca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bacc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bad0:	e841 2300 	strex	r3, r2, [r1]
 800bad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e5      	bne.n	800baa8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800badc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	3308      	adds	r3, #8
 800bae2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae6:	e853 3f00 	ldrex	r3, [r3]
 800baea:	623b      	str	r3, [r7, #32]
   return(result);
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800baf2:	663b      	str	r3, [r7, #96]	@ 0x60
 800baf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	3308      	adds	r3, #8
 800bafa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bafc:	633a      	str	r2, [r7, #48]	@ 0x30
 800bafe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb04:	e841 2300 	strex	r3, r2, [r1]
 800bb08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1e5      	bne.n	800badc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb12:	2220      	movs	r2, #32
 800bb14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d118      	bne.n	800bb52 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	e853 3f00 	ldrex	r3, [r3]
 800bb2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f023 0310 	bic.w	r3, r3, #16
 800bb34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb3e:	61fb      	str	r3, [r7, #28]
 800bb40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb42:	69b9      	ldr	r1, [r7, #24]
 800bb44:	69fa      	ldr	r2, [r7, #28]
 800bb46:	e841 2300 	strex	r3, r2, [r1]
 800bb4a:	617b      	str	r3, [r7, #20]
   return(result);
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1e6      	bne.n	800bb20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb54:	2200      	movs	r2, #0
 800bb56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d107      	bne.n	800bb70 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb66:	4619      	mov	r1, r3
 800bb68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb6a:	f7f6 ff37 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb6e:	e002      	b.n	800bb76 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bb70:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb72:	f7ff f94d 	bl	800ae10 <HAL_UART_RxCpltCallback>
}
 800bb76:	bf00      	nop
 800bb78:	3770      	adds	r7, #112	@ 0x70
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb8a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d109      	bne.n	800bbae <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bba0:	085b      	lsrs	r3, r3, #1
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4619      	mov	r1, r3
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7f6 ff18 	bl	80029dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbac:	e002      	b.n	800bbb4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f7ff f938 	bl	800ae24 <HAL_UART_RxHalfCpltCallback>
}
 800bbb4:	bf00      	nop
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbd8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbe4:	2b80      	cmp	r3, #128	@ 0x80
 800bbe6:	d109      	bne.n	800bbfc <UART_DMAError+0x40>
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	2b21      	cmp	r3, #33	@ 0x21
 800bbec:	d106      	bne.n	800bbfc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bbf6:	6978      	ldr	r0, [r7, #20]
 800bbf8:	f7ff fe84 	bl	800b904 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc06:	2b40      	cmp	r3, #64	@ 0x40
 800bc08:	d109      	bne.n	800bc1e <UART_DMAError+0x62>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b22      	cmp	r3, #34	@ 0x22
 800bc0e:	d106      	bne.n	800bc1e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bc18:	6978      	ldr	r0, [r7, #20]
 800bc1a:	f7ff feb4 	bl	800b986 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc24:	f043 0210 	orr.w	r2, r3, #16
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc2e:	6978      	ldr	r0, [r7, #20]
 800bc30:	f7ff f902 	bl	800ae38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc34:	bf00      	nop
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f7ff f8f0 	bl	800ae38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc58:	bf00      	nop
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc7c:	61fb      	str	r3, [r7, #28]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	61bb      	str	r3, [r7, #24]
 800bc88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8a:	6979      	ldr	r1, [r7, #20]
 800bc8c:	69ba      	ldr	r2, [r7, #24]
 800bc8e:	e841 2300 	strex	r3, r2, [r1]
 800bc92:	613b      	str	r3, [r7, #16]
   return(result);
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1e6      	bne.n	800bc68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff f8a7 	bl	800adfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcae:	bf00      	nop
 800bcb0:	3720      	adds	r7, #32
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bcd2:	bf00      	nop
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b083      	sub	sp, #12
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b085      	sub	sp, #20
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d101      	bne.n	800bd08 <HAL_UARTEx_DisableFifoMode+0x16>
 800bd04:	2302      	movs	r3, #2
 800bd06:	e027      	b.n	800bd58 <HAL_UARTEx_DisableFifoMode+0x66>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2224      	movs	r2, #36	@ 0x24
 800bd14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f022 0201 	bic.w	r2, r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bd36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2220      	movs	r2, #32
 800bd4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d101      	bne.n	800bd7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd78:	2302      	movs	r3, #2
 800bd7a:	e02d      	b.n	800bdd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2224      	movs	r2, #36	@ 0x24
 800bd88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f022 0201 	bic.w	r2, r2, #1
 800bda2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	430a      	orrs	r2, r1
 800bdb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 f8a3 	bl	800bf04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d101      	bne.n	800bdf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	e02d      	b.n	800be54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2224      	movs	r2, #36	@ 0x24
 800be04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f022 0201 	bic.w	r2, r2, #1
 800be1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	430a      	orrs	r2, r1
 800be32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f865 	bl	800bf04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2220      	movs	r2, #32
 800be46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08c      	sub	sp, #48	@ 0x30
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be70:	2b20      	cmp	r3, #32
 800be72:	d142      	bne.n	800befa <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d002      	beq.n	800be80 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800be7a:	88fb      	ldrh	r3, [r7, #6]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e03b      	b.n	800befc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2201      	movs	r2, #1
 800be88:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800be90:	88fb      	ldrh	r3, [r7, #6]
 800be92:	461a      	mov	r2, r3
 800be94:	68b9      	ldr	r1, [r7, #8]
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f7ff fc8e 	bl	800b7b8 <UART_Start_Receive_DMA>
 800be9c:	4603      	mov	r3, r0
 800be9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d124      	bne.n	800bef4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d11d      	bne.n	800beee <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2210      	movs	r2, #16
 800beb8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	e853 3f00 	ldrex	r3, [r3]
 800bec6:	617b      	str	r3, [r7, #20]
   return(result);
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f043 0310 	orr.w	r3, r3, #16
 800bece:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	461a      	mov	r2, r3
 800bed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed8:	627b      	str	r3, [r7, #36]	@ 0x24
 800beda:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bedc:	6a39      	ldr	r1, [r7, #32]
 800bede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bee0:	e841 2300 	strex	r3, r2, [r1]
 800bee4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1e6      	bne.n	800beba <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800beec:	e002      	b.n	800bef4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bef4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bef8:	e000      	b.n	800befc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800befa:	2302      	movs	r3, #2
  }
}
 800befc:	4618      	mov	r0, r3
 800befe:	3730      	adds	r7, #48	@ 0x30
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d108      	bne.n	800bf26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf24:	e031      	b.n	800bf8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf26:	2308      	movs	r3, #8
 800bf28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf2a:	2308      	movs	r3, #8
 800bf2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	0e5b      	lsrs	r3, r3, #25
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	f003 0307 	and.w	r3, r3, #7
 800bf3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	0f5b      	lsrs	r3, r3, #29
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	f003 0307 	and.w	r3, r3, #7
 800bf4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
 800bf50:	7b3a      	ldrb	r2, [r7, #12]
 800bf52:	4911      	ldr	r1, [pc, #68]	@ (800bf98 <UARTEx_SetNbDataToProcess+0x94>)
 800bf54:	5c8a      	ldrb	r2, [r1, r2]
 800bf56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bf5a:	7b3a      	ldrb	r2, [r7, #12]
 800bf5c:	490f      	ldr	r1, [pc, #60]	@ (800bf9c <UARTEx_SetNbDataToProcess+0x98>)
 800bf5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf60:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	7b7a      	ldrb	r2, [r7, #13]
 800bf70:	4909      	ldr	r1, [pc, #36]	@ (800bf98 <UARTEx_SetNbDataToProcess+0x94>)
 800bf72:	5c8a      	ldrb	r2, [r1, r2]
 800bf74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf78:	7b7a      	ldrb	r2, [r7, #13]
 800bf7a:	4908      	ldr	r1, [pc, #32]	@ (800bf9c <UARTEx_SetNbDataToProcess+0x98>)
 800bf7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bf8a:	bf00      	nop
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr
 800bf96:	bf00      	nop
 800bf98:	0800c07c 	.word	0x0800c07c
 800bf9c:	0800c084 	.word	0x0800c084

0800bfa0 <memset>:
 800bfa0:	4402      	add	r2, r0
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d100      	bne.n	800bfaa <memset+0xa>
 800bfa8:	4770      	bx	lr
 800bfaa:	f803 1b01 	strb.w	r1, [r3], #1
 800bfae:	e7f9      	b.n	800bfa4 <memset+0x4>

0800bfb0 <__libc_init_array>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	4d0d      	ldr	r5, [pc, #52]	@ (800bfe8 <__libc_init_array+0x38>)
 800bfb4:	4c0d      	ldr	r4, [pc, #52]	@ (800bfec <__libc_init_array+0x3c>)
 800bfb6:	1b64      	subs	r4, r4, r5
 800bfb8:	10a4      	asrs	r4, r4, #2
 800bfba:	2600      	movs	r6, #0
 800bfbc:	42a6      	cmp	r6, r4
 800bfbe:	d109      	bne.n	800bfd4 <__libc_init_array+0x24>
 800bfc0:	4d0b      	ldr	r5, [pc, #44]	@ (800bff0 <__libc_init_array+0x40>)
 800bfc2:	4c0c      	ldr	r4, [pc, #48]	@ (800bff4 <__libc_init_array+0x44>)
 800bfc4:	f000 f826 	bl	800c014 <_init>
 800bfc8:	1b64      	subs	r4, r4, r5
 800bfca:	10a4      	asrs	r4, r4, #2
 800bfcc:	2600      	movs	r6, #0
 800bfce:	42a6      	cmp	r6, r4
 800bfd0:	d105      	bne.n	800bfde <__libc_init_array+0x2e>
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd8:	4798      	blx	r3
 800bfda:	3601      	adds	r6, #1
 800bfdc:	e7ee      	b.n	800bfbc <__libc_init_array+0xc>
 800bfde:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe2:	4798      	blx	r3
 800bfe4:	3601      	adds	r6, #1
 800bfe6:	e7f2      	b.n	800bfce <__libc_init_array+0x1e>
 800bfe8:	0800c094 	.word	0x0800c094
 800bfec:	0800c094 	.word	0x0800c094
 800bff0:	0800c094 	.word	0x0800c094
 800bff4:	0800c098 	.word	0x0800c098

0800bff8 <memcpy>:
 800bff8:	440a      	add	r2, r1
 800bffa:	4291      	cmp	r1, r2
 800bffc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c000:	d100      	bne.n	800c004 <memcpy+0xc>
 800c002:	4770      	bx	lr
 800c004:	b510      	push	{r4, lr}
 800c006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c00a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c00e:	4291      	cmp	r1, r2
 800c010:	d1f9      	bne.n	800c006 <memcpy+0xe>
 800c012:	bd10      	pop	{r4, pc}

0800c014 <_init>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	bf00      	nop
 800c018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c01a:	bc08      	pop	{r3}
 800c01c:	469e      	mov	lr, r3
 800c01e:	4770      	bx	lr

0800c020 <_fini>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	bf00      	nop
 800c024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c026:	bc08      	pop	{r3}
 800c028:	469e      	mov	lr, r3
 800c02a:	4770      	bx	lr
