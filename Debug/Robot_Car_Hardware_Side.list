
Robot_Car_Hardware_Side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800c5b0  0800c5b0  0000d5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c600  0800c600  0000e3c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c600  0800c600  0000d600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c608  0800c608  0000e3c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c608  0800c608  0000d608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c60c  0800c60c  0000d60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c4  20000000  0800c610  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  200003c4  0800c9d4  0000e3c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800c9d4  0000e8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e3c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026336  00000000  00000000  0000e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aab  00000000  00000000  0003472a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d30  00000000  00000000  000391d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001681  00000000  00000000  0003af08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c6c3  00000000  00000000  0003c589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000250aa  00000000  00000000  00068c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e589  00000000  00000000  0008dcf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac27f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ce4  00000000  00000000  001ac2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001b3fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200003c4 	.word	0x200003c4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c598 	.word	0x0800c598

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200003c8 	.word	0x200003c8
 8000214:	0800c598 	.word	0x0800c598

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b9b5 	b.w	80005a4 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f84d 	bl	80002e8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f840 	bl	80002e8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f82f 	bl	80002e8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f821 	bl	80002e8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_uldivmod>:
 80002b8:	b953      	cbnz	r3, 80002d0 <__aeabi_uldivmod+0x18>
 80002ba:	b94a      	cbnz	r2, 80002d0 <__aeabi_uldivmod+0x18>
 80002bc:	2900      	cmp	r1, #0
 80002be:	bf08      	it	eq
 80002c0:	2800      	cmpeq	r0, #0
 80002c2:	bf1c      	itt	ne
 80002c4:	f04f 31ff 	movne.w	r1, #4294967295
 80002c8:	f04f 30ff 	movne.w	r0, #4294967295
 80002cc:	f000 b96a 	b.w	80005a4 <__aeabi_idiv0>
 80002d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d8:	f000 f806 	bl	80002e8 <__udivmoddi4>
 80002dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e4:	b004      	add	sp, #16
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Coms_IncIdx>:
#ifdef HAS_USB_COMMS
#include "usbd_cdc_if.h"
#endif
#include "usart.h"

static void Coms_IncIdx(uint8_t *idx) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	(*idx)++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
	if(*idx >= FIFO_SIZE) (*idx) = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d902      	bls.n	80005ca <Coms_IncIdx+0x22>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <ComsHandler_PacketToBuf>:

static void ComsHandler_PacketToBuf(DecodedPacket_t *packet, StringBuffer_t *buffer) {
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]

	if(packet->invalid) return;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7adb      	ldrb	r3, [r3, #11]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14c      	bne.n	8000682 <ComsHandler_PacketToBuf+0xac>
	buffer->length = 5 + packet->length;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7a9b      	ldrb	r3, [r3, #10]
 80005ec:	3305      	adds	r3, #5
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	701a      	strb	r2, [r3, #0]

	buffer->data[0] = START_BYTE;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	22aa      	movs	r2, #170	@ 0xaa
 80005f8:	705a      	strb	r2, [r3, #1]
	buffer->data[1] = packet->length;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a9a      	ldrb	r2, [r3, #10]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	709a      	strb	r2, [r3, #2]
	buffer->data[2] = (packet->command & 0xFF00) >> 8;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	70da      	strb	r2, [r3, #3]
	buffer->data[3] = packet->command & 0x00FF;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 800061a:	2304      	movs	r3, #4
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e00c      	b.n	800063a <ComsHandler_PacketToBuf+0x64>
		buffer->data[i] = packet->data[i-4];
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	1f1a      	subs	r2, r3, #4
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	440a      	add	r2, r1
 800062a:	7891      	ldrb	r1, [r2, #2]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3301      	adds	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	429a      	cmp	r2, r3
 8000644:	dbec      	blt.n	8000620 <ComsHandler_PacketToBuf+0x4a>
	}

	uint8_t checksum = buffer->data[0];
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 800064c:	2301      	movs	r3, #1
 800064e:	737b      	strb	r3, [r7, #13]
 8000650:	e009      	b.n	8000666 <ComsHandler_PacketToBuf+0x90>
		checksum ^= buffer->data[i];
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	785a      	ldrb	r2, [r3, #1]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	4053      	eors	r3, r2
 800065e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 8000660:	7b7b      	ldrb	r3, [r7, #13]
 8000662:	3301      	adds	r3, #1
 8000664:	737b      	strb	r3, [r7, #13]
 8000666:	7b7a      	ldrb	r2, [r7, #13]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	429a      	cmp	r2, r3
 8000670:	dbef      	blt.n	8000652 <ComsHandler_PacketToBuf+0x7c>
	}

	buffer->data[buffer->length - 1] = checksum;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	4413      	add	r3, r2
 800067c:	7bba      	ldrb	r2, [r7, #14]
 800067e:	705a      	strb	r2, [r3, #1]
 8000680:	e000      	b.n	8000684 <ComsHandler_PacketToBuf+0xae>
	if(packet->invalid) return;
 8000682:	bf00      	nop
}
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <ComsHandler_BufToPacket>:

static void ComsHandler_BufToPacket(DecodedPacket_t *packet, void *buf) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]

	StringBuffer_t *buffer = (StringBuffer_t *)buf;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	60fb      	str	r3, [r7, #12]

	uint8_t length = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]

	memset(packet->data, 0, MAX_DATA_SIZE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3302      	adds	r3, #2
 80006a4:	2208      	movs	r2, #8
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00b ff3b 	bl	800c524 <memset>

	packet->invalid = false;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	72da      	strb	r2, [r3, #11]
	packet->isNew = true;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	731a      	strb	r2, [r3, #12]

    if (buffer->data[0] != START_BYTE) {
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	2baa      	cmp	r3, #170	@ 0xaa
 80006c0:	d002      	beq.n	80006c8 <ComsHandler_BufToPacket+0x3a>
    	packet->invalid = true; // Invalid start byte, discard packet
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	72da      	strb	r2, [r3, #11]
    }

    packet->length = buffer->data[1];
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	789a      	ldrb	r2, [r3, #2]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	729a      	strb	r2, [r3, #10]
    if (buffer->data[1] > MAX_DATA_SIZE) {
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d905      	bls.n	80006e4 <ComsHandler_BufToPacket+0x56>
		packet->invalid = true;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	72da      	strb	r2, [r3, #11]
		packet->length = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	729a      	strb	r2, [r3, #10]
	}

    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006e4:	230c      	movs	r3, #12
 80006e6:	75bb      	strb	r3, [r7, #22]
 80006e8:	e00b      	b.n	8000702 <ComsHandler_BufToPacket+0x74>
    	if(buffer->data[i] != 0) {
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <ComsHandler_BufToPacket+0x6e>
    		length = i;
 80006f6:	7dbb      	ldrb	r3, [r7, #22]
 80006f8:	75fb      	strb	r3, [r7, #23]
    		break;
 80006fa:	e005      	b.n	8000708 <ComsHandler_BufToPacket+0x7a>
    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	3b01      	subs	r3, #1
 8000700:	75bb      	strb	r3, [r7, #22]
 8000702:	7dbb      	ldrb	r3, [r7, #22]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d8f0      	bhi.n	80006ea <ComsHandler_BufToPacket+0x5c>
    	}
    }

    uint8_t checksum = buffer->data[0];
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 800070e:	2301      	movs	r3, #1
 8000710:	753b      	strb	r3, [r7, #20]
 8000712:	e009      	b.n	8000728 <ComsHandler_BufToPacket+0x9a>
		checksum ^= buffer->data[i];
 8000714:	7d3b      	ldrb	r3, [r7, #20]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	785a      	ldrb	r2, [r3, #1]
 800071c:	7d7b      	ldrb	r3, [r7, #21]
 800071e:	4053      	eors	r3, r2
 8000720:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 8000722:	7d3b      	ldrb	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	753b      	strb	r3, [r7, #20]
 8000728:	7d3a      	ldrb	r2, [r7, #20]
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	429a      	cmp	r2, r3
 800072e:	d3f1      	bcc.n	8000714 <ComsHandler_BufToPacket+0x86>
	}

	if(checksum != buffer->data[length]) {
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	4413      	add	r3, r2
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	7d7a      	ldrb	r2, [r7, #21]
 800073a:	429a      	cmp	r2, r3
 800073c:	d002      	beq.n	8000744 <ComsHandler_BufToPacket+0xb6>
		packet->invalid = true;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	72da      	strb	r2, [r3, #11]
	}

    // Populate the command structure
    packet->command = (buffer->data[2] << 8) | buffer->data[3];
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	78db      	ldrb	r3, [r3, #3]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	801a      	strh	r2, [r3, #0]

    if(packet->length != 0) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7a9b      	ldrb	r3, [r3, #10]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d014      	beq.n	800078e <ComsHandler_BufToPacket+0x100>
    	for(uint8_t i = 0; i < packet->length; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	74fb      	strb	r3, [r7, #19]
 8000768:	e00c      	b.n	8000784 <ComsHandler_BufToPacket+0xf6>
    		packet->data[i] = buffer->data[4+i];
 800076a:	7cfb      	ldrb	r3, [r7, #19]
 800076c:	1d1a      	adds	r2, r3, #4
 800076e:	7cfb      	ldrb	r3, [r7, #19]
 8000770:	68f9      	ldr	r1, [r7, #12]
 8000772:	440a      	add	r2, r1
 8000774:	7851      	ldrb	r1, [r2, #1]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	460a      	mov	r2, r1
 800077c:	709a      	strb	r2, [r3, #2]
    	for(uint8_t i = 0; i < packet->length; i++) {
 800077e:	7cfb      	ldrb	r3, [r7, #19]
 8000780:	3301      	adds	r3, #1
 8000782:	74fb      	strb	r3, [r7, #19]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a9b      	ldrb	r3, [r3, #10]
 8000788:	7cfa      	ldrb	r2, [r7, #19]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3ed      	bcc.n	800076a <ComsHandler_BufToPacket+0xdc>
    	}
    }
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <UART_Send>:

// UART Send Function
static HAL_StatusTypeDef UART_Send(void *config, DecodedPacket_t *packet)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b088      	sub	sp, #32
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)config;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	61fb      	str	r3, [r7, #28]

    StringBuffer_t buf;
    memset(buf.data, 0, MAX_BUF_SIZE);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	3301      	adds	r3, #1
 80007aa:	220d      	movs	r2, #13
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00b feb8 	bl	800c524 <memset>
    ComsHandler_PacketToBuf(packet, &buf);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	6838      	ldr	r0, [r7, #0]
 80007bc:	f7ff ff0b 	bl	80005d6 <ComsHandler_PacketToBuf>

    return HAL_UART_Transmit(huart, buf.data, buf.length, HAL_MAX_DELAY);
 80007c0:	7b3b      	ldrb	r3, [r7, #12]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	1c59      	adds	r1, r3, #1
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	69f8      	ldr	r0, [r7, #28]
 80007d0:	f00a fa05 	bl	800abde <HAL_UART_Transmit>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <UART_SetupReceive>:

// UART Receive Function
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer

static HAL_StatusTypeDef UART_SetupReceive(void *inst)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007f2:	60bb      	str	r3, [r7, #8]

    memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	3370      	adds	r3, #112	@ 0x70
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	3305      	adds	r3, #5
 800080a:	220d      	movs	r2, #13
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f00b fe88 	bl	800c524 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->rxBuf[instance->rxIdx].data, MAX_BUF_SIZE);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	3370      	adds	r3, #112	@ 0x70
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	3305      	adds	r3, #5
 800082a:	220d      	movs	r2, #13
 800082c:	4619      	mov	r1, r3
 800082e:	68b8      	ldr	r0, [r7, #8]
 8000830:	f00b fdd6 	bl	800c3e0 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(DMA_UART_HANDLE, DMA_IT_HT);
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <UART_SetupReceive+0x70>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <UART_SetupReceive+0x70>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f022 0204 	bic.w	r2, r2, #4
 8000842:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000868 	.word	0x20000868

08000854 <UART_Receive>:

static HAL_StatusTypeDef UART_Receive(void *inst, uint8_t *data, uint16_t length)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	4613      	mov	r3, r2
 8000860:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	617b      	str	r3, [r7, #20]
    //UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;

    instance->rxBuf[instance->rxIdx].length = length;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	b2d8      	uxtb	r0, r3
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	460b      	mov	r3, r1
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	1a5b      	subs	r3, r3, r1
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	3374      	adds	r3, #116	@ 0x74
 800087e:	4602      	mov	r2, r0
 8000880:	701a      	strb	r2, [r3, #0]

    Coms_IncIdx(&instance->rxIdx);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe8f 	bl	80005a8 <Coms_IncIdx>

    UART_SetupReceive(inst);
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff ffa8 	bl	80007e0 <UART_SetupReceive>
    //__HAL_DMA_DISABLE_IT(hdma_usart1_rx, DMA_IT_HT);

    return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <CAN_Send>:
}
#endif

// CAN Send Function
static HAL_StatusTypeDef CAN_Send(void *config, DecodedPacket_t *packet)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b08c      	sub	sp, #48	@ 0x30
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]

#ifdef FDCAN

    FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    FDCAN_TxHeaderTypeDef txHeader;
    txHeader.Identifier = packet->command;  //send command as packet ID
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	60bb      	str	r3, [r7, #8]
    txHeader.IdType = FDCAN_EXTENDED_ID;
 80008ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b2:	60fb      	str	r3, [r7, #12]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
    txHeader.DataLength = packet->length;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	7a9b      	ldrb	r3, [r3, #10]
 80008bc:	617b      	str	r3, [r7, #20]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.MessageMarker = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Only include data bytes 5 to N-1
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, packet->data);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	1c9a      	adds	r2, r3, #2
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80008de:	f005 fd61 	bl	80063a4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008e2:	4603      	mov	r3, r0
#endif

	return HAL_OK;
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3730      	adds	r7, #48	@ 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CAN_Receive>:

// CAN Receive Function
//going to be handled in an interrupt as with the all receive functions
static HAL_StatusTypeDef CAN_Receive(void *inst, uint8_t *data, uint16_t length)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b092      	sub	sp, #72	@ 0x48
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]

#ifdef FDCAN
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
    FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)instance->config;
 80008fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
    uint8_t RxData[8];

	// Check if a new message is available

		// Retrieve the message from the FIFO
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, RxData) == HAL_OK)
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	f107 0218 	add.w	r2, r7, #24
 800090e:	2140      	movs	r1, #64	@ 0x40
 8000910:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000912:	f005 fd8b 	bl	800642c <HAL_FDCAN_GetRxMessage>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d14d      	bne.n	80009b8 <CAN_Receive+0xcc>
		{
			// Process the received message
			instance->rxPacket[instance->processIdx].invalid = false;
 800091c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	4619      	mov	r1, r3
 8000922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000924:	460b      	mov	r3, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	330f      	adds	r3, #15
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
			instance->rxPacket[instance->processIdx].isNew = true;
 8000934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	4619      	mov	r1, r3
 800093a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800093c:	460b      	mov	r3, r1
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	3310      	adds	r3, #16
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
			instance->rxPacket[instance->processIdx].length = rxHeader.DataLength & 0xFF;
 800094c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800094e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	4619      	mov	r1, r3
 8000954:	b2d0      	uxtb	r0, r2
 8000956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000958:	460b      	mov	r3, r1
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	330e      	adds	r3, #14
 8000964:	4602      	mov	r2, r0
 8000966:	701a      	strb	r2, [r3, #0]
			memset(instance->rxPacket[instance->processIdx].data, 0, MAX_DATA_SIZE);
 8000968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	461a      	mov	r2, r3
 800096e:	4613      	mov	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000978:	4413      	add	r3, r2
 800097a:	3306      	adds	r3, #6
 800097c:	2208      	movs	r2, #8
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f00b fdcf 	bl	800c524 <memset>
			memcpy(instance->rxPacket[instance->processIdx].data, RxData, MAX_DATA_SIZE);
 8000986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	461a      	mov	r2, r3
 800098c:	4613      	mov	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000996:	4413      	add	r3, r2
 8000998:	3306      	adds	r3, #6
 800099a:	461a      	mov	r2, r3
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	cb03      	ldmia	r3!, {r0, r1}
 80009a2:	6010      	str	r0, [r2, #0]
 80009a4:	6051      	str	r1, [r2, #4]

			Coms_IncIdx(&instance->rxIdx);
 80009a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdfd 	bl	80005a8 <Coms_IncIdx>
			Coms_IncIdx(&instance->processIdx);
 80009ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009b0:	3302      	adds	r3, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fdf8 	bl	80005a8 <Coms_IncIdx>
		{

		}

#endif
    return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3748      	adds	r7, #72	@ 0x48
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <CAN_SetupReceive>:

static HAL_StatusTypeDef CAN_SetupReceive(void *inst)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	617b      	str	r3, [r7, #20]
	FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)instance->config;
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d4:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status = HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	6938      	ldr	r0, [r7, #16]
 80009dc:	f005 fe2e 	bl	800663c <HAL_FDCAN_ActivateNotification>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
//	uint32_t b = HAL_FDCAN_GetError(hfdcan);
    return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <Comm_Init>:

// Initialize Communication Instance
void Comm_Init(ComsInterface_t *instance, CommType type, void *config)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	460b      	mov	r3, r1
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	72fb      	strb	r3, [r7, #11]
    instance->type = type;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	7afa      	ldrb	r2, [r7, #11]
 8000a02:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    instance->config = config;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    instance->decodeIdx = 0;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2200      	movs	r2, #0
 8000a12:	705a      	strb	r2, [r3, #1]
    instance->rxIdx = 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
    instance->processIdx = 0;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	709a      	strb	r2, [r3, #2]

    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
 8000a24:	e016      	b.n	8000a54 <Comm_Init+0x64>
    	instance->rxPacket[i].invalid = true;
 8000a26:	7dfa      	ldrb	r2, [r7, #23]
 8000a28:	68f9      	ldr	r1, [r7, #12]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	440b      	add	r3, r1
 8000a34:	330f      	adds	r3, #15
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
    	instance->rxPacket[i].isNew = false;
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	440b      	add	r3, r1
 8000a48:	3310      	adds	r3, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	3301      	adds	r3, #1
 8000a52:	75fb      	strb	r3, [r7, #23]
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d9e5      	bls.n	8000a26 <Comm_Init+0x36>
    }

    if (type == COMM_UART) {
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10f      	bne.n	8000a80 <Comm_Init+0x90>
        instance->interface.Send = UART_Send;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <Comm_Init+0xb8>)
 8000a64:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = UART_Receive;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <Comm_Init+0xbc>)
 8000a6c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <Comm_Init+0xc0>)
 8000a74:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        UART_SetupReceive(instance);
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff feb1 	bl	80007e0 <UART_SetupReceive>
        FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;

        CAN_SetupReceive(hfdcan);

    }
}
 8000a7e:	e00f      	b.n	8000aa0 <Comm_Init+0xb0>
    else if (type == COMM_CAN) {
 8000a80:	7afb      	ldrb	r3, [r7, #11]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d10c      	bne.n	8000aa0 <Comm_Init+0xb0>
        instance->interface.Send = CAN_Send;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <Comm_Init+0xc4>)
 8000a8a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = CAN_Receive;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4a09      	ldr	r2, [pc, #36]	@ (8000ab8 <Comm_Init+0xc8>)
 8000a92:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        CAN_SetupReceive(hfdcan);
 8000a9a:	6938      	ldr	r0, [r7, #16]
 8000a9c:	f7ff ff91 	bl	80009c2 <CAN_SetupReceive>
}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08000797 	.word	0x08000797
 8000aac:	08000855 	.word	0x08000855
 8000ab0:	0800068f 	.word	0x0800068f
 8000ab4:	0800089b 	.word	0x0800089b
 8000ab8:	080008ed 	.word	0x080008ed

08000abc <Comm_Send>:

// Wrapper for Sending Data
HAL_StatusTypeDef Comm_Send(ComsInterface_t *instance, DecodedPacket_t *packet)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	if(packet->invalid) return HAL_ERROR;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	7adb      	ldrb	r3, [r3, #11]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <Comm_Send+0x16>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e009      	b.n	8000ae6 <Comm_Send+0x2a>

    return instance->interface.Send(instance->config, packet);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	4798      	blx	r3
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <Comm_Receive>:

// Wrapper for Receiving Data
HAL_StatusTypeDef Comm_Receive(ComsInterface_t *instance, uint8_t *data, uint16_t length)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	4613      	mov	r3, r2
 8000afa:	80fb      	strh	r3, [r7, #6]
    return instance->interface.Receive(instance, data, length);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b02:	88fa      	ldrh	r2, [r7, #6]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	4798      	blx	r3
 8000b0a:	4603      	mov	r3, r0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <Comm_Process>:

void Comm_Process(ComsInterface_t *instance) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	static uint32_t currentTime;
	static uint32_t lastTime;

	currentTime = HAL_GetTick();
 8000b1c:	f003 faa8 	bl	8004070 <HAL_GetTick>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <Comm_Process+0x98>)
 8000b24:	6013      	str	r3, [r2, #0]

	if(instance->type == COMM_UART) {
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d132      	bne.n	8000b96 <Comm_Process+0x82>
		if(currentTime - lastTime > 1000) {
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <Comm_Process+0x98>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b3e:	d92a      	bls.n	8000b96 <Comm_Process+0x82>
			UART_SetupReceive(instance);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fe4d 	bl	80007e0 <UART_SetupReceive>
			lastTime = currentTime;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <Comm_Process+0x98>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b4c:	6013      	str	r3, [r2, #0]
		}
	}

	while (instance->decodeIdx != instance->rxIdx) {
 8000b4e:	e022      	b.n	8000b96 <Comm_Process+0x82>
		instance->interface.ConvertToPacket(&instance->rxPacket[instance->decodeIdx], &instance->rxBuf[instance->decodeIdx]);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	440b      	add	r3, r1
 8000b68:	1d18      	adds	r0, r3, #4
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	460b      	mov	r3, r1
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	3370      	adds	r3, #112	@ 0x70
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3304      	adds	r3, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4790      	blx	r2
		Coms_IncIdx(&instance->decodeIdx);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd0d 	bl	80005a8 <Coms_IncIdx>
		lastTime = currentTime;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <Comm_Process+0x98>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b94:	6013      	str	r3, [r2, #0]
	while (instance->decodeIdx != instance->rxIdx) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	785a      	ldrb	r2, [r3, #1]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d1d6      	bne.n	8000b50 <Comm_Process+0x3c>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200003e0 	.word	0x200003e0
 8000bb0:	200003e4 	.word	0x200003e4

08000bb4 <Comm_GetPacket>:

DecodedPacket_t Comm_GetPacket(ComsInterface_t *instance) {
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	DecodedPacket_t packet = {
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	819a      	strh	r2, [r3, #12]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	74fb      	strb	r3, [r7, #19]
			.invalid = true,
			.isNew = false
	};

	if(instance->decodeIdx == instance->processIdx) {
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	785a      	ldrb	r2, [r3, #1]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d10a      	bne.n	8000bf2 <Comm_GetPacket+0x3e>
		return packet;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	461c      	mov	r4, r3
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000be6:	6020      	str	r0, [r4, #0]
 8000be8:	6061      	str	r1, [r4, #4]
 8000bea:	60a2      	str	r2, [r4, #8]
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	e029      	b.n	8000c46 <Comm_GetPacket+0x92>
	}

	uint8_t idx = instance->processIdx;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	789b      	ldrb	r3, [r3, #2]
 8000bf6:	75fb      	strb	r3, [r7, #23]

	Coms_IncIdx(&instance->processIdx);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fcd3 	bl	80005a8 <Coms_IncIdx>
	memcpy(&packet, &instance->rxPacket[idx], sizeof(instance->rxPacket[idx]));
 8000c02:	7dfa      	ldrb	r2, [r7, #23]
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	1d19      	adds	r1, r3, #4
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	220e      	movs	r2, #14
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f00b fcaf 	bl	800c57c <memcpy>

	instance->rxPacket[idx].isNew = false;
 8000c1e:	7dfa      	ldrb	r2, [r7, #23]
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	440b      	add	r3, r1
 8000c2c:	3310      	adds	r3, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]

	return packet;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	461c      	mov	r4, r3
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c3c:	6020      	str	r0, [r4, #0]
 8000c3e:	6061      	str	r1, [r4, #4]
 8000c40:	60a2      	str	r2, [r4, #8]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	81a3      	strh	r3, [r4, #12]
}
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}

08000c4e <IMU_WriteRegister>:

#include "IMU.h"
#include <stdio.h> // For debugging with printf

// Internal helper function: Write a register
static HAL_StatusTypeDef IMU_WriteRegister(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t value) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = { reg, value };
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	733b      	strb	r3, [r7, #12]
 8000c62:	78bb      	ldrb	r3, [r7, #2]
 8000c64:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6858      	ldr	r0, [r3, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	891b      	ldrh	r3, [r3, #8]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	f006 f84b 	bl	8006d0c <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(imu->hspi, data, 2, HAL_MAX_DELAY);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f107 010c 	add.w	r1, r7, #12
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2202      	movs	r2, #2
 8000c84:	f007 f949 	bl	8007f1a <HAL_SPI_Transmit>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6858      	ldr	r0, [r3, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	891b      	ldrh	r3, [r3, #8]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	f006 f838 	bl	8006d0c <HAL_GPIO_WritePin>

    return status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <IMU_BurstRead>:

// Internal helper function: Burst read
static HAL_StatusTypeDef IMU_BurstRead(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t *buffer, uint8_t length) {
 8000ca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000caa:	b08f      	sub	sp, #60	@ 0x3c
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6178      	str	r0, [r7, #20]
 8000cb0:	60fa      	str	r2, [r7, #12]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	74fb      	strb	r3, [r7, #19]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	74bb      	strb	r3, [r7, #18]
 8000cbc:	466b      	mov	r3, sp
 8000cbe:	461e      	mov	r6, r3

    uint8_t tx_data[length+1];
 8000cc0:	7cbb      	ldrb	r3, [r7, #18]
 8000cc2:	1c59      	adds	r1, r3, #1
 8000cc4:	1e4b      	subs	r3, r1, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc8:	460a      	mov	r2, r1
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603a      	str	r2, [r7, #0]
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	00c3      	lsls	r3, r0, #3
 8000cdc:	6838      	ldr	r0, [r7, #0]
 8000cde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	00c2      	lsls	r2, r0, #3
 8000ce6:	460a      	mov	r2, r1
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4692      	mov	sl, r2
 8000cec:	469b      	mov	fp, r3
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000cfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d02:	460b      	mov	r3, r1
 8000d04:	3307      	adds	r3, #7
 8000d06:	08db      	lsrs	r3, r3, #3
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000d0e:	ab02      	add	r3, sp, #8
 8000d10:	3300      	adds	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_data[length+1];
 8000d14:	7cbb      	ldrb	r3, [r7, #18]
 8000d16:	1c59      	adds	r1, r3, #1
 8000d18:	1e4b      	subs	r3, r1, #1
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	2300      	movs	r3, #0
 8000d20:	4690      	mov	r8, r2
 8000d22:	4699      	mov	r9, r3
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d38:	460a      	mov	r2, r1
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	4614      	mov	r4, r2
 8000d3e:	461d      	mov	r5, r3
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	00eb      	lsls	r3, r5, #3
 8000d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d4e:	00e2      	lsls	r2, r4, #3
 8000d50:	460b      	mov	r3, r1
 8000d52:	3307      	adds	r3, #7
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	ebad 0d03 	sub.w	sp, sp, r3
 8000d5c:	ab02      	add	r3, sp, #8
 8000d5e:	3300      	adds	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    tx_data[0] = reg | IMU_READ_BIT;
 8000d62:	7cfb      	ldrb	r3, [r7, #19]
 8000d64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= length; i++) {
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d74:	e00f      	b.n	8000d96 <IMU_BurstRead+0xf0>
    	tx_data[i] = (tx_data[i-1]+1);
 8000d76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d7e:	5cd2      	ldrb	r2, [r2, r3]
 8000d80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d84:	3201      	adds	r2, #1
 8000d86:	b2d1      	uxtb	r1, r2
 8000d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d8a:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 1; i <= length; i++) {
 8000d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d90:	3301      	adds	r3, #1
 8000d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d96:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000d9a:	7cbb      	ldrb	r3, [r7, #18]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d9ea      	bls.n	8000d76 <IMU_BurstRead+0xd0>
    }

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	6858      	ldr	r0, [r3, #4]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	891b      	ldrh	r3, [r3, #8]
 8000da8:	2200      	movs	r2, #0
 8000daa:	4619      	mov	r1, r3
 8000dac:	f005 ffae 	bl	8006d0c <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx_data, rx_data, length + 1, HAL_MAX_DELAY);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	7cbb      	ldrb	r3, [r7, #18]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	9200      	str	r2, [sp, #0]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dc6:	f007 fa1e 	bl	8008206 <HAL_SPI_TransmitReceive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	76fb      	strb	r3, [r7, #27]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	6858      	ldr	r0, [r3, #4]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	891b      	ldrh	r3, [r3, #8]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f005 ff97 	bl	8006d0c <HAL_GPIO_WritePin>

    for(uint8_t i = 1; i <= length; i++) {
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000de4:	e00e      	b.n	8000e04 <IMU_BurstRead+0x15e>
    	*(buffer+(i-1)) = rx_data[i];
 8000de6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000dea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000dee:	3b01      	subs	r3, #1
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	440b      	add	r3, r1
 8000df4:	69f9      	ldr	r1, [r7, #28]
 8000df6:	5c8a      	ldrb	r2, [r1, r2]
 8000df8:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= length; i++) {
 8000dfa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000e04:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d9eb      	bls.n	8000de6 <IMU_BurstRead+0x140>
	}


    return status;
 8000e0e:	7efb      	ldrb	r3, [r7, #27]
 8000e10:	46b5      	mov	sp, r6
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3734      	adds	r7, #52	@ 0x34
 8000e16:	46bd      	mov	sp, r7
 8000e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e1c <IMU_Init>:

// Initialize the IMU
HAL_StatusTypeDef IMU_Init(IMU_HandleTypeDef *imu) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
//
//    for(uint8_t i = 0; i < 14; i++) {
//    	data_buffer[i] = 0;
//    }

    if (IMU_WriteRegister(imu, 0x76, 0x00) != HAL_OK) { //userbank 0 select
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2176      	movs	r1, #118	@ 0x76
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff0e 	bl	8000c4e <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
	HAL_Delay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f003 f928 	bl	8004088 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_DEVICE_CONFIG_REG, IMU_DEVICE_CONFIG_RESET) != HAL_OK) {
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2111      	movs	r1, #17
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff06 	bl	8000c4e <IMU_WriteRegister>
    	//   return HAL_ERROR;
	}

    HAL_Delay(5);
 8000e42:	2005      	movs	r0, #5
 8000e44:	f003 f920 	bl	8004088 <HAL_Delay>

    if (IMU_BurstRead(imu, IMU_WHO_AM_I_REG, &who_am_i, 1) != HAL_OK || who_am_i != IMU_WHO_AM_I_EXPECTED) {
 8000e48:	f107 020f 	add.w	r2, r7, #15
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2175      	movs	r1, #117	@ 0x75
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff28 	bl	8000ca6 <IMU_BurstRead>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f003 f914 	bl	8004088 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_PWR_MGMT_0, IMU_ENABLE_ACCEL_GYRO) != HAL_OK) {
 8000e60:	220f      	movs	r2, #15
 8000e62:	214e      	movs	r1, #78	@ 0x4e
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fef2 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f003 f90c 	bl	8004088 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_GYRO_CONFIG_REG, IMU_GYRO_CONFIG_DATA) != HAL_OK) {
 8000e70:	2248      	movs	r2, #72	@ 0x48
 8000e72:	214f      	movs	r1, #79	@ 0x4f
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff feea 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f003 f904 	bl	8004088 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_ACCEL_CONFIG_REG, IMU_ACCEL_CONFIG_DATA) != HAL_OK) {
 8000e80:	2248      	movs	r2, #72	@ 0x48
 8000e82:	2150      	movs	r1, #80	@ 0x50
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fee2 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f003 f8fc 	bl	8004088 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG0_REG, IMU_INT_CONFIG0_DATA) != HAL_OK) {
 8000e90:	2220      	movs	r2, #32
 8000e92:	2163      	movs	r1, #99	@ 0x63
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff feda 	bl	8000c4e <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
    HAL_Delay(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f003 f8f4 	bl	8004088 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_SOURCE_REG, IMU_INT_ENABLE_DATA_RDY) != HAL_OK) {
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	2165      	movs	r1, #101	@ 0x65
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fed2 	bl	8000c4e <IMU_WriteRegister>
       // return HAL_ERROR;
    }
    HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f003 f8ec 	bl	8004088 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG_REG, IMU_INT_ACTIVE_HIGH) != HAL_OK) {
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	2114      	movs	r1, #20
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff feca 	bl	8000c4e <IMU_WriteRegister>
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f003 f8e4 	bl	8004088 <HAL_Delay>


    return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <IMU_ReadAll>:

    return HAL_OK;
}

// Read all data (accelerometer, gyroscope, and temperature)
HAL_StatusTypeDef IMU_ReadAll(IMU_HandleTypeDef *imu) {
 8000eca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	466b      	mov	r3, sp
 8000ed6:	461e      	mov	r6, r3
	uint8_t length = 14;
 8000ed8:	230e      	movs	r3, #14
 8000eda:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[length];
 8000edc:	7df9      	ldrb	r1, [r7, #23]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	b2cb      	uxtb	r3, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4698      	mov	r8, r3
 8000eea:	4691      	mov	r9, r2
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ef8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000efc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f00:	b2cb      	uxtb	r3, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	461c      	mov	r4, r3
 8000f06:	4615      	mov	r5, r2
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	00eb      	lsls	r3, r5, #3
 8000f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f16:	00e2      	lsls	r2, r4, #3
 8000f18:	460b      	mov	r3, r1
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	ebad 0d03 	sub.w	sp, sp, r3
 8000f24:	466b      	mov	r3, sp
 8000f26:	3300      	adds	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
    uint8_t intStatus = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	72fb      	strb	r3, [r7, #11]
    if (IMU_BurstRead(imu, IMU_TEMP_OUT_H, raw_data, length) != HAL_OK) {
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	211d      	movs	r1, #29
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff feb6 	bl	8000ca6 <IMU_BurstRead>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <IMU_ReadAll+0x7a>
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e059      	b.n	8000ff8 <IMU_ReadAll+0x12e>
    }

    imu->accel[0] = (raw_data[2] << 8) | raw_data[3];
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	78db      	ldrb	r3, [r3, #3]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	825a      	strh	r2, [r3, #18]
    imu->accel[1] = (raw_data[4] << 8) | raw_data[5];
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	795b      	ldrb	r3, [r3, #5]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	829a      	strh	r2, [r3, #20]
    imu->accel[2] = (raw_data[6] << 8) | raw_data[7];
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	799b      	ldrb	r3, [r3, #6]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	79db      	ldrb	r3, [r3, #7]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	82da      	strh	r2, [r3, #22]

    imu->temperature = (raw_data[0] << 8) | raw_data[1];
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	83da      	strh	r2, [r3, #30]

    imu->gyro[0] = (raw_data[8] << 8) | raw_data[9];
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	7a1b      	ldrb	r3, [r3, #8]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	7a5b      	ldrb	r3, [r3, #9]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	831a      	strh	r2, [r3, #24]
    imu->gyro[1] = (raw_data[10] << 8) | raw_data[11];
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	7a9b      	ldrb	r3, [r3, #10]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	7adb      	ldrb	r3, [r3, #11]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	835a      	strh	r2, [r3, #26]
    imu->gyro[2] = (raw_data[12] << 8) | raw_data[13];
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	7b1b      	ldrb	r3, [r3, #12]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	7b5b      	ldrb	r3, [r3, #13]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	839a      	strh	r2, [r3, #28]

    if (IMU_BurstRead(imu, IMU_INT_STATUS_REG, &intStatus, 1) != HAL_OK) {
 8000fde:	f107 020b 	add.w	r2, r7, #11
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	212d      	movs	r1, #45	@ 0x2d
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fe5d 	bl	8000ca6 <IMU_BurstRead>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <IMU_ReadAll+0x12c>
		return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <IMU_ReadAll+0x12e>
	}

    return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	46b5      	mov	sp, r6
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001004 <IMU_InterruptHandler>:

// Interrupt handler
void IMU_InterruptHandler(IMU_HandleTypeDef *imu, uint16_t GPIO_pin) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
    if (GPIO_pin != imu->int_pin) return;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	8a1b      	ldrh	r3, [r3, #16]
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	429a      	cmp	r2, r3
 8001018:	d103      	bne.n	8001022 <IMU_InterruptHandler+0x1e>

    if (IMU_ReadAll(imu) == HAL_OK) {
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff55 	bl	8000eca <IMU_ReadAll>
 8001020:	e000      	b.n	8001024 <IMU_InterruptHandler+0x20>
    if (GPIO_pin != imu->int_pin) return;
 8001022:	bf00      	nop
        // Data successfully read
    } else {
        // Handle read error
    }
}
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	@ 0x30
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2220      	movs	r2, #32
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00b fa6d 	bl	800c524 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800104a:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800104c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001050:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001054:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001058:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001066:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001074:	2204      	movs	r2, #4
 8001076:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107e:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001086:	2201      	movs	r2, #1
 8001088:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001098:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800109a:	2200      	movs	r2, #0
 800109c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	4817      	ldr	r0, [pc, #92]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010b6:	f003 f9df 	bl	8004478 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c0:	f000 fee4 	bl	8001e8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010d0:	f003 fff4 	bl	80050bc <HAL_ADCEx_MultiModeConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010da:	f000 fed7 	bl	8001e8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_ADC1_Init+0xec>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2306      	movs	r3, #6
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ea:	237f      	movs	r3, #127	@ 0x7f
 80010ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010fc:	f003 fb78 	bl	80047f0 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001106:	f000 fec1 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3730      	adds	r7, #48	@ 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200003e8 	.word	0x200003e8
 8001118:	10c00010 	.word	0x10c00010

0800111c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	@ 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00b f9f5 	bl	800c524 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800113c:	4a31      	ldr	r2, [pc, #196]	@ (8001204 <MX_ADC3_Init+0xe8>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001140:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001142:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001146:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001162:	2204      	movs	r2, #4
 8001164:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001168:	2200      	movs	r2, #0
 800116a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800116e:	2200      	movs	r2, #0
 8001170:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001174:	2201      	movs	r2, #1
 8001176:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011a2:	4817      	ldr	r0, [pc, #92]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011a4:	f003 f968 	bl	8004478 <HAL_ADC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011ae:	f000 fe6d 	bl	8001e8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4810      	ldr	r0, [pc, #64]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011be:	f003 ff7d 	bl	80050bc <HAL_ADCEx_MultiModeConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011c8:	f000 fe60 	bl	8001e8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_ADC3_Init+0xec>)
 80011ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d0:	2306      	movs	r3, #6
 80011d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d8:	237f      	movs	r3, #127	@ 0x7f
 80011da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011dc:	2304      	movs	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011ea:	f003 fb01 	bl	80047f0 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80011f4:	f000 fe4a 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	@ 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000454 	.word	0x20000454
 8001204:	50000400 	.word	0x50000400
 8001208:	1d500080 	.word	0x1d500080

0800120c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a2      	sub	sp, #136	@ 0x88
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2254      	movs	r2, #84	@ 0x54
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00b f979 	bl	800c524 <memset>
  if(adcHandle->Instance==ADC1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800123a:	d14e      	bne.n	80012da <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800123c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001240:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001242:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001246:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4618      	mov	r0, r3
 800124e:	f006 fb6b 	bl	8007928 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001258:	f000 fe18 	bl	8001e8c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800125c:	4b4a      	ldr	r3, [pc, #296]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	4a49      	ldr	r2, [pc, #292]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001262:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001268:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	4a43      	ldr	r2, [pc, #268]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b3e      	ldr	r3, [pc, #248]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	4a3d      	ldr	r2, [pc, #244]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOARD_TEMP_Pin;
 80012a4:	2308      	movs	r3, #8
 80012a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(BOARD_TEMP_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ba:	f005 fb8d 	bl	80069d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMC_CURRSENSE_Pin;
 80012be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012d0:	4619      	mov	r1, r3
 80012d2:	482e      	ldr	r0, [pc, #184]	@ (800138c <HAL_ADC_MspInit+0x180>)
 80012d4:	f005 fb80 	bl	80069d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012d8:	e051      	b.n	800137e <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a2c      	ldr	r2, [pc, #176]	@ (8001390 <HAL_ADC_MspInit+0x184>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d14c      	bne.n	800137e <HAL_ADC_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 fb17 	bl	8007928 <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 8001300:	f000 fdc4 	bl	8001e8c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LMC_CURRSENSE_Pin;
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <HAL_ADC_MspInit+0x188>)
 8001360:	f005 fb3a 	bl	80069d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBAT_SW_DIAG_Pin;
 8001364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001368:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VBAT_SW_DIAG_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001376:	4619      	mov	r1, r3
 8001378:	4807      	ldr	r0, [pc, #28]	@ (8001398 <HAL_ADC_MspInit+0x18c>)
 800137a:	f005 fb2d 	bl	80069d8 <HAL_GPIO_Init>
}
 800137e:	bf00      	nop
 8001380:	3788      	adds	r7, #136	@ 0x88
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400
 8001390:	50000400 	.word	0x50000400
 8001394:	48001000 	.word	0x48001000
 8001398:	48000c00 	.word	0x48000c00

0800139c <SendResponse>:
		COMMAND_0x0210
};

// Function to initialize the Command Handler

static void SendResponse(ComsInterface_t *interface) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	Comm_Send(interface, &response);
 80013a4:	4903      	ldr	r1, [pc, #12]	@ (80013b4 <SendResponse+0x18>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fb88 	bl	8000abc <Comm_Send>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200004c0 	.word	0x200004c0

080013b8 <SetResponse>:

static void SetResponse(uint16_t command, uint8_t length, uint8_t *data) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	603a      	str	r2, [r7, #0]
 80013c2:	80fb      	strh	r3, [r7, #6]
 80013c4:	460b      	mov	r3, r1
 80013c6:	717b      	strb	r3, [r7, #5]
	if(data == NULL) {
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <SetResponse+0x1e>
		response.length = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <SetResponse+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	729a      	strb	r2, [r3, #10]
 80013d4:	e00e      	b.n	80013f4 <SetResponse+0x3c>
	} else {
		response.length = length;
 80013d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <SetResponse+0x50>)
 80013d8:	797b      	ldrb	r3, [r7, #5]
 80013da:	7293      	strb	r3, [r2, #10]
		memset(response.data, 0, MAX_DATA_SIZE);
 80013dc:	2208      	movs	r2, #8
 80013de:	2100      	movs	r1, #0
 80013e0:	480a      	ldr	r0, [pc, #40]	@ (800140c <SetResponse+0x54>)
 80013e2:	f00b f89f 	bl	800c524 <memset>
		memcpy(response.data, data, response.length);
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <SetResponse+0x50>)
 80013e8:	7a9b      	ldrb	r3, [r3, #10]
 80013ea:	461a      	mov	r2, r3
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <SetResponse+0x54>)
 80013f0:	f00b f8c4 	bl	800c57c <memcpy>
	}
	response.invalid = false;
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SetResponse+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	72da      	strb	r2, [r3, #11]
	response.command = command;
 80013fa:	4a03      	ldr	r2, [pc, #12]	@ (8001408 <SetResponse+0x50>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	8013      	strh	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200004c0 	.word	0x200004c0
 800140c:	200004c2 	.word	0x200004c2

08001410 <Response_OK>:

static void Response_OK() {
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_OK, 0, NULL);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	20ff      	movs	r0, #255	@ 0xff
 800141a:	f7ff ffcd 	bl	80013b8 <SetResponse>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <Response_Invalid>:

static void Response_Invalid() {
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_INVALID, 0, NULL);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	20fe      	movs	r0, #254	@ 0xfe
 800142c:	f7ff ffc4 	bl	80013b8 <SetResponse>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <makeInt16_t>:

static int16_t makeInt16_t(uint8_t *val1, uint8_t *val2) {
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	return (*val1 << 8) | *val2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <int16_tToUint8_t>:

static void int16_tToUint8_t(int16_t *input, uint8_t *output, uint8_t num) {
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	4613      	mov	r3, r2
 8001468:	71fb      	strb	r3, [r7, #7]
	uint8_t maxLoop = num;
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	75bb      	strb	r3, [r7, #22]

	for(uint8_t i = 0; i < maxLoop; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e01d      	b.n	80014b0 <int16_tToUint8_t+0x54>
		output[2*i] = (input[i] & 0xFF00) >> 8;
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001480:	121a      	asrs	r2, r3, #8
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4619      	mov	r1, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	440b      	add	r3, r1
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
		output[2*i+1] = input[i] & 0xFF;
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	f9b3 1000 	ldrsh.w	r1, [r3]
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	3301      	adds	r3, #1
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4413      	add	r3, r2
 80014a6:	b2ca      	uxtb	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < maxLoop; i++) {
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	3301      	adds	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]
 80014b0:	7dfa      	ldrb	r2, [r7, #23]
 80014b2:	7dbb      	ldrb	r3, [r7, #22]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d3dd      	bcc.n	8001474 <int16_tToUint8_t+0x18>
	}
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <CommandHandler_ProcessCommand>:
void CommandHandler_Init(void) {
    // Initialize any peripherals or variables related to command handling
    // Example: GPIO, Timers, etc.
}
// Function to process a received command
void CommandHandler_ProcessCommand(ComsInterface_t *interface, RobotSystem *robot) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    // Check for NULL pointer
	DecodedPacket_t packet = Comm_GetPacket(interface);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fb6b 	bl	8000bb4 <Comm_GetPacket>

	if(!packet.isNew) return;
 80014de:	7e3b      	ldrb	r3, [r7, #24]
 80014e0:	f083 0301 	eor.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d139      	bne.n	800155e <CommandHandler_ProcessCommand+0x96>

	if(packet.invalid) {
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <CommandHandler_ProcessCommand+0x34>
		Response_Invalid();
 80014f0:	f7ff ff97 	bl	8001422 <Response_Invalid>
		SendResponse(interface);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff51 	bl	800139c <SendResponse>
		return;
 80014fa:	e031      	b.n	8001560 <CommandHandler_ProcessCommand+0x98>
	}

	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	e029      	b.n	8001556 <CommandHandler_ProcessCommand+0x8e>
		if (commandTable[i].commandID == packet.command) {
 8001502:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <CommandHandler_ProcessCommand+0xa0>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 800150a:	89bb      	ldrh	r3, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d11f      	bne.n	8001550 <CommandHandler_ProcessCommand+0x88>
			if(commandTable[i].expLength == 0 || commandTable[i].expLength == packet.length) {
 8001510:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <CommandHandler_ProcessCommand+0xa0>)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	885b      	ldrh	r3, [r3, #2]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <CommandHandler_ProcessCommand+0x66>
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <CommandHandler_ProcessCommand+0xa0>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	885b      	ldrh	r3, [r3, #2]
 8001528:	7dba      	ldrb	r2, [r7, #22]
 800152a:	4293      	cmp	r3, r2
 800152c:	d10a      	bne.n	8001544 <CommandHandler_ProcessCommand+0x7c>
				commandTable[i].handler(&packet, robot);
 800152e:	4a0e      	ldr	r2, [pc, #56]	@ (8001568 <CommandHandler_ProcessCommand+0xa0>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	6839      	ldr	r1, [r7, #0]
 800153e:	4610      	mov	r0, r2
 8001540:	4798      	blx	r3
 8001542:	e001      	b.n	8001548 <CommandHandler_ProcessCommand+0x80>
			} else {
				Response_Invalid();
 8001544:	f7ff ff6d 	bl	8001422 <Response_Invalid>
			}
			SendResponse(interface);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff27 	bl	800139c <SendResponse>
			return;
 800154e:	e007      	b.n	8001560 <CommandHandler_ProcessCommand+0x98>
	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	3301      	adds	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	2b0b      	cmp	r3, #11
 800155a:	d9d2      	bls.n	8001502 <CommandHandler_ProcessCommand+0x3a>
 800155c:	e000      	b.n	8001560 <CommandHandler_ProcessCommand+0x98>
	if(!packet.isNew) return;
 800155e:	bf00      	nop
		}
	}
}
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000

0800156c <Handle_SetMotorEnable>:

void Handle_SetMotorEnable(DecodedPacket_t *packet, RobotSystem *robot) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	uint8_t data = packet->data[0] > 0 ? 1 : 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	789b      	ldrb	r3, [r3, #2]
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]

	if(data) {
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <Handle_SetMotorEnable+0x28>
		RobotSystem_Enable(robot);
 800158c:	6838      	ldr	r0, [r7, #0]
 800158e:	f001 fdb6 	bl	80030fe <RobotSystem_Enable>
 8001592:	e002      	b.n	800159a <Handle_SetMotorEnable+0x2e>
	} else {
		RobotSystem_Disable(robot);
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f001 fdc5 	bl	8003124 <RobotSystem_Disable>
	}

	Response_OK();
 800159a:	f7ff ff39 	bl	8001410 <Response_OK>
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <Handle_SetMotorSpeed>:

void Handle_SetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
	int16_t leftSpeed = makeInt16_t(&packet->data[0], &packet->data[1]);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	1c9a      	adds	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3303      	adds	r3, #3
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f7ff ff3a 	bl	8001434 <makeInt16_t>
 80015c0:	4603      	mov	r3, r0
 80015c2:	81fb      	strh	r3, [r7, #14]
	int16_t rightSpeed = makeInt16_t(&packet->data[2], &packet->data[3]);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	1d1a      	adds	r2, r3, #4
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3305      	adds	r3, #5
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff ff30 	bl	8001434 <makeInt16_t>
 80015d4:	4603      	mov	r3, r0
 80015d6:	81bb      	strh	r3, [r7, #12]
	RobotSystem_SetSpeed(robot, leftSpeed, rightSpeed);
 80015d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e0:	4619      	mov	r1, r3
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	f001 fcbe 	bl	8002f64 <RobotSystem_SetSpeed>

	Response_OK();
 80015e8:	f7ff ff12 	bl	8001410 <Response_OK>
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <Handle_SetMotorStop>:

void Handle_SetMotorStop(DecodedPacket_t *packet, RobotSystem *robot) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	RobotSystem_SetSpeed(robot, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f001 fcae 	bl	8002f64 <RobotSystem_SetSpeed>

	Response_OK();
 8001608:	f7ff ff02 	bl	8001410 <Response_OK>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <Handle_SetOneMotorSpeed>:

void Handle_SetOneMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
	int16_t speed = makeInt16_t(&packet->data[0], &packet->data[1]);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	1c9a      	adds	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3303      	adds	r3, #3
 8001626:	4619      	mov	r1, r3
 8001628:	4610      	mov	r0, r2
 800162a:	f7ff ff03 	bl	8001434 <makeInt16_t>
 800162e:	4603      	mov	r3, r0
 8001630:	81fb      	strh	r3, [r7, #14]

	if(packet->command == COMMAND_SETLEFTSPEED) {
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	f240 1203 	movw	r2, #259	@ 0x103
 800163a:	4293      	cmp	r3, r2
 800163c:	d106      	bne.n	800164c <Handle_SetOneMotorSpeed+0x38>
		RobotSystem_SetLeftSpeed(robot, speed);
 800163e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001642:	4619      	mov	r1, r3
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f001 fcb8 	bl	8002fba <RobotSystem_SetLeftSpeed>
 800164a:	e00a      	b.n	8001662 <Handle_SetOneMotorSpeed+0x4e>
	} else if(packet->command == COMMAND_SETRIGHTSPEED) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001654:	d105      	bne.n	8001662 <Handle_SetOneMotorSpeed+0x4e>
		RobotSystem_SetRightSpeed(robot, speed);
 8001656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800165a:	4619      	mov	r1, r3
 800165c:	6838      	ldr	r0, [r7, #0]
 800165e:	f001 fcc6 	bl	8002fee <RobotSystem_SetRightSpeed>
	}

	Response_OK();
 8001662:	f7ff fed5 	bl	8001410 <Response_OK>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <Handle_GetMotorPosition>:

void Handle_GetMotorPosition(DecodedPacket_t *packet, RobotSystem *robot) {
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
	int16_t wheelPos[2];
	uint8_t data[4];

	RobotSystem_GetMotorPosition(robot, &wheelPos[0], &wheelPos[1]);
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	1c9a      	adds	r2, r3, #2
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4619      	mov	r1, r3
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f001 fcdf 	bl	8003048 <RobotSystem_GetMotorPosition>

	int16_tToUint8_t(wheelPos, data, 2);
 800168a:	f107 0108 	add.w	r1, r7, #8
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2202      	movs	r2, #2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fee1 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETMOTORPOSITION, 4, data);
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	461a      	mov	r2, r3
 80016a0:	2104      	movs	r1, #4
 80016a2:	f240 1081 	movw	r0, #385	@ 0x181
 80016a6:	f7ff fe87 	bl	80013b8 <SetResponse>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <Handle_GetMotorSpeed>:

void Handle_GetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
	int16_t speed[2];
	uint8_t data[4];

	RobotSystem_GetMotorSpeed(robot, &speed[0], &speed[1]);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	1c9a      	adds	r2, r3, #2
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4619      	mov	r1, r3
 80016c8:	6838      	ldr	r0, [r7, #0]
 80016ca:	f001 fcd2 	bl	8003072 <RobotSystem_GetMotorSpeed>

	int16_tToUint8_t(speed, data, 2);
 80016ce:	f107 0108 	add.w	r1, r7, #8
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2202      	movs	r2, #2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff febf 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETMOTORSPEED, 4, data);
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	461a      	mov	r2, r3
 80016e4:	2104      	movs	r1, #4
 80016e6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80016ea:	f7ff fe65 	bl	80013b8 <SetResponse>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <Handle_WakeUp>:

void Handle_WakeUp(DecodedPacket_t *packet, RobotSystem *robot) {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff fe57 	bl	80013b8 <SetResponse>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <Handle_Ready>:

void Handle_Ready(DecodedPacket_t *packet, RobotSystem *robot) {
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f7ff fe49 	bl	80013b8 <SetResponse>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <Handle_Shutdown>:

void Handle_Shutdown(DecodedPacket_t *packet, RobotSystem *robot) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
	Response_OK();
 8001738:	f7ff fe6a 	bl	8001410 <Response_OK>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <Handle_GetAccelVals>:

void Handle_GetAccelVals(DecodedPacket_t *packet, RobotSystem *robot) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	int16_t accel[3];
	uint8_t data[6];

	RobotSystem_GetAccelVals(robot, accel);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f001 fda2 	bl	800329e <RobotSystem_GetAccelVals>

	int16_tToUint8_t(accel, data, 3);
 800175a:	f107 0108 	add.w	r1, r7, #8
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	2203      	movs	r2, #3
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe79 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETACCELVALS, 6, data);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	461a      	mov	r2, r3
 8001770:	2106      	movs	r1, #6
 8001772:	f240 2001 	movw	r0, #513	@ 0x201
 8001776:	f7ff fe1f 	bl	80013b8 <SetResponse>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <Handle_GetGyroVals>:

void Handle_GetGyroVals(DecodedPacket_t *packet, RobotSystem *robot) {
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
	int16_t gyro[3];
	uint8_t data[6];

	RobotSystem_GetGyroVals(robot, gyro);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f001 fd9f 	bl	80032d6 <RobotSystem_GetGyroVals>

	int16_tToUint8_t(gyro, data, 3);
 8001798:	f107 0108 	add.w	r1, r7, #8
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2203      	movs	r2, #3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe5a 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETGYROVALS, 6, data);
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	461a      	mov	r2, r3
 80017ae:	2106      	movs	r1, #6
 80017b0:	f44f 7004 	mov.w	r0, #528	@ 0x210
 80017b4:	f7ff fe00 	bl	80013b8 <SetResponse>
}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <MX_DAC2_Init>:

DAC_HandleTypeDef hdac2;

/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	@ 0x30
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80017c6:	463b      	mov	r3, r7
 80017c8:	2230      	movs	r2, #48	@ 0x30
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00a fea9 	bl	800c524 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_DAC2_Init+0x6c>)
 80017d4:	4a16      	ldr	r2, [pc, #88]	@ (8001830 <MX_DAC2_Init+0x70>)
 80017d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80017d8:	4814      	ldr	r0, [pc, #80]	@ (800182c <MX_DAC2_Init+0x6c>)
 80017da:	f003 fe86 	bl	80054ea <HAL_DAC_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80017e4:	f000 fb52 	bl	8001e8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80017e8:	2302      	movs	r3, #2
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	2200      	movs	r2, #0
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <MX_DAC2_Init+0x6c>)
 8001814:	f003 ff26 	bl	8005664 <HAL_DAC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800181e:	f000 fb35 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	@ 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200004d0 	.word	0x200004d0
 8001830:	50000c00 	.word	0x50000c00

08001834 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	@ 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a15      	ldr	r2, [pc, #84]	@ (80018a8 <HAL_DAC_MspInit+0x74>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d124      	bne.n	80018a0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* DAC2 clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_DAC_MspInit+0x78>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <HAL_DAC_MspInit+0x78>)
 800185c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_DAC_MspInit+0x78>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <HAL_DAC_MspInit+0x78>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a0e      	ldr	r2, [pc, #56]	@ (80018ac <HAL_DAC_MspInit+0x78>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <HAL_DAC_MspInit+0x78>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = WHEEL_MOTOR_CURRENT_LIMIT_Pin;
 8001886:	2340      	movs	r3, #64	@ 0x40
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	2303      	movs	r3, #3
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WHEEL_MOTOR_CURRENT_LIMIT_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f005 f89c 	bl	80069d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	50000c00 	.word	0x50000c00
 80018ac:	40021000 	.word	0x40021000

080018b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <MX_DMA_Init+0x50>)
 80018b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ba:	4a11      	ldr	r2, [pc, #68]	@ (8001900 <MX_DMA_Init+0x50>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80018c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <MX_DMA_Init+0x50>)
 80018c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <MX_DMA_Init+0x50>)
 80018d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <MX_DMA_Init+0x50>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <MX_DMA_Init+0x50>)
 80018dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	200b      	movs	r0, #11
 80018ec:	f003 fdc9 	bl	8005482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018f0:	200b      	movs	r0, #11
 80018f2:	f003 fde0 	bl	80054b6 <HAL_NVIC_EnableIRQ>

}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000

08001904 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800190a:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 800190c:	4a2e      	ldr	r2, [pc, #184]	@ (80019c8 <MX_FDCAN1_Init+0xc4>)
 800190e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV8;
 8001910:	4b2c      	ldr	r3, [pc, #176]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001912:	2204      	movs	r2, #4
 8001914:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001916:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800191c:	4b29      	ldr	r3, [pc, #164]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001922:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001924:	2201      	movs	r2, #1
 8001926:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001928:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 800192a:	2200      	movs	r2, #0
 800192c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800192e:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001930:	2200      	movs	r2, #0
 8001932:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001934:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001936:	2202      	movs	r2, #2
 8001938:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800193a:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 800193c:	2201      	movs	r2, #1
 800193e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001940:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001942:	220f      	movs	r2, #15
 8001944:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8001946:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001948:	2204      	movs	r2, #4
 800194a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 800194e:	2202      	movs	r2, #2
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001954:	2201      	movs	r2, #1
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 800195a:	220f      	movs	r2, #15
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800195e:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001960:	2204      	movs	r2, #4
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001966:	2200      	movs	r2, #0
 8001968:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 800196c:	2200      	movs	r2, #0
 800196e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001972:	2200      	movs	r2, #0
 8001974:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001976:	4813      	ldr	r0, [pc, #76]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001978:	f004 fb60 	bl	800603c <HAL_FDCAN_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001982:	f000 fa83 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  HAL_FDCAN_MspInit(&hfdcan1);
 8001986:	480f      	ldr	r0, [pc, #60]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 8001988:	f000 f820 	bl	80019cc <HAL_FDCAN_MspInit>

  FDCAN_FilterTypeDef sFilterConfig;

    /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800198c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001990:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001996:	2302      	movs	r3, #2
 8001998:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800199a:	2301      	movs	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x0;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80019a6:	463b      	mov	r3, r7
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	@ (80019c4 <MX_FDCAN1_Init+0xc0>)
 80019ac:	f004 fca0 	bl	80062f0 <HAL_FDCAN_ConfigFilter>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_FDCAN1_Init+0xb6>
    {
      Error_Handler();
 80019b6:	f000 fa69 	bl	8001e8c <Error_Handler>
//    uint32_t b = HAL_FDCAN_GetError(&hfdcan1);
//
//    HAL_Delay(1);
  /* USER CODE END FDCAN1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200004e4 	.word	0x200004e4
 80019c8:	40006400 	.word	0x40006400

080019cc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b09e      	sub	sp, #120	@ 0x78
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2254      	movs	r2, #84	@ 0x54
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00a fd99 	bl	800c524 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a74 <HAL_FDCAN_MspInit+0xa8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d137      	bne.n	8001a6c <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a06:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f005 ff8b 	bl	8007928 <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a18:	f000 fa38 	bl	8001e8c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a1c:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_FDCAN_MspInit+0xac>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	4a15      	ldr	r2, [pc, #84]	@ (8001a78 <HAL_FDCAN_MspInit+0xac>)
 8001a22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <HAL_FDCAN_MspInit+0xac>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a34:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <HAL_FDCAN_MspInit+0xac>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <HAL_FDCAN_MspInit+0xac>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a40:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <HAL_FDCAN_MspInit+0xac>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a5c:	2309      	movs	r3, #9
 8001a5e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a64:	4619      	mov	r1, r3
 8001a66:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <HAL_FDCAN_MspInit+0xb0>)
 8001a68:	f004 ffb6 	bl	80069d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3778      	adds	r7, #120	@ 0x78
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40006400 	.word	0x40006400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48000c00 	.word	0x48000c00

08001a80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	@ 0x30
 8001a84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b7a      	ldr	r3, [pc, #488]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	4a79      	ldr	r2, [pc, #484]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa2:	4b77      	ldr	r3, [pc, #476]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aae:	4b74      	ldr	r3, [pc, #464]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	4a73      	ldr	r2, [pc, #460]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001ab4:	f043 0320 	orr.w	r3, r3, #32
 8001ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aba:	4b71      	ldr	r3, [pc, #452]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	4a6d      	ldr	r2, [pc, #436]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad2:	4b6b      	ldr	r3, [pc, #428]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b68      	ldr	r3, [pc, #416]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	4a67      	ldr	r2, [pc, #412]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aea:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af6:	4b62      	ldr	r3, [pc, #392]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	4a61      	ldr	r2, [pc, #388]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b02:	4b5f      	ldr	r3, [pc, #380]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a5b      	ldr	r2, [pc, #364]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b59      	ldr	r3, [pc, #356]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b26:	4b56      	ldr	r3, [pc, #344]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a55      	ldr	r2, [pc, #340]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b53      	ldr	r3, [pc, #332]	@ (8001c80 <MX_GPIO_Init+0x200>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nAUX2_EN_Pin|LED_A_INT_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b48:	f005 f8e0 	bl	8006d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, nDEBUG_LED2_Pin|nDEBUG_LED1_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8001b52:	484c      	ldr	r0, [pc, #304]	@ (8001c84 <MX_GPIO_Init+0x204>)
 8001b54:	f005 f8da 	bl	8006d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX2_OUTPUT_GPIO_Port, AUX2_OUTPUT_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b5e:	484a      	ldr	r0, [pc, #296]	@ (8001c88 <MX_GPIO_Init+0x208>)
 8001b60:	f005 f8d4 	bl	8006d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCM_GYRO_SPI_GPIO_Port, nCS_MCM_GYRO_SPI_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2102      	movs	r1, #2
 8001b68:	4848      	ldr	r0, [pc, #288]	@ (8001c8c <MX_GPIO_Init+0x20c>)
 8001b6a:	f005 f8cf 	bl	8006d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCM_KILL_Pin|CAN_EN_5V_Pin|nCAN_STBY_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001b74:	4845      	ldr	r0, [pc, #276]	@ (8001c8c <MX_GPIO_Init+0x20c>)
 8001b76:	f005 f8c9 	bl	8006d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nWHEEL_MOTOR_SHDN_GPIO_Port, nWHEEL_MOTOR_SHDN_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4844      	ldr	r0, [pc, #272]	@ (8001c90 <MX_GPIO_Init+0x210>)
 8001b80:	f005 f8c4 	bl	8006d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nAUX2_EN_Pin|LED_A_INT_Pin;
 8001b84:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba0:	f004 ff1a 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = nDEBUG_LED2_Pin|nDEBUG_LED1_Pin;
 8001ba4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4831      	ldr	r0, [pc, #196]	@ (8001c84 <MX_GPIO_Init+0x204>)
 8001bbe:	f004 ff0b 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRMC_CURRFAULT_Pin;
 8001bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nRMC_CURRFAULT_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	482f      	ldr	r0, [pc, #188]	@ (8001c94 <MX_GPIO_Init+0x214>)
 8001bd8:	f004 fefe 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = V_3V3_DIAG_Pin|V_5V_DIAG_Pin|nLMC_CURRFAULT_Pin;
 8001bdc:	f44f 7341 	mov.w	r3, #772	@ 0x304
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4825      	ldr	r0, [pc, #148]	@ (8001c88 <MX_GPIO_Init+0x208>)
 8001bf2:	f004 fef1 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX2_OUTPUT_Pin;
 8001bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUX2_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481e      	ldr	r0, [pc, #120]	@ (8001c88 <MX_GPIO_Init+0x208>)
 8001c10:	f004 fee2 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4818      	ldr	r0, [pc, #96]	@ (8001c8c <MX_GPIO_Init+0x20c>)
 8001c2a:	f004 fed5 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_MCM_GYRO_SPI_Pin|MCM_KILL_Pin|CAN_EN_5V_Pin|nCAN_STBY_Pin;
 8001c2e:	f240 3382 	movw	r3, #898	@ 0x382
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4811      	ldr	r0, [pc, #68]	@ (8001c8c <MX_GPIO_Init+0x20c>)
 8001c48:	f004 fec6 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nWHEEL_MOTOR_SHDN_Pin;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nWHEEL_MOTOR_SHDN_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	480b      	ldr	r0, [pc, #44]	@ (8001c90 <MX_GPIO_Init+0x210>)
 8001c64:	f004 feb8 	bl	80069d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2006      	movs	r0, #6
 8001c6e:	f003 fc08 	bl	8005482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c72:	2006      	movs	r0, #6
 8001c74:	f003 fc1f 	bl	80054b6 <HAL_NVIC_EnableIRQ>

}
 8001c78:	bf00      	nop
 8001c7a:	3730      	adds	r7, #48	@ 0x30
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	48001400 	.word	0x48001400
 8001c88:	48000c00 	.word	0x48000c00
 8001c8c:	48001800 	.word	0x48001800
 8001c90:	48001000 	.word	0x48001000
 8001c94:	48000400 	.word	0x48000400

08001c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	b0eb      	sub	sp, #428	@ 0x1ac
 8001c9c:	af66      	add	r7, sp, #408	@ 0x198
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9e:	f002 f982 	bl	8003fa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca2:	f000 f877 	bl	8001d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca6:	f7ff feeb 	bl	8001a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8001caa:	f7ff fe01 	bl	80018b0 <MX_DMA_Init>
  MX_ADC3_Init();
 8001cae:	f7ff fa35 	bl	800111c <MX_ADC3_Init>
  MX_DAC2_Init();
 8001cb2:	f7ff fd85 	bl	80017c0 <MX_DAC2_Init>
  MX_USART2_UART_Init();
 8001cb6:	f002 f871 	bl	8003d9c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001cba:	f001 fb29 	bl	8003310 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001cbe:	f7ff f9b5 	bl	800102c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001cc2:	f001 fc3b 	bl	800353c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001cc6:	f001 fe0f 	bl	80038e8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001cca:	f001 fcff 	bl	80036cc <MX_TIM2_Init>
  MX_TIM5_Init();
 8001cce:	f001 fd83 	bl	80037d8 <MX_TIM5_Init>
  MX_FDCAN1_Init();
 8001cd2:	f7ff fe17 	bl	8001904 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(nCAN_STBY_GPIO_Port, nCAN_STBY_Pin, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cdc:	4826      	ldr	r0, [pc, #152]	@ (8001d78 <main+0xe0>)
 8001cde:	f005 f815 	bl	8006d0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_EN_5V_GPIO_Port, CAN_EN_5V_Pin, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ce8:	4823      	ldr	r0, [pc, #140]	@ (8001d78 <main+0xe0>)
 8001cea:	f005 f80f 	bl	8006d0c <HAL_GPIO_WritePin>

  RobotSystem_Init(&robot, leftWheel, rightWheel, imu);
 8001cee:	4e23      	ldr	r6, [pc, #140]	@ (8001d7c <main+0xe4>)
 8001cf0:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <main+0xe8>)
 8001cf2:	ac5e      	add	r4, sp, #376	@ 0x178
 8001cf4:	461d      	mov	r5, r3
 8001cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d02:	4a20      	ldr	r2, [pc, #128]	@ (8001d84 <main+0xec>)
 8001d04:	ab2e      	add	r3, sp, #184	@ 0xb8
 8001d06:	4611      	mov	r1, r2
 8001d08:	22c0      	movs	r2, #192	@ 0xc0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00a fc36 	bl	800c57c <memcpy>
 8001d10:	4668      	mov	r0, sp
 8001d12:	f106 0308 	add.w	r3, r6, #8
 8001d16:	22b8      	movs	r2, #184	@ 0xb8
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f00a fc2f 	bl	800c57c <memcpy>
 8001d1e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001d22:	4819      	ldr	r0, [pc, #100]	@ (8001d88 <main+0xf0>)
 8001d24:	f001 f8d3 	bl	8002ece <RobotSystem_Init>
  Comm_Init(&serial, COMM_UART, &huart2);
 8001d28:	4a18      	ldr	r2, [pc, #96]	@ (8001d8c <main+0xf4>)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4818      	ldr	r0, [pc, #96]	@ (8001d90 <main+0xf8>)
 8001d2e:	f7fe fe5f 	bl	80009f0 <Comm_Init>
  //Comm_Init(&canbus, COMM_CAN, &hfdcan1);
  HAL_Delay(250);
 8001d32:	20fa      	movs	r0, #250	@ 0xfa
 8001d34:	f002 f9a8 	bl	8004088 <HAL_Delay>
  DecodedPacket_t readyPacket = {
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	819a      	strh	r2, [r3, #12]
 8001d44:	2301      	movs	r3, #1
 8001d46:	803b      	strh	r3, [r7, #0]
		  .command = COMMAND_READY,
		  .length = 0,
		  .invalid = false
  };
  Comm_Send(&serial, &readyPacket);
 8001d48:	463b      	mov	r3, r7
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4810      	ldr	r0, [pc, #64]	@ (8001d90 <main+0xf8>)
 8001d4e:	f7fe feb5 	bl	8000abc <Comm_Send>



  readyPacket.length = 2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	72bb      	strb	r3, [r7, #10]
  readyPacket.data[0] = 0xAA;
 8001d56:	23aa      	movs	r3, #170	@ 0xaa
 8001d58:	70bb      	strb	r3, [r7, #2]
  readyPacket.data[1] = 0xCC;
 8001d5a:	23cc      	movs	r3, #204	@ 0xcc
 8001d5c:	70fb      	strb	r3, [r7, #3]


  while (1)
  {

	  Comm_Process(&serial);
 8001d5e:	480c      	ldr	r0, [pc, #48]	@ (8001d90 <main+0xf8>)
 8001d60:	f7fe fed8 	bl	8000b14 <Comm_Process>
	  RobotSystem_Calculate(&robot);
 8001d64:	4808      	ldr	r0, [pc, #32]	@ (8001d88 <main+0xf0>)
 8001d66:	f001 f999 	bl	800309c <RobotSystem_Calculate>

	  CommandHandler_ProcessCommand(&serial, &robot);
 8001d6a:	4907      	ldr	r1, [pc, #28]	@ (8001d88 <main+0xf0>)
 8001d6c:	4808      	ldr	r0, [pc, #32]	@ (8001d90 <main+0xf8>)
 8001d6e:	f7ff fbab 	bl	80014c8 <CommandHandler_ProcessCommand>
	  Comm_Process(&serial);
 8001d72:	bf00      	nop
 8001d74:	e7f3      	b.n	8001d5e <main+0xc6>
 8001d76:	bf00      	nop
 8001d78:	48001800 	.word	0x48001800
 8001d7c:	200002f8 	.word	0x200002f8
 8001d80:	20000060 	.word	0x20000060
 8001d84:	20000238 	.word	0x20000238
 8001d88:	20000080 	.word	0x20000080
 8001d8c:	200007d4 	.word	0x200007d4
 8001d90:	20000548 	.word	0x20000548

08001d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b094      	sub	sp, #80	@ 0x50
 8001d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9a:	f107 0318 	add.w	r3, r7, #24
 8001d9e:	2238      	movs	r2, #56	@ 0x38
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00a fbbe 	bl	800c524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f004 ffd8 	bl	8006d6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc6:	2340      	movs	r3, #64	@ 0x40
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001dd6:	2314      	movs	r3, #20
 8001dd8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dde:	2302      	movs	r3, #2
 8001de0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de6:	f107 0318 	add.w	r3, r7, #24
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 f872 	bl	8006ed4 <HAL_RCC_OscConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001df6:	f000 f849 	bl	8001e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2104      	movs	r1, #4
 8001e12:	4618      	mov	r0, r3
 8001e14:	f005 fb70 	bl	80074f8 <HAL_RCC_ClockConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e1e:	f000 f835 	bl	8001e8c <Error_Handler>
  }
}
 8001e22:	bf00      	nop
 8001e24:	3750      	adds	r7, #80	@ 0x50
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	RobotSystem_InterruptHandler(&robot, htim);
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <HAL_TIM_IC_CaptureCallback+0x18>)
 8001e38:	f001 f944 	bl	80030c4 <RobotSystem_InterruptHandler>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000080 	.word	0x20000080

08001e48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
	RobotSystem_ImuInterruptHandler(&robot, GPIO_Pin);
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4803      	ldr	r0, [pc, #12]	@ (8001e64 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001e58:	f001 fa0f 	bl	800327a <RobotSystem_ImuInterruptHandler>

}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000080 	.word	0x20000080

08001e68 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
	Comm_Receive(&serial, 0, size);
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	461a      	mov	r2, r3
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <HAL_UARTEx_RxEventCallback+0x20>)
 8001e7c:	f7fe fe37 	bl	8000aee <Comm_Receive>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000548 	.word	0x20000548

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <Error_Handler+0x8>

08001e98 <Motor_Init>:
 */

#include "motor_control.h"

// Initialize a motor
void Motor_Init(Motor *motor) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    // Example: Initialize GPIOs or timers for the motor
	motor->pid.hallCount = 0;
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	motor->pid.lastHallCount = 0;
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	motor->pid.set_speed = 0;
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	motor->pid.integral = 0;
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	motor->pid.previousFilter = 0;
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	motor->pid.lastUpdateTime = 0;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	motor->pid.lastPwmVal = 0;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	motor->pid.lastHallTime = 0;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->pid.totalHallTime = 0;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	675a      	str	r2, [r3, #116]	@ 0x74
	motor->pid.pwmVal = 0;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	motor->pid.filterGain = DER_FILTER_GAIN;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	motor->pid.maxIntegral = MAX_INTEGRAL_VAL;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	motor->isFault = false;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor->faultRecovery = false;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43


	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall1_Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f006 ffa4 	bl	8008e9c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall2_Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	885b      	ldrh	r3, [r3, #2]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f006 ff9c 	bl	8008e9c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall3_Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f006 ff94 	bl	8008e9c <HAL_TIM_IC_Start_IT>

	Motor_Stop(motor);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f960 	bl	800223a <Motor_Stop>
	ReadHallSensors(motor);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 feb1 	bl	8002ce2 <ReadHallSensors>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <Motor_SetSpeed>:

// Set the speed of a motor
void Motor_SetSpeed(Motor *motor, int64_t target_speed) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	e9c7 2300 	strd	r2, r3, [r7]

	if (target_speed == motor->target_speed) return;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f9e:	4299      	cmp	r1, r3
 8001fa0:	bf08      	it	eq
 8001fa2:	4290      	cmpeq	r0, r2
 8001fa4:	d036      	beq.n	8002014 <Motor_SetSpeed+0x8c>

	if (target_speed > MAX_MOTOR_SPEED) target_speed = MAX_MOTOR_SPEED;
 8001fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001faa:	f641 7141 	movw	r1, #8001	@ 0x1f41
 8001fae:	428a      	cmp	r2, r1
 8001fb0:	f173 0300 	sbcs.w	r3, r3, #0
 8001fb4:	db05      	blt.n	8001fc2 <Motor_SetSpeed+0x3a>
 8001fb6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed < -MAX_MOTOR_SPEED) target_speed = -MAX_MOTOR_SPEED;
 8001fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fc6:	f512 5ffa 	cmn.w	r2, #8000	@ 0x1f40
 8001fca:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001fce:	da04      	bge.n	8001fda <Motor_SetSpeed+0x52>
 8001fd0:	4a12      	ldr	r2, [pc, #72]	@ (800201c <Motor_SetSpeed+0x94>)
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed > -MIN_MOTOR_SPEED && target_speed < MIN_MOTOR_SPEED)
 8001fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fde:	4910      	ldr	r1, [pc, #64]	@ (8002020 <Motor_SetSpeed+0x98>)
 8001fe0:	428a      	cmp	r2, r1
 8001fe2:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001fe6:	db0c      	blt.n	8002002 <Motor_SetSpeed+0x7a>
 8001fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fec:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001ff0:	f173 0300 	sbcs.w	r3, r3, #0
 8001ff4:	da05      	bge.n	8002002 <Motor_SetSpeed+0x7a>
			target_speed = 0;
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9c7 2300 	strd	r2, r3, [r7]

	//motor->pid.integral = 0;
	//motor->pid.previousError = 0;

	motor->target_speed = target_speed;
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002008:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	Motor_Calculate(motor);
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f935 	bl	800227c <Motor_Calculate>
 8002012:	e000      	b.n	8002016 <Motor_SetSpeed+0x8e>
	if (target_speed == motor->target_speed) return;
 8002014:	bf00      	nop
}
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	ffffe0c0 	.word	0xffffe0c0
 8002020:	fffffc19 	.word	0xfffffc19

08002024 <Motor_SetPwm>:


void Motor_SetPwm(Motor *motor, int16_t duty_cycle) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]

	if(duty_cycle > PWM_MAX_VAL) duty_cycle = PWM_MAX_VAL;
 8002030:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002034:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002038:	dd03      	ble.n	8002042 <Motor_SetPwm+0x1e>
 800203a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	e005      	b.n	800204e <Motor_SetPwm+0x2a>
	else if(duty_cycle < 0) duty_cycle = 0;
 8002042:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da01      	bge.n	800204e <Motor_SetPwm+0x2a>
 800204a:	2300      	movs	r3, #0
 800204c:	807b      	strh	r3, [r7, #2]

	motor->pid.pwmVal = duty_cycle;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_A_IDX], motor->pid.pwmVal);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <Motor_SetPwm+0x4a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34
 800206c:	e03b      	b.n	80020e6 <Motor_SetPwm+0xc2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002072:	2b04      	cmp	r3, #4
 8002074:	d108      	bne.n	8002088 <Motor_SetPwm+0x64>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	460b      	mov	r3, r1
 8002084:	6393      	str	r3, [r2, #56]	@ 0x38
 8002086:	e02e      	b.n	80020e6 <Motor_SetPwm+0xc2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800208c:	2b08      	cmp	r3, #8
 800208e:	d108      	bne.n	80020a2 <Motor_SetPwm+0x7e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	460b      	mov	r3, r1
 800209e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80020a0:	e021      	b.n	80020e6 <Motor_SetPwm+0xc2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d108      	bne.n	80020bc <Motor_SetPwm+0x98>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	460b      	mov	r3, r1
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	e014      	b.n	80020e6 <Motor_SetPwm+0xc2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d108      	bne.n	80020d6 <Motor_SetPwm+0xb2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	460b      	mov	r3, r1
 80020d2:	6493      	str	r3, [r2, #72]	@ 0x48
 80020d4:	e007      	b.n	80020e6 <Motor_SetPwm+0xc2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	460b      	mov	r3, r1
 80020e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_B_IDX], motor->pid.pwmVal);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d107      	bne.n	80020fe <Motor_SetPwm+0xda>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80020fc:	e03b      	b.n	8002176 <Motor_SetPwm+0x152>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002102:	2b04      	cmp	r3, #4
 8002104:	d108      	bne.n	8002118 <Motor_SetPwm+0xf4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	460b      	mov	r3, r1
 8002114:	6393      	str	r3, [r2, #56]	@ 0x38
 8002116:	e02e      	b.n	8002176 <Motor_SetPwm+0x152>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800211c:	2b08      	cmp	r3, #8
 800211e:	d108      	bne.n	8002132 <Motor_SetPwm+0x10e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	460b      	mov	r3, r1
 800212e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002130:	e021      	b.n	8002176 <Motor_SetPwm+0x152>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d108      	bne.n	800214c <Motor_SetPwm+0x128>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	460b      	mov	r3, r1
 8002148:	6413      	str	r3, [r2, #64]	@ 0x40
 800214a:	e014      	b.n	8002176 <Motor_SetPwm+0x152>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002150:	2b10      	cmp	r3, #16
 8002152:	d108      	bne.n	8002166 <Motor_SetPwm+0x142>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	460b      	mov	r3, r1
 8002162:	6493      	str	r3, [r2, #72]	@ 0x48
 8002164:	e007      	b.n	8002176 <Motor_SetPwm+0x152>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	460b      	mov	r3, r1
 8002174:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_C_IDX], motor->pid.pwmVal);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <Motor_SetPwm+0x16a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	635a      	str	r2, [r3, #52]	@ 0x34
 800218c:	e03b      	b.n	8002206 <Motor_SetPwm+0x1e2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002192:	2b04      	cmp	r3, #4
 8002194:	d108      	bne.n	80021a8 <Motor_SetPwm+0x184>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	460b      	mov	r3, r1
 80021a4:	6393      	str	r3, [r2, #56]	@ 0x38
 80021a6:	e02e      	b.n	8002206 <Motor_SetPwm+0x1e2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d108      	bne.n	80021c2 <Motor_SetPwm+0x19e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	460b      	mov	r3, r1
 80021be:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80021c0:	e021      	b.n	8002206 <Motor_SetPwm+0x1e2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d108      	bne.n	80021dc <Motor_SetPwm+0x1b8>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	460b      	mov	r3, r1
 80021d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021da:	e014      	b.n	8002206 <Motor_SetPwm+0x1e2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d108      	bne.n	80021f6 <Motor_SetPwm+0x1d2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	460b      	mov	r3, r1
 80021f2:	6493      	str	r3, [r2, #72]	@ 0x48
 80021f4:	e007      	b.n	8002206 <Motor_SetPwm+0x1e2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	460b      	mov	r3, r1
 8002204:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if(motor->pid.lastPwmVal == 0 && motor->pid.lastPwmVal != motor->pid.pwmVal)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10a      	bne.n	8002226 <Motor_SetPwm+0x202>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	@ 0x82
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 800221c:	429a      	cmp	r2, r3
 800221e:	d002      	beq.n	8002226 <Motor_SetPwm+0x202>
		Motor_Update(motor);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fc43 	bl	8002aac <Motor_Update>
	motor->pid.lastPwmVal = motor->pid.pwmVal;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <Motor_Stop>:

// Stop a motor
void Motor_Stop(Motor *motor) {
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
    // Set speed to zero to stop the motor
    Motor_SetSpeed(motor, 0);
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff fe9c 	bl	8001f88 <Motor_SetSpeed>
    SetPhase(motor, PHASE_A_IDX, false, false);
 8002250:	2300      	movs	r3, #0
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fcee 	bl	8002c38 <SetPhase>
    SetPhase(motor, PHASE_B_IDX, false, false);
 800225c:	2300      	movs	r3, #0
 800225e:	2200      	movs	r2, #0
 8002260:	2101      	movs	r1, #1
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fce8 	bl	8002c38 <SetPhase>
    SetPhase(motor, PHASE_C_IDX, false, false);
 8002268:	2300      	movs	r3, #0
 800226a:	2200      	movs	r2, #0
 800226c:	2102      	movs	r1, #2
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fce2 	bl	8002c38 <SetPhase>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <Motor_Calculate>:

void Motor_Calculate(Motor *motor) {
 800227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002280:	b0d7      	sub	sp, #348	@ 0x15c
 8002282:	af00      	add	r7, sp, #0
 8002284:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
	uint32_t currentTime = HAL_GetTick(); // Get the current time in milliseconds
 8002288:	f001 fef2 	bl	8004070 <HAL_GetTick>
 800228c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
	if(Motor_GetFaultStatus(motor)) {
 8002290:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002294:	f000 fde3 	bl	8002e5e <Motor_GetFaultStatus>

	}
	// Update PID every certain time cycle
	if ((currentTime - motor->pid.lastUpdateTime) >= PID_CALC_TIMING) {
 8002298:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800229c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80022a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	2b13      	cmp	r3, #19
 80022a8:	f240 83f5 	bls.w	8002a96 <Motor_Calculate+0x81a>

		if(motor->faultRecovery) {
 80022ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <Motor_Calculate+0x46>
			Motor_CurrFaultHandler(motor);
 80022b8:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80022bc:	f000 fdf4 	bl	8002ea8 <Motor_CurrFaultHandler>
			return;
 80022c0:	e3e9      	b.n	8002a96 <Motor_Calculate+0x81a>
		}
		CalculateDistance(motor);
 80022c2:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80022c6:	f000 fd99 	bl	8002dfc <CalculateDistance>
		if(motor->pid.set_speed > motor->target_speed) {
 80022ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022ce:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80022d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022d6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80022da:	4282      	cmp	r2, r0
 80022dc:	418b      	sbcs	r3, r1
 80022de:	da78      	bge.n	80023d2 <Motor_Calculate+0x156>
			if(motor->pid.set_speed > 0 && motor->pid.set_speed - motor->acceleration < 0 && motor->target_speed < 0) {
 80022e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022e4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80022e8:	2a01      	cmp	r2, #1
 80022ea:	f173 0300 	sbcs.w	r3, r3, #0
 80022ee:	db35      	blt.n	800235c <Motor_Calculate+0xe0>
 80022f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022f4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80022f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022fc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002300:	1a84      	subs	r4, r0, r2
 8002302:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8002306:	eb61 0303 	sbc.w	r3, r1, r3
 800230a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002312:	2b00      	cmp	r3, #0
 8002314:	da22      	bge.n	800235c <Motor_Calculate+0xe0>
 8002316:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800231a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800231e:	2b00      	cmp	r3, #0
 8002320:	da1c      	bge.n	800235c <Motor_Calculate+0xe0>
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 8002322:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002326:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800232a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800232e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002332:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002336:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800233a:	eb10 0802 	adds.w	r8, r0, r2
 800233e:	eb41 0903 	adc.w	r9, r1, r3
 8002342:	45a0      	cmp	r8, r4
 8002344:	eb79 0305 	sbcs.w	r3, r9, r5
 8002348:	db3a      	blt.n	80023c0 <Motor_Calculate+0x144>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 800234a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 800235a:	e031      	b.n	80023c0 <Motor_Calculate+0x144>
				}
			}
			else if(motor->pid.set_speed - motor->acceleration <= motor->target_speed) {
 800235c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002360:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002364:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002368:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800236c:	ebb0 0a02 	subs.w	sl, r0, r2
 8002370:	eb61 0b03 	sbc.w	fp, r1, r3
 8002374:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002378:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800237c:	4552      	cmp	r2, sl
 800237e:	eb73 030b 	sbcs.w	r3, r3, fp
 8002382:	db08      	blt.n	8002396 <Motor_Calculate+0x11a>
				motor->pid.set_speed = motor->target_speed;
 8002384:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002388:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800238c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002390:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8002394:	e014      	b.n	80023c0 <Motor_Calculate+0x144>
			}
			else {
				motor->pid.set_speed -= motor->acceleration;
 8002396:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800239a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800239e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023a2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80023a6:	1a84      	subs	r4, r0, r2
 80023a8:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 80023ac:	eb61 0303 	sbc.w	r3, r1, r3
 80023b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80023b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80023bc:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 80023c0:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 80023d0:	e08d      	b.n	80024ee <Motor_Calculate+0x272>
		} else if(motor->pid.set_speed < motor->target_speed) {
 80023d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023d6:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80023da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023de:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80023e2:	4290      	cmp	r0, r2
 80023e4:	eb71 0303 	sbcs.w	r3, r1, r3
 80023e8:	f280 8081 	bge.w	80024ee <Motor_Calculate+0x272>
			if(motor->pid.set_speed < 0 && motor->pid.set_speed + motor->acceleration > 0 && motor->target_speed > 0) {
 80023ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023f0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da3a      	bge.n	800246e <Motor_Calculate+0x1f2>
 80023f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023fc:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002400:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002404:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002408:	1884      	adds	r4, r0, r2
 800240a:	eb41 0503 	adc.w	r5, r1, r3
 800240e:	2c01      	cmp	r4, #1
 8002410:	f175 0300 	sbcs.w	r3, r5, #0
 8002414:	db2b      	blt.n	800246e <Motor_Calculate+0x1f2>
 8002416:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800241a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800241e:	2a01      	cmp	r2, #1
 8002420:	f173 0300 	sbcs.w	r3, r3, #0
 8002424:	db23      	blt.n	800246e <Motor_Calculate+0x1f2>
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 8002426:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800242a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800242e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002432:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800243a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800243e:	1a86      	subs	r6, r0, r2
 8002440:	f8c7 60e0 	str.w	r6, [r7, #224]	@ 0xe0
 8002444:	eb61 0303 	sbc.w	r3, r1, r3
 8002448:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800244c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002450:	460b      	mov	r3, r1
 8002452:	429c      	cmp	r4, r3
 8002454:	4613      	mov	r3, r2
 8002456:	eb75 0303 	sbcs.w	r3, r5, r3
 800245a:	db40      	blt.n	80024de <Motor_Calculate+0x262>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 800245c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 800246c:	e037      	b.n	80024de <Motor_Calculate+0x262>
				}
			}
			else if(motor->pid.set_speed + motor->acceleration >= motor->target_speed) {
 800246e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002472:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002476:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800247a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800247e:	1884      	adds	r4, r0, r2
 8002480:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8002484:	eb41 0303 	adc.w	r3, r1, r3
 8002488:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800248c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002490:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002494:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002498:	4621      	mov	r1, r4
 800249a:	4291      	cmp	r1, r2
 800249c:	4629      	mov	r1, r5
 800249e:	4199      	sbcs	r1, r3
 80024a0:	db08      	blt.n	80024b4 <Motor_Calculate+0x238>
				motor->pid.set_speed = motor->target_speed;
 80024a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024a6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80024aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024ae:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 80024b2:	e014      	b.n	80024de <Motor_Calculate+0x262>
			}
			else {
				motor->pid.set_speed += motor->acceleration;
 80024b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024b8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80024bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024c0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80024c4:	1884      	adds	r4, r0, r2
 80024c6:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 80024ca:	eb41 0303 	adc.w	r3, r1, r3
 80024ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80024d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80024da:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 80024de:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		}

		//set motor direction based the sign of the set_speed variable
		if(motor->pid.set_speed < 0) {
 80024ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da05      	bge.n	8002506 <Motor_Calculate+0x28a>
			motor->direction = false;
 80024fa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80024fe:	2300      	movs	r3, #0
 8002500:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
 8002504:	e004      	b.n	8002510 <Motor_Calculate+0x294>
		}
		else
		{
			motor->direction = true;
 8002506:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800250a:	2301      	movs	r3, #1
 800250c:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
		}

		// Calculate current speed
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 8002510:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002514:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8002518:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800251c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002520:	1a84      	subs	r4, r0, r2
 8002522:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002526:	eb61 0303 	sbc.w	r3, r1, r3
 800252a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				* ( 1000 * 1000 * 60 / ((int64_t)motor->pid.totalHallTime))/SPEED_CALC_HALL_TO_REV; // speed in counts per minute
 800252e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002534:	2200      	movs	r2, #0
 8002536:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800253a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800253e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002542:	4822      	ldr	r0, [pc, #136]	@ (80025cc <Motor_Calculate+0x350>)
 8002544:	f04f 0100 	mov.w	r1, #0
 8002548:	f7fd fe66 	bl	8000218 <__aeabi_ldivmod>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002554:	4629      	mov	r1, r5
 8002556:	fb02 f001 	mul.w	r0, r2, r1
 800255a:	4621      	mov	r1, r4
 800255c:	fb01 f103 	mul.w	r1, r1, r3
 8002560:	4401      	add	r1, r0
 8002562:	4620      	mov	r0, r4
 8002564:	fba0 2302 	umull	r2, r3, r0, r2
 8002568:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800256c:	4613      	mov	r3, r2
 800256e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002572:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002576:	18cb      	adds	r3, r1, r3
 8002578:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800257c:	f04f 0207 	mov.w	r2, #7
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8002588:	f7fd fe46 	bl	8000218 <__aeabi_ldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 8002594:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002598:	e9c3 0114 	strd	r0, r1, [r3, #80]	@ 0x50

		motor->pid.totalHallTime = 0;
 800259c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80025a0:	2300      	movs	r3, #0
 80025a2:	6753      	str	r3, [r2, #116]	@ 0x74
		motor->pid.lastHallCount = motor->pid.hallCount;
 80025a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025a8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80025ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025b0:	e9c3 011a 	strd	r0, r1, [r3, #104]	@ 0x68

		//do no calculations if speed is set to 0
		if(motor->pid.set_speed == 0) {
 80025b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025b8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80025bc:	4313      	orrs	r3, r2
 80025be:	d107      	bne.n	80025d0 <Motor_Calculate+0x354>
			Motor_SetPwm(motor,0);
 80025c0:	2100      	movs	r1, #0
 80025c2:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80025c6:	f7ff fd2d 	bl	8002024 <Motor_SetPwm>
			return;
 80025ca:	e264      	b.n	8002a96 <Motor_Calculate+0x81a>
 80025cc:	03938700 	.word	0x03938700
		}

		// Calculate error
		int64_t error = (motor->pid.set_speed - motor->current_speed);
 80025d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025d4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80025d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025dc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80025e0:	1a84      	subs	r4, r0, r2
 80025e2:	653c      	str	r4, [r7, #80]	@ 0x50
 80025e4:	eb61 0303 	sbc.w	r3, r1, r3
 80025e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80025ea:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80025ee:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		// PID calculations
		motor->pid.integral += error * PID_CALC_TIMING/1000; // Integral term, scaled for 50ms
 80025f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025f6:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	@ 0x88
 80025fa:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80025fe:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f7fd fe07 	bl	8000218 <__aeabi_ldivmod>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	18a1      	adds	r1, r4, r2
 8002610:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8002614:	eb45 0303 	adc.w	r3, r5, r3
 8002618:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800261c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002620:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002624:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//clamp integral term to avoid integral windup
		if(motor->pid.integral > motor->pid.maxIntegral) motor->pid.integral = motor->pid.maxIntegral;
 8002628:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800262c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002630:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002634:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002638:	4282      	cmp	r2, r0
 800263a:	418b      	sbcs	r3, r1
 800263c:	da07      	bge.n	800264e <Motor_Calculate+0x3d2>
 800263e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002642:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8002646:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800264a:	e9c3 0122 	strd	r0, r1, [r3, #136]	@ 0x88
		if(motor->pid.integral < -1*motor->pid.maxIntegral) motor->pid.integral = -1*motor->pid.maxIntegral;
 800264e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002652:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002656:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800265a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800265e:	2400      	movs	r4, #0
 8002660:	4255      	negs	r5, r2
 8002662:	f8c7 50b0 	str.w	r5, [r7, #176]	@ 0xb0
 8002666:	eb64 0303 	sbc.w	r3, r4, r3
 800266a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800266e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8002672:	4623      	mov	r3, r4
 8002674:	4298      	cmp	r0, r3
 8002676:	462b      	mov	r3, r5
 8002678:	eb71 0303 	sbcs.w	r3, r1, r3
 800267c:	da11      	bge.n	80026a2 <Motor_Calculate+0x426>
 800267e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002682:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002686:	2100      	movs	r1, #0
 8002688:	4250      	negs	r0, r2
 800268a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 800268e:	eb61 0303 	sbc.w	r3, r1, r3
 8002692:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002696:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800269a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800269e:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//use derivitave filter to calculate derivative term
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 80026a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026a6:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 80026aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026ae:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80026b2:	fb02 f501 	mul.w	r5, r2, r1
 80026b6:	fb00 f403 	mul.w	r4, r0, r3
 80026ba:	442c      	add	r4, r5
 80026bc:	fba0 2302 	umull	r2, r3, r0, r2
 80026c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80026c4:	4613      	mov	r3, r2
 80026c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80026ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026ce:	18e3      	adds	r3, r4, r3
 80026d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80026d4:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80026e0:	f7fd fd9a 	bl	8000218 <__aeabi_ldivmod>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4614      	mov	r4, r2
 80026ea:	461d      	mov	r5, r3
								+ (100-motor->pid.filterGain)*(error - motor->pid.previousError)/100;
 80026ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026f0:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80026f4:	2100      	movs	r1, #0
 80026f6:	f1d2 0064 	rsbs	r0, r2, #100	@ 0x64
 80026fa:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 80026fe:	eb61 0303 	sbc.w	r3, r1, r3
 8002702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002706:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800270a:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 800270e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8002712:	1a16      	subs	r6, r2, r0
 8002714:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 8002718:	eb63 0301 	sbc.w	r3, r3, r1
 800271c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002720:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002724:	464b      	mov	r3, r9
 8002726:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800272a:	4652      	mov	r2, sl
 800272c:	fb02 f203 	mul.w	r2, r2, r3
 8002730:	465b      	mov	r3, fp
 8002732:	4641      	mov	r1, r8
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	4642      	mov	r2, r8
 800273c:	4651      	mov	r1, sl
 800273e:	fba2 1201 	umull	r1, r2, r2, r1
 8002742:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8002746:	460a      	mov	r2, r1
 8002748:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 800274c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002750:	4413      	add	r3, r2
 8002752:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002756:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8002762:	f7fd fd59 	bl	8000218 <__aeabi_ldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 800276a:	18a1      	adds	r1, r4, r2
 800276c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800276e:	eb45 0303 	adc.w	r3, r5, r3
 8002772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002774:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002778:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

		int64_t derivative = (currentFilter) * 1000/PID_CALC_TIMING; // Derivative term
 800277c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	1894      	adds	r4, r2, r2
 8002786:	643c      	str	r4, [r7, #64]	@ 0x40
 8002788:	415b      	adcs	r3, r3
 800278a:	647b      	str	r3, [r7, #68]	@ 0x44
 800278c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002790:	1814      	adds	r4, r2, r0
 8002792:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002794:	414b      	adcs	r3, r1
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 80027a4:	4634      	mov	r4, r6
 80027a6:	00e3      	lsls	r3, r4, #3
 80027a8:	462c      	mov	r4, r5
 80027aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ae:	462c      	mov	r4, r5
 80027b0:	00e2      	lsls	r2, r4, #3
 80027b2:	4614      	mov	r4, r2
 80027b4:	461d      	mov	r5, r3
 80027b6:	4623      	mov	r3, r4
 80027b8:	181b      	adds	r3, r3, r0
 80027ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80027bc:	462b      	mov	r3, r5
 80027be:	eb41 0303 	adc.w	r3, r1, r3
 80027c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80027c8:	460b      	mov	r3, r1
 80027ca:	18db      	adds	r3, r3, r3
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ce:	4613      	mov	r3, r2
 80027d0:	eb42 0303 	adc.w	r3, r2, r3
 80027d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80027da:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		motor->pid.previousFilter = currentFilter;
 80027de:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80027e2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80027e6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		motor->pid.previousError = error;
 80027ea:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80027ee:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80027f2:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		// Compute the new PWM value using the PID formula
		int64_t output = motor->pid.Kp * error + motor->pid.Ki * motor->pid.integral + motor->pid.Kd * derivative;
 80027f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027fe:	17da      	asrs	r2, r3, #31
 8002800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002804:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002808:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800280c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002810:	462a      	mov	r2, r5
 8002812:	fb02 f203 	mul.w	r2, r2, r3
 8002816:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800281a:	4621      	mov	r1, r4
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	441a      	add	r2, r3
 8002822:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002826:	4621      	mov	r1, r4
 8002828:	fba3 1301 	umull	r1, r3, r3, r1
 800282c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002830:	460b      	mov	r3, r1
 8002832:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800283a:	18d3      	adds	r3, r2, r3
 800283c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002840:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002848:	17da      	asrs	r2, r3, #31
 800284a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800284e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002856:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800285a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800285e:	4629      	mov	r1, r5
 8002860:	fb02 f001 	mul.w	r0, r2, r1
 8002864:	4621      	mov	r1, r4
 8002866:	fb01 f103 	mul.w	r1, r1, r3
 800286a:	4401      	add	r1, r0
 800286c:	4620      	mov	r0, r4
 800286e:	fba0 2302 	umull	r2, r3, r0, r2
 8002872:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002876:	4613      	mov	r3, r2
 8002878:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800287c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002880:	18cb      	adds	r3, r1, r3
 8002882:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002886:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800288a:	4623      	mov	r3, r4
 800288c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8002890:	4602      	mov	r2, r0
 8002892:	189b      	adds	r3, r3, r2
 8002894:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002898:	460b      	mov	r3, r1
 800289a:	462a      	mov	r2, r5
 800289c:	eb42 0303 	adc.w	r3, r2, r3
 80028a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80028ac:	17da      	asrs	r2, r3, #31
 80028ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028b0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80028ba:	462a      	mov	r2, r5
 80028bc:	fb02 f203 	mul.w	r2, r2, r3
 80028c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80028c4:	4621      	mov	r1, r4
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	441a      	add	r2, r3
 80028cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028d0:	4621      	mov	r1, r4
 80028d2:	fba3 1301 	umull	r1, r3, r3, r1
 80028d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80028da:	460b      	mov	r3, r1
 80028dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80028e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80028ea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80028ee:	4623      	mov	r3, r4
 80028f0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80028f4:	4602      	mov	r2, r0
 80028f6:	189b      	adds	r3, r3, r2
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	460b      	mov	r3, r1
 80028fc:	462a      	mov	r2, r5
 80028fe:	eb42 0303 	adc.w	r3, r2, r3
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
 8002904:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002908:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150

		// Clamp the output to the valid PWM range
		if(motor->pid.set_speed > 0) {
 800290c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002910:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002914:	2a01      	cmp	r2, #1
 8002916:	f173 0300 	sbcs.w	r3, r3, #0
 800291a:	db16      	blt.n	800294a <Motor_Calculate+0x6ce>
			if (output > OUTPUT_MAX_VAL) output = OUTPUT_MAX_VAL;
 800291c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002920:	495f      	ldr	r1, [pc, #380]	@ (8002aa0 <Motor_Calculate+0x824>)
 8002922:	428a      	cmp	r2, r1
 8002924:	f173 0300 	sbcs.w	r3, r3, #0
 8002928:	db04      	blt.n	8002934 <Motor_Calculate+0x6b8>
 800292a:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa4 <Motor_Calculate+0x828>)
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output < 0) output = 0;
 8002934:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002938:	2b00      	cmp	r3, #0
 800293a:	da37      	bge.n	80029ac <Motor_Calculate+0x730>
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 8002948:	e030      	b.n	80029ac <Motor_Calculate+0x730>
		}
		else if(motor->pid.set_speed < 0) {
 800294a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800294e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002952:	2b00      	cmp	r3, #0
 8002954:	da24      	bge.n	80029a0 <Motor_Calculate+0x724>
			if (output < -OUTPUT_MAX_VAL) output = -OUTPUT_MAX_VAL;
 8002956:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800295a:	4953      	ldr	r1, [pc, #332]	@ (8002aa8 <Motor_Calculate+0x82c>)
 800295c:	428a      	cmp	r2, r1
 800295e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002962:	da04      	bge.n	800296e <Motor_Calculate+0x6f2>
 8002964:	4a50      	ldr	r2, [pc, #320]	@ (8002aa8 <Motor_Calculate+0x82c>)
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output > 0) output = 0;
 800296e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002972:	2a01      	cmp	r2, #1
 8002974:	f173 0300 	sbcs.w	r3, r3, #0
 8002978:	db05      	blt.n	8002986 <Motor_Calculate+0x70a>
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			output*=-1;
 8002986:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800298a:	2100      	movs	r1, #0
 800298c:	4250      	negs	r0, r2
 800298e:	61b8      	str	r0, [r7, #24]
 8002990:	eb61 0303 	sbc.w	r3, r1, r3
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800299a:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 800299e:	e005      	b.n	80029ac <Motor_Calculate+0x730>
		}
		else {
			output = 0;
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		}

		//shift the output itself to avoid the deadband range of the motor.
		//output is also divided by a factor to allow for more granular kp, ki, and kd values
		output = output/OUTPUT_TO_PWM_MULT + PWM_MIN_VAL;
 80029ac:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80029b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f7fd fc2e 	bl	8000218 <__aeabi_ldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	f112 01af 	adds.w	r1, r2, #175	@ 0xaf
 80029c4:	6139      	str	r1, [r7, #16]
 80029c6:	f143 0300 	adc.w	r3, r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80029d0:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(output - motor->pid.pwmVal > PWM_MAX_CHANGE) output = motor->pid.pwmVal + PWM_MAX_CHANGE;
 80029d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029d8:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80029dc:	b21b      	sxth	r3, r3
 80029de:	17da      	asrs	r2, r3, #31
 80029e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80029e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80029e4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80029e8:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80029ec:	4621      	mov	r1, r4
 80029ee:	1a51      	subs	r1, r2, r1
 80029f0:	66b9      	str	r1, [r7, #104]	@ 0x68
 80029f2:	4629      	mov	r1, r5
 80029f4:	eb63 0301 	sbc.w	r3, r3, r1
 80029f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029fa:	f240 3321 	movw	r3, #801	@ 0x321
 80029fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a02:	4602      	mov	r2, r0
 8002a04:	429a      	cmp	r2, r3
 8002a06:	460b      	mov	r3, r1
 8002a08:	f173 0300 	sbcs.w	r3, r3, #0
 8002a0c:	db0c      	blt.n	8002a28 <Motor_Calculate+0x7ac>
 8002a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a12:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002a16:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8002a1a:	17da      	asrs	r2, r3, #31
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	60fa      	str	r2, [r7, #12]
 8002a20:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002a24:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(motor->pid.pwmVal - output > PWM_MAX_CHANGE) output = motor->pid.pwmVal - PWM_MAX_CHANGE;
 8002a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a2c:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	17da      	asrs	r2, r3, #31
 8002a34:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a36:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a38:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002a3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a40:	4621      	mov	r1, r4
 8002a42:	1a89      	subs	r1, r1, r2
 8002a44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a46:	4629      	mov	r1, r5
 8002a48:	eb61 0303 	sbc.w	r3, r1, r3
 8002a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a4e:	f240 3321 	movw	r3, #801	@ 0x321
 8002a52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002a56:	4602      	mov	r2, r0
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	f173 0300 	sbcs.w	r3, r3, #0
 8002a60:	db0c      	blt.n	8002a7c <Motor_Calculate+0x800>
 8002a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a66:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002a6a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002a6e:	17da      	asrs	r2, r3, #31
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002a78:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		// Apply the PWM value
		Motor_SetPwm(motor, (int16_t)output);
 8002a7c:	f9b7 3150 	ldrsh.w	r3, [r7, #336]	@ 0x150
 8002a80:	4619      	mov	r1, r3
 8002a82:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002a86:	f7ff facd 	bl	8002024 <Motor_SetPwm>

		// Update the last update time
		motor->pid.lastUpdateTime = currentTime;
 8002a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a8e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
}
 8002a96:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa0:	000c96a9 	.word	0x000c96a9
 8002aa4:	000c96a8 	.word	0x000c96a8
 8002aa8:	fff36958 	.word	0xfff36958

08002aac <Motor_Update>:

// Update the motor state (optional, e.g., for monitoring or control logic)
void Motor_Update(Motor *motor) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

	CalculateHallTiming(motor);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f944 	bl	8002d42 <CalculateHallTiming>

	ReadHallSensors(motor);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f911 	bl	8002ce2 <ReadHallSensors>

	bool direction = motor->isDirInverted ? !motor->direction : motor->direction;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00e      	beq.n	8002ae8 <Motor_Update+0x3c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f083 0301 	eor.w	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e007      	b.n	8002af8 <Motor_Update+0x4c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	73fb      	strb	r3, [r7, #15]

	if(motor->hallState == motor->commutationOrder[0]) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d106      	bne.n	8002b18 <Motor_Update+0x6c>
		SetPhases(motor, PHASE_A_IDX, PHASE_C_IDX, direction);
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	2100      	movs	r1, #0
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f84f 	bl	8002bb4 <SetPhases>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
	}
	else if(motor->hallState == motor->commutationOrder[5]) {
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
	}
}
 8002b16:	e049      	b.n	8002bac <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[1]) {
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d106      	bne.n	8002b36 <Motor_Update+0x8a>
		SetPhases(motor, PHASE_A_IDX, PHASE_B_IDX, direction);
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f840 	bl	8002bb4 <SetPhases>
}
 8002b34:	e03a      	b.n	8002bac <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[2]) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d106      	bne.n	8002b54 <Motor_Update+0xa8>
		SetPhases(motor, PHASE_C_IDX, PHASE_B_IDX, direction);
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f831 	bl	8002bb4 <SetPhases>
}
 8002b52:	e02b      	b.n	8002bac <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[3]) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d106      	bne.n	8002b72 <Motor_Update+0xc6>
		SetPhases(motor, PHASE_C_IDX, PHASE_A_IDX, direction);
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2102      	movs	r1, #2
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f822 	bl	8002bb4 <SetPhases>
}
 8002b70:	e01c      	b.n	8002bac <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[4]) {
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d106      	bne.n	8002b90 <Motor_Update+0xe4>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2101      	movs	r1, #1
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f813 	bl	8002bb4 <SetPhases>
}
 8002b8e:	e00d      	b.n	8002bac <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[5]) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d105      	bne.n	8002bac <Motor_Update+0x100>
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f804 	bl	8002bb4 <SetPhases>
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <SetPhases>:

void SetPhases(Motor *motor, uint8_t highPhase, uint8_t lowPhase, bool direction) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	70fb      	strb	r3, [r7, #3]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70bb      	strb	r3, [r7, #2]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	707b      	strb	r3, [r7, #1]
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d82b      	bhi.n	8002c2c <SetPhases+0x78>
 8002bd4:	78bb      	ldrb	r3, [r7, #2]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d828      	bhi.n	8002c2c <SetPhases+0x78>
	if(highPhase == lowPhase) return;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	78bb      	ldrb	r3, [r7, #2]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d026      	beq.n	8002c30 <SetPhases+0x7c>

	uint8_t extraPhase = PHASE_A_IDX + PHASE_B_IDX + PHASE_C_IDX - highPhase - lowPhase;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	78bb      	ldrb	r3, [r7, #2]
 8002be6:	4413      	add	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f1c3 0303 	rsb	r3, r3, #3
 8002bee:	73fb      	strb	r3, [r7, #15]

	SetPhase(motor, extraPhase, false, false);
 8002bf0:	7bf9      	ldrb	r1, [r7, #15]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f81e 	bl	8002c38 <SetPhase>

	SetPhase(motor, highPhase, true, direction);
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	78f9      	ldrb	r1, [r7, #3]
 8002c00:	2201      	movs	r2, #1
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f818 	bl	8002c38 <SetPhase>
	SetPhase(motor, lowPhase, true, !direction);
 8002c08:	787b      	ldrb	r3, [r7, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	78b9      	ldrb	r1, [r7, #2]
 8002c22:	2201      	movs	r2, #1
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f807 	bl	8002c38 <SetPhase>
 8002c2a:	e002      	b.n	8002c32 <SetPhases+0x7e>
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <SetPhases+0x7e>
	if(highPhase == lowPhase) return;
 8002c30:	bf00      	nop

}
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <SetPhase>:

void SetPhase(Motor *motor, uint8_t phase,  bool OnorOff, bool HighOrLow) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	70fb      	strb	r3, [r7, #3]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	70bb      	strb	r3, [r7, #2]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	707b      	strb	r3, [r7, #1]
	if(OnorOff) {
 8002c52:	78bb      	ldrb	r3, [r7, #2]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02c      	beq.n	8002cb2 <SetPhase+0x7a>
		if(HighOrLow) {
 8002c58:	787b      	ldrb	r3, [r7, #1]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d014      	beq.n	8002c88 <SetPhase+0x50>
			HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3218      	adds	r2, #24
 8002c68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f007 fd73 	bl	800a758 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(motor->Timer, motor->phaseChannel[phase]);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3218      	adds	r2, #24
 8002c7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f005 fefb 	bl	8008a7c <HAL_TIM_PWM_Start>
		}
	} else {
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
	}
}
 8002c86:	e028      	b.n	8002cda <SetPhase+0xa2>
			HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3218      	adds	r2, #24
 8002c92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c96:	4619      	mov	r1, r3
 8002c98:	f006 f802 	bl	8008ca0 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(motor->Timer, motor->phaseChannel[phase]);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3218      	adds	r2, #24
 8002ca6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f007 fc92 	bl	800a5d4 <HAL_TIMEx_PWMN_Start>
}
 8002cb0:	e013      	b.n	8002cda <SetPhase+0xa2>
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3218      	adds	r2, #24
 8002cbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f005 ffed 	bl	8008ca0 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3218      	adds	r2, #24
 8002cd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f007 fd3f 	bl	800a758 <HAL_TIMEx_PWMN_Stop>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ReadHallSensors>:

void ReadHallSensors(Motor *motor) {
 8002ce2:	b590      	push	{r4, r7, lr}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8a9b      	ldrh	r3, [r3, #20]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f003 fff1 	bl	8006cdc <HAL_GPIO_ReadPin>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall2_Port, motor->Hall2_Pin)) << 1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8b9b      	ldrh	r3, [r3, #28]
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f003 ffe7 	bl	8006cdc <HAL_GPIO_ReadPin>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	4323      	orrs	r3, r4
 8002d16:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall3_Port, motor->Hall3_Pin) << 2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f003 ffda 	bl	8006cdc <HAL_GPIO_ReadPin>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	4323      	orrs	r3, r4
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	b2da      	uxtb	r2, r3
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd90      	pop	{r4, r7, pc}

08002d42 <CalculateHallTiming>:


void CalculateHallTiming(Motor *motor) {
 8002d42:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	uint32_t currentMicroTime = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]

	if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	7f1b      	ldrb	r3, [r3, #28]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d109      	bne.n	8002d6e <CalculateHallTiming+0x2c>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall1_Channel);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f006 fdff 	bl	8009968 <HAL_TIM_ReadCapturedValue>
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	e01c      	b.n	8002da8 <CalculateHallTiming+0x66>
	} else if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	7f1b      	ldrb	r3, [r3, #28]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d109      	bne.n	8002d8c <CalculateHallTiming+0x4a>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall2_Channel);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	885b      	ldrh	r3, [r3, #2]
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f006 fdf0 	bl	8009968 <HAL_TIM_ReadCapturedValue>
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	e00d      	b.n	8002da8 <CalculateHallTiming+0x66>
	} else if (motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	7f1b      	ldrb	r3, [r3, #28]
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d108      	bne.n	8002da8 <CalculateHallTiming+0x66>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall3_Channel);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	889b      	ldrh	r3, [r3, #4]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f006 fde1 	bl	8009968 <HAL_TIM_ReadCapturedValue>
 8002da6:	60f8      	str	r0, [r7, #12]
	}

	motor->pid.totalHallTime += currentMicroTime - motor->pid.lastHallTime;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db0:	68f9      	ldr	r1, [r7, #12]
 8002db2:	1acb      	subs	r3, r1, r3
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	675a      	str	r2, [r3, #116]	@ 0x74

	motor->pid.lastHallTime = currentMicroTime;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	671a      	str	r2, [r3, #112]	@ 0x70

	if(motor->direction) motor->pid.hallCount++;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <CalculateHallTiming+0x9e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002dd0:	f112 0801 	adds.w	r8, r2, #1
 8002dd4:	f143 0900 	adc.w	r9, r3, #0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	e9c3 8918 	strd	r8, r9, [r3, #96]	@ 0x60
	else motor->pid.hallCount--;
}
 8002dde:	e008      	b.n	8002df2 <CalculateHallTiming+0xb0>
	else motor->pid.hallCount--;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002de6:	1e54      	subs	r4, r2, #1
 8002de8:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	e9c3 4518 	strd	r4, r5, [r3, #96]	@ 0x60
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002dfc <CalculateDistance>:

void CalculateDistance(Motor *motor) {
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	motor->distance = (int16_t)(motor->pid.hallCount & 0xFFFF); // * RPM_INPUT_DIVISOR / HALL_TICKS_PER_REV);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002e0a:	b212      	sxth	r2, r2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <Motor_GetDistance>:

void Motor_GetDistance(Motor *motor, int16_t *distance) {
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
	*distance = motor->distance;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	801a      	strh	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <Motor_GetSpeed>:

void Motor_GetSpeed(Motor *motor, int16_t *speed) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
	*speed = motor->current_speed;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002e4c:	b212      	sxth	r2, r2
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	801a      	strh	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <Motor_GetFaultStatus>:

bool Motor_GetFaultStatus(Motor *motor) {
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
	motor->isFault = !HAL_GPIO_ReadPin(motor->Fault_Port, motor->Fault_Pin);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	899b      	ldrh	r3, [r3, #12]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f003 ff33 	bl	8006cdc <HAL_GPIO_ReadPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	if(motor->isFault) motor->faultRecovery = true;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <Motor_GetFaultStatus+0x3c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return motor->isFault;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <Motor_CurrFaultHandler>:

void Motor_CurrFaultHandler(Motor *motor) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	if(motor->faultRecovery) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <Motor_CurrFaultHandler+0x1a>
		//do some stuff. right now. going to just reset and continue normally.
		motor->faultRecovery = false;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <RobotSystem_Init>:

#include "robot_system.h"

// Initialize the robot system with configurations for the left and right motors

void RobotSystem_Init(RobotSystem *robotSystem, Motor leftMotorConfig, Motor rightMotorConfig, IMU_HandleTypeDef imuConfig) {
 8002ece:	b082      	sub	sp, #8
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	f107 0118 	add.w	r1, r7, #24
 8002edc:	e881 000c 	stmia.w	r1, {r2, r3}
    // Copy configurations into the robot system
    robotSystem->leftWheel = leftMotorConfig;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	22c0      	movs	r2, #192	@ 0xc0
 8002eea:	4619      	mov	r1, r3
 8002eec:	f009 fb46 	bl	800c57c <memcpy>
    robotSystem->rightWheel = rightMotorConfig;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	33c0      	adds	r3, #192	@ 0xc0
 8002ef4:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8002ef8:	22c0      	movs	r2, #192	@ 0xc0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f009 fb3e 	bl	800c57c <memcpy>
    robotSystem->imu = imuConfig;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f503 74c0 	add.w	r4, r3, #384	@ 0x180
 8002f06:	f507 75cc 	add.w	r5, r7, #408	@ 0x198
 8002f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    HAL_DAC_Start(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f002 fb03 	bl	8005530 <HAL_DAC_Start>

    RobotSystem_SetCurrentLimit(robotSystem, MAX_CURRENT_LIMIT);
 8002f2a:	2105      	movs	r1, #5
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f92d 	bl	800318c <RobotSystem_SetCurrentLimit>

    // Initialize the left and right motors
    IMU_Init(&robotSystem->imu);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd ff6f 	bl	8000e1c <IMU_Init>
    Motor_Init(&robotSystem->leftWheel);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe ffa9 	bl	8001e98 <Motor_Init>
    Motor_Init(&robotSystem->rightWheel);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	33c0      	adds	r3, #192	@ 0xc0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe ffa4 	bl	8001e98 <Motor_Init>

    RobotSystem_Enable(robotSystem);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f8d4 	bl	80030fe <RobotSystem_Enable>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002f60:	b002      	add	sp, #8
 8002f62:	4770      	bx	lr

08002f64 <RobotSystem_SetSpeed>:

// Set the speeds of the left and right motors
void RobotSystem_SetSpeed(RobotSystem *robotSystem, int16_t leftSpeed, int16_t rightSpeed) {
 8002f64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	807b      	strh	r3, [r7, #2]
 8002f72:	4613      	mov	r3, r2
 8002f74:	803b      	strh	r3, [r7, #0]
	if(robotSystem->motorsEnabled) {
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d017      	beq.n	8002fb0 <RobotSystem_SetSpeed+0x4c>
		Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f86:	17da      	asrs	r2, r3, #31
 8002f88:	4698      	mov	r8, r3
 8002f8a:	4691      	mov	r9, r2
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	4608      	mov	r0, r1
 8002f92:	f7fe fff9 	bl	8001f88 <Motor_SetSpeed>
		Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002f9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002fa0:	17da      	asrs	r2, r3, #31
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	4615      	mov	r5, r2
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	4608      	mov	r0, r1
 8002fac:	f7fe ffec 	bl	8001f88 <Motor_SetSpeed>
	}
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002fba <RobotSystem_SetLeftSpeed>:

void RobotSystem_SetLeftSpeed(RobotSystem *robotSystem, int16_t leftSpeed) {
 8002fba:	b5b0      	push	{r4, r5, r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]
	if(robotSystem->motorsEnabled) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <RobotSystem_SetLeftSpeed+0x2c>
		Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fd6:	17da      	asrs	r2, r3, #31
 8002fd8:	461c      	mov	r4, r3
 8002fda:	4615      	mov	r5, r2
 8002fdc:	4622      	mov	r2, r4
 8002fde:	462b      	mov	r3, r5
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	f7fe ffd1 	bl	8001f88 <Motor_SetSpeed>
	}
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bdb0      	pop	{r4, r5, r7, pc}

08002fee <RobotSystem_SetRightSpeed>:

void RobotSystem_SetRightSpeed(RobotSystem *robotSystem, int16_t rightSpeed) {
 8002fee:	b5b0      	push	{r4, r5, r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	807b      	strh	r3, [r7, #2]
	if(robotSystem->motorsEnabled) {
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00c      	beq.n	800301e <RobotSystem_SetRightSpeed+0x30>
		Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 800300a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800300e:	17da      	asrs	r2, r3, #31
 8003010:	461c      	mov	r4, r3
 8003012:	4615      	mov	r5, r2
 8003014:	4622      	mov	r2, r4
 8003016:	462b      	mov	r3, r5
 8003018:	4608      	mov	r0, r1
 800301a:	f7fe ffb5 	bl	8001f88 <Motor_SetSpeed>
	}
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bdb0      	pop	{r4, r5, r7, pc}

08003026 <RobotSystem_Stop>:

// Stop both motors in the robot system
void RobotSystem_Stop(RobotSystem *robotSystem) {
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
    Motor_Stop(&robotSystem->leftWheel);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f902 	bl	800223a <Motor_Stop>
    Motor_Stop(&robotSystem->rightWheel);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	33c0      	adds	r3, #192	@ 0xc0
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f8fd 	bl	800223a <Motor_Stop>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <RobotSystem_GetMotorPosition>:

void RobotSystem_GetMotorPosition(RobotSystem *robotSystem, int16_t *leftPos, int16_t *rightPos) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
	Motor_GetDistance(&robotSystem->leftWheel, leftPos);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fedf 	bl	8002e1c <Motor_GetDistance>
	Motor_GetDistance(&robotSystem->rightWheel, rightPos);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	33c0      	adds	r3, #192	@ 0xc0
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fed9 	bl	8002e1c <Motor_GetDistance>
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <RobotSystem_GetMotorSpeed>:

void RobotSystem_GetMotorSpeed(RobotSystem *robotSystem, int16_t *leftSpeed, int16_t *rightSpeed) {
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
	Motor_GetSpeed(&robotSystem->leftWheel, leftSpeed);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff feda 	bl	8002e3c <Motor_GetSpeed>
	Motor_GetSpeed(&robotSystem->rightWheel, rightSpeed);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	33c0      	adds	r3, #192	@ 0xc0
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fed4 	bl	8002e3c <Motor_GetSpeed>
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <RobotSystem_Calculate>:

void RobotSystem_Calculate(RobotSystem *robotSystem) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	Motor_Calculate(&robotSystem->leftWheel);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f8e8 	bl	800227c <Motor_Calculate>
	Motor_Calculate(&robotSystem->rightWheel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	33c0      	adds	r3, #192	@ 0xc0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f8e3 	bl	800227c <Motor_Calculate>
	RobotSystem_WheelFaultHandler(robotSystem);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f8a4 	bl	8003204 <RobotSystem_WheelFaultHandler>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <RobotSystem_InterruptHandler>:

void RobotSystem_InterruptHandler(RobotSystem *robotSystem, TIM_HandleTypeDef *htim) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
	if (htim == robotSystem->leftWheel.HallTimer) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d103      	bne.n	80030e0 <RobotSystem_InterruptHandler+0x1c>
		Motor_Update(&robotSystem->leftWheel);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fce6 	bl	8002aac <Motor_Update>
	}

	if (htim == robotSystem->rightWheel.HallTimer) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d104      	bne.n	80030f6 <RobotSystem_InterruptHandler+0x32>
		Motor_Update(&robotSystem->rightWheel);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	33c0      	adds	r3, #192	@ 0xc0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fcdb 	bl	8002aac <Motor_Update>
	}
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <RobotSystem_Enable>:

void RobotSystem_Enable (RobotSystem *robotSystem) {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
	robotSystem->motorsEnabled = true;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 21b0 	strb.w	r2, [r3, #432]	@ 0x1b0
	RobotSystem_SetEnablePin(robotSystem, true);
 800310e:	2101      	movs	r1, #1
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f81d 	bl	8003150 <RobotSystem_SetEnablePin>
	HAL_Delay(20);
 8003116:	2014      	movs	r0, #20
 8003118:	f000 ffb6 	bl	8004088 <HAL_Delay>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <RobotSystem_Disable>:

void RobotSystem_Disable (RobotSystem *robotSystem) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	robotSystem->motorsEnabled = false;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 21b0 	strb.w	r2, [r3, #432]	@ 0x1b0
	RobotSystem_Stop(robotSystem);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff76 	bl	8003026 <RobotSystem_Stop>
	RobotSystem_SetEnablePin(robotSystem, false);
 800313a:	2100      	movs	r1, #0
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f807 	bl	8003150 <RobotSystem_SetEnablePin>

	HAL_Delay(20);
 8003142:	2014      	movs	r0, #20
 8003144:	f000 ffa0 	bl	8004088 <HAL_Delay>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <RobotSystem_SetEnablePin>:

void RobotSystem_SetEnablePin(RobotSystem *robotSystem, bool onOrOff) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
	bool setValue = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]
	if(onOrOff) setValue = true;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <RobotSystem_SetEnablePin+0x1c>
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e001      	b.n	8003170 <RobotSystem_SetEnablePin+0x20>
	else setValue = false;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(robotSystem->Enable_Port, robotSystem->Enable_Pin, setValue);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 01a0 	ldr.w	r0, [r3, #416]	@ 0x1a0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	@ 0x1a4
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	4619      	mov	r1, r3
 8003180:	f003 fdc4 	bl	8006d0c <HAL_GPIO_WritePin>
	//__HAL_TIM_SET_COMPARE(robotSystem->FaultTimer, TIM_CHANNEL_1, setValue);
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <RobotSystem_SetCurrentLimit>:

void RobotSystem_SetCurrentLimit(RobotSystem *robotSystem, uint16_t currentLimit) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
	if(currentLimit > MAX_CURRENT_LIMIT) {
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	2b05      	cmp	r3, #5
 800319c:	d901      	bls.n	80031a2 <RobotSystem_SetCurrentLimit+0x16>
		currentLimit = MAX_CURRENT_LIMIT;
 800319e:	2305      	movs	r3, #5
 80031a0:	807b      	strh	r3, [r7, #2]
	}
	robotSystem->currentLimit = currentLimit;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	887a      	ldrh	r2, [r7, #2]
 80031a6:	f8a3 21ae 	strh.w	r2, [r3, #430]	@ 0x1ae

	uint32_t voltage = currentLimit * SHUNT_RESISTOR * RESISTORS / RESISTOR2;
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	f245 32fc 	movw	r2, #21500	@ 0x53fc
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	4a11      	ldr	r2, [pc, #68]	@ (80031fc <RobotSystem_SetCurrentLimit+0x70>)
 80031b6:	fb82 1203 	smull	r1, r2, r2, r3
 80031ba:	10d2      	asrs	r2, r2, #3
 80031bc:	17db      	asrs	r3, r3, #31
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	60fb      	str	r3, [r7, #12]
	uint32_t dac_value = 4095 * voltage / 3300; // Convert voltage to digital value
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	031b      	lsls	r3, r3, #12
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003200 <RobotSystem_SetCurrentLimit+0x74>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel, DAC_ALIGN_12B_R, dac_value);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 01a8 	ldr.w	r0, [r3, #424]	@ 0x1a8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 80031e2:	4619      	mov	r1, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f002 fa0e 	bl	8005608 <HAL_DAC_SetValue>
	HAL_Delay(25);
 80031ec:	2019      	movs	r0, #25
 80031ee:	f000 ff4b 	bl	8004088 <HAL_Delay>
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	1b4e81b5 	.word	0x1b4e81b5
 8003200:	09ee009f 	.word	0x09ee009f

08003204 <RobotSystem_WheelFaultHandler>:

void RobotSystem_WheelFaultHandler(RobotSystem *robotSystem) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	if(Motor_GetFaultStatus(&robotSystem->leftWheel)) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fe25 	bl	8002e5e <Motor_GetFaultStatus>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <RobotSystem_WheelFaultHandler+0x1c>
		RobotSystem_ResetEnablePin(robotSystem);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f80f 	bl	800323e <RobotSystem_ResetEnablePin>
		//RobotSystem_SetLeftSpeed(robotSystem, 0);
	}

	if(Motor_GetFaultStatus(&robotSystem->rightWheel)) {
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	33c0      	adds	r3, #192	@ 0xc0
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fe1a 	bl	8002e5e <Motor_GetFaultStatus>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <RobotSystem_WheelFaultHandler+0x32>
		RobotSystem_ResetEnablePin(robotSystem);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f804 	bl	800323e <RobotSystem_ResetEnablePin>
		//RobotSystem_SetRightSpeed(robotSystem, 0);
	}
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <RobotSystem_ResetEnablePin>:

void RobotSystem_ResetEnablePin(RobotSystem *robotSystem) {
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
	if(robotSystem->motorsEnabled) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 31b0 	ldrb.w	r3, [r3, #432]	@ 0x1b0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <RobotSystem_ResetEnablePin+0x34>
		RobotSystem_SetEnablePin(robotSystem, false);
 8003250:	2100      	movs	r1, #0
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ff7c 	bl	8003150 <RobotSystem_SetEnablePin>

		for(uint16_t i = 0; i < 10; i++) {
 8003258:	2300      	movs	r3, #0
 800325a:	81fb      	strh	r3, [r7, #14]
 800325c:	e002      	b.n	8003264 <RobotSystem_ResetEnablePin+0x26>
 800325e:	89fb      	ldrh	r3, [r7, #14]
 8003260:	3301      	adds	r3, #1
 8003262:	81fb      	strh	r3, [r7, #14]
 8003264:	89fb      	ldrh	r3, [r7, #14]
 8003266:	2b09      	cmp	r3, #9
 8003268:	d9f9      	bls.n	800325e <RobotSystem_ResetEnablePin+0x20>

		}
		// Optional: Stop the timer if you want to halt further operation
		RobotSystem_SetEnablePin(robotSystem, true);
 800326a:	2101      	movs	r1, #1
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff6f 	bl	8003150 <RobotSystem_SetEnablePin>
	}
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <RobotSystem_ImuInterruptHandler>:

void RobotSystem_ImuInterruptHandler(RobotSystem *robotSystem, uint16_t GPIO_Pin) {
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	807b      	strh	r3, [r7, #2]
	IMU_InterruptHandler(&robotSystem->imu, GPIO_Pin);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800328c:	887a      	ldrh	r2, [r7, #2]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd feb7 	bl	8001004 <IMU_InterruptHandler>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <RobotSystem_GetAccelVals>:

void RobotSystem_GetAccelVals(RobotSystem *robotSystem, int16_t *accel) {
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
	//if(sizeof(accel)/sizeof(accel[0]) != 3) return;
	accel[0] = robotSystem->imu.accel[0];
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f9b3 2192 	ldrsh.w	r2, [r3, #402]	@ 0x192
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	801a      	strh	r2, [r3, #0]
	accel[1] = robotSystem->imu.accel[1];
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	3302      	adds	r3, #2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	f9b2 2194 	ldrsh.w	r2, [r2, #404]	@ 0x194
 80032bc:	801a      	strh	r2, [r3, #0]
	accel[2] = robotSystem->imu.accel[2];
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	3304      	adds	r3, #4
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	f9b2 2196 	ldrsh.w	r2, [r2, #406]	@ 0x196
 80032c8:	801a      	strh	r2, [r3, #0]
	//memcpy(accel, robotSystem->imu.accel, sizeof(robotSystem->imu.accel));

}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <RobotSystem_GetGyroVals>:

void RobotSystem_GetGyroVals(RobotSystem *robotSystem, int16_t *gyro) {
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
	//if(sizeof(gyro)/sizeof(gyro[0]) != 3) return;

	gyro[0] = robotSystem->imu.gyro[0];
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f9b3 2198 	ldrsh.w	r2, [r3, #408]	@ 0x198
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	801a      	strh	r2, [r3, #0]
	gyro[1] = robotSystem->imu.gyro[1];
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3302      	adds	r3, #2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	f9b2 219a 	ldrsh.w	r2, [r2, #410]	@ 0x19a
 80032f4:	801a      	strh	r2, [r3, #0]
	gyro[2] = robotSystem->imu.gyro[2];
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	3304      	adds	r3, #4
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	f9b2 219c 	ldrsh.w	r2, [r2, #412]	@ 0x19c
 8003300:	801a      	strh	r2, [r3, #0]

	//memcpy(gyro, robotSystem->imu.gyro, sizeof(robotSystem->imu.gyro));
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003314:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003316:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <MX_SPI1_Init+0x78>)
 8003318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800331a:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <MX_SPI1_Init+0x74>)
 800331c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003322:	4b18      	ldr	r3, [pc, #96]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003328:	4b16      	ldr	r3, [pc, #88]	@ (8003384 <MX_SPI1_Init+0x74>)
 800332a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800332e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003330:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003336:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <MX_SPI1_Init+0x74>)
 800333e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003342:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003344:	4b0f      	ldr	r3, [pc, #60]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003346:	2218      	movs	r2, #24
 8003348:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800334a:	4b0e      	ldr	r3, [pc, #56]	@ (8003384 <MX_SPI1_Init+0x74>)
 800334c:	2200      	movs	r2, #0
 800334e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003350:	4b0c      	ldr	r3, [pc, #48]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003352:	2200      	movs	r2, #0
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003358:	2200      	movs	r2, #0
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <MX_SPI1_Init+0x74>)
 800335e:	2207      	movs	r2, #7
 8003360:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003362:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <MX_SPI1_Init+0x74>)
 800336a:	2208      	movs	r2, #8
 800336c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800336e:	4805      	ldr	r0, [pc, #20]	@ (8003384 <MX_SPI1_Init+0x74>)
 8003370:	f004 fd28 	bl	8007dc4 <HAL_SPI_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800337a:	f7fe fd87 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000640 	.word	0x20000640
 8003388:	40013000 	.word	0x40013000

0800338c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <HAL_SPI_MspInit+0x7c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d127      	bne.n	80033fe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033ae:	4b17      	ldr	r3, [pc, #92]	@ (800340c <HAL_SPI_MspInit+0x80>)
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	4a16      	ldr	r2, [pc, #88]	@ (800340c <HAL_SPI_MspInit+0x80>)
 80033b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ba:	4b14      	ldr	r3, [pc, #80]	@ (800340c <HAL_SPI_MspInit+0x80>)
 80033bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033c6:	4b11      	ldr	r3, [pc, #68]	@ (800340c <HAL_SPI_MspInit+0x80>)
 80033c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ca:	4a10      	ldr	r2, [pc, #64]	@ (800340c <HAL_SPI_MspInit+0x80>)
 80033cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HAL_SPI_MspInit+0x80>)
 80033d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80033de:	231c      	movs	r3, #28
 80033e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	2302      	movs	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033ee:	2305      	movs	r3, #5
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	4619      	mov	r1, r3
 80033f8:	4805      	ldr	r0, [pc, #20]	@ (8003410 <HAL_SPI_MspInit+0x84>)
 80033fa:	f003 faed 	bl	80069d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80033fe:	bf00      	nop
 8003400:	3728      	adds	r7, #40	@ 0x28
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40013000 	.word	0x40013000
 800340c:	40021000 	.word	0x40021000
 8003410:	48001800 	.word	0x48001800

08003414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341a:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <HAL_MspInit+0x44>)
 800341c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341e:	4a0e      	ldr	r2, [pc, #56]	@ (8003458 <HAL_MspInit+0x44>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6613      	str	r3, [r2, #96]	@ 0x60
 8003426:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <HAL_MspInit+0x44>)
 8003428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <HAL_MspInit+0x44>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	4a08      	ldr	r2, [pc, #32]	@ (8003458 <HAL_MspInit+0x44>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343c:	6593      	str	r3, [r2, #88]	@ 0x58
 800343e:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <HAL_MspInit+0x44>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800344a:	f003 fd33 	bl	8006eb4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000

0800345c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003460:	bf00      	nop
 8003462:	e7fd      	b.n	8003460 <NMI_Handler+0x4>

08003464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <HardFault_Handler+0x4>

0800346c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <MemManage_Handler+0x4>

08003474 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003478:	bf00      	nop
 800347a:	e7fd      	b.n	8003478 <BusFault_Handler+0x4>

0800347c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <UsageFault_Handler+0x4>

08003484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b2:	f000 fdcb 	bl	800404c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}

080034ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 80034be:	2001      	movs	r0, #1
 80034c0:	f003 fc3c 	bl	8006d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80034cc:	4802      	ldr	r0, [pc, #8]	@ (80034d8 <DMA1_Channel1_IRQHandler+0x10>)
 80034ce:	f002 fc66 	bl	8005d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000868 	.word	0x20000868

080034dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034e0:	4802      	ldr	r0, [pc, #8]	@ (80034ec <TIM2_IRQHandler+0x10>)
 80034e2:	f005 fe2b 	bl	800913c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200006f0 	.word	0x200006f0

080034f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034f4:	4802      	ldr	r0, [pc, #8]	@ (8003500 <USART2_IRQHandler+0x10>)
 80034f6:	f007 fc01 	bl	800acfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	200007d4 	.word	0x200007d4

08003504 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003508:	4802      	ldr	r0, [pc, #8]	@ (8003514 <TIM5_IRQHandler+0x10>)
 800350a:	f005 fe17 	bl	800913c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000073c 	.word	0x2000073c

08003518 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <SystemInit+0x20>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <SystemInit+0x20>)
 8003524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b09c      	sub	sp, #112	@ 0x70
 8003540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003542:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003550:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800355c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
 800356c:	615a      	str	r2, [r3, #20]
 800356e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	2234      	movs	r2, #52	@ 0x34
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f008 ffd4 	bl	800c524 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800357c:	4b51      	ldr	r3, [pc, #324]	@ (80036c4 <MX_TIM1_Init+0x188>)
 800357e:	4a52      	ldr	r2, [pc, #328]	@ (80036c8 <MX_TIM1_Init+0x18c>)
 8003580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8003582:	4b50      	ldr	r3, [pc, #320]	@ (80036c4 <MX_TIM1_Init+0x188>)
 8003584:	2210      	movs	r2, #16
 8003586:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003588:	4b4e      	ldr	r3, [pc, #312]	@ (80036c4 <MX_TIM1_Init+0x188>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800358e:	4b4d      	ldr	r3, [pc, #308]	@ (80036c4 <MX_TIM1_Init+0x188>)
 8003590:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003594:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003596:	4b4b      	ldr	r3, [pc, #300]	@ (80036c4 <MX_TIM1_Init+0x188>)
 8003598:	2200      	movs	r2, #0
 800359a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800359c:	4b49      	ldr	r3, [pc, #292]	@ (80036c4 <MX_TIM1_Init+0x188>)
 800359e:	2200      	movs	r2, #0
 80035a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a2:	4b48      	ldr	r3, [pc, #288]	@ (80036c4 <MX_TIM1_Init+0x188>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035a8:	4846      	ldr	r0, [pc, #280]	@ (80036c4 <MX_TIM1_Init+0x188>)
 80035aa:	f005 f9af 	bl	800890c <HAL_TIM_Base_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80035b4:	f7fe fc6a 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80035c2:	4619      	mov	r1, r3
 80035c4:	483f      	ldr	r0, [pc, #252]	@ (80036c4 <MX_TIM1_Init+0x188>)
 80035c6:	f006 f8b9 	bl	800973c <HAL_TIM_ConfigClockSource>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80035d0:	f7fe fc5c 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035d4:	483b      	ldr	r0, [pc, #236]	@ (80036c4 <MX_TIM1_Init+0x188>)
 80035d6:	f005 f9f0 	bl	80089ba <HAL_TIM_PWM_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80035e0:	f7fe fc54 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e4:	2300      	movs	r3, #0
 80035e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035f4:	4619      	mov	r1, r3
 80035f6:	4833      	ldr	r0, [pc, #204]	@ (80036c4 <MX_TIM1_Init+0x188>)
 80035f8:	f007 f90c 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003602:	f7fe fc43 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003606:	2360      	movs	r3, #96	@ 0x60
 8003608:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800360e:	2300      	movs	r3, #0
 8003610:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003612:	2300      	movs	r3, #0
 8003614:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003622:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003626:	2200      	movs	r2, #0
 8003628:	4619      	mov	r1, r3
 800362a:	4826      	ldr	r0, [pc, #152]	@ (80036c4 <MX_TIM1_Init+0x188>)
 800362c:	f005 ff72 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003636:	f7fe fc29 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800363a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800363e:	2204      	movs	r2, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4820      	ldr	r0, [pc, #128]	@ (80036c4 <MX_TIM1_Init+0x188>)
 8003644:	f005 ff66 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800364e:	f7fe fc1d 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003652:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003656:	2208      	movs	r2, #8
 8003658:	4619      	mov	r1, r3
 800365a:	481a      	ldr	r0, [pc, #104]	@ (80036c4 <MX_TIM1_Init+0x188>)
 800365c:	f005 ff5a 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003666:	f7fe fc11 	bl	8001e8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800367e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003682:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003690:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800369a:	2300      	movs	r3, #0
 800369c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4807      	ldr	r0, [pc, #28]	@ (80036c4 <MX_TIM1_Init+0x188>)
 80036a8:	f007 f94a 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80036b2:	f7fe fbeb 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036b6:	4803      	ldr	r0, [pc, #12]	@ (80036c4 <MX_TIM1_Init+0x188>)
 80036b8:	f000 fa8a 	bl	8003bd0 <HAL_TIM_MspPostInit>

}
 80036bc:	bf00      	nop
 80036be:	3770      	adds	r7, #112	@ 0x70
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	200006a4 	.word	0x200006a4
 80036c8:	40012c00 	.word	0x40012c00

080036cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	@ 0x30
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036d2:	f107 0320 	add.w	r3, r7, #32
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036f8:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <MX_TIM2_Init+0x108>)
 80036fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8003700:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <MX_TIM2_Init+0x108>)
 8003702:	22a9      	movs	r2, #169	@ 0xa9
 8003704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003706:	4b33      	ldr	r3, [pc, #204]	@ (80037d4 <MX_TIM2_Init+0x108>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800370c:	4b31      	ldr	r3, [pc, #196]	@ (80037d4 <MX_TIM2_Init+0x108>)
 800370e:	f04f 32ff 	mov.w	r2, #4294967295
 8003712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003714:	4b2f      	ldr	r3, [pc, #188]	@ (80037d4 <MX_TIM2_Init+0x108>)
 8003716:	2200      	movs	r2, #0
 8003718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800371a:	4b2e      	ldr	r3, [pc, #184]	@ (80037d4 <MX_TIM2_Init+0x108>)
 800371c:	2200      	movs	r2, #0
 800371e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003720:	482c      	ldr	r0, [pc, #176]	@ (80037d4 <MX_TIM2_Init+0x108>)
 8003722:	f005 f8f3 	bl	800890c <HAL_TIM_Base_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800372c:	f7fe fbae 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003734:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003736:	f107 0320 	add.w	r3, r7, #32
 800373a:	4619      	mov	r1, r3
 800373c:	4825      	ldr	r0, [pc, #148]	@ (80037d4 <MX_TIM2_Init+0x108>)
 800373e:	f005 fffd 	bl	800973c <HAL_TIM_ConfigClockSource>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003748:	f7fe fba0 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800374c:	4821      	ldr	r0, [pc, #132]	@ (80037d4 <MX_TIM2_Init+0x108>)
 800374e:	f005 fb43 	bl	8008dd8 <HAL_TIM_IC_Init>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003758:	f7fe fb98 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	4619      	mov	r1, r3
 800376a:	481a      	ldr	r0, [pc, #104]	@ (80037d4 <MX_TIM2_Init+0x108>)
 800376c:	f007 f852 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003776:	f7fe fb89 	bl	8001e8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800377a:	230a      	movs	r3, #10
 800377c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800377e:	2301      	movs	r3, #1
 8003780:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	2200      	movs	r2, #0
 800378e:	4619      	mov	r1, r3
 8003790:	4810      	ldr	r0, [pc, #64]	@ (80037d4 <MX_TIM2_Init+0x108>)
 8003792:	f005 fe22 	bl	80093da <HAL_TIM_IC_ConfigChannel>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800379c:	f7fe fb76 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2204      	movs	r2, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	480b      	ldr	r0, [pc, #44]	@ (80037d4 <MX_TIM2_Init+0x108>)
 80037a8:	f005 fe17 	bl	80093da <HAL_TIM_IC_ConfigChannel>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80037b2:	f7fe fb6b 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	2208      	movs	r2, #8
 80037ba:	4619      	mov	r1, r3
 80037bc:	4805      	ldr	r0, [pc, #20]	@ (80037d4 <MX_TIM2_Init+0x108>)
 80037be:	f005 fe0c 	bl	80093da <HAL_TIM_IC_ConfigChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80037c8:	f7fe fb60 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037cc:	bf00      	nop
 80037ce:	3730      	adds	r7, #48	@ 0x30
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200006f0 	.word	0x200006f0

080037d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	@ 0x30
 80037dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037de:	f107 0320 	add.w	r3, r7, #32
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80037f8:	1d3b      	adds	r3, r7, #4
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003804:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <MX_TIM5_Init+0x108>)
 8003806:	4a37      	ldr	r2, [pc, #220]	@ (80038e4 <MX_TIM5_Init+0x10c>)
 8003808:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 800380a:	4b35      	ldr	r3, [pc, #212]	@ (80038e0 <MX_TIM5_Init+0x108>)
 800380c:	22a9      	movs	r2, #169	@ 0xa9
 800380e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003810:	4b33      	ldr	r3, [pc, #204]	@ (80038e0 <MX_TIM5_Init+0x108>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003816:	4b32      	ldr	r3, [pc, #200]	@ (80038e0 <MX_TIM5_Init+0x108>)
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800381e:	4b30      	ldr	r3, [pc, #192]	@ (80038e0 <MX_TIM5_Init+0x108>)
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003824:	4b2e      	ldr	r3, [pc, #184]	@ (80038e0 <MX_TIM5_Init+0x108>)
 8003826:	2200      	movs	r2, #0
 8003828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800382a:	482d      	ldr	r0, [pc, #180]	@ (80038e0 <MX_TIM5_Init+0x108>)
 800382c:	f005 f86e 	bl	800890c <HAL_TIM_Base_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8003836:	f7fe fb29 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800383a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800383e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003840:	f107 0320 	add.w	r3, r7, #32
 8003844:	4619      	mov	r1, r3
 8003846:	4826      	ldr	r0, [pc, #152]	@ (80038e0 <MX_TIM5_Init+0x108>)
 8003848:	f005 ff78 	bl	800973c <HAL_TIM_ConfigClockSource>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003852:	f7fe fb1b 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003856:	4822      	ldr	r0, [pc, #136]	@ (80038e0 <MX_TIM5_Init+0x108>)
 8003858:	f005 fabe 	bl	8008dd8 <HAL_TIM_IC_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003862:	f7fe fb13 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800386e:	f107 0314 	add.w	r3, r7, #20
 8003872:	4619      	mov	r1, r3
 8003874:	481a      	ldr	r0, [pc, #104]	@ (80038e0 <MX_TIM5_Init+0x108>)
 8003876:	f006 ffcd 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8003880:	f7fe fb04 	bl	8001e8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003884:	230a      	movs	r3, #10
 8003886:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003888:	2301      	movs	r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	2200      	movs	r2, #0
 8003898:	4619      	mov	r1, r3
 800389a:	4811      	ldr	r0, [pc, #68]	@ (80038e0 <MX_TIM5_Init+0x108>)
 800389c:	f005 fd9d 	bl	80093da <HAL_TIM_IC_ConfigChannel>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80038a6:	f7fe faf1 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	2204      	movs	r2, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	480b      	ldr	r0, [pc, #44]	@ (80038e0 <MX_TIM5_Init+0x108>)
 80038b2:	f005 fd92 	bl	80093da <HAL_TIM_IC_ConfigChannel>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 80038bc:	f7fe fae6 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2208      	movs	r2, #8
 80038c4:	4619      	mov	r1, r3
 80038c6:	4806      	ldr	r0, [pc, #24]	@ (80038e0 <MX_TIM5_Init+0x108>)
 80038c8:	f005 fd87 	bl	80093da <HAL_TIM_IC_ConfigChannel>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 80038d2:	f7fe fadb 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80038d6:	bf00      	nop
 80038d8:	3730      	adds	r7, #48	@ 0x30
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000073c 	.word	0x2000073c
 80038e4:	40000c00 	.word	0x40000c00

080038e8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b09c      	sub	sp, #112	@ 0x70
 80038ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003908:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
 8003918:	615a      	str	r2, [r3, #20]
 800391a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	2234      	movs	r2, #52	@ 0x34
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f008 fdfe 	bl	800c524 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003928:	4b51      	ldr	r3, [pc, #324]	@ (8003a70 <MX_TIM8_Init+0x188>)
 800392a:	4a52      	ldr	r2, [pc, #328]	@ (8003a74 <MX_TIM8_Init+0x18c>)
 800392c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 800392e:	4b50      	ldr	r3, [pc, #320]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003930:	2210      	movs	r2, #16
 8003932:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003934:	4b4e      	ldr	r3, [pc, #312]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 800393a:	4b4d      	ldr	r3, [pc, #308]	@ (8003a70 <MX_TIM8_Init+0x188>)
 800393c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003940:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003942:	4b4b      	ldr	r3, [pc, #300]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003948:	4b49      	ldr	r3, [pc, #292]	@ (8003a70 <MX_TIM8_Init+0x188>)
 800394a:	2200      	movs	r2, #0
 800394c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800394e:	4b48      	ldr	r3, [pc, #288]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003954:	4846      	ldr	r0, [pc, #280]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003956:	f004 ffd9 	bl	800890c <HAL_TIM_Base_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003960:	f7fe fa94 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003968:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800396a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800396e:	4619      	mov	r1, r3
 8003970:	483f      	ldr	r0, [pc, #252]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003972:	f005 fee3 	bl	800973c <HAL_TIM_ConfigClockSource>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800397c:	f7fe fa86 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003980:	483b      	ldr	r0, [pc, #236]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003982:	f005 f81a 	bl	80089ba <HAL_TIM_PWM_Init>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800398c:	f7fe fa7e 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003990:	2300      	movs	r3, #0
 8003992:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003994:	2300      	movs	r3, #0
 8003996:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003998:	2300      	movs	r3, #0
 800399a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800399c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039a0:	4619      	mov	r1, r3
 80039a2:	4833      	ldr	r0, [pc, #204]	@ (8003a70 <MX_TIM8_Init+0x188>)
 80039a4:	f006 ff36 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80039ae:	f7fe fa6d 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039b2:	2360      	movs	r3, #96	@ 0x60
 80039b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ba:	2300      	movs	r3, #0
 80039bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039be:	2300      	movs	r3, #0
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039d2:	2200      	movs	r2, #0
 80039d4:	4619      	mov	r1, r3
 80039d6:	4826      	ldr	r0, [pc, #152]	@ (8003a70 <MX_TIM8_Init+0x188>)
 80039d8:	f005 fd9c 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80039e2:	f7fe fa53 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039ea:	2204      	movs	r2, #4
 80039ec:	4619      	mov	r1, r3
 80039ee:	4820      	ldr	r0, [pc, #128]	@ (8003a70 <MX_TIM8_Init+0x188>)
 80039f0:	f005 fd90 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80039fa:	f7fe fa47 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a02:	2208      	movs	r2, #8
 8003a04:	4619      	mov	r1, r3
 8003a06:	481a      	ldr	r0, [pc, #104]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003a08:	f005 fd84 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003a12:	f7fe fa3b 	bl	8001e8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003a34:	2300      	movs	r3, #0
 8003a36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003a46:	2300      	movs	r3, #0
 8003a48:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4807      	ldr	r0, [pc, #28]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003a54:	f006 ff74 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003a5e:	f7fe fa15 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003a62:	4803      	ldr	r0, [pc, #12]	@ (8003a70 <MX_TIM8_Init+0x188>)
 8003a64:	f000 f8b4 	bl	8003bd0 <HAL_TIM_MspPostInit>

}
 8003a68:	bf00      	nop
 8003a6a:	3770      	adds	r7, #112	@ 0x70
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000788 	.word	0x20000788
 8003a74:	40013400 	.word	0x40013400

08003a78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08e      	sub	sp, #56	@ 0x38
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a48      	ldr	r2, [pc, #288]	@ (8003bb8 <HAL_TIM_Base_MspInit+0x140>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10c      	bne.n	8003ab4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a9a:	4b48      	ldr	r3, [pc, #288]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	4a47      	ldr	r2, [pc, #284]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003aa0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aa6:	4b45      	ldr	r3, [pc, #276]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aae:	623b      	str	r3, [r7, #32]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003ab2:	e07d      	b.n	8003bb0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abc:	d130      	bne.n	8003b20 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003abe:	4b3f      	ldr	r3, [pc, #252]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aca:	4b3c      	ldr	r3, [pc, #240]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ad6:	4b39      	ldr	r3, [pc, #228]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	4a38      	ldr	r2, [pc, #224]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae2:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LMC_HALL1_Pin|LMC_HALL2_Pin|LMC_HALL3_Pin;
 8003aee:	2398      	movs	r3, #152	@ 0x98
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	2300      	movs	r3, #0
 8003afc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003afe:	2302      	movs	r3, #2
 8003b00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b06:	4619      	mov	r1, r3
 8003b08:	482d      	ldr	r0, [pc, #180]	@ (8003bc0 <HAL_TIM_Base_MspInit+0x148>)
 8003b0a:	f002 ff65 	bl	80069d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2102      	movs	r1, #2
 8003b12:	201c      	movs	r0, #28
 8003b14:	f001 fcb5 	bl	8005482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b18:	201c      	movs	r0, #28
 8003b1a:	f001 fccc 	bl	80054b6 <HAL_NVIC_EnableIRQ>
}
 8003b1e:	e047      	b.n	8003bb0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM5)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a27      	ldr	r2, [pc, #156]	@ (8003bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d131      	bne.n	8003b8e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b2a:	4b24      	ldr	r3, [pc, #144]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	4a23      	ldr	r2, [pc, #140]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b36:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	4a1d      	ldr	r2, [pc, #116]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RMC_HALL2_Pin|RMC_HALL3_Pin|RMC_HALL1_Pin;
 8003b5a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8003b6c:	2306      	movs	r3, #6
 8003b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b74:	4619      	mov	r1, r3
 8003b76:	4814      	ldr	r0, [pc, #80]	@ (8003bc8 <HAL_TIM_Base_MspInit+0x150>)
 8003b78:	f002 ff2e 	bl	80069d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2102      	movs	r1, #2
 8003b80:	2032      	movs	r0, #50	@ 0x32
 8003b82:	f001 fc7e 	bl	8005482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b86:	2032      	movs	r0, #50	@ 0x32
 8003b88:	f001 fc95 	bl	80054b6 <HAL_NVIC_EnableIRQ>
}
 8003b8c:	e010      	b.n	8003bb0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM8)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a0e      	ldr	r2, [pc, #56]	@ (8003bcc <HAL_TIM_Base_MspInit+0x154>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d10b      	bne.n	8003bb0 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b98:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	4a07      	ldr	r2, [pc, #28]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003b9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ba2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_TIM_Base_MspInit+0x144>)
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	3738      	adds	r7, #56	@ 0x38
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	48000c00 	.word	0x48000c00
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	48001400 	.word	0x48001400
 8003bcc:	40013400 	.word	0x40013400

08003bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	@ 0x30
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a64      	ldr	r2, [pc, #400]	@ (8003d80 <HAL_TIM_MspPostInit+0x1b0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d166      	bne.n	8003cc0 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf2:	4b64      	ldr	r3, [pc, #400]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf6:	4a63      	ldr	r2, [pc, #396]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bfe:	4b61      	ldr	r3, [pc, #388]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c16:	4b5b      	ldr	r3, [pc, #364]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c22:	4b58      	ldr	r3, [pc, #352]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c26:	4a57      	ldr	r2, [pc, #348]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003c28:	f043 0310 	orr.w	r3, r3, #16
 8003c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c2e:	4b55      	ldr	r3, [pc, #340]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	693b      	ldr	r3, [r7, #16]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_AL_RMC_Pin;
 8003c3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c40:	2302      	movs	r3, #2
 8003c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003c50:	f107 031c 	add.w	r3, r7, #28
 8003c54:	4619      	mov	r1, r3
 8003c56:	484c      	ldr	r0, [pc, #304]	@ (8003d88 <HAL_TIM_MspPostInit+0x1b8>)
 8003c58:	f002 febe 	bl	80069d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_AH_RMC_Pin|PWM_BH_RMC_Pin|PWM_CH_RMC_Pin;
 8003c5c:	2307      	movs	r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	4619      	mov	r1, r3
 8003c76:	4844      	ldr	r0, [pc, #272]	@ (8003d88 <HAL_TIM_MspPostInit+0x1b8>)
 8003c78:	f002 feae 	bl	80069d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_BL_RMC_Pin;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c80:	2302      	movs	r3, #2
 8003c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003c8c:	2306      	movs	r3, #6
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_BL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003c90:	f107 031c 	add.w	r3, r7, #28
 8003c94:	4619      	mov	r1, r3
 8003c96:	483d      	ldr	r0, [pc, #244]	@ (8003d8c <HAL_TIM_MspPostInit+0x1bc>)
 8003c98:	f002 fe9e 	bl	80069d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_CL_RMC_Pin;
 8003c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003cb2:	f107 031c 	add.w	r3, r7, #28
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4835      	ldr	r0, [pc, #212]	@ (8003d90 <HAL_TIM_MspPostInit+0x1c0>)
 8003cba:	f002 fe8d 	bl	80069d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003cbe:	e05a      	b.n	8003d76 <HAL_TIM_MspPostInit+0x1a6>
  else if(timHandle->Instance==TIM8)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a33      	ldr	r2, [pc, #204]	@ (8003d94 <HAL_TIM_MspPostInit+0x1c4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d155      	bne.n	8003d76 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cca:	4b2e      	ldr	r3, [pc, #184]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cce:	4a2d      	ldr	r2, [pc, #180]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce2:	4b28      	ldr	r3, [pc, #160]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	4a27      	ldr	r2, [pc, #156]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cee:	4b25      	ldr	r3, [pc, #148]	@ (8003d84 <HAL_TIM_MspPostInit+0x1b4>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_LMC_Pin|PWM_AL_LMC_Pin|PWM_BL_LMC_Pin|PWM_CL_LMC_Pin;
 8003cfa:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 8003cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d10:	f107 031c 	add.w	r3, r7, #28
 8003d14:	4619      	mov	r1, r3
 8003d16:	481c      	ldr	r0, [pc, #112]	@ (8003d88 <HAL_TIM_MspPostInit+0x1b8>)
 8003d18:	f002 fe5e 	bl	80069d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AH_LMC_Pin;
 8003d1c:	2340      	movs	r3, #64	@ 0x40
 8003d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d20:	2302      	movs	r3, #2
 8003d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	4619      	mov	r1, r3
 8003d36:	4815      	ldr	r0, [pc, #84]	@ (8003d8c <HAL_TIM_MspPostInit+0x1bc>)
 8003d38:	f002 fe4e 	bl	80069d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_CH_LMC_Pin;
 8003d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003d4e:	230a      	movs	r3, #10
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003d52:	f107 031c 	add.w	r3, r7, #28
 8003d56:	4619      	mov	r1, r3
 8003d58:	480c      	ldr	r0, [pc, #48]	@ (8003d8c <HAL_TIM_MspPostInit+0x1bc>)
 8003d5a:	f002 fe3d 	bl	80069d8 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <HAL_TIM_MspPostInit+0x1c8>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4a0d      	ldr	r2, [pc, #52]	@ (8003d98 <HAL_TIM_MspPostInit+0x1c8>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d68:	6053      	str	r3, [r2, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <HAL_TIM_MspPostInit+0x1c8>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <HAL_TIM_MspPostInit+0x1c8>)
 8003d70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d74:	6053      	str	r3, [r2, #4]
}
 8003d76:	bf00      	nop
 8003d78:	3730      	adds	r7, #48	@ 0x30
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40021000 	.word	0x40021000
 8003d88:	48000800 	.word	0x48000800
 8003d8c:	48000400 	.word	0x48000400
 8003d90:	48001000 	.word	0x48001000
 8003d94:	40013400 	.word	0x40013400
 8003d98:	40010000 	.word	0x40010000

08003d9c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003da0:	4b22      	ldr	r3, [pc, #136]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003da2:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <MX_USART2_UART_Init+0x94>)
 8003da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8003da6:	4b21      	ldr	r3, [pc, #132]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003da8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8003dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dae:	4b1f      	ldr	r3, [pc, #124]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003db4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dba:	4b1c      	ldr	r3, [pc, #112]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003dc2:	220c      	movs	r2, #12
 8003dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dc6:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dcc:	4b17      	ldr	r3, [pc, #92]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dd2:	4b16      	ldr	r3, [pc, #88]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dd8:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dde:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003de4:	4811      	ldr	r0, [pc, #68]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003de6:	f006 feaa 	bl	800ab3e <HAL_UART_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003df0:	f7fe f84c 	bl	8001e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003df4:	2100      	movs	r1, #0
 8003df6:	480d      	ldr	r0, [pc, #52]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003df8:	f008 fa76 	bl	800c2e8 <HAL_UARTEx_SetTxFifoThreshold>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003e02:	f7fe f843 	bl	8001e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e06:	2100      	movs	r1, #0
 8003e08:	4808      	ldr	r0, [pc, #32]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003e0a:	f008 faab 	bl	800c364 <HAL_UARTEx_SetRxFifoThreshold>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003e14:	f7fe f83a 	bl	8001e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003e18:	4804      	ldr	r0, [pc, #16]	@ (8003e2c <MX_USART2_UART_Init+0x90>)
 8003e1a:	f008 fa2c 	bl	800c276 <HAL_UARTEx_DisableFifoMode>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003e24:	f7fe f832 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e28:	bf00      	nop
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	200007d4 	.word	0x200007d4
 8003e30:	40004400 	.word	0x40004400

08003e34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b09e      	sub	sp, #120	@ 0x78
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e4c:	f107 0310 	add.w	r3, r7, #16
 8003e50:	2254      	movs	r2, #84	@ 0x54
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f008 fb65 	bl	800c524 <memset>
  if(uartHandle->Instance==USART2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a38      	ldr	r2, [pc, #224]	@ (8003f40 <HAL_UART_MspInit+0x10c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d168      	bne.n	8003f36 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e64:	2302      	movs	r3, #2
 8003e66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 fd59 	bl	8007928 <HAL_RCCEx_PeriphCLKConfig>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e7c:	f7fe f806 	bl	8001e8c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e80:	4b30      	ldr	r3, [pc, #192]	@ (8003f44 <HAL_UART_MspInit+0x110>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	4a2f      	ldr	r2, [pc, #188]	@ (8003f44 <HAL_UART_MspInit+0x110>)
 8003e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <HAL_UART_MspInit+0x110>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e98:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <HAL_UART_MspInit+0x110>)
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9c:	4a29      	ldr	r2, [pc, #164]	@ (8003f44 <HAL_UART_MspInit+0x110>)
 8003e9e:	f043 0308 	orr.w	r3, r3, #8
 8003ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ea4:	4b27      	ldr	r3, [pc, #156]	@ (8003f44 <HAL_UART_MspInit+0x110>)
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = AUX2_TX_Pin|AUX2_RX_Pin;
 8003eb0:	2360      	movs	r3, #96	@ 0x60
 8003eb2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ec0:	2307      	movs	r3, #7
 8003ec2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ec4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ec8:	4619      	mov	r1, r3
 8003eca:	481f      	ldr	r0, [pc, #124]	@ (8003f48 <HAL_UART_MspInit+0x114>)
 8003ecc:	f002 fd84 	bl	80069d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f50 <HAL_UART_MspInit+0x11c>)
 8003ed4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003ed8:	221a      	movs	r2, #26
 8003eda:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee8:	4b18      	ldr	r3, [pc, #96]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003eea:	2280      	movs	r2, #128	@ 0x80
 8003eec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eee:	4b17      	ldr	r3, [pc, #92]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef4:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003efa:	4b14      	ldr	r3, [pc, #80]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f00:	4b12      	ldr	r3, [pc, #72]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003f02:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003f06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f08:	4810      	ldr	r0, [pc, #64]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003f0a:	f001 fd65 	bl	80059d8 <HAL_DMA_Init>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003f14:	f7fd ffba 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003f20:	4a0a      	ldr	r2, [pc, #40]	@ (8003f4c <HAL_UART_MspInit+0x118>)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	2100      	movs	r1, #0
 8003f2a:	2026      	movs	r0, #38	@ 0x26
 8003f2c:	f001 faa9 	bl	8005482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f30:	2026      	movs	r0, #38	@ 0x26
 8003f32:	f001 fac0 	bl	80054b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f36:	bf00      	nop
 8003f38:	3778      	adds	r7, #120	@ 0x78
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40004400 	.word	0x40004400
 8003f44:	40021000 	.word	0x40021000
 8003f48:	48000c00 	.word	0x48000c00
 8003f4c:	20000868 	.word	0x20000868
 8003f50:	40020008 	.word	0x40020008

08003f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f54:	480d      	ldr	r0, [pc, #52]	@ (8003f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f58:	f7ff fade 	bl	8003518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f5c:	480c      	ldr	r0, [pc, #48]	@ (8003f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f5e:	490d      	ldr	r1, [pc, #52]	@ (8003f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f60:	4a0d      	ldr	r2, [pc, #52]	@ (8003f98 <LoopForever+0xe>)
  movs r3, #0
 8003f62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003f64:	e002      	b.n	8003f6c <LoopCopyDataInit>

08003f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f6a:	3304      	adds	r3, #4

08003f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f70:	d3f9      	bcc.n	8003f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f72:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f74:	4c0a      	ldr	r4, [pc, #40]	@ (8003fa0 <LoopForever+0x16>)
  movs r3, #0
 8003f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f78:	e001      	b.n	8003f7e <LoopFillZerobss>

08003f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f7c:	3204      	adds	r2, #4

08003f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f80:	d3fb      	bcc.n	8003f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f82:	f008 fad7 	bl	800c534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f86:	f7fd fe87 	bl	8001c98 <main>

08003f8a <LoopForever>:

LoopForever:
    b LoopForever
 8003f8a:	e7fe      	b.n	8003f8a <LoopForever>
  ldr   r0, =_estack
 8003f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f94:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8003f98:	0800c610 	.word	0x0800c610
  ldr r2, =_sbss
 8003f9c:	200003c4 	.word	0x200003c4
  ldr r4, =_ebss
 8003fa0:	200008cc 	.word	0x200008cc

08003fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fa4:	e7fe      	b.n	8003fa4 <ADC1_2_IRQHandler>

08003fa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	f001 fa5b 	bl	800546c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fb6:	200f      	movs	r0, #15
 8003fb8:	f000 f80e 	bl	8003fd8 <HAL_InitTick>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	71fb      	strb	r3, [r7, #7]
 8003fc6:	e001      	b.n	8003fcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fc8:	f7ff fa24 	bl	8003414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fcc:	79fb      	ldrb	r3, [r7, #7]

}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003fe4:	4b16      	ldr	r3, [pc, #88]	@ (8004040 <HAL_InitTick+0x68>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d022      	beq.n	8004032 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003fec:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <HAL_InitTick+0x6c>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b13      	ldr	r3, [pc, #76]	@ (8004040 <HAL_InitTick+0x68>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	4618      	mov	r0, r3
 8004002:	f001 fa66 	bl	80054d2 <HAL_SYSTICK_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10f      	bne.n	800402c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	d809      	bhi.n	8004026 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004012:	2200      	movs	r2, #0
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	f001 fa32 	bl	8005482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800401e:	4a0a      	ldr	r2, [pc, #40]	@ (8004048 <HAL_InitTick+0x70>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e007      	b.n	8004036 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e004      	b.n	8004036 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	e001      	b.n	8004036 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200003c0 	.word	0x200003c0
 8004044:	200003b8 	.word	0x200003b8
 8004048:	200003bc 	.word	0x200003bc

0800404c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <HAL_IncTick+0x1c>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b05      	ldr	r3, [pc, #20]	@ (800406c <HAL_IncTick+0x20>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4413      	add	r3, r2
 800405a:	4a03      	ldr	r2, [pc, #12]	@ (8004068 <HAL_IncTick+0x1c>)
 800405c:	6013      	str	r3, [r2, #0]
}
 800405e:	bf00      	nop
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	200008c8 	.word	0x200008c8
 800406c:	200003c0 	.word	0x200003c0

08004070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return uwTick;
 8004074:	4b03      	ldr	r3, [pc, #12]	@ (8004084 <HAL_GetTick+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200008c8 	.word	0x200008c8

08004088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004090:	f7ff ffee 	bl	8004070 <HAL_GetTick>
 8004094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d004      	beq.n	80040ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80040a2:	4b09      	ldr	r3, [pc, #36]	@ (80040c8 <HAL_Delay+0x40>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040ac:	bf00      	nop
 80040ae:	f7ff ffdf 	bl	8004070 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d8f7      	bhi.n	80040ae <HAL_Delay+0x26>
  {
  }
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	200003c0 	.word	0x200003c0

080040cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	609a      	str	r2, [r3, #8]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3360      	adds	r3, #96	@ 0x60
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b08      	ldr	r3, [pc, #32]	@ (8004178 <LL_ADC_SetOffset+0x44>)
 8004156:	4013      	ands	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	4313      	orrs	r3, r2
 8004164:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	03fff000 	.word	0x03fff000

0800417c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3360      	adds	r3, #96	@ 0x60
 800418a:	461a      	mov	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3360      	adds	r3, #96	@ 0x60
 80041b8:	461a      	mov	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80041de:	b480      	push	{r7}
 80041e0:	b087      	sub	sp, #28
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3360      	adds	r3, #96	@ 0x60
 80041ee:	461a      	mov	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	431a      	orrs	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3360      	adds	r3, #96	@ 0x60
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	431a      	orrs	r2, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	615a      	str	r2, [r3, #20]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3330      	adds	r3, #48	@ 0x30
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	4413      	add	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	211f      	movs	r1, #31
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	401a      	ands	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	0e9b      	lsrs	r3, r3, #26
 80042a8:	f003 011f 	and.w	r1, r3, #31
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	431a      	orrs	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3314      	adds	r3, #20
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	0e5b      	lsrs	r3, r3, #25
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	4413      	add	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	0d1b      	lsrs	r3, r3, #20
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2107      	movs	r1, #7
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	401a      	ands	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	0d1b      	lsrs	r3, r3, #20
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004338:	43db      	mvns	r3, r3
 800433a:	401a      	ands	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0318 	and.w	r3, r3, #24
 8004342:	4908      	ldr	r1, [pc, #32]	@ (8004364 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004344:	40d9      	lsrs	r1, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	400b      	ands	r3, r1
 800434a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434e:	431a      	orrs	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	0007ffff 	.word	0x0007ffff

08004368 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004378:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6093      	str	r3, [r2, #8]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800439c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043a0:	d101      	bne.n	80043a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80043c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043f0:	d101      	bne.n	80043f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <LL_ADC_IsEnabled+0x18>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <LL_ADC_IsEnabled+0x1a>
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d101      	bne.n	8004442 <LL_ADC_REG_IsConversionOngoing+0x18>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b08      	cmp	r3, #8
 8004462:	d101      	bne.n	8004468 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b089      	sub	sp, #36	@ 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1a9      	b.n	80047e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc feb3 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ff67 	bl	800438c <LL_ADC_IsDeepPowerDownEnabled>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff4d 	bl	8004368 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ff82 	bl	80043dc <LL_ADC_IsInternalRegulatorEnabled>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d115      	bne.n	800450a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff66 	bl	80043b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e8:	4b9c      	ldr	r3, [pc, #624]	@ (800475c <HAL_ADC_Init+0x2e4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	4a9c      	ldr	r2, [pc, #624]	@ (8004760 <HAL_ADC_Init+0x2e8>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044fc:	e002      	b.n	8004504 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b01      	subs	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f9      	bne.n	80044fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ff64 	bl	80043dc <LL_ADC_IsInternalRegulatorEnabled>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451e:	f043 0210 	orr.w	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff ff75 	bl	800442a <LL_ADC_REG_IsConversionOngoing>
 8004540:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 8142 	bne.w	80047d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f040 813e 	bne.w	80047d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004560:	f043 0202 	orr.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff49 	bl	8004404 <LL_ADC_IsEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d141      	bne.n	80045fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004580:	d004      	beq.n	800458c <HAL_ADC_Init+0x114>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a77      	ldr	r2, [pc, #476]	@ (8004764 <HAL_ADC_Init+0x2ec>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d10f      	bne.n	80045ac <HAL_ADC_Init+0x134>
 800458c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004590:	f7ff ff38 	bl	8004404 <LL_ADC_IsEnabled>
 8004594:	4604      	mov	r4, r0
 8004596:	4873      	ldr	r0, [pc, #460]	@ (8004764 <HAL_ADC_Init+0x2ec>)
 8004598:	f7ff ff34 	bl	8004404 <LL_ADC_IsEnabled>
 800459c:	4603      	mov	r3, r0
 800459e:	4323      	orrs	r3, r4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e012      	b.n	80045d2 <HAL_ADC_Init+0x15a>
 80045ac:	486e      	ldr	r0, [pc, #440]	@ (8004768 <HAL_ADC_Init+0x2f0>)
 80045ae:	f7ff ff29 	bl	8004404 <LL_ADC_IsEnabled>
 80045b2:	4604      	mov	r4, r0
 80045b4:	486d      	ldr	r0, [pc, #436]	@ (800476c <HAL_ADC_Init+0x2f4>)
 80045b6:	f7ff ff25 	bl	8004404 <LL_ADC_IsEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	431c      	orrs	r4, r3
 80045be:	486c      	ldr	r0, [pc, #432]	@ (8004770 <HAL_ADC_Init+0x2f8>)
 80045c0:	f7ff ff20 	bl	8004404 <LL_ADC_IsEnabled>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4323      	orrs	r3, r4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045de:	d004      	beq.n	80045ea <HAL_ADC_Init+0x172>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004764 <HAL_ADC_Init+0x2ec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_ADC_Init+0x176>
 80045ea:	4a62      	ldr	r2, [pc, #392]	@ (8004774 <HAL_ADC_Init+0x2fc>)
 80045ec:	e000      	b.n	80045f0 <HAL_ADC_Init+0x178>
 80045ee:	4a62      	ldr	r2, [pc, #392]	@ (8004778 <HAL_ADC_Init+0x300>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7ff fd68 	bl	80040cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	7f5b      	ldrb	r3, [r3, #29]
 8004600:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004606:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800460c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004612:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800461a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004626:	2b01      	cmp	r3, #1
 8004628:	d106      	bne.n	8004638 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	045b      	lsls	r3, r3, #17
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	4b48      	ldr	r3, [pc, #288]	@ (800477c <HAL_ADC_Init+0x304>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	69b9      	ldr	r1, [r7, #24]
 8004664:	430b      	orrs	r3, r1
 8004666:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fee4 	bl	8004450 <LL_ADC_INJ_IsConversionOngoing>
 8004688:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d17f      	bne.n	8004790 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d17c      	bne.n	8004790 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800469a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046b2:	f023 0302 	bic.w	r3, r3, #2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	69b9      	ldr	r1, [r7, #24]
 80046bc:	430b      	orrs	r3, r1
 80046be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d017      	beq.n	80046f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80046e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6911      	ldr	r1, [r2, #16]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	430b      	orrs	r3, r1
 80046f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80046f6:	e013      	b.n	8004720 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004706:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004718:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800471c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004726:	2b01      	cmp	r3, #1
 8004728:	d12a      	bne.n	8004780 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800474c:	430a      	orrs	r2, r1
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	611a      	str	r2, [r3, #16]
 800475a:	e019      	b.n	8004790 <HAL_ADC_Init+0x318>
 800475c:	200003b8 	.word	0x200003b8
 8004760:	053e2d63 	.word	0x053e2d63
 8004764:	50000100 	.word	0x50000100
 8004768:	50000400 	.word	0x50000400
 800476c:	50000500 	.word	0x50000500
 8004770:	50000600 	.word	0x50000600
 8004774:	50000300 	.word	0x50000300
 8004778:	50000700 	.word	0x50000700
 800477c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10c      	bne.n	80047b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479e:	f023 010f 	bic.w	r1, r3, #15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	1e5a      	subs	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80047b0:	e007      	b.n	80047c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 020f 	bic.w	r2, r2, #15
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047d2:	e007      	b.n	80047e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d8:	f043 0210 	orr.w	r2, r3, #16
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3724      	adds	r7, #36	@ 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	bf00      	nop

080047f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b0b6      	sub	sp, #216	@ 0xd8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800480a:	2b01      	cmp	r3, #1
 800480c:	d102      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x24>
 800480e:	2302      	movs	r3, #2
 8004810:	f000 bc13 	b.w	800503a <HAL_ADC_ConfigChannel+0x84a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fe02 	bl	800442a <LL_ADC_REG_IsConversionOngoing>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 83f3 	bne.w	8005014 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7ff fd18 	bl	8004270 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fdf0 	bl	800442a <LL_ADC_REG_IsConversionOngoing>
 800484a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fdfc 	bl	8004450 <LL_ADC_INJ_IsConversionOngoing>
 8004858:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800485c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004860:	2b00      	cmp	r3, #0
 8004862:	f040 81d9 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486a:	2b00      	cmp	r3, #0
 800486c:	f040 81d4 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004878:	d10f      	bne.n	800489a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	4619      	mov	r1, r3
 8004886:	f7ff fd1f 	bl	80042c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fcd9 	bl	800424a <LL_ADC_SetSamplingTimeCommonConfig>
 8004898:	e00e      	b.n	80048b8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f7ff fd0e 	bl	80042c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fcc9 	bl	800424a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	08db      	lsrs	r3, r3, #3
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d022      	beq.n	8004920 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6919      	ldr	r1, [r3, #16]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048ea:	f7ff fc23 	bl	8004134 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6919      	ldr	r1, [r3, #16]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7ff fc6f 	bl	80041de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800490c:	2b01      	cmp	r3, #1
 800490e:	d102      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x126>
 8004910:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004914:	e000      	b.n	8004918 <HAL_ADC_ConfigChannel+0x128>
 8004916:	2300      	movs	r3, #0
 8004918:	461a      	mov	r2, r3
 800491a:	f7ff fc7b 	bl	8004214 <LL_ADC_SetOffsetSaturation>
 800491e:	e17b      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fc28 	bl	800417c <LL_ADC_GetOffsetChannel>
 800492c:	4603      	mov	r3, r0
 800492e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <HAL_ADC_ConfigChannel+0x15c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fc1d 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004942:	4603      	mov	r3, r0
 8004944:	0e9b      	lsrs	r3, r3, #26
 8004946:	f003 021f 	and.w	r2, r3, #31
 800494a:	e01e      	b.n	800498a <HAL_ADC_ConfigChannel+0x19a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fc12 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004958:	4603      	mov	r3, r0
 800495a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800496a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800496e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800497a:	2320      	movs	r3, #32
 800497c:	e004      	b.n	8004988 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800497e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004992:	2b00      	cmp	r3, #0
 8004994:	d105      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x1b2>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	0e9b      	lsrs	r3, r3, #26
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	e018      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x1e4>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80049c6:	2320      	movs	r3, #32
 80049c8:	e004      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80049ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d106      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2200      	movs	r2, #0
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fbe1 	bl	80041a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2101      	movs	r1, #1
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fbc5 	bl	800417c <LL_ADC_GetOffsetChannel>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x222>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2101      	movs	r1, #1
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fbba 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	0e9b      	lsrs	r3, r3, #26
 8004a0c:	f003 021f 	and.w	r2, r3, #31
 8004a10:	e01e      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x260>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2101      	movs	r1, #1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fbaf 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004a40:	2320      	movs	r3, #32
 8004a42:	e004      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a48:	fab3 f383 	clz	r3, r3
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x278>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0e9b      	lsrs	r3, r3, #26
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	e018      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x2aa>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004a8c:	2320      	movs	r3, #32
 8004a8e:	e004      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d106      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fb7e 	bl	80041a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fb62 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x2e8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff fb57 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	0e9b      	lsrs	r3, r3, #26
 8004ad2:	f003 021f 	and.w	r2, r3, #31
 8004ad6:	e01e      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x326>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fb4c 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004b06:	2320      	movs	r3, #32
 8004b08:	e004      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b0e:	fab3 f383 	clz	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x33e>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	0e9b      	lsrs	r3, r3, #26
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	e016      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x36c>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e004      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d106      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2102      	movs	r1, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fb1d 	bl	80041a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2103      	movs	r1, #3
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fb01 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x3aa>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2103      	movs	r1, #3
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff faf6 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004b90:	4603      	mov	r3, r0
 8004b92:	0e9b      	lsrs	r3, r3, #26
 8004b94:	f003 021f 	and.w	r2, r3, #31
 8004b98:	e017      	b.n	8004bca <HAL_ADC_ConfigChannel+0x3da>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2103      	movs	r1, #3
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff faeb 	bl	800417c <LL_ADC_GetOffsetChannel>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004bb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x3f2>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	0e9b      	lsrs	r3, r3, #26
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	e011      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x416>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004bfa:	2320      	movs	r3, #32
 8004bfc:	e003      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c00:	fab3 f383 	clz	r3, r3
 8004c04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d106      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2103      	movs	r1, #3
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fac8 	bl	80041a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fbf1 	bl	8004404 <LL_ADC_IsEnabled>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 813d 	bne.w	8004ea4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f7ff fb72 	bl	8004320 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4aa2      	ldr	r2, [pc, #648]	@ (8004ecc <HAL_ADC_ConfigChannel+0x6dc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	f040 812e 	bne.w	8004ea4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x480>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0e9b      	lsrs	r3, r3, #26
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2b09      	cmp	r3, #9
 8004c66:	bf94      	ite	ls
 8004c68:	2301      	movls	r3, #1
 8004c6a:	2300      	movhi	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e019      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x4b4>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c80:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004c88:	2320      	movs	r3, #32
 8004c8a:	e003      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004c8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c8e:	fab3 f383 	clz	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	bf94      	ite	ls
 8004c9e:	2301      	movls	r3, #1
 8004ca0:	2300      	movhi	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d079      	beq.n	8004d9c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x4d4>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	0e9b      	lsrs	r3, r3, #26
 8004cba:	3301      	adds	r3, #1
 8004cbc:	069b      	lsls	r3, r3, #26
 8004cbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cc2:	e015      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x500>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004cdc:	2320      	movs	r3, #32
 8004cde:	e003      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	3301      	adds	r3, #1
 8004cea:	069b      	lsls	r3, r3, #26
 8004cec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d109      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x520>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0e9b      	lsrs	r3, r3, #26
 8004d02:	3301      	adds	r3, #1
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	2101      	movs	r1, #1
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	e017      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x550>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d18:	fa93 f3a3 	rbit	r3, r3
 8004d1c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d20:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004d28:	2320      	movs	r3, #32
 8004d2a:	e003      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	3301      	adds	r3, #1
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d40:	ea42 0103 	orr.w	r1, r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x576>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	0e9b      	lsrs	r3, r3, #26
 8004d56:	3301      	adds	r3, #1
 8004d58:	f003 021f 	and.w	r2, r3, #31
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4413      	add	r3, r2
 8004d62:	051b      	lsls	r3, r3, #20
 8004d64:	e018      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x5a8>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e003      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	fab3 f383 	clz	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f003 021f 	and.w	r2, r3, #31
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	e07e      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x5c8>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	0e9b      	lsrs	r3, r3, #26
 8004dae:	3301      	adds	r3, #1
 8004db0:	069b      	lsls	r3, r3, #26
 8004db2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004db6:	e015      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x5f4>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc0:	fa93 f3a3 	rbit	r3, r3
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004dd0:	2320      	movs	r3, #32
 8004dd2:	e003      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	069b      	lsls	r3, r3, #26
 8004de0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x614>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0e9b      	lsrs	r3, r3, #26
 8004df6:	3301      	adds	r3, #1
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	e017      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x644>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	61fb      	str	r3, [r7, #28]
  return result;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	e003      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	3301      	adds	r3, #1
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2101      	movs	r1, #1
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	ea42 0103 	orr.w	r1, r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x670>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	0e9b      	lsrs	r3, r3, #26
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f003 021f 	and.w	r2, r3, #31
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	3b1e      	subs	r3, #30
 8004e58:	051b      	lsls	r3, r3, #20
 8004e5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e5e:	e01b      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x6a8>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	613b      	str	r3, [r7, #16]
  return result;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e003      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	f003 021f 	and.w	r2, r3, #31
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	3b1e      	subs	r3, #30
 8004e92:	051b      	lsls	r3, r3, #20
 8004e94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e98:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f7ff fa12 	bl	80042c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x6e0>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80be 	beq.w	800502e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eba:	d004      	beq.n	8004ec6 <HAL_ADC_ConfigChannel+0x6d6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a04      	ldr	r2, [pc, #16]	@ (8004ed4 <HAL_ADC_ConfigChannel+0x6e4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d10a      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x6ec>
 8004ec6:	4b04      	ldr	r3, [pc, #16]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x6e8>)
 8004ec8:	e009      	b.n	8004ede <HAL_ADC_ConfigChannel+0x6ee>
 8004eca:	bf00      	nop
 8004ecc:	407f0000 	.word	0x407f0000
 8004ed0:	80080000 	.word	0x80080000
 8004ed4:	50000100 	.word	0x50000100
 8004ed8:	50000300 	.word	0x50000300
 8004edc:	4b59      	ldr	r3, [pc, #356]	@ (8005044 <HAL_ADC_ConfigChannel+0x854>)
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff f91a 	bl	8004118 <LL_ADC_GetCommonPathInternalCh>
 8004ee4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a56      	ldr	r2, [pc, #344]	@ (8005048 <HAL_ADC_ConfigChannel+0x858>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_ADC_ConfigChannel+0x70c>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a55      	ldr	r2, [pc, #340]	@ (800504c <HAL_ADC_ConfigChannel+0x85c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d13a      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004efc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d134      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f10:	d005      	beq.n	8004f1e <HAL_ADC_ConfigChannel+0x72e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a4e      	ldr	r2, [pc, #312]	@ (8005050 <HAL_ADC_ConfigChannel+0x860>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	f040 8085 	bne.w	8005028 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f26:	d004      	beq.n	8004f32 <HAL_ADC_ConfigChannel+0x742>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a49      	ldr	r2, [pc, #292]	@ (8005054 <HAL_ADC_ConfigChannel+0x864>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x746>
 8004f32:	4a49      	ldr	r2, [pc, #292]	@ (8005058 <HAL_ADC_ConfigChannel+0x868>)
 8004f34:	e000      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x748>
 8004f36:	4a43      	ldr	r2, [pc, #268]	@ (8005044 <HAL_ADC_ConfigChannel+0x854>)
 8004f38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7ff f8d5 	bl	80040f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f48:	4b44      	ldr	r3, [pc, #272]	@ (800505c <HAL_ADC_ConfigChannel+0x86c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	4a44      	ldr	r2, [pc, #272]	@ (8005060 <HAL_ADC_ConfigChannel+0x870>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	099b      	lsrs	r3, r3, #6
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f62:	e002      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f9      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f70:	e05a      	b.n	8005028 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a3b      	ldr	r2, [pc, #236]	@ (8005064 <HAL_ADC_ConfigChannel+0x874>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d125      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11f      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a31      	ldr	r2, [pc, #196]	@ (8005054 <HAL_ADC_ConfigChannel+0x864>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d104      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x7ac>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a34      	ldr	r2, [pc, #208]	@ (8005068 <HAL_ADC_ConfigChannel+0x878>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d047      	beq.n	800502c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fa4:	d004      	beq.n	8004fb0 <HAL_ADC_ConfigChannel+0x7c0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2a      	ldr	r2, [pc, #168]	@ (8005054 <HAL_ADC_ConfigChannel+0x864>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d101      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x7c4>
 8004fb0:	4a29      	ldr	r2, [pc, #164]	@ (8005058 <HAL_ADC_ConfigChannel+0x868>)
 8004fb2:	e000      	b.n	8004fb6 <HAL_ADC_ConfigChannel+0x7c6>
 8004fb4:	4a23      	ldr	r2, [pc, #140]	@ (8005044 <HAL_ADC_ConfigChannel+0x854>)
 8004fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7ff f896 	bl	80040f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fc6:	e031      	b.n	800502c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a27      	ldr	r2, [pc, #156]	@ (800506c <HAL_ADC_ConfigChannel+0x87c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d12d      	bne.n	800502e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d127      	bne.n	800502e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8005054 <HAL_ADC_ConfigChannel+0x864>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d022      	beq.n	800502e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ff0:	d004      	beq.n	8004ffc <HAL_ADC_ConfigChannel+0x80c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <HAL_ADC_ConfigChannel+0x864>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d101      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x810>
 8004ffc:	4a16      	ldr	r2, [pc, #88]	@ (8005058 <HAL_ADC_ConfigChannel+0x868>)
 8004ffe:	e000      	b.n	8005002 <HAL_ADC_ConfigChannel+0x812>
 8005000:	4a10      	ldr	r2, [pc, #64]	@ (8005044 <HAL_ADC_ConfigChannel+0x854>)
 8005002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005006:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f7ff f870 	bl	80040f2 <LL_ADC_SetCommonPathInternalCh>
 8005012:	e00c      	b.n	800502e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005026:	e002      	b.n	800502e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800502c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005036:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800503a:	4618      	mov	r0, r3
 800503c:	37d8      	adds	r7, #216	@ 0xd8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	50000700 	.word	0x50000700
 8005048:	c3210000 	.word	0xc3210000
 800504c:	90c00010 	.word	0x90c00010
 8005050:	50000600 	.word	0x50000600
 8005054:	50000100 	.word	0x50000100
 8005058:	50000300 	.word	0x50000300
 800505c:	200003b8 	.word	0x200003b8
 8005060:	053e2d63 	.word	0x053e2d63
 8005064:	c7520000 	.word	0xc7520000
 8005068:	50000500 	.word	0x50000500
 800506c:	cb840000 	.word	0xcb840000

08005070 <LL_ADC_IsEnabled>:
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <LL_ADC_IsEnabled+0x18>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <LL_ADC_IsEnabled+0x1a>
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <LL_ADC_REG_IsConversionOngoing>:
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d101      	bne.n	80050ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b0a1      	sub	sp, #132	@ 0x84
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e0e7      	b.n	80052aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80050e2:	2300      	movs	r3, #0
 80050e4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80050e6:	2300      	movs	r3, #0
 80050e8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050f2:	d102      	bne.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050f4:	4b6f      	ldr	r3, [pc, #444]	@ (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	e009      	b.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a6e      	ldr	r2, [pc, #440]	@ (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d102      	bne.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005104:	4b6d      	ldr	r3, [pc, #436]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	e001      	b.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0be      	b.n	80052aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ffb1 	bl	8005096 <LL_ADC_REG_IsConversionOngoing>
 8005134:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ffab 	bl	8005096 <LL_ADC_REG_IsConversionOngoing>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 80a0 	bne.w	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005148:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800514a:	2b00      	cmp	r3, #0
 800514c:	f040 809c 	bne.w	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005158:	d004      	beq.n	8005164 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a55      	ldr	r2, [pc, #340]	@ (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005164:	4b56      	ldr	r3, [pc, #344]	@ (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005166:	e000      	b.n	800516a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005168:	4b56      	ldr	r3, [pc, #344]	@ (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800516a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d04b      	beq.n	800520c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005186:	035b      	lsls	r3, r3, #13
 8005188:	430b      	orrs	r3, r1
 800518a:	431a      	orrs	r2, r3
 800518c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800518e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005198:	d004      	beq.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a45      	ldr	r2, [pc, #276]	@ (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10f      	bne.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80051a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051a8:	f7ff ff62 	bl	8005070 <LL_ADC_IsEnabled>
 80051ac:	4604      	mov	r4, r0
 80051ae:	4841      	ldr	r0, [pc, #260]	@ (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051b0:	f7ff ff5e 	bl	8005070 <LL_ADC_IsEnabled>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4323      	orrs	r3, r4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e012      	b.n	80051ea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80051c4:	483c      	ldr	r0, [pc, #240]	@ (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051c6:	f7ff ff53 	bl	8005070 <LL_ADC_IsEnabled>
 80051ca:	4604      	mov	r4, r0
 80051cc:	483b      	ldr	r0, [pc, #236]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051ce:	f7ff ff4f 	bl	8005070 <LL_ADC_IsEnabled>
 80051d2:	4603      	mov	r3, r0
 80051d4:	431c      	orrs	r4, r3
 80051d6:	483c      	ldr	r0, [pc, #240]	@ (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051d8:	f7ff ff4a 	bl	8005070 <LL_ADC_IsEnabled>
 80051dc:	4603      	mov	r3, r0
 80051de:	4323      	orrs	r3, r4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d056      	beq.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051f6:	f023 030f 	bic.w	r3, r3, #15
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	6811      	ldr	r1, [r2, #0]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	6892      	ldr	r2, [r2, #8]
 8005202:	430a      	orrs	r2, r1
 8005204:	431a      	orrs	r2, r3
 8005206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005208:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800520a:	e047      	b.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800520c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005216:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005220:	d004      	beq.n	800522c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a23      	ldr	r2, [pc, #140]	@ (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10f      	bne.n	800524c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800522c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005230:	f7ff ff1e 	bl	8005070 <LL_ADC_IsEnabled>
 8005234:	4604      	mov	r4, r0
 8005236:	481f      	ldr	r0, [pc, #124]	@ (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005238:	f7ff ff1a 	bl	8005070 <LL_ADC_IsEnabled>
 800523c:	4603      	mov	r3, r0
 800523e:	4323      	orrs	r3, r4
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e012      	b.n	8005272 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800524c:	481a      	ldr	r0, [pc, #104]	@ (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800524e:	f7ff ff0f 	bl	8005070 <LL_ADC_IsEnabled>
 8005252:	4604      	mov	r4, r0
 8005254:	4819      	ldr	r0, [pc, #100]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005256:	f7ff ff0b 	bl	8005070 <LL_ADC_IsEnabled>
 800525a:	4603      	mov	r3, r0
 800525c:	431c      	orrs	r4, r3
 800525e:	481a      	ldr	r0, [pc, #104]	@ (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005260:	f7ff ff06 	bl	8005070 <LL_ADC_IsEnabled>
 8005264:	4603      	mov	r3, r0
 8005266:	4323      	orrs	r3, r4
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d012      	beq.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800527e:	f023 030f 	bic.w	r3, r3, #15
 8005282:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005284:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005286:	e009      	b.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800529a:	e000      	b.n	800529e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800529c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80052a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3784      	adds	r7, #132	@ 0x84
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd90      	pop	{r4, r7, pc}
 80052b2:	bf00      	nop
 80052b4:	50000100 	.word	0x50000100
 80052b8:	50000400 	.word	0x50000400
 80052bc:	50000500 	.word	0x50000500
 80052c0:	50000300 	.word	0x50000300
 80052c4:	50000700 	.word	0x50000700
 80052c8:	50000600 	.word	0x50000600

080052cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <__NVIC_SetPriorityGrouping+0x44>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052e8:	4013      	ands	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052fe:	4a04      	ldr	r2, [pc, #16]	@ (8005310 <__NVIC_SetPriorityGrouping+0x44>)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	60d3      	str	r3, [r2, #12]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005318:	4b04      	ldr	r3, [pc, #16]	@ (800532c <__NVIC_GetPriorityGrouping+0x18>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	f003 0307 	and.w	r3, r3, #7
}
 8005322:	4618      	mov	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	e000ed00 	.word	0xe000ed00

08005330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	2b00      	cmp	r3, #0
 8005340:	db0b      	blt.n	800535a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	f003 021f 	and.w	r2, r3, #31
 8005348:	4907      	ldr	r1, [pc, #28]	@ (8005368 <__NVIC_EnableIRQ+0x38>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2001      	movs	r0, #1
 8005352:	fa00 f202 	lsl.w	r2, r0, r2
 8005356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e100 	.word	0xe000e100

0800536c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537c:	2b00      	cmp	r3, #0
 800537e:	db0a      	blt.n	8005396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	490c      	ldr	r1, [pc, #48]	@ (80053b8 <__NVIC_SetPriority+0x4c>)
 8005386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538a:	0112      	lsls	r2, r2, #4
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	440b      	add	r3, r1
 8005390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005394:	e00a      	b.n	80053ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4908      	ldr	r1, [pc, #32]	@ (80053bc <__NVIC_SetPriority+0x50>)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	3b04      	subs	r3, #4
 80053a4:	0112      	lsls	r2, r2, #4
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	440b      	add	r3, r1
 80053aa:	761a      	strb	r2, [r3, #24]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000e100 	.word	0xe000e100
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b089      	sub	sp, #36	@ 0x24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f1c3 0307 	rsb	r3, r3, #7
 80053da:	2b04      	cmp	r3, #4
 80053dc:	bf28      	it	cs
 80053de:	2304      	movcs	r3, #4
 80053e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d902      	bls.n	80053f0 <NVIC_EncodePriority+0x30>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3b03      	subs	r3, #3
 80053ee:	e000      	b.n	80053f2 <NVIC_EncodePriority+0x32>
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f4:	f04f 32ff 	mov.w	r2, #4294967295
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43da      	mvns	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	401a      	ands	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005408:	f04f 31ff 	mov.w	r1, #4294967295
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	43d9      	mvns	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005418:	4313      	orrs	r3, r2
         );
}
 800541a:	4618      	mov	r0, r3
 800541c:	3724      	adds	r7, #36	@ 0x24
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3b01      	subs	r3, #1
 8005434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005438:	d301      	bcc.n	800543e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800543a:	2301      	movs	r3, #1
 800543c:	e00f      	b.n	800545e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800543e:	4a0a      	ldr	r2, [pc, #40]	@ (8005468 <SysTick_Config+0x40>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3b01      	subs	r3, #1
 8005444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005446:	210f      	movs	r1, #15
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	f7ff ff8e 	bl	800536c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005450:	4b05      	ldr	r3, [pc, #20]	@ (8005468 <SysTick_Config+0x40>)
 8005452:	2200      	movs	r2, #0
 8005454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005456:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <SysTick_Config+0x40>)
 8005458:	2207      	movs	r2, #7
 800545a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	e000e010 	.word	0xe000e010

0800546c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff29 	bl	80052cc <__NVIC_SetPriorityGrouping>
}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	4603      	mov	r3, r0
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005490:	f7ff ff40 	bl	8005314 <__NVIC_GetPriorityGrouping>
 8005494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	6978      	ldr	r0, [r7, #20]
 800549c:	f7ff ff90 	bl	80053c0 <NVIC_EncodePriority>
 80054a0:	4602      	mov	r2, r0
 80054a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff ff5f 	bl	800536c <__NVIC_SetPriority>
}
 80054ae:	bf00      	nop
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ff33 	bl	8005330 <__NVIC_EnableIRQ>
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ffa4 	bl	8005428 <SysTick_Config>
 80054e0:	4603      	mov	r3, r0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e014      	b.n	8005526 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d105      	bne.n	8005512 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fc f991 	bl	8001834 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e056      	b.n	80055f2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	795b      	ldrb	r3, [r3, #5]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_DAC_Start+0x20>
 800554c:	2302      	movs	r3, #2
 800554e:	e050      	b.n	80055f2 <HAL_DAC_Start+0xc2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6819      	ldr	r1, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2201      	movs	r2, #1
 800556a:	409a      	lsls	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005574:	4b22      	ldr	r3, [pc, #136]	@ (8005600 <HAL_DAC_Start+0xd0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	099b      	lsrs	r3, r3, #6
 800557a:	4a22      	ldr	r2, [pc, #136]	@ (8005604 <HAL_DAC_Start+0xd4>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	3301      	adds	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005586:	e002      	b.n	800558e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b01      	subs	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f9      	bne.n	8005588 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d11d      	bne.n	80055e4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	e014      	b.n	80055e4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2102      	movs	r1, #2
 80055cc:	fa01 f303 	lsl.w	r3, r1, r3
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d107      	bne.n	80055e4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0202 	orr.w	r2, r2, #2
 80055e2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	200003b8 	.word	0x200003b8
 8005604:	053e2d63 	.word	0x053e2d63

08005608 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e018      	b.n	8005656 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4413      	add	r3, r2
 800563c:	3308      	adds	r3, #8
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e004      	b.n	800564c <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4413      	add	r3, r2
 8005648:	3314      	adds	r3, #20
 800564a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	461a      	mov	r2, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
	...

08005664 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	@ 0x28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_DAC_ConfigChannel+0x1c>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e1a1      	b.n	80059c8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	795b      	ldrb	r3, [r3, #5]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_DAC_ConfigChannel+0x32>
 8005692:	2302      	movs	r3, #2
 8005694:	e198      	b.n	80059c8 <HAL_DAC_ConfigChannel+0x364>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2202      	movs	r2, #2
 80056a0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d17a      	bne.n	80057a0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80056aa:	f7fe fce1 	bl	8004070 <HAL_GetTick>
 80056ae:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d13d      	bne.n	8005732 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056b6:	e018      	b.n	80056ea <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80056b8:	f7fe fcda 	bl	8004070 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d911      	bls.n	80056ea <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f043 0208 	orr.w	r2, r3, #8
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2203      	movs	r2, #3
 80056e4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e16e      	b.n	80059c8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1df      	bne.n	80056b8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40
 8005702:	e020      	b.n	8005746 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005704:	f7fe fcb4 	bl	8004070 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d90f      	bls.n	8005732 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005718:	2b00      	cmp	r3, #0
 800571a:	da0a      	bge.n	8005732 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f043 0208 	orr.w	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2203      	movs	r2, #3
 800572c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e14a      	b.n	80059c8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005738:	2b00      	cmp	r3, #0
 800573a:	dbe3      	blt.n	8005704 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005744:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005756:	fa01 f303 	lsl.w	r3, r1, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	ea02 0103 	and.w	r1, r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	409a      	lsls	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	21ff      	movs	r1, #255	@ 0xff
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	ea02 0103 	and.w	r1, r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	409a      	lsls	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d11d      	bne.n	80057e4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	221f      	movs	r2, #31
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c0:	4013      	ands	r3, r2
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d8:	4313      	orrs	r3, r2
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f003 0310 	and.w	r3, r3, #16
 80057f2:	2207      	movs	r2, #7
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fc:	4013      	ands	r3, r2
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d102      	bne.n	800580e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005808:	2300      	movs	r3, #0
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	e00f      	b.n	800582e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d102      	bne.n	800581c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005816:	2301      	movs	r3, #1
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	e008      	b.n	800582e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005824:	2301      	movs	r3, #1
 8005826:	623b      	str	r3, [r7, #32]
 8005828:	e001      	b.n	800582e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800582a:	2300      	movs	r3, #0
 800582c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	6a3a      	ldr	r2, [r7, #32]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005850:	4013      	ands	r3, r2
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	791b      	ldrb	r3, [r3, #4]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d102      	bne.n	8005862 <HAL_DAC_ConfigChannel+0x1fe>
 800585c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005860:	e000      	b.n	8005864 <HAL_DAC_ConfigChannel+0x200>
 8005862:	2300      	movs	r3, #0
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587c:	4013      	ands	r3, r2
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	795b      	ldrb	r3, [r3, #5]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d102      	bne.n	800588e <HAL_DAC_ConfigChannel+0x22a>
 8005888:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800588c:	e000      	b.n	8005890 <HAL_DAC_ConfigChannel+0x22c>
 800588e:	2300      	movs	r3, #0
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d114      	bne.n	80058d0 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80058a6:	f001 ffc3 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 80058aa:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4a48      	ldr	r2, [pc, #288]	@ (80059d0 <HAL_DAC_ConfigChannel+0x36c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d904      	bls.n	80058be <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80058bc:	e00f      	b.n	80058de <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4a44      	ldr	r2, [pc, #272]	@ (80059d4 <HAL_DAC_ConfigChannel+0x370>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d90a      	bls.n	80058dc <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ce:	e006      	b.n	80058de <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d6:	4313      	orrs	r3, r2
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058da:	e000      	b.n	80058de <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80058dc:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ec:	4313      	orrs	r3, r2
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6819      	ldr	r1, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	43da      	mvns	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	400a      	ands	r2, r1
 8005914:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	4013      	ands	r3, r2
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005948:	4313      	orrs	r3, r2
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005952:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6819      	ldr	r1, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	22c0      	movs	r2, #192	@ 0xc0
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43da      	mvns	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	400a      	ands	r2, r1
 800596e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	ea02 0103 	and.w	r1, r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	409a      	lsls	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80059c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3728      	adds	r7, #40	@ 0x28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	09896800 	.word	0x09896800
 80059d4:	04c4b400 	.word	0x04c4b400

080059d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e08d      	b.n	8005b06 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b47      	ldr	r3, [pc, #284]	@ (8005b10 <HAL_DMA_Init+0x138>)
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d80f      	bhi.n	8005a16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	4b45      	ldr	r3, [pc, #276]	@ (8005b14 <HAL_DMA_Init+0x13c>)
 80059fe:	4413      	add	r3, r2
 8005a00:	4a45      	ldr	r2, [pc, #276]	@ (8005b18 <HAL_DMA_Init+0x140>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	009a      	lsls	r2, r3, #2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a42      	ldr	r2, [pc, #264]	@ (8005b1c <HAL_DMA_Init+0x144>)
 8005a12:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a14:	e00e      	b.n	8005a34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	4b40      	ldr	r3, [pc, #256]	@ (8005b20 <HAL_DMA_Init+0x148>)
 8005a1e:	4413      	add	r3, r2
 8005a20:	4a3d      	ldr	r2, [pc, #244]	@ (8005b18 <HAL_DMA_Init+0x140>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	009a      	lsls	r2, r3, #2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a3c      	ldr	r2, [pc, #240]	@ (8005b24 <HAL_DMA_Init+0x14c>)
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa76 	bl	8005f78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a94:	d102      	bne.n	8005a9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ab0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d010      	beq.n	8005adc <HAL_DMA_Init+0x104>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d80c      	bhi.n	8005adc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa96 	bl	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	e008      	b.n	8005aee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40020407 	.word	0x40020407
 8005b14:	bffdfff8 	.word	0xbffdfff8
 8005b18:	cccccccd 	.word	0xcccccccd
 8005b1c:	40020000 	.word	0x40020000
 8005b20:	bffdfbf8 	.word	0xbffdfbf8
 8005b24:	40020400 	.word	0x40020400

08005b28 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_DMA_Start_IT+0x20>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e066      	b.n	8005c16 <HAL_DMA_Start_IT+0xee>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d155      	bne.n	8005c08 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f9bb 	bl	8005efc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 020e 	orr.w	r2, r2, #14
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e00f      	b.n	8005bc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0204 	bic.w	r2, r2, #4
 8005bae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 020a 	orr.w	r2, r2, #10
 8005bbe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bdc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bf4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e005      	b.n	8005c14 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
 8005c12:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d005      	beq.n	8005c42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2204      	movs	r2, #4
 8005c3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
 8005c40:	e037      	b.n	8005cb2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 020e 	bic.w	r2, r2, #14
 8005c50:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c60:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c76:	f003 021f 	and.w	r2, r3, #31
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	2101      	movs	r1, #1
 8005c80:	fa01 f202 	lsl.w	r2, r1, r2
 8005c84:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c8e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00c      	beq.n	8005cb2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ca6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cb0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d00d      	beq.n	8005d04 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2204      	movs	r2, #4
 8005cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
 8005d02:	e047      	b.n	8005d94 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 020e 	bic.w	r2, r2, #14
 8005d12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d38:	f003 021f 	and.w	r2, r3, #31
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d40:	2101      	movs	r1, #1
 8005d42:	fa01 f202 	lsl.w	r2, r1, r2
 8005d46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
    }
  }
  return status;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d026      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x7a>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d021      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d107      	bne.n	8005df2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0204 	bic.w	r2, r2, #4
 8005df0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df6:	f003 021f 	and.w	r2, r3, #31
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	2104      	movs	r1, #4
 8005e00:	fa01 f202 	lsl.w	r2, r1, r2
 8005e04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d071      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005e16:	e06c      	b.n	8005ef2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2202      	movs	r2, #2
 8005e22:	409a      	lsls	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4013      	ands	r3, r2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02e      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d029      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10b      	bne.n	8005e5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 020a 	bic.w	r2, r2, #10
 8005e52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e60:	f003 021f 	and.w	r2, r3, #31
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e68:	2102      	movs	r1, #2
 8005e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d038      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005e88:	e033      	b.n	8005ef2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2208      	movs	r2, #8
 8005e94:	409a      	lsls	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02a      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d025      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 020e 	bic.w	r2, r2, #14
 8005eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
}
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	f003 021f 	and.w	r2, r3, #31
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	2101      	movs	r1, #1
 8005f34:	fa01 f202 	lsl.w	r2, r1, r2
 8005f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d108      	bne.n	8005f5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f5a:	e007      	b.n	8005f6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b16      	ldr	r3, [pc, #88]	@ (8005fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d802      	bhi.n	8005f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005f8c:	4b15      	ldr	r3, [pc, #84]	@ (8005fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e001      	b.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005f92:	4b15      	ldr	r3, [pc, #84]	@ (8005fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005f94:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	3b08      	subs	r3, #8
 8005fa2:	4a12      	ldr	r2, [pc, #72]	@ (8005fec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb0:	089b      	lsrs	r3, r3, #2
 8005fb2:	009a      	lsls	r2, r3, #2
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8005ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005fc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2201      	movs	r2, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40020407 	.word	0x40020407
 8005fe4:	40020800 	.word	0x40020800
 8005fe8:	40020820 	.word	0x40020820
 8005fec:	cccccccd 	.word	0xcccccccd
 8005ff0:	40020880 	.word	0x40020880

08005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a08      	ldr	r2, [pc, #32]	@ (8006038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006016:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3b01      	subs	r3, #1
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2201      	movs	r2, #1
 8006022:	409a      	lsls	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	1000823f 	.word	0x1000823f
 8006038:	40020940 	.word	0x40020940

0800603c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e147      	b.n	80062de <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fb fcb2 	bl	80019cc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0210 	bic.w	r2, r2, #16
 8006076:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006078:	f7fd fffa 	bl	8004070 <HAL_GetTick>
 800607c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800607e:	e012      	b.n	80060a6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006080:	f7fd fff6 	bl	8004070 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b0a      	cmp	r3, #10
 800608c:	d90b      	bls.n	80060a6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006092:	f043 0201 	orr.w	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2203      	movs	r2, #3
 800609e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e11b      	b.n	80062de <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d0e5      	beq.n	8006080 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060c4:	f7fd ffd4 	bl	8004070 <HAL_GetTick>
 80060c8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80060ca:	e012      	b.n	80060f2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80060cc:	f7fd ffd0 	bl	8004070 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b0a      	cmp	r3, #10
 80060d8:	d90b      	bls.n	80060f2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060de:	f043 0201 	orr.w	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2203      	movs	r2, #3
 80060ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e0f5      	b.n	80062de <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0e5      	beq.n	80060cc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0202 	orr.w	r2, r2, #2
 800610e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a74      	ldr	r2, [pc, #464]	@ (80062e8 <HAL_FDCAN_Init+0x2ac>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d103      	bne.n	8006122 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800611a:	4a74      	ldr	r2, [pc, #464]	@ (80062ec <HAL_FDCAN_Init+0x2b0>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	7c1b      	ldrb	r3, [r3, #16]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d108      	bne.n	800613c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699a      	ldr	r2, [r3, #24]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006138:	619a      	str	r2, [r3, #24]
 800613a:	e007      	b.n	800614c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800614a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7c5b      	ldrb	r3, [r3, #17]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d108      	bne.n	8006166 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006162:	619a      	str	r2, [r3, #24]
 8006164:	e007      	b.n	8006176 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006174:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	7c9b      	ldrb	r3, [r3, #18]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d108      	bne.n	8006190 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800618c:	619a      	str	r2, [r3, #24]
 800618e:	e007      	b.n	80061a0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800619e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80061c4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0210 	bic.w	r2, r2, #16
 80061d4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d108      	bne.n	80061f0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0204 	orr.w	r2, r2, #4
 80061ec:	619a      	str	r2, [r3, #24]
 80061ee:	e02c      	b.n	800624a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d028      	beq.n	800624a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d01c      	beq.n	800623a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800620e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0210 	orr.w	r2, r2, #16
 800621e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b03      	cmp	r3, #3
 8006226:	d110      	bne.n	800624a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0220 	orr.w	r2, r2, #32
 8006236:	619a      	str	r2, [r3, #24]
 8006238:	e007      	b.n	800624a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0220 	orr.w	r2, r2, #32
 8006248:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	3b01      	subs	r3, #1
 8006250:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	3b01      	subs	r3, #1
 8006258:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800625a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006262:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	3b01      	subs	r3, #1
 800626c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006272:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006274:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800627e:	d115      	bne.n	80062ac <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628a:	3b01      	subs	r3, #1
 800628c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800628e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006294:	3b01      	subs	r3, #1
 8006296:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006298:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	3b01      	subs	r3, #1
 80062a2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80062a8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062aa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 faa0 	bl	8006808 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40006400 	.word	0x40006400
 80062ec:	40006500 	.word	0x40006500

080062f0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006300:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d002      	beq.n	800630e <HAL_FDCAN_ConfigFilter+0x1e>
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d13d      	bne.n	800638a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d119      	bne.n	800634a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006322:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800632a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e01d      	b.n	8006386 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	075a      	lsls	r2, r3, #29
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	079a      	lsls	r2, r3, #30
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	3304      	adds	r3, #4
 800637e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	e006      	b.n	8006398 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800638e:	f043 0202 	orr.w	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
  }
}
 8006398:	4618      	mov	r0, r3
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d12c      	bne.n	8006416 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80063c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e023      	b.n	8006424 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fa74 	bl	80068e0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2101      	movs	r1, #1
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	fa01 f202 	lsl.w	r2, r1, r2
 8006404:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006408:	2201      	movs	r2, #1
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	409a      	lsls	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	e006      	b.n	8006424 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800641a:	f043 0208 	orr.w	r2, r3, #8
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800642c:	b480      	push	{r7}
 800642e:	b08b      	sub	sp, #44	@ 0x2c
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006444:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006446:	7efb      	ldrb	r3, [r7, #27]
 8006448:	2b02      	cmp	r3, #2
 800644a:	f040 80e8 	bne.w	800661e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b40      	cmp	r3, #64	@ 0x40
 8006452:	d137      	bne.n	80064c4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	f003 030f 	and.w	r3, r3, #15
 8006460:	2b00      	cmp	r3, #0
 8006462:	d107      	bne.n	8006474 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006468:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0db      	b.n	800662c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647c:	0e1b      	lsrs	r3, r3, #24
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b01      	cmp	r3, #1
 8006484:	d10a      	bne.n	800649c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800648e:	0a5b      	lsrs	r3, r3, #9
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006498:	2301      	movs	r3, #1
 800649a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	4613      	mov	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	440b      	add	r3, r1
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064c2:	e036      	b.n	8006532 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d107      	bne.n	80064e4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0a3      	b.n	800662c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ec:	0e1b      	lsrs	r3, r3, #24
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d10a      	bne.n	800650c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006508:	2301      	movs	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	4613      	mov	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	440b      	add	r3, r1
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d107      	bne.n	8006556 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	0c9b      	lsrs	r3, r3, #18
 800654c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e005      	b.n	8006562 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	3304      	adds	r3, #4
 800657e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	b29a      	uxth	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	f003 020f 	and.w	r2, r3, #15
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	0e1b      	lsrs	r3, r3, #24
 80065b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	0fda      	lsrs	r2, r3, #31
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	3304      	adds	r3, #4
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80065d2:	2300      	movs	r3, #0
 80065d4:	623b      	str	r3, [r7, #32]
 80065d6:	e00a      	b.n	80065ee <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	441a      	add	r2, r3
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	440b      	add	r3, r1
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	3301      	adds	r3, #1
 80065ec:	623b      	str	r3, [r7, #32]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	4a11      	ldr	r2, [pc, #68]	@ (8006638 <HAL_FDCAN_GetRxMessage+0x20c>)
 80065f4:	5cd3      	ldrb	r3, [r2, r3]
 80065f6:	461a      	mov	r2, r3
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d3ec      	bcc.n	80065d8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b40      	cmp	r3, #64	@ 0x40
 8006602:	d105      	bne.n	8006610 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800660e:	e004      	b.n	800661a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e006      	b.n	800662c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006622:	f043 0208 	orr.w	r2, r3, #8
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	372c      	adds	r7, #44	@ 0x2c
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	0800c5c8 	.word	0x0800c5c8

0800663c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800664e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d003      	beq.n	800665e <HAL_FDCAN_ActivateNotification+0x22>
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	2b02      	cmp	r3, #2
 800665a:	f040 80c8 	bne.w	80067ee <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006664:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d03b      	beq.n	80066f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d031      	beq.n	80066f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d027      	beq.n	80066f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01d      	beq.n	80066f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d013      	beq.n	80066f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00c      	beq.n	8006702 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d107      	bne.n	8006702 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0201 	orr.w	r2, r2, #1
 8006700:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d13b      	bne.n	800678e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d131      	bne.n	800678e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d127      	bne.n	800678e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d11d      	bne.n	800678e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	d113      	bne.n	800678e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00c      	beq.n	800679e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0202 	orr.w	r2, r2, #2
 800679c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d009      	beq.n	80067bc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e006      	b.n	80067fc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067f2:	f043 0202 	orr.w	r2, r3, #2
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
  }
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006810:	4b30      	ldr	r3, [pc, #192]	@ (80068d4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006812:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2f      	ldr	r2, [pc, #188]	@ (80068d8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d103      	bne.n	8006826 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006824:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2c      	ldr	r2, [pc, #176]	@ (80068dc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d103      	bne.n	8006838 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8006836:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006846:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684e:	041a      	lsls	r2, r3, #16
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800686c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006874:	061a      	lsls	r2, r3, #24
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e005      	b.n	80068ba <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3304      	adds	r3, #4
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d3f3      	bcc.n	80068ae <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80068c6:	bf00      	nop
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	4000a400 	.word	0x4000a400
 80068d8:	40006800 	.word	0x40006800
 80068dc:	40006c00 	.word	0x40006c00

080068e0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b089      	sub	sp, #36	@ 0x24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80068fe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006906:	4313      	orrs	r3, r2
 8006908:	61fb      	str	r3, [r7, #28]
 800690a:	e00a      	b.n	8006922 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006914:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800691a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800691c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006920:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800692c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006932:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006938:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	4613      	mov	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	4413      	add	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	440b      	add	r3, r1
 8006954:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	3304      	adds	r3, #4
 8006960:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	3304      	adds	r3, #4
 800696c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e020      	b.n	80069b6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	3303      	adds	r3, #3
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4413      	add	r3, r2
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3302      	adds	r3, #2
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	440b      	add	r3, r1
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800698c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	3301      	adds	r3, #1
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	440b      	add	r3, r1
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800699a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	440a      	add	r2, r1
 80069a2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80069a4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	3304      	adds	r3, #4
 80069ae:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3304      	adds	r3, #4
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	4a06      	ldr	r2, [pc, #24]	@ (80069d4 <FDCAN_CopyMessageToRAM+0xf4>)
 80069bc:	5cd3      	ldrb	r3, [r2, r3]
 80069be:	461a      	mov	r2, r3
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d3d6      	bcc.n	8006974 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80069c6:	bf00      	nop
 80069c8:	bf00      	nop
 80069ca:	3724      	adds	r7, #36	@ 0x24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	0800c5c8 	.word	0x0800c5c8

080069d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80069e6:	e15a      	b.n	8006c9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	2101      	movs	r1, #1
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	fa01 f303 	lsl.w	r3, r1, r3
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 814c 	beq.w	8006c98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d005      	beq.n	8006a18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d130      	bne.n	8006a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	2203      	movs	r2, #3
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a4e:	2201      	movs	r2, #1
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43db      	mvns	r3, r3
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	f003 0201 	and.w	r2, r3, #1
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d017      	beq.n	8006ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	2203      	movs	r2, #3
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d123      	bne.n	8006b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	08da      	lsrs	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3208      	adds	r2, #8
 8006aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	220f      	movs	r2, #15
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	08da      	lsrs	r2, r3, #3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3208      	adds	r2, #8
 8006b04:	6939      	ldr	r1, [r7, #16]
 8006b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	2203      	movs	r2, #3
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f003 0203 	and.w	r2, r3, #3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80a6 	beq.w	8006c98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8006cbc <HAL_GPIO_Init+0x2e4>)
 8006b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b50:	4a5a      	ldr	r2, [pc, #360]	@ (8006cbc <HAL_GPIO_Init+0x2e4>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b58:	4b58      	ldr	r3, [pc, #352]	@ (8006cbc <HAL_GPIO_Init+0x2e4>)
 8006b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b64:	4a56      	ldr	r2, [pc, #344]	@ (8006cc0 <HAL_GPIO_Init+0x2e8>)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	089b      	lsrs	r3, r3, #2
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	220f      	movs	r2, #15
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	43db      	mvns	r3, r3
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4013      	ands	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006b8e:	d01f      	beq.n	8006bd0 <HAL_GPIO_Init+0x1f8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a4c      	ldr	r2, [pc, #304]	@ (8006cc4 <HAL_GPIO_Init+0x2ec>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d019      	beq.n	8006bcc <HAL_GPIO_Init+0x1f4>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a4b      	ldr	r2, [pc, #300]	@ (8006cc8 <HAL_GPIO_Init+0x2f0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d013      	beq.n	8006bc8 <HAL_GPIO_Init+0x1f0>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8006ccc <HAL_GPIO_Init+0x2f4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00d      	beq.n	8006bc4 <HAL_GPIO_Init+0x1ec>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a49      	ldr	r2, [pc, #292]	@ (8006cd0 <HAL_GPIO_Init+0x2f8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <HAL_GPIO_Init+0x1e8>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a48      	ldr	r2, [pc, #288]	@ (8006cd4 <HAL_GPIO_Init+0x2fc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d101      	bne.n	8006bbc <HAL_GPIO_Init+0x1e4>
 8006bb8:	2305      	movs	r3, #5
 8006bba:	e00a      	b.n	8006bd2 <HAL_GPIO_Init+0x1fa>
 8006bbc:	2306      	movs	r3, #6
 8006bbe:	e008      	b.n	8006bd2 <HAL_GPIO_Init+0x1fa>
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	e006      	b.n	8006bd2 <HAL_GPIO_Init+0x1fa>
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e004      	b.n	8006bd2 <HAL_GPIO_Init+0x1fa>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e002      	b.n	8006bd2 <HAL_GPIO_Init+0x1fa>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <HAL_GPIO_Init+0x1fa>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	f002 0203 	and.w	r2, r2, #3
 8006bd8:	0092      	lsls	r2, r2, #2
 8006bda:	4093      	lsls	r3, r2
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006be2:	4937      	ldr	r1, [pc, #220]	@ (8006cc0 <HAL_GPIO_Init+0x2e8>)
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	089b      	lsrs	r3, r3, #2
 8006be8:	3302      	adds	r3, #2
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bf0:	4b39      	ldr	r3, [pc, #228]	@ (8006cd8 <HAL_GPIO_Init+0x300>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c14:	4a30      	ldr	r2, [pc, #192]	@ (8006cd8 <HAL_GPIO_Init+0x300>)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd8 <HAL_GPIO_Init+0x300>)
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	43db      	mvns	r3, r3
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	4013      	ands	r3, r2
 8006c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c3e:	4a26      	ldr	r2, [pc, #152]	@ (8006cd8 <HAL_GPIO_Init+0x300>)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006c44:	4b24      	ldr	r3, [pc, #144]	@ (8006cd8 <HAL_GPIO_Init+0x300>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4013      	ands	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c68:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd8 <HAL_GPIO_Init+0x300>)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd8 <HAL_GPIO_Init+0x300>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	43db      	mvns	r3, r3
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c92:	4a11      	ldr	r2, [pc, #68]	@ (8006cd8 <HAL_GPIO_Init+0x300>)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f47f ae9d 	bne.w	80069e8 <HAL_GPIO_Init+0x10>
  }
}
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	48000400 	.word	0x48000400
 8006cc8:	48000800 	.word	0x48000800
 8006ccc:	48000c00 	.word	0x48000c00
 8006cd0:	48001000 	.word	0x48001000
 8006cd4:	48001400 	.word	0x48001400
 8006cd8:	40010400 	.word	0x40010400

08006cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	887b      	ldrh	r3, [r7, #2]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	e001      	b.n	8006cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	807b      	strh	r3, [r7, #2]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d1c:	787b      	ldrb	r3, [r7, #1]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d22:	887a      	ldrh	r2, [r7, #2]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d28:	e002      	b.n	8006d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d2a:	887a      	ldrh	r2, [r7, #2]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006d46:	4b08      	ldr	r3, [pc, #32]	@ (8006d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d48:	695a      	ldr	r2, [r3, #20]
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d006      	beq.n	8006d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d52:	4a05      	ldr	r2, [pc, #20]	@ (8006d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fb f874 	bl	8001e48 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40010400 	.word	0x40010400

08006d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d141      	bne.n	8006dfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d86:	d131      	bne.n	8006dec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d88:	4b47      	ldr	r3, [pc, #284]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d8e:	4a46      	ldr	r2, [pc, #280]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d98:	4b43      	ldr	r3, [pc, #268]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006da0:	4a41      	ldr	r2, [pc, #260]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006da8:	4b40      	ldr	r3, [pc, #256]	@ (8006eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2232      	movs	r2, #50	@ 0x32
 8006dae:	fb02 f303 	mul.w	r3, r2, r3
 8006db2:	4a3f      	ldr	r2, [pc, #252]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	0c9b      	lsrs	r3, r3, #18
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dbe:	e002      	b.n	8006dc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dc6:	4b38      	ldr	r3, [pc, #224]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd2:	d102      	bne.n	8006dda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f2      	bne.n	8006dc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dda:	4b33      	ldr	r3, [pc, #204]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de6:	d158      	bne.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e057      	b.n	8006e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006dec:	4b2e      	ldr	r3, [pc, #184]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006df2:	4a2d      	ldr	r2, [pc, #180]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006df8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006dfc:	e04d      	b.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e04:	d141      	bne.n	8006e8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e06:	4b28      	ldr	r3, [pc, #160]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e12:	d131      	bne.n	8006e78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e14:	4b24      	ldr	r3, [pc, #144]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e1a:	4a23      	ldr	r2, [pc, #140]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e24:	4b20      	ldr	r3, [pc, #128]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e34:	4b1d      	ldr	r3, [pc, #116]	@ (8006eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2232      	movs	r2, #50	@ 0x32
 8006e3a:	fb02 f303 	mul.w	r3, r2, r3
 8006e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e40:	fba2 2303 	umull	r2, r3, r2, r3
 8006e44:	0c9b      	lsrs	r3, r3, #18
 8006e46:	3301      	adds	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e4a:	e002      	b.n	8006e52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e52:	4b15      	ldr	r3, [pc, #84]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5e:	d102      	bne.n	8006e66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f2      	bne.n	8006e4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e66:	4b10      	ldr	r3, [pc, #64]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e72:	d112      	bne.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e011      	b.n	8006e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e88:	e007      	b.n	8006e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e92:	4a05      	ldr	r2, [pc, #20]	@ (8006ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40007000 	.word	0x40007000
 8006eac:	200003b8 	.word	0x200003b8
 8006eb0:	431bde83 	.word	0x431bde83

08006eb4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006eb8:	4b05      	ldr	r3, [pc, #20]	@ (8006ed0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	4a04      	ldr	r2, [pc, #16]	@ (8006ed0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ebe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ec2:	6093      	str	r3, [r2, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40007000 	.word	0x40007000

08006ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e2fe      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d075      	beq.n	8006fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ef2:	4b97      	ldr	r3, [pc, #604]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
 8006efa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006efc:	4b94      	ldr	r3, [pc, #592]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b0c      	cmp	r3, #12
 8006f0a:	d102      	bne.n	8006f12 <HAL_RCC_OscConfig+0x3e>
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d002      	beq.n	8006f18 <HAL_RCC_OscConfig+0x44>
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f18:	4b8d      	ldr	r3, [pc, #564]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d05b      	beq.n	8006fdc <HAL_RCC_OscConfig+0x108>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d157      	bne.n	8006fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e2d9      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f38:	d106      	bne.n	8006f48 <HAL_RCC_OscConfig+0x74>
 8006f3a:	4b85      	ldr	r3, [pc, #532]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a84      	ldr	r2, [pc, #528]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	e01d      	b.n	8006f84 <HAL_RCC_OscConfig+0xb0>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCC_OscConfig+0x98>
 8006f52:	4b7f      	ldr	r3, [pc, #508]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a7e      	ldr	r2, [pc, #504]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a7b      	ldr	r2, [pc, #492]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	e00b      	b.n	8006f84 <HAL_RCC_OscConfig+0xb0>
 8006f6c:	4b78      	ldr	r3, [pc, #480]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a77      	ldr	r2, [pc, #476]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	4b75      	ldr	r3, [pc, #468]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a74      	ldr	r2, [pc, #464]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d013      	beq.n	8006fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8c:	f7fd f870 	bl	8004070 <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f94:	f7fd f86c 	bl	8004070 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b64      	cmp	r3, #100	@ 0x64
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e29e      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0f0      	beq.n	8006f94 <HAL_RCC_OscConfig+0xc0>
 8006fb2:	e014      	b.n	8006fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb4:	f7fd f85c 	bl	8004070 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fbc:	f7fd f858 	bl	8004070 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b64      	cmp	r3, #100	@ 0x64
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e28a      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fce:	4b60      	ldr	r3, [pc, #384]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0xe8>
 8006fda:	e000      	b.n	8006fde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d075      	beq.n	80070d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fea:	4b59      	ldr	r3, [pc, #356]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 030c 	and.w	r3, r3, #12
 8006ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ff4:	4b56      	ldr	r3, [pc, #344]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b0c      	cmp	r3, #12
 8007002:	d102      	bne.n	800700a <HAL_RCC_OscConfig+0x136>
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b02      	cmp	r3, #2
 8007008:	d002      	beq.n	8007010 <HAL_RCC_OscConfig+0x13c>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d11f      	bne.n	8007050 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007010:	4b4f      	ldr	r3, [pc, #316]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_RCC_OscConfig+0x154>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e25d      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007028:	4b49      	ldr	r3, [pc, #292]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	4946      	ldr	r1, [pc, #280]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8007038:	4313      	orrs	r3, r2
 800703a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800703c:	4b45      	ldr	r3, [pc, #276]	@ (8007154 <HAL_RCC_OscConfig+0x280>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f7fc ffc9 	bl	8003fd8 <HAL_InitTick>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d043      	beq.n	80070d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e249      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d023      	beq.n	80070a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007058:	4b3d      	ldr	r3, [pc, #244]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a3c      	ldr	r2, [pc, #240]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 800705e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007064:	f7fd f804 	bl	8004070 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800706c:	f7fd f800 	bl	8004070 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e232      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800707e:	4b34      	ldr	r3, [pc, #208]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0f0      	beq.n	800706c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708a:	4b31      	ldr	r3, [pc, #196]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	061b      	lsls	r3, r3, #24
 8007098:	492d      	ldr	r1, [pc, #180]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 800709a:	4313      	orrs	r3, r2
 800709c:	604b      	str	r3, [r1, #4]
 800709e:	e01a      	b.n	80070d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 80070a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ac:	f7fc ffe0 	bl	8004070 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b4:	f7fc ffdc 	bl	8004070 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e20e      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070c6:	4b22      	ldr	r3, [pc, #136]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1f0      	bne.n	80070b4 <HAL_RCC_OscConfig+0x1e0>
 80070d2:	e000      	b.n	80070d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d041      	beq.n	8007166 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01c      	beq.n	8007124 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ea:	4b19      	ldr	r3, [pc, #100]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 80070ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070f0:	4a17      	ldr	r2, [pc, #92]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 80070f2:	f043 0301 	orr.w	r3, r3, #1
 80070f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fa:	f7fc ffb9 	bl	8004070 <HAL_GetTick>
 80070fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007102:	f7fc ffb5 	bl	8004070 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e1e7      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007114:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8007116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0ef      	beq.n	8007102 <HAL_RCC_OscConfig+0x22e>
 8007122:	e020      	b.n	8007166 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007124:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 8007126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800712a:	4a09      	ldr	r2, [pc, #36]	@ (8007150 <HAL_RCC_OscConfig+0x27c>)
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007134:	f7fc ff9c 	bl	8004070 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800713a:	e00d      	b.n	8007158 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800713c:	f7fc ff98 	bl	8004070 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d906      	bls.n	8007158 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e1ca      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
 800714e:	bf00      	nop
 8007150:	40021000 	.word	0x40021000
 8007154:	200003bc 	.word	0x200003bc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007158:	4b8c      	ldr	r3, [pc, #560]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800715a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1ea      	bne.n	800713c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80a6 	beq.w	80072c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007174:	2300      	movs	r3, #0
 8007176:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007178:	4b84      	ldr	r3, [pc, #528]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800717a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <HAL_RCC_OscConfig+0x2b4>
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <HAL_RCC_OscConfig+0x2b6>
 8007188:	2300      	movs	r3, #0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800718e:	4b7f      	ldr	r3, [pc, #508]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007192:	4a7e      	ldr	r2, [pc, #504]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007198:	6593      	str	r3, [r2, #88]	@ 0x58
 800719a:	4b7c      	ldr	r3, [pc, #496]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800719c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80071a6:	2301      	movs	r3, #1
 80071a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071aa:	4b79      	ldr	r3, [pc, #484]	@ (8007390 <HAL_RCC_OscConfig+0x4bc>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d118      	bne.n	80071e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071b6:	4b76      	ldr	r3, [pc, #472]	@ (8007390 <HAL_RCC_OscConfig+0x4bc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a75      	ldr	r2, [pc, #468]	@ (8007390 <HAL_RCC_OscConfig+0x4bc>)
 80071bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071c2:	f7fc ff55 	bl	8004070 <HAL_GetTick>
 80071c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c8:	e008      	b.n	80071dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ca:	f7fc ff51 	bl	8004070 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e183      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007390 <HAL_RCC_OscConfig+0x4bc>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0f0      	beq.n	80071ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d108      	bne.n	8007202 <HAL_RCC_OscConfig+0x32e>
 80071f0:	4b66      	ldr	r3, [pc, #408]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f6:	4a65      	ldr	r2, [pc, #404]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007200:	e024      	b.n	800724c <HAL_RCC_OscConfig+0x378>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	2b05      	cmp	r3, #5
 8007208:	d110      	bne.n	800722c <HAL_RCC_OscConfig+0x358>
 800720a:	4b60      	ldr	r3, [pc, #384]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800720c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007210:	4a5e      	ldr	r2, [pc, #376]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007212:	f043 0304 	orr.w	r3, r3, #4
 8007216:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800721a:	4b5c      	ldr	r3, [pc, #368]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800721c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007220:	4a5a      	ldr	r2, [pc, #360]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800722a:	e00f      	b.n	800724c <HAL_RCC_OscConfig+0x378>
 800722c:	4b57      	ldr	r3, [pc, #348]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007232:	4a56      	ldr	r2, [pc, #344]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800723c:	4b53      	ldr	r3, [pc, #332]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007242:	4a52      	ldr	r2, [pc, #328]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007244:	f023 0304 	bic.w	r3, r3, #4
 8007248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d016      	beq.n	8007282 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007254:	f7fc ff0c 	bl	8004070 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800725a:	e00a      	b.n	8007272 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800725c:	f7fc ff08 	bl	8004070 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726a:	4293      	cmp	r3, r2
 800726c:	d901      	bls.n	8007272 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e138      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007272:	4b46      	ldr	r3, [pc, #280]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0ed      	beq.n	800725c <HAL_RCC_OscConfig+0x388>
 8007280:	e015      	b.n	80072ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007282:	f7fc fef5 	bl	8004070 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007288:	e00a      	b.n	80072a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fc fef1 	bl	8004070 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e121      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072a0:	4b3a      	ldr	r3, [pc, #232]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ed      	bne.n	800728a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072ae:	7ffb      	ldrb	r3, [r7, #31]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d105      	bne.n	80072c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072b4:	4b35      	ldr	r3, [pc, #212]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 80072b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b8:	4a34      	ldr	r2, [pc, #208]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 80072ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d03c      	beq.n	8007346 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01c      	beq.n	800730e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072d4:	4b2d      	ldr	r3, [pc, #180]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 80072d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072da:	4a2c      	ldr	r2, [pc, #176]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 80072dc:	f043 0301 	orr.w	r3, r3, #1
 80072e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e4:	f7fc fec4 	bl	8004070 <HAL_GetTick>
 80072e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072ec:	f7fc fec0 	bl	8004070 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e0f2      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072fe:	4b23      	ldr	r3, [pc, #140]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007300:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0ef      	beq.n	80072ec <HAL_RCC_OscConfig+0x418>
 800730c:	e01b      	b.n	8007346 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800730e:	4b1f      	ldr	r3, [pc, #124]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007314:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007316:	f023 0301 	bic.w	r3, r3, #1
 800731a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731e:	f7fc fea7 	bl	8004070 <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007326:	f7fc fea3 	bl	8004070 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e0d5      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007338:	4b14      	ldr	r3, [pc, #80]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800733a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1ef      	bne.n	8007326 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80c9 	beq.w	80074e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007350:	4b0e      	ldr	r3, [pc, #56]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 030c 	and.w	r3, r3, #12
 8007358:	2b0c      	cmp	r3, #12
 800735a:	f000 8083 	beq.w	8007464 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d15e      	bne.n	8007424 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007366:	4b09      	ldr	r3, [pc, #36]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a08      	ldr	r2, [pc, #32]	@ (800738c <HAL_RCC_OscConfig+0x4b8>)
 800736c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007372:	f7fc fe7d 	bl	8004070 <HAL_GetTick>
 8007376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007378:	e00c      	b.n	8007394 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800737a:	f7fc fe79 	bl	8004070 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d905      	bls.n	8007394 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e0ab      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
 800738c:	40021000 	.word	0x40021000
 8007390:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007394:	4b55      	ldr	r3, [pc, #340]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1ec      	bne.n	800737a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073a0:	4b52      	ldr	r3, [pc, #328]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	4b52      	ldr	r3, [pc, #328]	@ (80074f0 <HAL_RCC_OscConfig+0x61c>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6a11      	ldr	r1, [r2, #32]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073b0:	3a01      	subs	r2, #1
 80073b2:	0112      	lsls	r2, r2, #4
 80073b4:	4311      	orrs	r1, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80073ba:	0212      	lsls	r2, r2, #8
 80073bc:	4311      	orrs	r1, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80073c2:	0852      	lsrs	r2, r2, #1
 80073c4:	3a01      	subs	r2, #1
 80073c6:	0552      	lsls	r2, r2, #21
 80073c8:	4311      	orrs	r1, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80073ce:	0852      	lsrs	r2, r2, #1
 80073d0:	3a01      	subs	r2, #1
 80073d2:	0652      	lsls	r2, r2, #25
 80073d4:	4311      	orrs	r1, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073da:	06d2      	lsls	r2, r2, #27
 80073dc:	430a      	orrs	r2, r1
 80073de:	4943      	ldr	r1, [pc, #268]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073e4:	4b41      	ldr	r3, [pc, #260]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a40      	ldr	r2, [pc, #256]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 80073ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073f0:	4b3e      	ldr	r3, [pc, #248]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4a3d      	ldr	r2, [pc, #244]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 80073f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fc:	f7fc fe38 	bl	8004070 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007404:	f7fc fe34 	bl	8004070 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e066      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007416:	4b35      	ldr	r3, [pc, #212]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0f0      	beq.n	8007404 <HAL_RCC_OscConfig+0x530>
 8007422:	e05e      	b.n	80074e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007424:	4b31      	ldr	r3, [pc, #196]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a30      	ldr	r2, [pc, #192]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 800742a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800742e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fc fe1e 	bl	8004070 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007438:	f7fc fe1a 	bl	8004070 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e04c      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800744a:	4b28      	ldr	r3, [pc, #160]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007456:	4b25      	ldr	r3, [pc, #148]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	4924      	ldr	r1, [pc, #144]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 800745c:	4b25      	ldr	r3, [pc, #148]	@ (80074f4 <HAL_RCC_OscConfig+0x620>)
 800745e:	4013      	ands	r3, r2
 8007460:	60cb      	str	r3, [r1, #12]
 8007462:	e03e      	b.n	80074e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e039      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007470:	4b1e      	ldr	r3, [pc, #120]	@ (80074ec <HAL_RCC_OscConfig+0x618>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f003 0203 	and.w	r2, r3, #3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	429a      	cmp	r2, r3
 8007482:	d12c      	bne.n	80074de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748e:	3b01      	subs	r3, #1
 8007490:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007492:	429a      	cmp	r2, r3
 8007494:	d123      	bne.n	80074de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d11b      	bne.n	80074de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d113      	bne.n	80074de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	3b01      	subs	r3, #1
 80074c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d109      	bne.n	80074de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d4:	085b      	lsrs	r3, r3, #1
 80074d6:	3b01      	subs	r3, #1
 80074d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074da:	429a      	cmp	r2, r3
 80074dc:	d001      	beq.n	80074e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40021000 	.word	0x40021000
 80074f0:	019f800c 	.word	0x019f800c
 80074f4:	feeefffc 	.word	0xfeeefffc

080074f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e11e      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007510:	4b91      	ldr	r3, [pc, #580]	@ (8007758 <HAL_RCC_ClockConfig+0x260>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d910      	bls.n	8007540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751e:	4b8e      	ldr	r3, [pc, #568]	@ (8007758 <HAL_RCC_ClockConfig+0x260>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f023 020f 	bic.w	r2, r3, #15
 8007526:	498c      	ldr	r1, [pc, #560]	@ (8007758 <HAL_RCC_ClockConfig+0x260>)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	4313      	orrs	r3, r2
 800752c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800752e:	4b8a      	ldr	r3, [pc, #552]	@ (8007758 <HAL_RCC_ClockConfig+0x260>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d001      	beq.n	8007540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e106      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d073      	beq.n	8007634 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d129      	bne.n	80075a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007554:	4b81      	ldr	r3, [pc, #516]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e0f4      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007564:	f000 f99c 	bl	80078a0 <RCC_GetSysClockFreqFromPLLSource>
 8007568:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	4a7c      	ldr	r2, [pc, #496]	@ (8007760 <HAL_RCC_ClockConfig+0x268>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d93f      	bls.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007572:	4b7a      	ldr	r3, [pc, #488]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007586:	2b00      	cmp	r3, #0
 8007588:	d033      	beq.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800758e:	2b00      	cmp	r3, #0
 8007590:	d12f      	bne.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007592:	4b72      	ldr	r3, [pc, #456]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800759a:	4a70      	ldr	r2, [pc, #448]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 800759c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80075a2:	2380      	movs	r3, #128	@ 0x80
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e024      	b.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d107      	bne.n	80075c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075b0:	4b6a      	ldr	r3, [pc, #424]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0c6      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075c0:	4b66      	ldr	r3, [pc, #408]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0be      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80075d0:	f000 f8ce 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 80075d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	4a61      	ldr	r2, [pc, #388]	@ (8007760 <HAL_RCC_ClockConfig+0x268>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d909      	bls.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075de:	4b5f      	ldr	r3, [pc, #380]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075e6:	4a5d      	ldr	r2, [pc, #372]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 80075e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80075ee:	2380      	movs	r3, #128	@ 0x80
 80075f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075f2:	4b5a      	ldr	r3, [pc, #360]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f023 0203 	bic.w	r2, r3, #3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	4957      	ldr	r1, [pc, #348]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007600:	4313      	orrs	r3, r2
 8007602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007604:	f7fc fd34 	bl	8004070 <HAL_GetTick>
 8007608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800760a:	e00a      	b.n	8007622 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800760c:	f7fc fd30 	bl	8004070 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800761a:	4293      	cmp	r3, r2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e095      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007622:	4b4e      	ldr	r3, [pc, #312]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f003 020c 	and.w	r2, r3, #12
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	429a      	cmp	r2, r3
 8007632:	d1eb      	bne.n	800760c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d023      	beq.n	8007688 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800764c:	4b43      	ldr	r3, [pc, #268]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4a42      	ldr	r2, [pc, #264]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007652:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007656:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007664:	4b3d      	ldr	r3, [pc, #244]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800766c:	4a3b      	ldr	r2, [pc, #236]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 800766e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007672:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007674:	4b39      	ldr	r3, [pc, #228]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4936      	ldr	r1, [pc, #216]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007682:	4313      	orrs	r3, r2
 8007684:	608b      	str	r3, [r1, #8]
 8007686:	e008      	b.n	800769a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b80      	cmp	r3, #128	@ 0x80
 800768c:	d105      	bne.n	800769a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800768e:	4b33      	ldr	r3, [pc, #204]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	4a32      	ldr	r2, [pc, #200]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007694:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007698:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800769a:	4b2f      	ldr	r3, [pc, #188]	@ (8007758 <HAL_RCC_ClockConfig+0x260>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d21d      	bcs.n	80076e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007758 <HAL_RCC_ClockConfig+0x260>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f023 020f 	bic.w	r2, r3, #15
 80076b0:	4929      	ldr	r1, [pc, #164]	@ (8007758 <HAL_RCC_ClockConfig+0x260>)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076b8:	f7fc fcda 	bl	8004070 <HAL_GetTick>
 80076bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	e00a      	b.n	80076d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c0:	f7fc fcd6 	bl	8004070 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e03b      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d6:	4b20      	ldr	r3, [pc, #128]	@ (8007758 <HAL_RCC_ClockConfig+0x260>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d1ed      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076f0:	4b1a      	ldr	r3, [pc, #104]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	4917      	ldr	r1, [pc, #92]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800770e:	4b13      	ldr	r3, [pc, #76]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	490f      	ldr	r1, [pc, #60]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007722:	f000 f825 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 8007726:	4602      	mov	r2, r0
 8007728:	4b0c      	ldr	r3, [pc, #48]	@ (800775c <HAL_RCC_ClockConfig+0x264>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	490c      	ldr	r1, [pc, #48]	@ (8007764 <HAL_RCC_ClockConfig+0x26c>)
 8007734:	5ccb      	ldrb	r3, [r1, r3]
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	fa22 f303 	lsr.w	r3, r2, r3
 800773e:	4a0a      	ldr	r2, [pc, #40]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 8007740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007742:	4b0a      	ldr	r3, [pc, #40]	@ (800776c <HAL_RCC_ClockConfig+0x274>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fc fc46 	bl	8003fd8 <HAL_InitTick>
 800774c:	4603      	mov	r3, r0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40022000 	.word	0x40022000
 800775c:	40021000 	.word	0x40021000
 8007760:	04c4b400 	.word	0x04c4b400
 8007764:	0800c5b0 	.word	0x0800c5b0
 8007768:	200003b8 	.word	0x200003b8
 800776c:	200003bc 	.word	0x200003bc

08007770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007776:	4b2c      	ldr	r3, [pc, #176]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 030c 	and.w	r3, r3, #12
 800777e:	2b04      	cmp	r3, #4
 8007780:	d102      	bne.n	8007788 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007782:	4b2a      	ldr	r3, [pc, #168]	@ (800782c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	e047      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007788:	4b27      	ldr	r3, [pc, #156]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 030c 	and.w	r3, r3, #12
 8007790:	2b08      	cmp	r3, #8
 8007792:	d102      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007794:	4b25      	ldr	r3, [pc, #148]	@ (800782c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	e03e      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800779a:	4b23      	ldr	r3, [pc, #140]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 030c 	and.w	r3, r3, #12
 80077a2:	2b0c      	cmp	r3, #12
 80077a4:	d136      	bne.n	8007814 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077a6:	4b20      	ldr	r3, [pc, #128]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	091b      	lsrs	r3, r3, #4
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	3301      	adds	r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d10c      	bne.n	80077de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077c4:	4a19      	ldr	r2, [pc, #100]	@ (800782c <HAL_RCC_GetSysClockFreq+0xbc>)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	4a16      	ldr	r2, [pc, #88]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077ce:	68d2      	ldr	r2, [r2, #12]
 80077d0:	0a12      	lsrs	r2, r2, #8
 80077d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	617b      	str	r3, [r7, #20]
      break;
 80077dc:	e00c      	b.n	80077f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077de:	4a13      	ldr	r2, [pc, #76]	@ (800782c <HAL_RCC_GetSysClockFreq+0xbc>)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	4a10      	ldr	r2, [pc, #64]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e8:	68d2      	ldr	r2, [r2, #12]
 80077ea:	0a12      	lsrs	r2, r2, #8
 80077ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
 80077f4:	617b      	str	r3, [r7, #20]
      break;
 80077f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	0e5b      	lsrs	r3, r3, #25
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	3301      	adds	r3, #1
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	e001      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007818:	693b      	ldr	r3, [r7, #16]
}
 800781a:	4618      	mov	r0, r3
 800781c:	371c      	adds	r7, #28
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40021000 	.word	0x40021000
 800782c:	00f42400 	.word	0x00f42400

08007830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007834:	4b03      	ldr	r3, [pc, #12]	@ (8007844 <HAL_RCC_GetHCLKFreq+0x14>)
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	200003b8 	.word	0x200003b8

08007848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800784c:	f7ff fff0 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b06      	ldr	r3, [pc, #24]	@ (800786c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4904      	ldr	r1, [pc, #16]	@ (8007870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007868:	4618      	mov	r0, r3
 800786a:	bd80      	pop	{r7, pc}
 800786c:	40021000 	.word	0x40021000
 8007870:	0800c5c0 	.word	0x0800c5c0

08007874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007878:	f7ff ffda 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 800787c:	4602      	mov	r2, r0
 800787e:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	0adb      	lsrs	r3, r3, #11
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	4904      	ldr	r1, [pc, #16]	@ (800789c <HAL_RCC_GetPCLK2Freq+0x28>)
 800788a:	5ccb      	ldrb	r3, [r1, r3]
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007894:	4618      	mov	r0, r3
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40021000 	.word	0x40021000
 800789c:	0800c5c0 	.word	0x0800c5c0

080078a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	091b      	lsrs	r3, r3, #4
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	3301      	adds	r3, #1
 80078bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d10c      	bne.n	80078de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078c4:	4a17      	ldr	r2, [pc, #92]	@ (8007924 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	4a14      	ldr	r2, [pc, #80]	@ (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078ce:	68d2      	ldr	r2, [r2, #12]
 80078d0:	0a12      	lsrs	r2, r2, #8
 80078d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078d6:	fb02 f303 	mul.w	r3, r2, r3
 80078da:	617b      	str	r3, [r7, #20]
    break;
 80078dc:	e00c      	b.n	80078f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078de:	4a11      	ldr	r2, [pc, #68]	@ (8007924 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078e8:	68d2      	ldr	r2, [r2, #12]
 80078ea:	0a12      	lsrs	r2, r2, #8
 80078ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078f0:	fb02 f303 	mul.w	r3, r2, r3
 80078f4:	617b      	str	r3, [r7, #20]
    break;
 80078f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078f8:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	0e5b      	lsrs	r3, r3, #25
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	3301      	adds	r3, #1
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007912:	687b      	ldr	r3, [r7, #4]
}
 8007914:	4618      	mov	r0, r3
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40021000 	.word	0x40021000
 8007924:	00f42400 	.word	0x00f42400

08007928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007930:	2300      	movs	r3, #0
 8007932:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007934:	2300      	movs	r3, #0
 8007936:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 8098 	beq.w	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007946:	2300      	movs	r3, #0
 8007948:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800794a:	4b43      	ldr	r3, [pc, #268]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800794c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10d      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007956:	4b40      	ldr	r3, [pc, #256]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800795a:	4a3f      	ldr	r2, [pc, #252]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800795c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007960:	6593      	str	r3, [r2, #88]	@ 0x58
 8007962:	4b3d      	ldr	r3, [pc, #244]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800796a:	60bb      	str	r3, [r7, #8]
 800796c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800796e:	2301      	movs	r3, #1
 8007970:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007972:	4b3a      	ldr	r3, [pc, #232]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a39      	ldr	r2, [pc, #228]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800797c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800797e:	f7fc fb77 	bl	8004070 <HAL_GetTick>
 8007982:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007984:	e009      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007986:	f7fc fb73 	bl	8004070 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d902      	bls.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	74fb      	strb	r3, [r7, #19]
        break;
 8007998:	e005      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800799a:	4b30      	ldr	r3, [pc, #192]	@ (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0ef      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80079a6:	7cfb      	ldrb	r3, [r7, #19]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d159      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01e      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d019      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079c8:	4b23      	ldr	r3, [pc, #140]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079d4:	4b20      	ldr	r3, [pc, #128]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079da:	4a1f      	ldr	r2, [pc, #124]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079f4:	4a18      	ldr	r2, [pc, #96]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d016      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a06:	f7fc fb33 	bl	8004070 <HAL_GetTick>
 8007a0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a0c:	e00b      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a0e:	f7fc fb2f 	bl	8004070 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d902      	bls.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	74fb      	strb	r3, [r7, #19]
            break;
 8007a24:	e006      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a26:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0ec      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007a34:	7cfb      	ldrb	r3, [r7, #19]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a3a:	4b07      	ldr	r3, [pc, #28]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a48:	4903      	ldr	r1, [pc, #12]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a50:	e008      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a52:	7cfb      	ldrb	r3, [r7, #19]
 8007a54:	74bb      	strb	r3, [r7, #18]
 8007a56:	e005      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	7cfb      	ldrb	r3, [r7, #19]
 8007a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a64:	7c7b      	ldrb	r3, [r7, #17]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d105      	bne.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a6a:	4ba7      	ldr	r3, [pc, #668]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6e:	4aa6      	ldr	r2, [pc, #664]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a82:	4ba1      	ldr	r3, [pc, #644]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a88:	f023 0203 	bic.w	r2, r3, #3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	499d      	ldr	r1, [pc, #628]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00a      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007aa4:	4b98      	ldr	r3, [pc, #608]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aaa:	f023 020c 	bic.w	r2, r3, #12
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	4995      	ldr	r1, [pc, #596]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ac6:	4b90      	ldr	r3, [pc, #576]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007acc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	498c      	ldr	r1, [pc, #560]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ae8:	4b87      	ldr	r3, [pc, #540]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	4984      	ldr	r1, [pc, #528]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0310 	and.w	r3, r3, #16
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	497b      	ldr	r1, [pc, #492]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b2c:	4b76      	ldr	r3, [pc, #472]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	4973      	ldr	r1, [pc, #460]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	496a      	ldr	r1, [pc, #424]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b70:	4b65      	ldr	r3, [pc, #404]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	4962      	ldr	r1, [pc, #392]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b92:	4b5d      	ldr	r3, [pc, #372]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	4959      	ldr	r1, [pc, #356]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bb4:	4b54      	ldr	r3, [pc, #336]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bba:	f023 0203 	bic.w	r2, r3, #3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc2:	4951      	ldr	r1, [pc, #324]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be4:	4948      	ldr	r1, [pc, #288]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d015      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bf8:	4b43      	ldr	r3, [pc, #268]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c06:	4940      	ldr	r1, [pc, #256]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c16:	d105      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c18:	4b3b      	ldr	r3, [pc, #236]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4a3a      	ldr	r2, [pc, #232]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c22:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d015      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c30:	4b35      	ldr	r3, [pc, #212]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c3e:	4932      	ldr	r1, [pc, #200]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c4e:	d105      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c50:	4b2d      	ldr	r3, [pc, #180]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	4a2c      	ldr	r2, [pc, #176]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c5a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d015      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c68:	4b27      	ldr	r3, [pc, #156]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	4924      	ldr	r1, [pc, #144]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c86:	d105      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c88:	4b1f      	ldr	r3, [pc, #124]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d015      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ca0:	4b19      	ldr	r3, [pc, #100]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cae:	4916      	ldr	r1, [pc, #88]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cbe:	d105      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc0:	4b11      	ldr	r3, [pc, #68]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	4a10      	ldr	r2, [pc, #64]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d019      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	4908      	ldr	r1, [pc, #32]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cf6:	d109      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf8:	4b03      	ldr	r3, [pc, #12]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	4a02      	ldr	r2, [pc, #8]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d02:	60d3      	str	r3, [r2, #12]
 8007d04:	e002      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007d06:	bf00      	nop
 8007d08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d015      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d18:	4b29      	ldr	r3, [pc, #164]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d26:	4926      	ldr	r1, [pc, #152]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d36:	d105      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d38:	4b21      	ldr	r3, [pc, #132]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	4a20      	ldr	r2, [pc, #128]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d015      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007d50:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d5e:	4918      	ldr	r1, [pc, #96]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d6e:	d105      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d70:	4b13      	ldr	r3, [pc, #76]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	4a12      	ldr	r2, [pc, #72]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d015      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d88:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d96:	490a      	ldr	r1, [pc, #40]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007da6:	d105      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007da8:	4b05      	ldr	r3, [pc, #20]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	4a04      	ldr	r2, [pc, #16]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007db2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007db4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	40021000 	.word	0x40021000

08007dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e09d      	b.n	8007f12 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d108      	bne.n	8007df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007de6:	d009      	beq.n	8007dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	61da      	str	r2, [r3, #28]
 8007dee:	e005      	b.n	8007dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fb fab8 	bl	800338c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e3c:	d902      	bls.n	8007e44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	e002      	b.n	8007e4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e52:	d007      	beq.n	8007e64 <HAL_SPI_Init+0xa0>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e5c:	d002      	beq.n	8007e64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea6:	ea42 0103 	orr.w	r1, r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	0c1b      	lsrs	r3, r3, #16
 8007ec0:	f003 0204 	and.w	r2, r3, #4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec8:	f003 0310 	and.w	r3, r3, #16
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ed2:	f003 0308 	and.w	r3, r3, #8
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ee0:	ea42 0103 	orr.w	r1, r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f2a:	f7fc f8a1 	bl	8004070 <HAL_GetTick>
 8007f2e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007f30:	88fb      	ldrh	r3, [r7, #6]
 8007f32:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d001      	beq.n	8007f44 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007f40:	2302      	movs	r3, #2
 8007f42:	e15c      	b.n	80081fe <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <HAL_SPI_Transmit+0x36>
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e154      	b.n	80081fe <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_SPI_Transmit+0x48>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e14d      	b.n	80081fe <HAL_SPI_Transmit+0x2e4>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2203      	movs	r2, #3
 8007f6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	88fa      	ldrh	r2, [r7, #6]
 8007f82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	88fa      	ldrh	r2, [r7, #6]
 8007f88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fb4:	d10f      	bne.n	8007fd6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe0:	2b40      	cmp	r3, #64	@ 0x40
 8007fe2:	d007      	beq.n	8007ff4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ffc:	d952      	bls.n	80080a4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_SPI_Transmit+0xf2>
 8008006:	8b7b      	ldrh	r3, [r7, #26]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d145      	bne.n	8008098 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008010:	881a      	ldrh	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801c:	1c9a      	adds	r2, r3, #2
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008030:	e032      	b.n	8008098 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b02      	cmp	r3, #2
 800803e:	d112      	bne.n	8008066 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008044:	881a      	ldrh	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008050:	1c9a      	adds	r2, r3, #2
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008064:	e018      	b.n	8008098 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008066:	f7fc f803 	bl	8004070 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d803      	bhi.n	800807e <HAL_SPI_Transmit+0x164>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807c:	d102      	bne.n	8008084 <HAL_SPI_Transmit+0x16a>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e0b2      	b.n	80081fe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800809c:	b29b      	uxth	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1c7      	bne.n	8008032 <HAL_SPI_Transmit+0x118>
 80080a2:	e083      	b.n	80081ac <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <HAL_SPI_Transmit+0x198>
 80080ac:	8b7b      	ldrh	r3, [r7, #26]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d177      	bne.n	80081a2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d912      	bls.n	80080e2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c0:	881a      	ldrh	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080cc:	1c9a      	adds	r2, r3, #2
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b02      	subs	r3, #2
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080e0:	e05f      	b.n	80081a2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	330c      	adds	r3, #12
 80080ec:	7812      	ldrb	r2, [r2, #0]
 80080ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080fe:	b29b      	uxth	r3, r3
 8008100:	3b01      	subs	r3, #1
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008108:	e04b      	b.n	80081a2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b02      	cmp	r3, #2
 8008116:	d12b      	bne.n	8008170 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b01      	cmp	r3, #1
 8008120:	d912      	bls.n	8008148 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008126:	881a      	ldrh	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008132:	1c9a      	adds	r2, r3, #2
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b02      	subs	r3, #2
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008146:	e02c      	b.n	80081a2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	330c      	adds	r3, #12
 8008152:	7812      	ldrb	r2, [r2, #0]
 8008154:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008164:	b29b      	uxth	r3, r3
 8008166:	3b01      	subs	r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800816e:	e018      	b.n	80081a2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008170:	f7fb ff7e 	bl	8004070 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d803      	bhi.n	8008188 <HAL_SPI_Transmit+0x26e>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008186:	d102      	bne.n	800818e <HAL_SPI_Transmit+0x274>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d109      	bne.n	80081a2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e02d      	b.n	80081fe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1ae      	bne.n	800810a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fb65 	bl	8008880 <SPI_EndRxTxTransaction>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e000      	b.n	80081fe <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80081fc:	2300      	movs	r3, #0
  }
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3720      	adds	r7, #32
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b08a      	sub	sp, #40	@ 0x28
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008214:	2301      	movs	r3, #1
 8008216:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008218:	f7fb ff2a 	bl	8004070 <HAL_GetTick>
 800821c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008224:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800822c:	887b      	ldrh	r3, [r7, #2]
 800822e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008230:	887b      	ldrh	r3, [r7, #2]
 8008232:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008234:	7ffb      	ldrb	r3, [r7, #31]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d00c      	beq.n	8008254 <HAL_SPI_TransmitReceive+0x4e>
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008240:	d106      	bne.n	8008250 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <HAL_SPI_TransmitReceive+0x4a>
 800824a:	7ffb      	ldrb	r3, [r7, #31]
 800824c:	2b04      	cmp	r3, #4
 800824e:	d001      	beq.n	8008254 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008250:	2302      	movs	r3, #2
 8008252:	e1f3      	b.n	800863c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <HAL_SPI_TransmitReceive+0x60>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <HAL_SPI_TransmitReceive+0x60>
 8008260:	887b      	ldrh	r3, [r7, #2]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e1e8      	b.n	800863c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008270:	2b01      	cmp	r3, #1
 8008272:	d101      	bne.n	8008278 <HAL_SPI_TransmitReceive+0x72>
 8008274:	2302      	movs	r3, #2
 8008276:	e1e1      	b.n	800863c <HAL_SPI_TransmitReceive+0x436>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b04      	cmp	r3, #4
 800828a:	d003      	beq.n	8008294 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2205      	movs	r2, #5
 8008290:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	887a      	ldrh	r2, [r7, #2]
 80082a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	887a      	ldrh	r2, [r7, #2]
 80082ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	887a      	ldrh	r2, [r7, #2]
 80082ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	887a      	ldrh	r2, [r7, #2]
 80082c0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082d6:	d802      	bhi.n	80082de <HAL_SPI_TransmitReceive+0xd8>
 80082d8:	8abb      	ldrh	r3, [r7, #20]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d908      	bls.n	80082f0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80082ec:	605a      	str	r2, [r3, #4]
 80082ee:	e007      	b.n	8008300 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830a:	2b40      	cmp	r3, #64	@ 0x40
 800830c:	d007      	beq.n	800831e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800831c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008326:	f240 8083 	bls.w	8008430 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <HAL_SPI_TransmitReceive+0x132>
 8008332:	8afb      	ldrh	r3, [r7, #22]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d16f      	bne.n	8008418 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833c:	881a      	ldrh	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	1c9a      	adds	r2, r3, #2
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800835c:	e05c      	b.n	8008418 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	2b02      	cmp	r3, #2
 800836a:	d11b      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x19e>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008370:	b29b      	uxth	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d016      	beq.n	80083a4 <HAL_SPI_TransmitReceive+0x19e>
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	2b01      	cmp	r3, #1
 800837a:	d113      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	881a      	ldrh	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838c:	1c9a      	adds	r2, r3, #2
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d11c      	bne.n	80083ec <HAL_SPI_TransmitReceive+0x1e6>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d016      	beq.n	80083ec <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c8:	b292      	uxth	r2, r2
 80083ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d0:	1c9a      	adds	r2, r3, #2
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083e8:	2301      	movs	r3, #1
 80083ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083ec:	f7fb fe40 	bl	8004070 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d80d      	bhi.n	8008418 <HAL_SPI_TransmitReceive+0x212>
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008402:	d009      	beq.n	8008418 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e111      	b.n	800863c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d19d      	bne.n	800835e <HAL_SPI_TransmitReceive+0x158>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d197      	bne.n	800835e <HAL_SPI_TransmitReceive+0x158>
 800842e:	e0e5      	b.n	80085fc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <HAL_SPI_TransmitReceive+0x23a>
 8008438:	8afb      	ldrh	r3, [r7, #22]
 800843a:	2b01      	cmp	r3, #1
 800843c:	f040 80d1 	bne.w	80085e2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b01      	cmp	r3, #1
 8008448:	d912      	bls.n	8008470 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844e:	881a      	ldrh	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845a:	1c9a      	adds	r2, r3, #2
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b02      	subs	r3, #2
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800846e:	e0b8      	b.n	80085e2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	330c      	adds	r3, #12
 800847a:	7812      	ldrb	r2, [r2, #0]
 800847c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008496:	e0a4      	b.n	80085e2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d134      	bne.n	8008510 <HAL_SPI_TransmitReceive+0x30a>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d02f      	beq.n	8008510 <HAL_SPI_TransmitReceive+0x30a>
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d12c      	bne.n	8008510 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d912      	bls.n	80084e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	881a      	ldrh	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d0:	1c9a      	adds	r2, r3, #2
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b02      	subs	r3, #2
 80084de:	b29a      	uxth	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084e4:	e012      	b.n	800850c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	330c      	adds	r3, #12
 80084f0:	7812      	ldrb	r2, [r2, #0]
 80084f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008502:	b29b      	uxth	r3, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b01      	cmp	r3, #1
 800851c:	d148      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x3aa>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d042      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b01      	cmp	r3, #1
 8008534:	d923      	bls.n	800857e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008540:	b292      	uxth	r2, r2
 8008542:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008548:	1c9a      	adds	r2, r3, #2
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b02      	subs	r3, #2
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008566:	b29b      	uxth	r3, r3
 8008568:	2b01      	cmp	r3, #1
 800856a:	d81f      	bhi.n	80085ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800857a:	605a      	str	r2, [r3, #4]
 800857c:	e016      	b.n	80085ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f103 020c 	add.w	r2, r3, #12
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858a:	7812      	ldrb	r2, [r2, #0]
 800858c:	b2d2      	uxtb	r2, r2
 800858e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085ac:	2301      	movs	r3, #1
 80085ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085b0:	f7fb fd5e 	bl	8004070 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085bc:	429a      	cmp	r2, r3
 80085be:	d803      	bhi.n	80085c8 <HAL_SPI_TransmitReceive+0x3c2>
 80085c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c6:	d102      	bne.n	80085ce <HAL_SPI_TransmitReceive+0x3c8>
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d109      	bne.n	80085e2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e02c      	b.n	800863c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f47f af55 	bne.w	8008498 <HAL_SPI_TransmitReceive+0x292>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f47f af4e 	bne.w	8008498 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085fc:	6a3a      	ldr	r2, [r7, #32]
 80085fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 f93d 	bl	8008880 <SPI_EndRxTxTransaction>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d008      	beq.n	800861e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2220      	movs	r2, #32
 8008610:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e00e      	b.n	800863c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e000      	b.n	800863c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800863a:	2300      	movs	r3, #0
  }
}
 800863c:	4618      	mov	r0, r3
 800863e:	3728      	adds	r7, #40	@ 0x28
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	4613      	mov	r3, r2
 8008652:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008654:	f7fb fd0c 	bl	8004070 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	1a9b      	subs	r3, r3, r2
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	4413      	add	r3, r2
 8008662:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008664:	f7fb fd04 	bl	8004070 <HAL_GetTick>
 8008668:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800866a:	4b39      	ldr	r3, [pc, #228]	@ (8008750 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	015b      	lsls	r3, r3, #5
 8008670:	0d1b      	lsrs	r3, r3, #20
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	fb02 f303 	mul.w	r3, r2, r3
 8008678:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800867a:	e054      	b.n	8008726 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	d050      	beq.n	8008726 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008684:	f7fb fcf4 	bl	8004070 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	429a      	cmp	r2, r3
 8008692:	d902      	bls.n	800869a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d13d      	bne.n	8008716 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80086a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086b2:	d111      	bne.n	80086d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086bc:	d004      	beq.n	80086c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086c6:	d107      	bne.n	80086d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086e0:	d10f      	bne.n	8008702 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e017      	b.n	8008746 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	3b01      	subs	r3, #1
 8008724:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4013      	ands	r3, r2
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	429a      	cmp	r2, r3
 8008734:	bf0c      	ite	eq
 8008736:	2301      	moveq	r3, #1
 8008738:	2300      	movne	r3, #0
 800873a:	b2db      	uxtb	r3, r3
 800873c:	461a      	mov	r2, r3
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	429a      	cmp	r2, r3
 8008742:	d19b      	bne.n	800867c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	200003b8 	.word	0x200003b8

08008754 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08a      	sub	sp, #40	@ 0x28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008766:	f7fb fc83 	bl	8004070 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	4413      	add	r3, r2
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008776:	f7fb fc7b 	bl	8004070 <HAL_GetTick>
 800877a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	330c      	adds	r3, #12
 8008782:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008784:	4b3d      	ldr	r3, [pc, #244]	@ (800887c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	00da      	lsls	r2, r3, #3
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	0d1b      	lsrs	r3, r3, #20
 8008794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008796:	fb02 f303 	mul.w	r3, r2, r3
 800879a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800879c:	e060      	b.n	8008860 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80087a4:	d107      	bne.n	80087b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d050      	beq.n	8008860 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087be:	f7fb fc57 	bl	8004070 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d902      	bls.n	80087d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d13d      	bne.n	8008850 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80087e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087ec:	d111      	bne.n	8008812 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087f6:	d004      	beq.n	8008802 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008800:	d107      	bne.n	8008812 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008810:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800881a:	d10f      	bne.n	800883c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800883a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e010      	b.n	8008872 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	3b01      	subs	r3, #1
 800885e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	4013      	ands	r3, r2
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d196      	bne.n	800879e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3728      	adds	r7, #40	@ 0x28
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200003b8 	.word	0x200003b8

08008880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af02      	add	r7, sp, #8
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2200      	movs	r2, #0
 8008894:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f7ff ff5b 	bl	8008754 <SPI_WaitFifoStateUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088a8:	f043 0220 	orr.w	r2, r3, #32
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e027      	b.n	8008904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2200      	movs	r2, #0
 80088bc:	2180      	movs	r1, #128	@ 0x80
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7ff fec0 	bl	8008644 <SPI_WaitFlagStateUntilTimeout>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ce:	f043 0220 	orr.w	r2, r3, #32
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e014      	b.n	8008904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7ff ff34 	bl	8008754 <SPI_WaitFifoStateUntilTimeout>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088f6:	f043 0220 	orr.w	r2, r3, #32
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e000      	b.n	8008904 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e049      	b.n	80089b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fb f8a0 	bl	8003a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3304      	adds	r3, #4
 8008948:	4619      	mov	r1, r3
 800894a:	4610      	mov	r0, r2
 800894c:	f001 f878 	bl	8009a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e049      	b.n	8008a60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f841 	bl	8008a68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2202      	movs	r2, #2
 80089ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4610      	mov	r0, r2
 80089fa:	f001 f821 	bl	8009a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d109      	bne.n	8008aa0 <HAL_TIM_PWM_Start+0x24>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	bf14      	ite	ne
 8008a98:	2301      	movne	r3, #1
 8008a9a:	2300      	moveq	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	e03c      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d109      	bne.n	8008aba <HAL_TIM_PWM_Start+0x3e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	bf14      	ite	ne
 8008ab2:	2301      	movne	r3, #1
 8008ab4:	2300      	moveq	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	e02f      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d109      	bne.n	8008ad4 <HAL_TIM_PWM_Start+0x58>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	bf14      	ite	ne
 8008acc:	2301      	movne	r3, #1
 8008ace:	2300      	moveq	r3, #0
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	e022      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b0c      	cmp	r3, #12
 8008ad8:	d109      	bne.n	8008aee <HAL_TIM_PWM_Start+0x72>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	bf14      	ite	ne
 8008ae6:	2301      	movne	r3, #1
 8008ae8:	2300      	moveq	r3, #0
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	e015      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b10      	cmp	r3, #16
 8008af2:	d109      	bne.n	8008b08 <HAL_TIM_PWM_Start+0x8c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	bf14      	ite	ne
 8008b00:	2301      	movne	r3, #1
 8008b02:	2300      	moveq	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	e008      	b.n	8008b1a <HAL_TIM_PWM_Start+0x9e>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	bf14      	ite	ne
 8008b14:	2301      	movne	r3, #1
 8008b16:	2300      	moveq	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e0a6      	b.n	8008c70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <HAL_TIM_PWM_Start+0xb6>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b30:	e023      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d104      	bne.n	8008b42 <HAL_TIM_PWM_Start+0xc6>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b40:	e01b      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d104      	bne.n	8008b52 <HAL_TIM_PWM_Start+0xd6>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b50:	e013      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b0c      	cmp	r3, #12
 8008b56:	d104      	bne.n	8008b62 <HAL_TIM_PWM_Start+0xe6>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b60:	e00b      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b10      	cmp	r3, #16
 8008b66:	d104      	bne.n	8008b72 <HAL_TIM_PWM_Start+0xf6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b70:	e003      	b.n	8008b7a <HAL_TIM_PWM_Start+0xfe>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2202      	movs	r2, #2
 8008b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 fd00 	bl	800a588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8008c78 <HAL_TIM_PWM_Start+0x1fc>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d018      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x148>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a39      	ldr	r2, [pc, #228]	@ (8008c7c <HAL_TIM_PWM_Start+0x200>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d013      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x148>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a37      	ldr	r2, [pc, #220]	@ (8008c80 <HAL_TIM_PWM_Start+0x204>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00e      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x148>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a36      	ldr	r2, [pc, #216]	@ (8008c84 <HAL_TIM_PWM_Start+0x208>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d009      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x148>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a34      	ldr	r2, [pc, #208]	@ (8008c88 <HAL_TIM_PWM_Start+0x20c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x148>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a33      	ldr	r2, [pc, #204]	@ (8008c8c <HAL_TIM_PWM_Start+0x210>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIM_PWM_Start+0x14c>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <HAL_TIM_PWM_Start+0x14e>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a25      	ldr	r2, [pc, #148]	@ (8008c78 <HAL_TIM_PWM_Start+0x1fc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d022      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x1b2>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf0:	d01d      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x1b2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a26      	ldr	r2, [pc, #152]	@ (8008c90 <HAL_TIM_PWM_Start+0x214>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d018      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x1b2>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a24      	ldr	r2, [pc, #144]	@ (8008c94 <HAL_TIM_PWM_Start+0x218>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d013      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x1b2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a23      	ldr	r2, [pc, #140]	@ (8008c98 <HAL_TIM_PWM_Start+0x21c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00e      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x1b2>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a19      	ldr	r2, [pc, #100]	@ (8008c7c <HAL_TIM_PWM_Start+0x200>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d009      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x1b2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a18      	ldr	r2, [pc, #96]	@ (8008c80 <HAL_TIM_PWM_Start+0x204>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d004      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x1b2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a18      	ldr	r2, [pc, #96]	@ (8008c8c <HAL_TIM_PWM_Start+0x210>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d115      	bne.n	8008c5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	4b19      	ldr	r3, [pc, #100]	@ (8008c9c <HAL_TIM_PWM_Start+0x220>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b06      	cmp	r3, #6
 8008c3e:	d015      	beq.n	8008c6c <HAL_TIM_PWM_Start+0x1f0>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c46:	d011      	beq.n	8008c6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0201 	orr.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c58:	e008      	b.n	8008c6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f042 0201 	orr.w	r2, r2, #1
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e000      	b.n	8008c6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	40012c00 	.word	0x40012c00
 8008c7c:	40013400 	.word	0x40013400
 8008c80:	40014000 	.word	0x40014000
 8008c84:	40014400 	.word	0x40014400
 8008c88:	40014800 	.word	0x40014800
 8008c8c:	40015000 	.word	0x40015000
 8008c90:	40000400 	.word	0x40000400
 8008c94:	40000800 	.word	0x40000800
 8008c98:	40000c00 	.word	0x40000c00
 8008c9c:	00010007 	.word	0x00010007

08008ca0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 fc68 	bl	800a588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a40      	ldr	r2, [pc, #256]	@ (8008dc0 <HAL_TIM_PWM_Stop+0x120>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d018      	beq.n	8008cf4 <HAL_TIM_PWM_Stop+0x54>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8008dc4 <HAL_TIM_PWM_Stop+0x124>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d013      	beq.n	8008cf4 <HAL_TIM_PWM_Stop+0x54>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8008dc8 <HAL_TIM_PWM_Stop+0x128>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00e      	beq.n	8008cf4 <HAL_TIM_PWM_Stop+0x54>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a3c      	ldr	r2, [pc, #240]	@ (8008dcc <HAL_TIM_PWM_Stop+0x12c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d009      	beq.n	8008cf4 <HAL_TIM_PWM_Stop+0x54>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8008dd0 <HAL_TIM_PWM_Stop+0x130>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d004      	beq.n	8008cf4 <HAL_TIM_PWM_Stop+0x54>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a39      	ldr	r2, [pc, #228]	@ (8008dd4 <HAL_TIM_PWM_Stop+0x134>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d101      	bne.n	8008cf8 <HAL_TIM_PWM_Stop+0x58>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e000      	b.n	8008cfa <HAL_TIM_PWM_Stop+0x5a>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d017      	beq.n	8008d2e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6a1a      	ldr	r2, [r3, #32]
 8008d04:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d08:	4013      	ands	r3, r2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10f      	bne.n	8008d2e <HAL_TIM_PWM_Stop+0x8e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6a1a      	ldr	r2, [r3, #32]
 8008d14:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008d18:	4013      	ands	r3, r2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d107      	bne.n	8008d2e <HAL_TIM_PWM_Stop+0x8e>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6a1a      	ldr	r2, [r3, #32]
 8008d34:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d38:	4013      	ands	r3, r2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10f      	bne.n	8008d5e <HAL_TIM_PWM_Stop+0xbe>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6a1a      	ldr	r2, [r3, #32]
 8008d44:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008d48:	4013      	ands	r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <HAL_TIM_PWM_Stop+0xbe>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0201 	bic.w	r2, r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d104      	bne.n	8008d6e <HAL_TIM_PWM_Stop+0xce>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d6c:	e023      	b.n	8008db6 <HAL_TIM_PWM_Stop+0x116>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d104      	bne.n	8008d7e <HAL_TIM_PWM_Stop+0xde>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d7c:	e01b      	b.n	8008db6 <HAL_TIM_PWM_Stop+0x116>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d104      	bne.n	8008d8e <HAL_TIM_PWM_Stop+0xee>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d8c:	e013      	b.n	8008db6 <HAL_TIM_PWM_Stop+0x116>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b0c      	cmp	r3, #12
 8008d92:	d104      	bne.n	8008d9e <HAL_TIM_PWM_Stop+0xfe>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d9c:	e00b      	b.n	8008db6 <HAL_TIM_PWM_Stop+0x116>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b10      	cmp	r3, #16
 8008da2:	d104      	bne.n	8008dae <HAL_TIM_PWM_Stop+0x10e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dac:	e003      	b.n	8008db6 <HAL_TIM_PWM_Stop+0x116>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	40012c00 	.word	0x40012c00
 8008dc4:	40013400 	.word	0x40013400
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40014400 	.word	0x40014400
 8008dd0:	40014800 	.word	0x40014800
 8008dd4:	40015000 	.word	0x40015000

08008dd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e049      	b.n	8008e7e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f841 	bl	8008e86 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f000 fe12 	bl	8009a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
	...

08008e9c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d104      	bne.n	8008eba <HAL_TIM_IC_Start_IT+0x1e>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	e023      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x66>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d104      	bne.n	8008eca <HAL_TIM_IC_Start_IT+0x2e>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	e01b      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x66>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d104      	bne.n	8008eda <HAL_TIM_IC_Start_IT+0x3e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	e013      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x66>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b0c      	cmp	r3, #12
 8008ede:	d104      	bne.n	8008eea <HAL_TIM_IC_Start_IT+0x4e>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	e00b      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x66>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d104      	bne.n	8008efa <HAL_TIM_IC_Start_IT+0x5e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	e003      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x66>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <HAL_TIM_IC_Start_IT+0x78>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	e013      	b.n	8008f3c <HAL_TIM_IC_Start_IT+0xa0>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d104      	bne.n	8008f24 <HAL_TIM_IC_Start_IT+0x88>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	e00b      	b.n	8008f3c <HAL_TIM_IC_Start_IT+0xa0>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b08      	cmp	r3, #8
 8008f28:	d104      	bne.n	8008f34 <HAL_TIM_IC_Start_IT+0x98>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	e003      	b.n	8008f3c <HAL_TIM_IC_Start_IT+0xa0>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d102      	bne.n	8008f4a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f44:	7b7b      	ldrb	r3, [r7, #13]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d001      	beq.n	8008f4e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e0e2      	b.n	8009114 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <HAL_TIM_IC_Start_IT+0xc2>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f5c:	e023      	b.n	8008fa6 <HAL_TIM_IC_Start_IT+0x10a>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d104      	bne.n	8008f6e <HAL_TIM_IC_Start_IT+0xd2>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f6c:	e01b      	b.n	8008fa6 <HAL_TIM_IC_Start_IT+0x10a>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d104      	bne.n	8008f7e <HAL_TIM_IC_Start_IT+0xe2>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f7c:	e013      	b.n	8008fa6 <HAL_TIM_IC_Start_IT+0x10a>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b0c      	cmp	r3, #12
 8008f82:	d104      	bne.n	8008f8e <HAL_TIM_IC_Start_IT+0xf2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f8c:	e00b      	b.n	8008fa6 <HAL_TIM_IC_Start_IT+0x10a>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b10      	cmp	r3, #16
 8008f92:	d104      	bne.n	8008f9e <HAL_TIM_IC_Start_IT+0x102>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f9c:	e003      	b.n	8008fa6 <HAL_TIM_IC_Start_IT+0x10a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIM_IC_Start_IT+0x11a>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fb4:	e013      	b.n	8008fde <HAL_TIM_IC_Start_IT+0x142>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_IC_Start_IT+0x12a>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fc4:	e00b      	b.n	8008fde <HAL_TIM_IC_Start_IT+0x142>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_IC_Start_IT+0x13a>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fd4:	e003      	b.n	8008fde <HAL_TIM_IC_Start_IT+0x142>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b0c      	cmp	r3, #12
 8008fe2:	d841      	bhi.n	8009068 <HAL_TIM_IC_Start_IT+0x1cc>
 8008fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fec <HAL_TIM_IC_Start_IT+0x150>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08009021 	.word	0x08009021
 8008ff0:	08009069 	.word	0x08009069
 8008ff4:	08009069 	.word	0x08009069
 8008ff8:	08009069 	.word	0x08009069
 8008ffc:	08009033 	.word	0x08009033
 8009000:	08009069 	.word	0x08009069
 8009004:	08009069 	.word	0x08009069
 8009008:	08009069 	.word	0x08009069
 800900c:	08009045 	.word	0x08009045
 8009010:	08009069 	.word	0x08009069
 8009014:	08009069 	.word	0x08009069
 8009018:	08009069 	.word	0x08009069
 800901c:	08009057 	.word	0x08009057
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0202 	orr.w	r2, r2, #2
 800902e:	60da      	str	r2, [r3, #12]
      break;
 8009030:	e01d      	b.n	800906e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0204 	orr.w	r2, r2, #4
 8009040:	60da      	str	r2, [r3, #12]
      break;
 8009042:	e014      	b.n	800906e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0208 	orr.w	r2, r2, #8
 8009052:	60da      	str	r2, [r3, #12]
      break;
 8009054:	e00b      	b.n	800906e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0210 	orr.w	r2, r2, #16
 8009064:	60da      	str	r2, [r3, #12]
      break;
 8009066:	e002      	b.n	800906e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]
      break;
 800906c:	bf00      	nop
  }

  if (status == HAL_OK)
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d14e      	bne.n	8009112 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2201      	movs	r2, #1
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	4618      	mov	r0, r3
 800907e:	f001 fa83 	bl	800a588 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a25      	ldr	r2, [pc, #148]	@ (800911c <HAL_TIM_IC_Start_IT+0x280>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d022      	beq.n	80090d2 <HAL_TIM_IC_Start_IT+0x236>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009094:	d01d      	beq.n	80090d2 <HAL_TIM_IC_Start_IT+0x236>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a21      	ldr	r2, [pc, #132]	@ (8009120 <HAL_TIM_IC_Start_IT+0x284>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d018      	beq.n	80090d2 <HAL_TIM_IC_Start_IT+0x236>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009124 <HAL_TIM_IC_Start_IT+0x288>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d013      	beq.n	80090d2 <HAL_TIM_IC_Start_IT+0x236>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009128 <HAL_TIM_IC_Start_IT+0x28c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00e      	beq.n	80090d2 <HAL_TIM_IC_Start_IT+0x236>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1c      	ldr	r2, [pc, #112]	@ (800912c <HAL_TIM_IC_Start_IT+0x290>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d009      	beq.n	80090d2 <HAL_TIM_IC_Start_IT+0x236>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009130 <HAL_TIM_IC_Start_IT+0x294>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d004      	beq.n	80090d2 <HAL_TIM_IC_Start_IT+0x236>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a19      	ldr	r2, [pc, #100]	@ (8009134 <HAL_TIM_IC_Start_IT+0x298>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d115      	bne.n	80090fe <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	4b17      	ldr	r3, [pc, #92]	@ (8009138 <HAL_TIM_IC_Start_IT+0x29c>)
 80090da:	4013      	ands	r3, r2
 80090dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2b06      	cmp	r3, #6
 80090e2:	d015      	beq.n	8009110 <HAL_TIM_IC_Start_IT+0x274>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ea:	d011      	beq.n	8009110 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0201 	orr.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090fc:	e008      	b.n	8009110 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f042 0201 	orr.w	r2, r2, #1
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e000      	b.n	8009112 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009110:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009112:	7bfb      	ldrb	r3, [r7, #15]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	40012c00 	.word	0x40012c00
 8009120:	40000400 	.word	0x40000400
 8009124:	40000800 	.word	0x40000800
 8009128:	40000c00 	.word	0x40000c00
 800912c:	40013400 	.word	0x40013400
 8009130:	40014000 	.word	0x40014000
 8009134:	40015000 	.word	0x40015000
 8009138:	00010007 	.word	0x00010007

0800913c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b00      	cmp	r3, #0
 800915c:	d020      	beq.n	80091a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d01b      	beq.n	80091a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f06f 0202 	mvn.w	r2, #2
 8009170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7f8 fe50 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 800918c:	e005      	b.n	800919a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fc38 	bl	8009a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fc3f 	bl	8009a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 0304 	and.w	r3, r3, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d020      	beq.n	80091ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01b      	beq.n	80091ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f06f 0204 	mvn.w	r2, #4
 80091bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2202      	movs	r2, #2
 80091c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7f8 fe2a 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 80091d8:	e005      	b.n	80091e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fc12 	bl	8009a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fc19 	bl	8009a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f003 0308 	and.w	r3, r3, #8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d020      	beq.n	8009238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d01b      	beq.n	8009238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0208 	mvn.w	r2, #8
 8009208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2204      	movs	r2, #4
 800920e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7f8 fe04 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8009224:	e005      	b.n	8009232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fbec 	bl	8009a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fbf3 	bl	8009a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f003 0310 	and.w	r3, r3, #16
 800923e:	2b00      	cmp	r3, #0
 8009240:	d020      	beq.n	8009284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b00      	cmp	r3, #0
 800924a:	d01b      	beq.n	8009284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f06f 0210 	mvn.w	r2, #16
 8009254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2208      	movs	r2, #8
 800925a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7f8 fdde 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8009270:	e005      	b.n	800927e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fbc6 	bl	8009a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fbcd 	bl	8009a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00c      	beq.n	80092a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	2b00      	cmp	r3, #0
 8009296:	d007      	beq.n	80092a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f06f 0201 	mvn.w	r2, #1
 80092a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fba4 	bl	80099f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00c      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d007      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80092ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 fbd3 	bl	800aa7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00c      	beq.n	80092fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d007      	beq.n	80092fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80092f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 fbcb 	bl	800aa90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	d007      	beq.n	800931e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fb87 	bl	8009a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00c      	beq.n	8009342 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b00      	cmp	r3, #0
 8009330:	d007      	beq.n	8009342 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f06f 0220 	mvn.w	r2, #32
 800933a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 fb93 	bl	800aa68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00c      	beq.n	8009366 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800935e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 fb9f 	bl	800aaa4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00c      	beq.n	800938a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fb97 	bl	800aab8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d007      	beq.n	80093ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80093a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 fb8f 	bl	800aacc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00c      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d007      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80093ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fb87 	bl	800aae0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b086      	sub	sp, #24
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e088      	b.n	800950a <HAL_TIM_IC_ConfigChannel+0x130>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d11b      	bne.n	800943e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009416:	f000 fef1 	bl	800a1fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699a      	ldr	r2, [r3, #24]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 020c 	bic.w	r2, r2, #12
 8009428:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6999      	ldr	r1, [r3, #24]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	619a      	str	r2, [r3, #24]
 800943c:	e060      	b.n	8009500 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b04      	cmp	r3, #4
 8009442:	d11c      	bne.n	800947e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009454:	f000 ff75 	bl	800a342 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009466:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6999      	ldr	r1, [r3, #24]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	021a      	lsls	r2, r3, #8
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	619a      	str	r2, [r3, #24]
 800947c:	e040      	b.n	8009500 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b08      	cmp	r3, #8
 8009482:	d11b      	bne.n	80094bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009494:	f000 ffc2 	bl	800a41c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69da      	ldr	r2, [r3, #28]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 020c 	bic.w	r2, r2, #12
 80094a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	69d9      	ldr	r1, [r3, #28]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	689a      	ldr	r2, [r3, #8]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	61da      	str	r2, [r3, #28]
 80094ba:	e021      	b.n	8009500 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b0c      	cmp	r3, #12
 80094c0:	d11c      	bne.n	80094fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80094d2:	f000 ffdf 	bl	800a494 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	69da      	ldr	r2, [r3, #28]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80094e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69d9      	ldr	r1, [r3, #28]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	021a      	lsls	r2, r3, #8
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	61da      	str	r2, [r3, #28]
 80094fa:	e001      	b.n	8009500 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009508:	7dfb      	ldrb	r3, [r7, #23]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800952a:	2b01      	cmp	r3, #1
 800952c:	d101      	bne.n	8009532 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800952e:	2302      	movs	r3, #2
 8009530:	e0ff      	b.n	8009732 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b14      	cmp	r3, #20
 800953e:	f200 80f0 	bhi.w	8009722 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009542:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	0800959d 	.word	0x0800959d
 800954c:	08009723 	.word	0x08009723
 8009550:	08009723 	.word	0x08009723
 8009554:	08009723 	.word	0x08009723
 8009558:	080095dd 	.word	0x080095dd
 800955c:	08009723 	.word	0x08009723
 8009560:	08009723 	.word	0x08009723
 8009564:	08009723 	.word	0x08009723
 8009568:	0800961f 	.word	0x0800961f
 800956c:	08009723 	.word	0x08009723
 8009570:	08009723 	.word	0x08009723
 8009574:	08009723 	.word	0x08009723
 8009578:	0800965f 	.word	0x0800965f
 800957c:	08009723 	.word	0x08009723
 8009580:	08009723 	.word	0x08009723
 8009584:	08009723 	.word	0x08009723
 8009588:	080096a1 	.word	0x080096a1
 800958c:	08009723 	.word	0x08009723
 8009590:	08009723 	.word	0x08009723
 8009594:	08009723 	.word	0x08009723
 8009598:	080096e1 	.word	0x080096e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fb00 	bl	8009ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	699a      	ldr	r2, [r3, #24]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0208 	orr.w	r2, r2, #8
 80095b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0204 	bic.w	r2, r2, #4
 80095c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6999      	ldr	r1, [r3, #24]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	619a      	str	r2, [r3, #24]
      break;
 80095da:	e0a5      	b.n	8009728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fb7a 	bl	8009cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6999      	ldr	r1, [r3, #24]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	021a      	lsls	r2, r3, #8
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	619a      	str	r2, [r3, #24]
      break;
 800961c:	e084      	b.n	8009728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fbed 	bl	8009e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	69da      	ldr	r2, [r3, #28]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f042 0208 	orr.w	r2, r2, #8
 8009638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69da      	ldr	r2, [r3, #28]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f022 0204 	bic.w	r2, r2, #4
 8009648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69d9      	ldr	r1, [r3, #28]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	691a      	ldr	r2, [r3, #16]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	430a      	orrs	r2, r1
 800965a:	61da      	str	r2, [r3, #28]
      break;
 800965c:	e064      	b.n	8009728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 fc5f 	bl	8009f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69da      	ldr	r2, [r3, #28]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69d9      	ldr	r1, [r3, #28]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	021a      	lsls	r2, r3, #8
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	61da      	str	r2, [r3, #28]
      break;
 800969e:	e043      	b.n	8009728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68b9      	ldr	r1, [r7, #8]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 fcd2 	bl	800a050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0208 	orr.w	r2, r2, #8
 80096ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0204 	bic.w	r2, r2, #4
 80096ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	691a      	ldr	r2, [r3, #16]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80096de:	e023      	b.n	8009728 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fd1c 	bl	800a124 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800970a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	021a      	lsls	r2, r3, #8
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009720:	e002      	b.n	8009728 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	75fb      	strb	r3, [r7, #23]
      break;
 8009726:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop

0800973c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_TIM_ConfigClockSource+0x1c>
 8009754:	2302      	movs	r3, #2
 8009756:	e0f6      	b.n	8009946 <HAL_TIM_ConfigClockSource+0x20a>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800977a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a6f      	ldr	r2, [pc, #444]	@ (8009950 <HAL_TIM_ConfigClockSource+0x214>)
 8009792:	4293      	cmp	r3, r2
 8009794:	f000 80c1 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1de>
 8009798:	4a6d      	ldr	r2, [pc, #436]	@ (8009950 <HAL_TIM_ConfigClockSource+0x214>)
 800979a:	4293      	cmp	r3, r2
 800979c:	f200 80c6 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 80097a0:	4a6c      	ldr	r2, [pc, #432]	@ (8009954 <HAL_TIM_ConfigClockSource+0x218>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	f000 80b9 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1de>
 80097a8:	4a6a      	ldr	r2, [pc, #424]	@ (8009954 <HAL_TIM_ConfigClockSource+0x218>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	f200 80be 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 80097b0:	4a69      	ldr	r2, [pc, #420]	@ (8009958 <HAL_TIM_ConfigClockSource+0x21c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	f000 80b1 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1de>
 80097b8:	4a67      	ldr	r2, [pc, #412]	@ (8009958 <HAL_TIM_ConfigClockSource+0x21c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	f200 80b6 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 80097c0:	4a66      	ldr	r2, [pc, #408]	@ (800995c <HAL_TIM_ConfigClockSource+0x220>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	f000 80a9 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1de>
 80097c8:	4a64      	ldr	r2, [pc, #400]	@ (800995c <HAL_TIM_ConfigClockSource+0x220>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	f200 80ae 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 80097d0:	4a63      	ldr	r2, [pc, #396]	@ (8009960 <HAL_TIM_ConfigClockSource+0x224>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	f000 80a1 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1de>
 80097d8:	4a61      	ldr	r2, [pc, #388]	@ (8009960 <HAL_TIM_ConfigClockSource+0x224>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	f200 80a6 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 80097e0:	4a60      	ldr	r2, [pc, #384]	@ (8009964 <HAL_TIM_ConfigClockSource+0x228>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	f000 8099 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1de>
 80097e8:	4a5e      	ldr	r2, [pc, #376]	@ (8009964 <HAL_TIM_ConfigClockSource+0x228>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	f200 809e 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 80097f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097f4:	f000 8091 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1de>
 80097f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097fc:	f200 8096 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 8009800:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009804:	f000 8089 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x1de>
 8009808:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800980c:	f200 808e 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 8009810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009814:	d03e      	beq.n	8009894 <HAL_TIM_ConfigClockSource+0x158>
 8009816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800981a:	f200 8087 	bhi.w	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 800981e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009822:	f000 8086 	beq.w	8009932 <HAL_TIM_ConfigClockSource+0x1f6>
 8009826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800982a:	d87f      	bhi.n	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 800982c:	2b70      	cmp	r3, #112	@ 0x70
 800982e:	d01a      	beq.n	8009866 <HAL_TIM_ConfigClockSource+0x12a>
 8009830:	2b70      	cmp	r3, #112	@ 0x70
 8009832:	d87b      	bhi.n	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 8009834:	2b60      	cmp	r3, #96	@ 0x60
 8009836:	d050      	beq.n	80098da <HAL_TIM_ConfigClockSource+0x19e>
 8009838:	2b60      	cmp	r3, #96	@ 0x60
 800983a:	d877      	bhi.n	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 800983c:	2b50      	cmp	r3, #80	@ 0x50
 800983e:	d03c      	beq.n	80098ba <HAL_TIM_ConfigClockSource+0x17e>
 8009840:	2b50      	cmp	r3, #80	@ 0x50
 8009842:	d873      	bhi.n	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 8009844:	2b40      	cmp	r3, #64	@ 0x40
 8009846:	d058      	beq.n	80098fa <HAL_TIM_ConfigClockSource+0x1be>
 8009848:	2b40      	cmp	r3, #64	@ 0x40
 800984a:	d86f      	bhi.n	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 800984c:	2b30      	cmp	r3, #48	@ 0x30
 800984e:	d064      	beq.n	800991a <HAL_TIM_ConfigClockSource+0x1de>
 8009850:	2b30      	cmp	r3, #48	@ 0x30
 8009852:	d86b      	bhi.n	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 8009854:	2b20      	cmp	r3, #32
 8009856:	d060      	beq.n	800991a <HAL_TIM_ConfigClockSource+0x1de>
 8009858:	2b20      	cmp	r3, #32
 800985a:	d867      	bhi.n	800992c <HAL_TIM_ConfigClockSource+0x1f0>
 800985c:	2b00      	cmp	r3, #0
 800985e:	d05c      	beq.n	800991a <HAL_TIM_ConfigClockSource+0x1de>
 8009860:	2b10      	cmp	r3, #16
 8009862:	d05a      	beq.n	800991a <HAL_TIM_ConfigClockSource+0x1de>
 8009864:	e062      	b.n	800992c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009876:	f000 fe67 	bl	800a548 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	609a      	str	r2, [r3, #8]
      break;
 8009892:	e04f      	b.n	8009934 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098a4:	f000 fe50 	bl	800a548 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689a      	ldr	r2, [r3, #8]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098b6:	609a      	str	r2, [r3, #8]
      break;
 80098b8:	e03c      	b.n	8009934 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098c6:	461a      	mov	r2, r3
 80098c8:	f000 fd0c 	bl	800a2e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2150      	movs	r1, #80	@ 0x50
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fe1b 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 80098d8:	e02c      	b.n	8009934 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098e6:	461a      	mov	r2, r3
 80098e8:	f000 fd68 	bl	800a3bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2160      	movs	r1, #96	@ 0x60
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fe0b 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 80098f8:	e01c      	b.n	8009934 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009906:	461a      	mov	r2, r3
 8009908:	f000 fcec 	bl	800a2e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2140      	movs	r1, #64	@ 0x40
 8009912:	4618      	mov	r0, r3
 8009914:	f000 fdfb 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009918:	e00c      	b.n	8009934 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4619      	mov	r1, r3
 8009924:	4610      	mov	r0, r2
 8009926:	f000 fdf2 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 800992a:	e003      	b.n	8009934 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	73fb      	strb	r3, [r7, #15]
      break;
 8009930:	e000      	b.n	8009934 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	00100070 	.word	0x00100070
 8009954:	00100060 	.word	0x00100060
 8009958:	00100050 	.word	0x00100050
 800995c:	00100040 	.word	0x00100040
 8009960:	00100030 	.word	0x00100030
 8009964:	00100020 	.word	0x00100020

08009968 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b0c      	cmp	r3, #12
 800997a:	d831      	bhi.n	80099e0 <HAL_TIM_ReadCapturedValue+0x78>
 800997c:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <HAL_TIM_ReadCapturedValue+0x1c>)
 800997e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009982:	bf00      	nop
 8009984:	080099b9 	.word	0x080099b9
 8009988:	080099e1 	.word	0x080099e1
 800998c:	080099e1 	.word	0x080099e1
 8009990:	080099e1 	.word	0x080099e1
 8009994:	080099c3 	.word	0x080099c3
 8009998:	080099e1 	.word	0x080099e1
 800999c:	080099e1 	.word	0x080099e1
 80099a0:	080099e1 	.word	0x080099e1
 80099a4:	080099cd 	.word	0x080099cd
 80099a8:	080099e1 	.word	0x080099e1
 80099ac:	080099e1 	.word	0x080099e1
 80099b0:	080099e1 	.word	0x080099e1
 80099b4:	080099d7 	.word	0x080099d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099be:	60fb      	str	r3, [r7, #12]

      break;
 80099c0:	e00f      	b.n	80099e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	60fb      	str	r3, [r7, #12]

      break;
 80099ca:	e00a      	b.n	80099e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d2:	60fb      	str	r3, [r7, #12]

      break;
 80099d4:	e005      	b.n	80099e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099dc:	60fb      	str	r3, [r7, #12]

      break;
 80099de:	e000      	b.n	80099e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80099e0:	bf00      	nop
  }

  return tmpreg;
 80099e2:	68fb      	ldr	r3, [r7, #12]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a4c      	ldr	r2, [pc, #304]	@ (8009b84 <TIM_Base_SetConfig+0x144>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d017      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5e:	d013      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a49      	ldr	r2, [pc, #292]	@ (8009b88 <TIM_Base_SetConfig+0x148>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00f      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a48      	ldr	r2, [pc, #288]	@ (8009b8c <TIM_Base_SetConfig+0x14c>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d00b      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a47      	ldr	r2, [pc, #284]	@ (8009b90 <TIM_Base_SetConfig+0x150>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d007      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a46      	ldr	r2, [pc, #280]	@ (8009b94 <TIM_Base_SetConfig+0x154>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d003      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a45      	ldr	r2, [pc, #276]	@ (8009b98 <TIM_Base_SetConfig+0x158>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d108      	bne.n	8009a9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a39      	ldr	r2, [pc, #228]	@ (8009b84 <TIM_Base_SetConfig+0x144>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d023      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aa8:	d01f      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a36      	ldr	r2, [pc, #216]	@ (8009b88 <TIM_Base_SetConfig+0x148>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d01b      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a35      	ldr	r2, [pc, #212]	@ (8009b8c <TIM_Base_SetConfig+0x14c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d017      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a34      	ldr	r2, [pc, #208]	@ (8009b90 <TIM_Base_SetConfig+0x150>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d013      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a33      	ldr	r2, [pc, #204]	@ (8009b94 <TIM_Base_SetConfig+0x154>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00f      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a33      	ldr	r2, [pc, #204]	@ (8009b9c <TIM_Base_SetConfig+0x15c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00b      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a32      	ldr	r2, [pc, #200]	@ (8009ba0 <TIM_Base_SetConfig+0x160>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d007      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a31      	ldr	r2, [pc, #196]	@ (8009ba4 <TIM_Base_SetConfig+0x164>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d003      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8009b98 <TIM_Base_SetConfig+0x158>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d108      	bne.n	8009afc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a18      	ldr	r2, [pc, #96]	@ (8009b84 <TIM_Base_SetConfig+0x144>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d013      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009b94 <TIM_Base_SetConfig+0x154>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d00f      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a1a      	ldr	r2, [pc, #104]	@ (8009b9c <TIM_Base_SetConfig+0x15c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d00b      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a19      	ldr	r2, [pc, #100]	@ (8009ba0 <TIM_Base_SetConfig+0x160>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d007      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a18      	ldr	r2, [pc, #96]	@ (8009ba4 <TIM_Base_SetConfig+0x164>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d003      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a13      	ldr	r2, [pc, #76]	@ (8009b98 <TIM_Base_SetConfig+0x158>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d103      	bne.n	8009b58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	691a      	ldr	r2, [r3, #16]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d105      	bne.n	8009b76 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f023 0201 	bic.w	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	611a      	str	r2, [r3, #16]
  }
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40012c00 	.word	0x40012c00
 8009b88:	40000400 	.word	0x40000400
 8009b8c:	40000800 	.word	0x40000800
 8009b90:	40000c00 	.word	0x40000c00
 8009b94:	40013400 	.word	0x40013400
 8009b98:	40015000 	.word	0x40015000
 8009b9c:	40014000 	.word	0x40014000
 8009ba0:	40014400 	.word	0x40014400
 8009ba4:	40014800 	.word	0x40014800

08009ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	f023 0201 	bic.w	r2, r3, #1
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0303 	bic.w	r3, r3, #3
 8009be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f023 0302 	bic.w	r3, r3, #2
 8009bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a30      	ldr	r2, [pc, #192]	@ (8009cc4 <TIM_OC1_SetConfig+0x11c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d013      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8009cc8 <TIM_OC1_SetConfig+0x120>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00f      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a2e      	ldr	r2, [pc, #184]	@ (8009ccc <TIM_OC1_SetConfig+0x124>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00b      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8009cd0 <TIM_OC1_SetConfig+0x128>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d007      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a2c      	ldr	r2, [pc, #176]	@ (8009cd4 <TIM_OC1_SetConfig+0x12c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d003      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009cd8 <TIM_OC1_SetConfig+0x130>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d10c      	bne.n	8009c4a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f023 0308 	bic.w	r3, r3, #8
 8009c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f023 0304 	bic.w	r3, r3, #4
 8009c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc4 <TIM_OC1_SetConfig+0x11c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d013      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a1c      	ldr	r2, [pc, #112]	@ (8009cc8 <TIM_OC1_SetConfig+0x120>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00f      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8009ccc <TIM_OC1_SetConfig+0x124>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d00b      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a1a      	ldr	r2, [pc, #104]	@ (8009cd0 <TIM_OC1_SetConfig+0x128>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d007      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a19      	ldr	r2, [pc, #100]	@ (8009cd4 <TIM_OC1_SetConfig+0x12c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d003      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a18      	ldr	r2, [pc, #96]	@ (8009cd8 <TIM_OC1_SetConfig+0x130>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d111      	bne.n	8009c9e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	621a      	str	r2, [r3, #32]
}
 8009cb8:	bf00      	nop
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	40012c00 	.word	0x40012c00
 8009cc8:	40013400 	.word	0x40013400
 8009ccc:	40014000 	.word	0x40014000
 8009cd0:	40014400 	.word	0x40014400
 8009cd4:	40014800 	.word	0x40014800
 8009cd8:	40015000 	.word	0x40015000

08009cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	f023 0210 	bic.w	r2, r3, #16
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	f023 0320 	bic.w	r3, r3, #32
 8009d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8009dec <TIM_OC2_SetConfig+0x110>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d007      	beq.n	8009d50 <TIM_OC2_SetConfig+0x74>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a2b      	ldr	r2, [pc, #172]	@ (8009df0 <TIM_OC2_SetConfig+0x114>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d003      	beq.n	8009d50 <TIM_OC2_SetConfig+0x74>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8009df4 <TIM_OC2_SetConfig+0x118>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10d      	bne.n	8009d6c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	011b      	lsls	r3, r3, #4
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8009dec <TIM_OC2_SetConfig+0x110>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d013      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a1e      	ldr	r2, [pc, #120]	@ (8009df0 <TIM_OC2_SetConfig+0x114>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d00f      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8009df8 <TIM_OC2_SetConfig+0x11c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00b      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a1d      	ldr	r2, [pc, #116]	@ (8009dfc <TIM_OC2_SetConfig+0x120>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d007      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009e00 <TIM_OC2_SetConfig+0x124>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d003      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a17      	ldr	r2, [pc, #92]	@ (8009df4 <TIM_OC2_SetConfig+0x118>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d113      	bne.n	8009dc4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	621a      	str	r2, [r3, #32]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	40012c00 	.word	0x40012c00
 8009df0:	40013400 	.word	0x40013400
 8009df4:	40015000 	.word	0x40015000
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800

08009e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a1b      	ldr	r3, [r3, #32]
 8009e18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a2b      	ldr	r2, [pc, #172]	@ (8009f10 <TIM_OC3_SetConfig+0x10c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d007      	beq.n	8009e76 <TIM_OC3_SetConfig+0x72>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a2a      	ldr	r2, [pc, #168]	@ (8009f14 <TIM_OC3_SetConfig+0x110>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d003      	beq.n	8009e76 <TIM_OC3_SetConfig+0x72>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a29      	ldr	r2, [pc, #164]	@ (8009f18 <TIM_OC3_SetConfig+0x114>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d10d      	bne.n	8009e92 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a1e      	ldr	r2, [pc, #120]	@ (8009f10 <TIM_OC3_SetConfig+0x10c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d013      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8009f14 <TIM_OC3_SetConfig+0x110>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d00f      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f1c <TIM_OC3_SetConfig+0x118>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d00b      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a1c      	ldr	r2, [pc, #112]	@ (8009f20 <TIM_OC3_SetConfig+0x11c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d007      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8009f24 <TIM_OC3_SetConfig+0x120>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d003      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a16      	ldr	r2, [pc, #88]	@ (8009f18 <TIM_OC3_SetConfig+0x114>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d113      	bne.n	8009eea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	621a      	str	r2, [r3, #32]
}
 8009f04:	bf00      	nop
 8009f06:	371c      	adds	r7, #28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	40012c00 	.word	0x40012c00
 8009f14:	40013400 	.word	0x40013400
 8009f18:	40015000 	.word	0x40015000
 8009f1c:	40014000 	.word	0x40014000
 8009f20:	40014400 	.word	0x40014400
 8009f24:	40014800 	.word	0x40014800

08009f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	031b      	lsls	r3, r3, #12
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a2c      	ldr	r2, [pc, #176]	@ (800a038 <TIM_OC4_SetConfig+0x110>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d007      	beq.n	8009f9c <TIM_OC4_SetConfig+0x74>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800a03c <TIM_OC4_SetConfig+0x114>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d003      	beq.n	8009f9c <TIM_OC4_SetConfig+0x74>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a2a      	ldr	r2, [pc, #168]	@ (800a040 <TIM_OC4_SetConfig+0x118>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d10d      	bne.n	8009fb8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	031b      	lsls	r3, r3, #12
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a1f      	ldr	r2, [pc, #124]	@ (800a038 <TIM_OC4_SetConfig+0x110>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d013      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800a03c <TIM_OC4_SetConfig+0x114>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d00f      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a1e      	ldr	r2, [pc, #120]	@ (800a044 <TIM_OC4_SetConfig+0x11c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d00b      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a1d      	ldr	r2, [pc, #116]	@ (800a048 <TIM_OC4_SetConfig+0x120>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d007      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <TIM_OC4_SetConfig+0x124>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d003      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a17      	ldr	r2, [pc, #92]	@ (800a040 <TIM_OC4_SetConfig+0x118>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d113      	bne.n	800a010 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ff6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	019b      	lsls	r3, r3, #6
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4313      	orrs	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	019b      	lsls	r3, r3, #6
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	621a      	str	r2, [r3, #32]
}
 800a02a:	bf00      	nop
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40012c00 	.word	0x40012c00
 800a03c:	40013400 	.word	0x40013400
 800a040:	40015000 	.word	0x40015000
 800a044:	40014000 	.word	0x40014000
 800a048:	40014400 	.word	0x40014400
 800a04c:	40014800 	.word	0x40014800

0800a050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a07e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a094:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	041b      	lsls	r3, r3, #16
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a19      	ldr	r2, [pc, #100]	@ (800a10c <TIM_OC5_SetConfig+0xbc>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d013      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a18      	ldr	r2, [pc, #96]	@ (800a110 <TIM_OC5_SetConfig+0xc0>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00f      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a17      	ldr	r2, [pc, #92]	@ (800a114 <TIM_OC5_SetConfig+0xc4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d00b      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a16      	ldr	r2, [pc, #88]	@ (800a118 <TIM_OC5_SetConfig+0xc8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d007      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a15      	ldr	r2, [pc, #84]	@ (800a11c <TIM_OC5_SetConfig+0xcc>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d003      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a14      	ldr	r2, [pc, #80]	@ (800a120 <TIM_OC5_SetConfig+0xd0>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d109      	bne.n	800a0e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	021b      	lsls	r3, r3, #8
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	621a      	str	r2, [r3, #32]
}
 800a100:	bf00      	nop
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	40012c00 	.word	0x40012c00
 800a110:	40013400 	.word	0x40013400
 800a114:	40014000 	.word	0x40014000
 800a118:	40014400 	.word	0x40014400
 800a11c:	40014800 	.word	0x40014800
 800a120:	40015000 	.word	0x40015000

0800a124 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a16a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	051b      	lsls	r3, r3, #20
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	4313      	orrs	r3, r2
 800a176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a1a      	ldr	r2, [pc, #104]	@ (800a1e4 <TIM_OC6_SetConfig+0xc0>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d013      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a19      	ldr	r2, [pc, #100]	@ (800a1e8 <TIM_OC6_SetConfig+0xc4>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00f      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a18      	ldr	r2, [pc, #96]	@ (800a1ec <TIM_OC6_SetConfig+0xc8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00b      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a17      	ldr	r2, [pc, #92]	@ (800a1f0 <TIM_OC6_SetConfig+0xcc>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d007      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a16      	ldr	r2, [pc, #88]	@ (800a1f4 <TIM_OC6_SetConfig+0xd0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a15      	ldr	r2, [pc, #84]	@ (800a1f8 <TIM_OC6_SetConfig+0xd4>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d109      	bne.n	800a1bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	029b      	lsls	r3, r3, #10
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	621a      	str	r2, [r3, #32]
}
 800a1d6:	bf00      	nop
 800a1d8:	371c      	adds	r7, #28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	40012c00 	.word	0x40012c00
 800a1e8:	40013400 	.word	0x40013400
 800a1ec:	40014000 	.word	0x40014000
 800a1f0:	40014400 	.word	0x40014400
 800a1f4:	40014800 	.word	0x40014800
 800a1f8:	40015000 	.word	0x40015000

0800a1fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	f023 0201 	bic.w	r2, r3, #1
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4a28      	ldr	r2, [pc, #160]	@ (800a2c8 <TIM_TI1_SetConfig+0xcc>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d01b      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a230:	d017      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4a25      	ldr	r2, [pc, #148]	@ (800a2cc <TIM_TI1_SetConfig+0xd0>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d013      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4a24      	ldr	r2, [pc, #144]	@ (800a2d0 <TIM_TI1_SetConfig+0xd4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00f      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4a23      	ldr	r2, [pc, #140]	@ (800a2d4 <TIM_TI1_SetConfig+0xd8>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00b      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4a22      	ldr	r2, [pc, #136]	@ (800a2d8 <TIM_TI1_SetConfig+0xdc>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d007      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4a21      	ldr	r2, [pc, #132]	@ (800a2dc <TIM_TI1_SetConfig+0xe0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d003      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4a20      	ldr	r2, [pc, #128]	@ (800a2e0 <TIM_TI1_SetConfig+0xe4>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d101      	bne.n	800a266 <TIM_TI1_SetConfig+0x6a>
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <TIM_TI1_SetConfig+0x6c>
 800a266:	2300      	movs	r3, #0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d008      	beq.n	800a27e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4313      	orrs	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	e003      	b.n	800a286 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f043 0301 	orr.w	r3, r3, #1
 800a284:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a28c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	b2db      	uxtb	r3, r3
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	4313      	orrs	r3, r2
 800a298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f023 030a 	bic.w	r3, r3, #10
 800a2a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	f003 030a 	and.w	r3, r3, #10
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	621a      	str	r2, [r3, #32]
}
 800a2ba:	bf00      	nop
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40012c00 	.word	0x40012c00
 800a2cc:	40000400 	.word	0x40000400
 800a2d0:	40000800 	.word	0x40000800
 800a2d4:	40000c00 	.word	0x40000c00
 800a2d8:	40013400 	.word	0x40013400
 800a2dc:	40014000 	.word	0x40014000
 800a2e0:	40015000 	.word	0x40015000

0800a2e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	f023 0201 	bic.w	r2, r3, #1
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a30e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	4313      	orrs	r3, r2
 800a318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f023 030a 	bic.w	r3, r3, #10
 800a320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	4313      	orrs	r3, r2
 800a328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	621a      	str	r2, [r3, #32]
}
 800a336:	bf00      	nop
 800a338:	371c      	adds	r7, #28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a342:	b480      	push	{r7}
 800a344:	b087      	sub	sp, #28
 800a346:	af00      	add	r7, sp, #0
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	60b9      	str	r1, [r7, #8]
 800a34c:	607a      	str	r2, [r7, #4]
 800a34e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	f023 0210 	bic.w	r2, r3, #16
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4313      	orrs	r3, r2
 800a378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	031b      	lsls	r3, r3, #12
 800a386:	b29b      	uxth	r3, r3
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a394:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	621a      	str	r2, [r3, #32]
}
 800a3b0:	bf00      	nop
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	f023 0210 	bic.w	r2, r3, #16
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	031b      	lsls	r3, r3, #12
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	011b      	lsls	r3, r3, #4
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4313      	orrs	r3, r2
 800a402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	621a      	str	r2, [r3, #32]
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f023 0303 	bic.w	r3, r3, #3
 800a448:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4313      	orrs	r3, r2
 800a450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a458:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	4313      	orrs	r3, r2
 800a464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a46c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	4313      	orrs	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	621a      	str	r2, [r3, #32]
}
 800a488:	bf00      	nop
 800a48a:	371c      	adds	r7, #28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6a1b      	ldr	r3, [r3, #32]
 800a4ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a4d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	031b      	lsls	r3, r3, #12
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a4e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	031b      	lsls	r3, r3, #12
 800a4ec:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	621a      	str	r2, [r3, #32]
}
 800a502:	bf00      	nop
 800a504:	371c      	adds	r7, #28
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	f043 0307 	orr.w	r3, r3, #7
 800a534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	609a      	str	r2, [r3, #8]
}
 800a53c:	bf00      	nop
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	021a      	lsls	r2, r3, #8
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4313      	orrs	r3, r2
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	4313      	orrs	r3, r2
 800a574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	609a      	str	r2, [r3, #8]
}
 800a57c:	bf00      	nop
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a588:	b480      	push	{r7}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	f003 031f 	and.w	r3, r3, #31
 800a59a:	2201      	movs	r2, #1
 800a59c:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6a1a      	ldr	r2, [r3, #32]
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	43db      	mvns	r3, r3
 800a5aa:	401a      	ands	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6a1a      	ldr	r2, [r3, #32]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f003 031f 	and.w	r3, r3, #31
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	621a      	str	r2, [r3, #32]
}
 800a5c6:	bf00      	nop
 800a5c8:	371c      	adds	r7, #28
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <HAL_TIMEx_PWMN_Start+0x24>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	bf14      	ite	ne
 800a5f0:	2301      	movne	r3, #1
 800a5f2:	2300      	moveq	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	e022      	b.n	800a63e <HAL_TIMEx_PWMN_Start+0x6a>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d109      	bne.n	800a612 <HAL_TIMEx_PWMN_Start+0x3e>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b01      	cmp	r3, #1
 800a608:	bf14      	ite	ne
 800a60a:	2301      	movne	r3, #1
 800a60c:	2300      	moveq	r3, #0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	e015      	b.n	800a63e <HAL_TIMEx_PWMN_Start+0x6a>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b08      	cmp	r3, #8
 800a616:	d109      	bne.n	800a62c <HAL_TIMEx_PWMN_Start+0x58>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	bf14      	ite	ne
 800a624:	2301      	movne	r3, #1
 800a626:	2300      	moveq	r3, #0
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	e008      	b.n	800a63e <HAL_TIMEx_PWMN_Start+0x6a>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b01      	cmp	r3, #1
 800a636:	bf14      	ite	ne
 800a638:	2301      	movne	r3, #1
 800a63a:	2300      	moveq	r3, #0
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e073      	b.n	800a72e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d104      	bne.n	800a656 <HAL_TIMEx_PWMN_Start+0x82>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2202      	movs	r2, #2
 800a650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a654:	e013      	b.n	800a67e <HAL_TIMEx_PWMN_Start+0xaa>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d104      	bne.n	800a666 <HAL_TIMEx_PWMN_Start+0x92>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a664:	e00b      	b.n	800a67e <HAL_TIMEx_PWMN_Start+0xaa>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d104      	bne.n	800a676 <HAL_TIMEx_PWMN_Start+0xa2>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a674:	e003      	b.n	800a67e <HAL_TIMEx_PWMN_Start+0xaa>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2202      	movs	r2, #2
 800a67a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2204      	movs	r2, #4
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fa34 	bl	800aaf4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a69a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a25      	ldr	r2, [pc, #148]	@ (800a738 <HAL_TIMEx_PWMN_Start+0x164>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d022      	beq.n	800a6ec <HAL_TIMEx_PWMN_Start+0x118>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ae:	d01d      	beq.n	800a6ec <HAL_TIMEx_PWMN_Start+0x118>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a21      	ldr	r2, [pc, #132]	@ (800a73c <HAL_TIMEx_PWMN_Start+0x168>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d018      	beq.n	800a6ec <HAL_TIMEx_PWMN_Start+0x118>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a20      	ldr	r2, [pc, #128]	@ (800a740 <HAL_TIMEx_PWMN_Start+0x16c>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d013      	beq.n	800a6ec <HAL_TIMEx_PWMN_Start+0x118>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a1e      	ldr	r2, [pc, #120]	@ (800a744 <HAL_TIMEx_PWMN_Start+0x170>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d00e      	beq.n	800a6ec <HAL_TIMEx_PWMN_Start+0x118>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a748 <HAL_TIMEx_PWMN_Start+0x174>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d009      	beq.n	800a6ec <HAL_TIMEx_PWMN_Start+0x118>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a74c <HAL_TIMEx_PWMN_Start+0x178>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d004      	beq.n	800a6ec <HAL_TIMEx_PWMN_Start+0x118>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a750 <HAL_TIMEx_PWMN_Start+0x17c>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d115      	bne.n	800a718 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	4b18      	ldr	r3, [pc, #96]	@ (800a754 <HAL_TIMEx_PWMN_Start+0x180>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b06      	cmp	r3, #6
 800a6fc:	d015      	beq.n	800a72a <HAL_TIMEx_PWMN_Start+0x156>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a704:	d011      	beq.n	800a72a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f042 0201 	orr.w	r2, r2, #1
 800a714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a716:	e008      	b.n	800a72a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f042 0201 	orr.w	r2, r2, #1
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	e000      	b.n	800a72c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a72a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	40012c00 	.word	0x40012c00
 800a73c:	40000400 	.word	0x40000400
 800a740:	40000800 	.word	0x40000800
 800a744:	40000c00 	.word	0x40000c00
 800a748:	40013400 	.word	0x40013400
 800a74c:	40014000 	.word	0x40014000
 800a750:	40015000 	.word	0x40015000
 800a754:	00010007 	.word	0x00010007

0800a758 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2200      	movs	r2, #0
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 f9c2 	bl	800aaf4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a1a      	ldr	r2, [r3, #32]
 800a776:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10f      	bne.n	800a7a0 <HAL_TIMEx_PWMN_Stop+0x48>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6a1a      	ldr	r2, [r3, #32]
 800a786:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a78a:	4013      	ands	r3, r2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d107      	bne.n	800a7a0 <HAL_TIMEx_PWMN_Stop+0x48>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a79e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6a1a      	ldr	r2, [r3, #32]
 800a7a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10f      	bne.n	800a7d0 <HAL_TIMEx_PWMN_Stop+0x78>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6a1a      	ldr	r2, [r3, #32]
 800a7b6:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d107      	bne.n	800a7d0 <HAL_TIMEx_PWMN_Stop+0x78>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f022 0201 	bic.w	r2, r2, #1
 800a7ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d104      	bne.n	800a7e0 <HAL_TIMEx_PWMN_Stop+0x88>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7de:	e013      	b.n	800a808 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d104      	bne.n	800a7f0 <HAL_TIMEx_PWMN_Stop+0x98>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7ee:	e00b      	b.n	800a808 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b08      	cmp	r3, #8
 800a7f4:	d104      	bne.n	800a800 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a7fe:	e003      	b.n	800a808 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a824:	2b01      	cmp	r3, #1
 800a826:	d101      	bne.n	800a82c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a828:	2302      	movs	r3, #2
 800a82a:	e074      	b.n	800a916 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2202      	movs	r2, #2
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a34      	ldr	r2, [pc, #208]	@ (800a924 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d009      	beq.n	800a86a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a33      	ldr	r2, [pc, #204]	@ (800a928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d004      	beq.n	800a86a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a31      	ldr	r2, [pc, #196]	@ (800a92c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d108      	bne.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a870:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	4313      	orrs	r3, r2
 800a87a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a21      	ldr	r2, [pc, #132]	@ (800a924 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d022      	beq.n	800a8ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ac:	d01d      	beq.n	800a8ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a1f      	ldr	r2, [pc, #124]	@ (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d018      	beq.n	800a8ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d013      	beq.n	800a8ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a1c      	ldr	r2, [pc, #112]	@ (800a938 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d00e      	beq.n	800a8ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a15      	ldr	r2, [pc, #84]	@ (800a928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d009      	beq.n	800a8ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a18      	ldr	r2, [pc, #96]	@ (800a93c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d004      	beq.n	800a8ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a11      	ldr	r2, [pc, #68]	@ (800a92c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d10c      	bne.n	800a904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	40012c00 	.word	0x40012c00
 800a928:	40013400 	.word	0x40013400
 800a92c:	40015000 	.word	0x40015000
 800a930:	40000400 	.word	0x40000400
 800a934:	40000800 	.word	0x40000800
 800a938:	40000c00 	.word	0x40000c00
 800a93c:	40014000 	.word	0x40014000

0800a940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a954:	2b01      	cmp	r3, #1
 800a956:	d101      	bne.n	800a95c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a958:	2302      	movs	r3, #2
 800a95a:	e078      	b.n	800aa4e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	041b      	lsls	r3, r3, #16
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a1c      	ldr	r2, [pc, #112]	@ (800aa5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d009      	beq.n	800aa02 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a1b      	ldr	r2, [pc, #108]	@ (800aa60 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d004      	beq.n	800aa02 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a19      	ldr	r2, [pc, #100]	@ (800aa64 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d11c      	bne.n	800aa3c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0c:	051b      	lsls	r3, r3, #20
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40012c00 	.word	0x40012c00
 800aa60:	40013400 	.word	0x40013400
 800aa64:	40015000 	.word	0x40015000

0800aa68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	f003 030f 	and.w	r3, r3, #15
 800ab06:	2204      	movs	r2, #4
 800ab08:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6a1a      	ldr	r2, [r3, #32]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	43db      	mvns	r3, r3
 800ab16:	401a      	ands	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6a1a      	ldr	r2, [r3, #32]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	f003 030f 	and.w	r3, r3, #15
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	fa01 f303 	lsl.w	r3, r1, r3
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	621a      	str	r2, [r3, #32]
}
 800ab32:	bf00      	nop
 800ab34:	371c      	adds	r7, #28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e042      	b.n	800abd6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7f9 f966 	bl	8003e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2224      	movs	r2, #36	@ 0x24
 800ab6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f022 0201 	bic.w	r2, r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d002      	beq.n	800ab8e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 ff1d 	bl	800b9c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fc1e 	bl	800b3d0 <UART_SetConfig>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d101      	bne.n	800ab9e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e01b      	b.n	800abd6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800abac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800abbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f042 0201 	orr.w	r2, r2, #1
 800abcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 ff9c 	bl	800bb0c <UART_CheckIdleState>
 800abd4:	4603      	mov	r3, r0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b08a      	sub	sp, #40	@ 0x28
 800abe2:	af02      	add	r7, sp, #8
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	603b      	str	r3, [r7, #0]
 800abea:	4613      	mov	r3, r2
 800abec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	d17b      	bne.n	800acf0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <HAL_UART_Transmit+0x26>
 800abfe:	88fb      	ldrh	r3, [r7, #6]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e074      	b.n	800acf2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2221      	movs	r2, #33	@ 0x21
 800ac14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac18:	f7f9 fa2a 	bl	8004070 <HAL_GetTick>
 800ac1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	88fa      	ldrh	r2, [r7, #6]
 800ac22:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	88fa      	ldrh	r2, [r7, #6]
 800ac2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac36:	d108      	bne.n	800ac4a <HAL_UART_Transmit+0x6c>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	61bb      	str	r3, [r7, #24]
 800ac48:	e003      	b.n	800ac52 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac52:	e030      	b.n	800acb6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2180      	movs	r1, #128	@ 0x80
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fffe 	bl	800bc60 <UART_WaitOnFlagUntilTimeout>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e03d      	b.n	800acf2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	3302      	adds	r3, #2
 800ac90:	61bb      	str	r3, [r7, #24]
 800ac92:	e007      	b.n	800aca4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	781a      	ldrb	r2, [r3, #0]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	3301      	adds	r3, #1
 800aca2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800acaa:	b29b      	uxth	r3, r3
 800acac:	3b01      	subs	r3, #1
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1c8      	bne.n	800ac54 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2200      	movs	r2, #0
 800acca:	2140      	movs	r1, #64	@ 0x40
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 ffc7 	bl	800bc60 <UART_WaitOnFlagUntilTimeout>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d005      	beq.n	800ace4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2220      	movs	r2, #32
 800acdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ace0:	2303      	movs	r3, #3
 800ace2:	e006      	b.n	800acf2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	e000      	b.n	800acf2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800acf0:	2302      	movs	r3, #2
  }
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3720      	adds	r7, #32
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b0ba      	sub	sp, #232	@ 0xe8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad26:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ad30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d11b      	bne.n	800ad70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad3c:	f003 0320 	and.w	r3, r3, #32
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d015      	beq.n	800ad70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad48:	f003 0320 	and.w	r3, r3, #32
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d105      	bne.n	800ad5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d009      	beq.n	800ad70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 8300 	beq.w	800b366 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	4798      	blx	r3
      }
      return;
 800ad6e:	e2fa      	b.n	800b366 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 8123 	beq.w	800afc0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad7e:	4b8d      	ldr	r3, [pc, #564]	@ (800afb4 <HAL_UART_IRQHandler+0x2b8>)
 800ad80:	4013      	ands	r3, r2
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d106      	bne.n	800ad94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ad8a:	4b8b      	ldr	r3, [pc, #556]	@ (800afb8 <HAL_UART_IRQHandler+0x2bc>)
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f000 8116 	beq.w	800afc0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d011      	beq.n	800adc4 <HAL_UART_IRQHandler+0xc8>
 800ada0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ada4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2201      	movs	r2, #1
 800adb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adba:	f043 0201 	orr.w	r2, r3, #1
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc8:	f003 0302 	and.w	r3, r3, #2
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d011      	beq.n	800adf4 <HAL_UART_IRQHandler+0xf8>
 800add0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2202      	movs	r2, #2
 800ade2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adea:	f043 0204 	orr.w	r2, r3, #4
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d011      	beq.n	800ae24 <HAL_UART_IRQHandler+0x128>
 800ae00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00b      	beq.n	800ae24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2204      	movs	r2, #4
 800ae12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae1a:	f043 0202 	orr.w	r2, r3, #2
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae28:	f003 0308 	and.w	r3, r3, #8
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d017      	beq.n	800ae60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d105      	bne.n	800ae48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ae40:	4b5c      	ldr	r3, [pc, #368]	@ (800afb4 <HAL_UART_IRQHandler+0x2b8>)
 800ae42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00b      	beq.n	800ae60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2208      	movs	r2, #8
 800ae4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae56:	f043 0208 	orr.w	r2, r3, #8
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d012      	beq.n	800ae92 <HAL_UART_IRQHandler+0x196>
 800ae6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00c      	beq.n	800ae92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae88:	f043 0220 	orr.w	r2, r3, #32
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 8266 	beq.w	800b36a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aea2:	f003 0320 	and.w	r3, r3, #32
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d013      	beq.n	800aed2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aeaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d105      	bne.n	800aec2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aeb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aeba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d007      	beq.n	800aed2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aed8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aee6:	2b40      	cmp	r3, #64	@ 0x40
 800aee8:	d005      	beq.n	800aef6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aeea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aeee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d054      	beq.n	800afa0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f001 f807 	bl	800bf0a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af06:	2b40      	cmp	r3, #64	@ 0x40
 800af08:	d146      	bne.n	800af98 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3308      	adds	r3, #8
 800af10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800af20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3308      	adds	r3, #8
 800af32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800af36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800af3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800af42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af46:	e841 2300 	strex	r3, r2, [r1]
 800af4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800af4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1d9      	bne.n	800af0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d017      	beq.n	800af90 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af66:	4a15      	ldr	r2, [pc, #84]	@ (800afbc <HAL_UART_IRQHandler+0x2c0>)
 800af68:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af70:	4618      	mov	r0, r3
 800af72:	f7fa fead 	bl	8005cd0 <HAL_DMA_Abort_IT>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d019      	beq.n	800afb0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800af8a:	4610      	mov	r0, r2
 800af8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8e:	e00f      	b.n	800afb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fa13 	bl	800b3bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af96:	e00b      	b.n	800afb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fa0f 	bl	800b3bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9e:	e007      	b.n	800afb0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fa0b 	bl	800b3bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800afae:	e1dc      	b.n	800b36a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb0:	bf00      	nop
    return;
 800afb2:	e1da      	b.n	800b36a <HAL_UART_IRQHandler+0x66e>
 800afb4:	10000001 	.word	0x10000001
 800afb8:	04000120 	.word	0x04000120
 800afbc:	0800c1c1 	.word	0x0800c1c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	f040 8170 	bne.w	800b2aa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afce:	f003 0310 	and.w	r3, r3, #16
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 8169 	beq.w	800b2aa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afdc:	f003 0310 	and.w	r3, r3, #16
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 8162 	beq.w	800b2aa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2210      	movs	r2, #16
 800afec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aff8:	2b40      	cmp	r3, #64	@ 0x40
 800affa:	f040 80d8 	bne.w	800b1ae <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b00c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 80af 	beq.w	800b174 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b01c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b020:	429a      	cmp	r2, r3
 800b022:	f080 80a7 	bcs.w	800b174 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b02c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 0320 	and.w	r3, r3, #32
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f040 8087 	bne.w	800b152 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b058:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b05c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	461a      	mov	r2, r3
 800b06a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b06e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b072:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b076:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b07a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b07e:	e841 2300 	strex	r3, r2, [r1]
 800b082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1da      	bne.n	800b044 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3308      	adds	r3, #8
 800b094:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b098:	e853 3f00 	ldrex	r3, [r3]
 800b09c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b09e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0a0:	f023 0301 	bic.w	r3, r3, #1
 800b0a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b0b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b0b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b0ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b0be:	e841 2300 	strex	r3, r2, [r1]
 800b0c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b0c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1e1      	bne.n	800b08e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0d4:	e853 3f00 	ldrex	r3, [r3]
 800b0d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b0da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b0ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b0f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b0fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e3      	bne.n	800b0ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2220      	movs	r2, #32
 800b106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b11e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b120:	f023 0310 	bic.w	r3, r3, #16
 800b124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	461a      	mov	r2, r3
 800b12e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b132:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b134:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b136:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b138:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b13a:	e841 2300 	strex	r3, r2, [r1]
 800b13e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1e4      	bne.n	800b110 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fa fd66 	bl	8005c1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2202      	movs	r2, #2
 800b156:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b164:	b29b      	uxth	r3, r3
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	b29b      	uxth	r3, r3
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7f6 fe7b 	bl	8001e68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b172:	e0fc      	b.n	800b36e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b17a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b17e:	429a      	cmp	r2, r3
 800b180:	f040 80f5 	bne.w	800b36e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b20      	cmp	r3, #32
 800b194:	f040 80eb 	bne.w	800b36e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2202      	movs	r2, #2
 800b19c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7f6 fe5e 	bl	8001e68 <HAL_UARTEx_RxEventCallback>
      return;
 800b1ac:	e0df      	b.n	800b36e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 80d1 	beq.w	800b372 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b1d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 80cc 	beq.w	800b372 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e2:	e853 3f00 	ldrex	r3, [r3]
 800b1e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b1fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e4      	bne.n	800b1da <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3308      	adds	r3, #8
 800b216:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21a:	e853 3f00 	ldrex	r3, [r3]
 800b21e:	623b      	str	r3, [r7, #32]
   return(result);
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b226:	f023 0301 	bic.w	r3, r3, #1
 800b22a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3308      	adds	r3, #8
 800b234:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b238:	633a      	str	r2, [r7, #48]	@ 0x30
 800b23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b23e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b240:	e841 2300 	strex	r3, r2, [r1]
 800b244:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1e1      	bne.n	800b210 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2220      	movs	r2, #32
 800b250:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f023 0310 	bic.w	r3, r3, #16
 800b274:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b282:	61fb      	str	r3, [r7, #28]
 800b284:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	69b9      	ldr	r1, [r7, #24]
 800b288:	69fa      	ldr	r2, [r7, #28]
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	617b      	str	r3, [r7, #20]
   return(result);
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e4      	bne.n	800b260 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2202      	movs	r2, #2
 800b29a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b29c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7f6 fde0 	bl	8001e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2a8:	e063      	b.n	800b372 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00e      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x5d8>
 800b2b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d008      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b2ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 ffb4 	bl	800c23a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2d2:	e051      	b.n	800b378 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d014      	beq.n	800b30a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d105      	bne.n	800b2f8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d008      	beq.n	800b30a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d03a      	beq.n	800b376 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	4798      	blx	r3
    }
    return;
 800b308:	e035      	b.n	800b376 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b30e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <HAL_UART_IRQHandler+0x62e>
 800b316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b31a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 ff5e 	bl	800c1e4 <UART_EndTransmit_IT>
    return;
 800b328:	e026      	b.n	800b378 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b32e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b332:	2b00      	cmp	r3, #0
 800b334:	d009      	beq.n	800b34a <HAL_UART_IRQHandler+0x64e>
 800b336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b33a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 ff8d 	bl	800c262 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b348:	e016      	b.n	800b378 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b34e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d010      	beq.n	800b378 <HAL_UART_IRQHandler+0x67c>
 800b356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	da0c      	bge.n	800b378 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 ff75 	bl	800c24e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b364:	e008      	b.n	800b378 <HAL_UART_IRQHandler+0x67c>
      return;
 800b366:	bf00      	nop
 800b368:	e006      	b.n	800b378 <HAL_UART_IRQHandler+0x67c>
    return;
 800b36a:	bf00      	nop
 800b36c:	e004      	b.n	800b378 <HAL_UART_IRQHandler+0x67c>
      return;
 800b36e:	bf00      	nop
 800b370:	e002      	b.n	800b378 <HAL_UART_IRQHandler+0x67c>
      return;
 800b372:	bf00      	nop
 800b374:	e000      	b.n	800b378 <HAL_UART_IRQHandler+0x67c>
    return;
 800b376:	bf00      	nop
  }
}
 800b378:	37e8      	adds	r7, #232	@ 0xe8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3d4:	b08c      	sub	sp, #48	@ 0x30
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	689a      	ldr	r2, [r3, #8]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	4baa      	ldr	r3, [pc, #680]	@ (800b6a8 <UART_SetConfig+0x2d8>)
 800b400:	4013      	ands	r3, r2
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	6812      	ldr	r2, [r2, #0]
 800b406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b408:	430b      	orrs	r3, r1
 800b40a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	68da      	ldr	r2, [r3, #12]
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	430a      	orrs	r2, r1
 800b420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a9f      	ldr	r2, [pc, #636]	@ (800b6ac <UART_SetConfig+0x2dc>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d004      	beq.n	800b43c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b438:	4313      	orrs	r3, r2
 800b43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b446:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	6812      	ldr	r2, [r2, #0]
 800b44e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b450:	430b      	orrs	r3, r1
 800b452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45a:	f023 010f 	bic.w	r1, r3, #15
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	430a      	orrs	r2, r1
 800b468:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a90      	ldr	r2, [pc, #576]	@ (800b6b0 <UART_SetConfig+0x2e0>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d125      	bne.n	800b4c0 <UART_SetConfig+0xf0>
 800b474:	4b8f      	ldr	r3, [pc, #572]	@ (800b6b4 <UART_SetConfig+0x2e4>)
 800b476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b47a:	f003 0303 	and.w	r3, r3, #3
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d81a      	bhi.n	800b4b8 <UART_SetConfig+0xe8>
 800b482:	a201      	add	r2, pc, #4	@ (adr r2, 800b488 <UART_SetConfig+0xb8>)
 800b484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b488:	0800b499 	.word	0x0800b499
 800b48c:	0800b4a9 	.word	0x0800b4a9
 800b490:	0800b4a1 	.word	0x0800b4a1
 800b494:	0800b4b1 	.word	0x0800b4b1
 800b498:	2301      	movs	r3, #1
 800b49a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b49e:	e116      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4a6:	e112      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b4a8:	2304      	movs	r3, #4
 800b4aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ae:	e10e      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b4b0:	2308      	movs	r3, #8
 800b4b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4b6:	e10a      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b4b8:	2310      	movs	r3, #16
 800b4ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4be:	e106      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a7c      	ldr	r2, [pc, #496]	@ (800b6b8 <UART_SetConfig+0x2e8>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d138      	bne.n	800b53c <UART_SetConfig+0x16c>
 800b4ca:	4b7a      	ldr	r3, [pc, #488]	@ (800b6b4 <UART_SetConfig+0x2e4>)
 800b4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4d0:	f003 030c 	and.w	r3, r3, #12
 800b4d4:	2b0c      	cmp	r3, #12
 800b4d6:	d82d      	bhi.n	800b534 <UART_SetConfig+0x164>
 800b4d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b4e0 <UART_SetConfig+0x110>)
 800b4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4de:	bf00      	nop
 800b4e0:	0800b515 	.word	0x0800b515
 800b4e4:	0800b535 	.word	0x0800b535
 800b4e8:	0800b535 	.word	0x0800b535
 800b4ec:	0800b535 	.word	0x0800b535
 800b4f0:	0800b525 	.word	0x0800b525
 800b4f4:	0800b535 	.word	0x0800b535
 800b4f8:	0800b535 	.word	0x0800b535
 800b4fc:	0800b535 	.word	0x0800b535
 800b500:	0800b51d 	.word	0x0800b51d
 800b504:	0800b535 	.word	0x0800b535
 800b508:	0800b535 	.word	0x0800b535
 800b50c:	0800b535 	.word	0x0800b535
 800b510:	0800b52d 	.word	0x0800b52d
 800b514:	2300      	movs	r3, #0
 800b516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b51a:	e0d8      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b51c:	2302      	movs	r3, #2
 800b51e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b522:	e0d4      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b524:	2304      	movs	r3, #4
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52a:	e0d0      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b52c:	2308      	movs	r3, #8
 800b52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b532:	e0cc      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b534:	2310      	movs	r3, #16
 800b536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53a:	e0c8      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a5e      	ldr	r2, [pc, #376]	@ (800b6bc <UART_SetConfig+0x2ec>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d125      	bne.n	800b592 <UART_SetConfig+0x1c2>
 800b546:	4b5b      	ldr	r3, [pc, #364]	@ (800b6b4 <UART_SetConfig+0x2e4>)
 800b548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b54c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b550:	2b30      	cmp	r3, #48	@ 0x30
 800b552:	d016      	beq.n	800b582 <UART_SetConfig+0x1b2>
 800b554:	2b30      	cmp	r3, #48	@ 0x30
 800b556:	d818      	bhi.n	800b58a <UART_SetConfig+0x1ba>
 800b558:	2b20      	cmp	r3, #32
 800b55a:	d00a      	beq.n	800b572 <UART_SetConfig+0x1a2>
 800b55c:	2b20      	cmp	r3, #32
 800b55e:	d814      	bhi.n	800b58a <UART_SetConfig+0x1ba>
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <UART_SetConfig+0x19a>
 800b564:	2b10      	cmp	r3, #16
 800b566:	d008      	beq.n	800b57a <UART_SetConfig+0x1aa>
 800b568:	e00f      	b.n	800b58a <UART_SetConfig+0x1ba>
 800b56a:	2300      	movs	r3, #0
 800b56c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b570:	e0ad      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b572:	2302      	movs	r3, #2
 800b574:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b578:	e0a9      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b57a:	2304      	movs	r3, #4
 800b57c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b580:	e0a5      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b582:	2308      	movs	r3, #8
 800b584:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b588:	e0a1      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b58a:	2310      	movs	r3, #16
 800b58c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b590:	e09d      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a4a      	ldr	r2, [pc, #296]	@ (800b6c0 <UART_SetConfig+0x2f0>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d125      	bne.n	800b5e8 <UART_SetConfig+0x218>
 800b59c:	4b45      	ldr	r3, [pc, #276]	@ (800b6b4 <UART_SetConfig+0x2e4>)
 800b59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b5a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5a8:	d016      	beq.n	800b5d8 <UART_SetConfig+0x208>
 800b5aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5ac:	d818      	bhi.n	800b5e0 <UART_SetConfig+0x210>
 800b5ae:	2b80      	cmp	r3, #128	@ 0x80
 800b5b0:	d00a      	beq.n	800b5c8 <UART_SetConfig+0x1f8>
 800b5b2:	2b80      	cmp	r3, #128	@ 0x80
 800b5b4:	d814      	bhi.n	800b5e0 <UART_SetConfig+0x210>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <UART_SetConfig+0x1f0>
 800b5ba:	2b40      	cmp	r3, #64	@ 0x40
 800b5bc:	d008      	beq.n	800b5d0 <UART_SetConfig+0x200>
 800b5be:	e00f      	b.n	800b5e0 <UART_SetConfig+0x210>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5c6:	e082      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ce:	e07e      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b5d0:	2304      	movs	r3, #4
 800b5d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5d6:	e07a      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b5d8:	2308      	movs	r3, #8
 800b5da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5de:	e076      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b5e0:	2310      	movs	r3, #16
 800b5e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5e6:	e072      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a35      	ldr	r2, [pc, #212]	@ (800b6c4 <UART_SetConfig+0x2f4>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d12a      	bne.n	800b648 <UART_SetConfig+0x278>
 800b5f2:	4b30      	ldr	r3, [pc, #192]	@ (800b6b4 <UART_SetConfig+0x2e4>)
 800b5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b600:	d01a      	beq.n	800b638 <UART_SetConfig+0x268>
 800b602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b606:	d81b      	bhi.n	800b640 <UART_SetConfig+0x270>
 800b608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b60c:	d00c      	beq.n	800b628 <UART_SetConfig+0x258>
 800b60e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b612:	d815      	bhi.n	800b640 <UART_SetConfig+0x270>
 800b614:	2b00      	cmp	r3, #0
 800b616:	d003      	beq.n	800b620 <UART_SetConfig+0x250>
 800b618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b61c:	d008      	beq.n	800b630 <UART_SetConfig+0x260>
 800b61e:	e00f      	b.n	800b640 <UART_SetConfig+0x270>
 800b620:	2300      	movs	r3, #0
 800b622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b626:	e052      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b628:	2302      	movs	r3, #2
 800b62a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b62e:	e04e      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b630:	2304      	movs	r3, #4
 800b632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b636:	e04a      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b638:	2308      	movs	r3, #8
 800b63a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b63e:	e046      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b640:	2310      	movs	r3, #16
 800b642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b646:	e042      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a17      	ldr	r2, [pc, #92]	@ (800b6ac <UART_SetConfig+0x2dc>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d13a      	bne.n	800b6c8 <UART_SetConfig+0x2f8>
 800b652:	4b18      	ldr	r3, [pc, #96]	@ (800b6b4 <UART_SetConfig+0x2e4>)
 800b654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b658:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b65c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b660:	d01a      	beq.n	800b698 <UART_SetConfig+0x2c8>
 800b662:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b666:	d81b      	bhi.n	800b6a0 <UART_SetConfig+0x2d0>
 800b668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b66c:	d00c      	beq.n	800b688 <UART_SetConfig+0x2b8>
 800b66e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b672:	d815      	bhi.n	800b6a0 <UART_SetConfig+0x2d0>
 800b674:	2b00      	cmp	r3, #0
 800b676:	d003      	beq.n	800b680 <UART_SetConfig+0x2b0>
 800b678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b67c:	d008      	beq.n	800b690 <UART_SetConfig+0x2c0>
 800b67e:	e00f      	b.n	800b6a0 <UART_SetConfig+0x2d0>
 800b680:	2300      	movs	r3, #0
 800b682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b686:	e022      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b688:	2302      	movs	r3, #2
 800b68a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b68e:	e01e      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b690:	2304      	movs	r3, #4
 800b692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b696:	e01a      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b698:	2308      	movs	r3, #8
 800b69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b69e:	e016      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b6a0:	2310      	movs	r3, #16
 800b6a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6a6:	e012      	b.n	800b6ce <UART_SetConfig+0x2fe>
 800b6a8:	cfff69f3 	.word	0xcfff69f3
 800b6ac:	40008000 	.word	0x40008000
 800b6b0:	40013800 	.word	0x40013800
 800b6b4:	40021000 	.word	0x40021000
 800b6b8:	40004400 	.word	0x40004400
 800b6bc:	40004800 	.word	0x40004800
 800b6c0:	40004c00 	.word	0x40004c00
 800b6c4:	40005000 	.word	0x40005000
 800b6c8:	2310      	movs	r3, #16
 800b6ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4aae      	ldr	r2, [pc, #696]	@ (800b98c <UART_SetConfig+0x5bc>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	f040 8097 	bne.w	800b808 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6de:	2b08      	cmp	r3, #8
 800b6e0:	d823      	bhi.n	800b72a <UART_SetConfig+0x35a>
 800b6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e8 <UART_SetConfig+0x318>)
 800b6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e8:	0800b70d 	.word	0x0800b70d
 800b6ec:	0800b72b 	.word	0x0800b72b
 800b6f0:	0800b715 	.word	0x0800b715
 800b6f4:	0800b72b 	.word	0x0800b72b
 800b6f8:	0800b71b 	.word	0x0800b71b
 800b6fc:	0800b72b 	.word	0x0800b72b
 800b700:	0800b72b 	.word	0x0800b72b
 800b704:	0800b72b 	.word	0x0800b72b
 800b708:	0800b723 	.word	0x0800b723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b70c:	f7fc f89c 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 800b710:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b712:	e010      	b.n	800b736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b714:	4b9e      	ldr	r3, [pc, #632]	@ (800b990 <UART_SetConfig+0x5c0>)
 800b716:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b718:	e00d      	b.n	800b736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b71a:	f7fc f829 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 800b71e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b720:	e009      	b.n	800b736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b728:	e005      	b.n	800b736 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 8130 	beq.w	800b99e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b742:	4a94      	ldr	r2, [pc, #592]	@ (800b994 <UART_SetConfig+0x5c4>)
 800b744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b748:	461a      	mov	r2, r3
 800b74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b750:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	4613      	mov	r3, r2
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	4413      	add	r3, r2
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d305      	bcc.n	800b76e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b768:	69ba      	ldr	r2, [r7, #24]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d903      	bls.n	800b776 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b774:	e113      	b.n	800b99e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b778:	2200      	movs	r2, #0
 800b77a:	60bb      	str	r3, [r7, #8]
 800b77c:	60fa      	str	r2, [r7, #12]
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b782:	4a84      	ldr	r2, [pc, #528]	@ (800b994 <UART_SetConfig+0x5c4>)
 800b784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	2200      	movs	r2, #0
 800b78c:	603b      	str	r3, [r7, #0]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b798:	f7f4 fd8e 	bl	80002b8 <__aeabi_uldivmod>
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	f04f 0200 	mov.w	r2, #0
 800b7a8:	f04f 0300 	mov.w	r3, #0
 800b7ac:	020b      	lsls	r3, r1, #8
 800b7ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7b2:	0202      	lsls	r2, r0, #8
 800b7b4:	6979      	ldr	r1, [r7, #20]
 800b7b6:	6849      	ldr	r1, [r1, #4]
 800b7b8:	0849      	lsrs	r1, r1, #1
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	460c      	mov	r4, r1
 800b7be:	4605      	mov	r5, r0
 800b7c0:	eb12 0804 	adds.w	r8, r2, r4
 800b7c4:	eb43 0905 	adc.w	r9, r3, r5
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	469a      	mov	sl, r3
 800b7d0:	4693      	mov	fp, r2
 800b7d2:	4652      	mov	r2, sl
 800b7d4:	465b      	mov	r3, fp
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	4649      	mov	r1, r9
 800b7da:	f7f4 fd6d 	bl	80002b8 <__aeabi_uldivmod>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7ec:	d308      	bcc.n	800b800 <UART_SetConfig+0x430>
 800b7ee:	6a3b      	ldr	r3, [r7, #32]
 800b7f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7f4:	d204      	bcs.n	800b800 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6a3a      	ldr	r2, [r7, #32]
 800b7fc:	60da      	str	r2, [r3, #12]
 800b7fe:	e0ce      	b.n	800b99e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b806:	e0ca      	b.n	800b99e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	69db      	ldr	r3, [r3, #28]
 800b80c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b810:	d166      	bne.n	800b8e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b812:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b816:	2b08      	cmp	r3, #8
 800b818:	d827      	bhi.n	800b86a <UART_SetConfig+0x49a>
 800b81a:	a201      	add	r2, pc, #4	@ (adr r2, 800b820 <UART_SetConfig+0x450>)
 800b81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b820:	0800b845 	.word	0x0800b845
 800b824:	0800b84d 	.word	0x0800b84d
 800b828:	0800b855 	.word	0x0800b855
 800b82c:	0800b86b 	.word	0x0800b86b
 800b830:	0800b85b 	.word	0x0800b85b
 800b834:	0800b86b 	.word	0x0800b86b
 800b838:	0800b86b 	.word	0x0800b86b
 800b83c:	0800b86b 	.word	0x0800b86b
 800b840:	0800b863 	.word	0x0800b863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b844:	f7fc f800 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 800b848:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b84a:	e014      	b.n	800b876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b84c:	f7fc f812 	bl	8007874 <HAL_RCC_GetPCLK2Freq>
 800b850:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b852:	e010      	b.n	800b876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b854:	4b4e      	ldr	r3, [pc, #312]	@ (800b990 <UART_SetConfig+0x5c0>)
 800b856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b858:	e00d      	b.n	800b876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b85a:	f7fb ff89 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 800b85e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b860:	e009      	b.n	800b876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b866:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b868:	e005      	b.n	800b876 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b86a:	2300      	movs	r3, #0
 800b86c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 8090 	beq.w	800b99e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b882:	4a44      	ldr	r2, [pc, #272]	@ (800b994 <UART_SetConfig+0x5c4>)
 800b884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b888:	461a      	mov	r2, r3
 800b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b890:	005a      	lsls	r2, r3, #1
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	085b      	lsrs	r3, r3, #1
 800b898:	441a      	add	r2, r3
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	2b0f      	cmp	r3, #15
 800b8a8:	d916      	bls.n	800b8d8 <UART_SetConfig+0x508>
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8b0:	d212      	bcs.n	800b8d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	f023 030f 	bic.w	r3, r3, #15
 800b8ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	085b      	lsrs	r3, r3, #1
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	8bfb      	ldrh	r3, [r7, #30]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	8bfa      	ldrh	r2, [r7, #30]
 800b8d4:	60da      	str	r2, [r3, #12]
 800b8d6:	e062      	b.n	800b99e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b8de:	e05e      	b.n	800b99e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	d828      	bhi.n	800b93a <UART_SetConfig+0x56a>
 800b8e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f0 <UART_SetConfig+0x520>)
 800b8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ee:	bf00      	nop
 800b8f0:	0800b915 	.word	0x0800b915
 800b8f4:	0800b91d 	.word	0x0800b91d
 800b8f8:	0800b925 	.word	0x0800b925
 800b8fc:	0800b93b 	.word	0x0800b93b
 800b900:	0800b92b 	.word	0x0800b92b
 800b904:	0800b93b 	.word	0x0800b93b
 800b908:	0800b93b 	.word	0x0800b93b
 800b90c:	0800b93b 	.word	0x0800b93b
 800b910:	0800b933 	.word	0x0800b933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b914:	f7fb ff98 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 800b918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b91a:	e014      	b.n	800b946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b91c:	f7fb ffaa 	bl	8007874 <HAL_RCC_GetPCLK2Freq>
 800b920:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b922:	e010      	b.n	800b946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b924:	4b1a      	ldr	r3, [pc, #104]	@ (800b990 <UART_SetConfig+0x5c0>)
 800b926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b928:	e00d      	b.n	800b946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b92a:	f7fb ff21 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 800b92e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b930:	e009      	b.n	800b946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b938:	e005      	b.n	800b946 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b944:	bf00      	nop
    }

    if (pclk != 0U)
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d028      	beq.n	800b99e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b950:	4a10      	ldr	r2, [pc, #64]	@ (800b994 <UART_SetConfig+0x5c4>)
 800b952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b956:	461a      	mov	r2, r3
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	085b      	lsrs	r3, r3, #1
 800b964:	441a      	add	r2, r3
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b96e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	2b0f      	cmp	r3, #15
 800b974:	d910      	bls.n	800b998 <UART_SetConfig+0x5c8>
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b97c:	d20c      	bcs.n	800b998 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b97e:	6a3b      	ldr	r3, [r7, #32]
 800b980:	b29a      	uxth	r2, r3
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	60da      	str	r2, [r3, #12]
 800b988:	e009      	b.n	800b99e <UART_SetConfig+0x5ce>
 800b98a:	bf00      	nop
 800b98c:	40008000 	.word	0x40008000
 800b990:	00f42400 	.word	0x00f42400
 800b994:	0800c5d8 	.word	0x0800c5d8
      }
      else
      {
        ret = HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b9ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3730      	adds	r7, #48	@ 0x30
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b9c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d4:	f003 0308 	and.w	r3, r3, #8
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00a      	beq.n	800b9f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f6:	f003 0301 	and.w	r3, r3, #1
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00a      	beq.n	800ba14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	430a      	orrs	r2, r1
 800ba12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00a      	beq.n	800ba36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	430a      	orrs	r2, r1
 800ba34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba3a:	f003 0304 	and.w	r3, r3, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00a      	beq.n	800ba58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	430a      	orrs	r2, r1
 800ba56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba5c:	f003 0310 	and.w	r3, r3, #16
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00a      	beq.n	800ba7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	430a      	orrs	r2, r1
 800ba78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba7e:	f003 0320 	and.w	r3, r3, #32
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00a      	beq.n	800ba9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	430a      	orrs	r2, r1
 800ba9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d01a      	beq.n	800bade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bac6:	d10a      	bne.n	800bade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	430a      	orrs	r2, r1
 800badc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00a      	beq.n	800bb00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	605a      	str	r2, [r3, #4]
  }
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b098      	sub	sp, #96	@ 0x60
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb1c:	f7f8 faa8 	bl	8004070 <HAL_GetTick>
 800bb20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 0308 	and.w	r3, r3, #8
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d12f      	bne.n	800bb90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f88e 	bl	800bc60 <UART_WaitOnFlagUntilTimeout>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d022      	beq.n	800bb90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb52:	e853 3f00 	ldrex	r3, [r3]
 800bb56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	461a      	mov	r2, r3
 800bb66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb68:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb70:	e841 2300 	strex	r3, r2, [r1]
 800bb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1e6      	bne.n	800bb4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2220      	movs	r2, #32
 800bb80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e063      	b.n	800bc58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f003 0304 	and.w	r3, r3, #4
 800bb9a:	2b04      	cmp	r3, #4
 800bb9c:	d149      	bne.n	800bc32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bba6:	2200      	movs	r2, #0
 800bba8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f857 	bl	800bc60 <UART_WaitOnFlagUntilTimeout>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d03c      	beq.n	800bc32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	623b      	str	r3, [r7, #32]
   return(result);
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e6      	bne.n	800bbb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3308      	adds	r3, #8
 800bbf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f023 0301 	bic.w	r3, r3, #1
 800bc00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3308      	adds	r3, #8
 800bc08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc0a:	61fa      	str	r2, [r7, #28]
 800bc0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0e:	69b9      	ldr	r1, [r7, #24]
 800bc10:	69fa      	ldr	r2, [r7, #28]
 800bc12:	e841 2300 	strex	r3, r2, [r1]
 800bc16:	617b      	str	r3, [r7, #20]
   return(result);
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1e5      	bne.n	800bbea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2220      	movs	r2, #32
 800bc22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e012      	b.n	800bc58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2220      	movs	r2, #32
 800bc36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3758      	adds	r7, #88	@ 0x58
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	603b      	str	r3, [r7, #0]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc70:	e04f      	b.n	800bd12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc78:	d04b      	beq.n	800bd12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc7a:	f7f8 f9f9 	bl	8004070 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	69ba      	ldr	r2, [r7, #24]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d302      	bcc.n	800bc90 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc90:	2303      	movs	r3, #3
 800bc92:	e04e      	b.n	800bd32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f003 0304 	and.w	r3, r3, #4
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d037      	beq.n	800bd12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b80      	cmp	r3, #128	@ 0x80
 800bca6:	d034      	beq.n	800bd12 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2b40      	cmp	r3, #64	@ 0x40
 800bcac:	d031      	beq.n	800bd12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	f003 0308 	and.w	r3, r3, #8
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	d110      	bne.n	800bcde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2208      	movs	r2, #8
 800bcc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f000 f920 	bl	800bf0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2208      	movs	r2, #8
 800bcce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e029      	b.n	800bd32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcec:	d111      	bne.n	800bd12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bcf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 f906 	bl	800bf0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e00f      	b.n	800bd32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	69da      	ldr	r2, [r3, #28]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	bf0c      	ite	eq
 800bd22:	2301      	moveq	r3, #1
 800bd24:	2300      	movne	r3, #0
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	461a      	mov	r2, r3
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d0a0      	beq.n	800bc72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b096      	sub	sp, #88	@ 0x58
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	88fa      	ldrh	r2, [r7, #6]
 800bd54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2222      	movs	r2, #34	@ 0x22
 800bd64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d02d      	beq.n	800bdce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd78:	4a40      	ldr	r2, [pc, #256]	@ (800be7c <UART_Start_Receive_DMA+0x140>)
 800bd7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd82:	4a3f      	ldr	r2, [pc, #252]	@ (800be80 <UART_Start_Receive_DMA+0x144>)
 800bd84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd8c:	4a3d      	ldr	r2, [pc, #244]	@ (800be84 <UART_Start_Receive_DMA+0x148>)
 800bd8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd96:	2200      	movs	r2, #0
 800bd98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3324      	adds	r3, #36	@ 0x24
 800bda6:	4619      	mov	r1, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdac:	461a      	mov	r2, r3
 800bdae:	88fb      	ldrh	r3, [r7, #6]
 800bdb0:	f7f9 feba 	bl	8005b28 <HAL_DMA_Start_IT>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d009      	beq.n	800bdce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2210      	movs	r2, #16
 800bdbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2220      	movs	r2, #32
 800bdc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e051      	b.n	800be72 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d018      	beq.n	800be08 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdde:	e853 3f00 	ldrex	r3, [r3]
 800bde2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdea:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdf6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bdfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdfc:	e841 2300 	strex	r3, r2, [r1]
 800be00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1e6      	bne.n	800bdd6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3308      	adds	r3, #8
 800be0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be12:	e853 3f00 	ldrex	r3, [r3]
 800be16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1a:	f043 0301 	orr.w	r3, r3, #1
 800be1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3308      	adds	r3, #8
 800be26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be28:	637a      	str	r2, [r7, #52]	@ 0x34
 800be2a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be30:	e841 2300 	strex	r3, r2, [r1]
 800be34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1e5      	bne.n	800be08 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3308      	adds	r3, #8
 800be42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	e853 3f00 	ldrex	r3, [r3]
 800be4a:	613b      	str	r3, [r7, #16]
   return(result);
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3308      	adds	r3, #8
 800be5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be5c:	623a      	str	r2, [r7, #32]
 800be5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be60:	69f9      	ldr	r1, [r7, #28]
 800be62:	6a3a      	ldr	r2, [r7, #32]
 800be64:	e841 2300 	strex	r3, r2, [r1]
 800be68:	61bb      	str	r3, [r7, #24]
   return(result);
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1e5      	bne.n	800be3c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3758      	adds	r7, #88	@ 0x58
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	0800bfd7 	.word	0x0800bfd7
 800be80:	0800c103 	.word	0x0800c103
 800be84:	0800c141 	.word	0x0800c141

0800be88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be88:	b480      	push	{r7}
 800be8a:	b08f      	sub	sp, #60	@ 0x3c
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	e853 3f00 	ldrex	r3, [r3]
 800be9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bea4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800beb0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800beb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800beb6:	e841 2300 	strex	r3, r2, [r1]
 800beba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1e6      	bne.n	800be90 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3308      	adds	r3, #8
 800bec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	e853 3f00 	ldrex	r3, [r3]
 800bed0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bed8:	633b      	str	r3, [r7, #48]	@ 0x30
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	3308      	adds	r3, #8
 800bee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bee2:	61ba      	str	r2, [r7, #24]
 800bee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee6:	6979      	ldr	r1, [r7, #20]
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	e841 2300 	strex	r3, r2, [r1]
 800beee:	613b      	str	r3, [r7, #16]
   return(result);
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1e5      	bne.n	800bec2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2220      	movs	r2, #32
 800befa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800befe:	bf00      	nop
 800bf00:	373c      	adds	r7, #60	@ 0x3c
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	b095      	sub	sp, #84	@ 0x54
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf1a:	e853 3f00 	ldrex	r3, [r3]
 800bf1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf30:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf38:	e841 2300 	strex	r3, r2, [r1]
 800bf3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e6      	bne.n	800bf12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	6a3b      	ldr	r3, [r7, #32]
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf5a:	f023 0301 	bic.w	r3, r3, #1
 800bf5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	3308      	adds	r3, #8
 800bf66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf70:	e841 2300 	strex	r3, r2, [r1]
 800bf74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e3      	bne.n	800bf44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d118      	bne.n	800bfb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	e853 3f00 	ldrex	r3, [r3]
 800bf90:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	f023 0310 	bic.w	r3, r3, #16
 800bf98:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfa2:	61bb      	str	r3, [r7, #24]
 800bfa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa6:	6979      	ldr	r1, [r7, #20]
 800bfa8:	69ba      	ldr	r2, [r7, #24]
 800bfaa:	e841 2300 	strex	r3, r2, [r1]
 800bfae:	613b      	str	r3, [r7, #16]
   return(result);
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1e6      	bne.n	800bf84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bfca:	bf00      	nop
 800bfcc:	3754      	adds	r7, #84	@ 0x54
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b09c      	sub	sp, #112	@ 0x70
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 0320 	and.w	r3, r3, #32
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d171      	bne.n	800c0d6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bff4:	2200      	movs	r2, #0
 800bff6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c00a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c00e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c018:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c01a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c01e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e6      	bne.n	800bffa <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c02c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3308      	adds	r3, #8
 800c032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c036:	e853 3f00 	ldrex	r3, [r3]
 800c03a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c03e:	f023 0301 	bic.w	r3, r3, #1
 800c042:	667b      	str	r3, [r7, #100]	@ 0x64
 800c044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3308      	adds	r3, #8
 800c04a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c04c:	647a      	str	r2, [r7, #68]	@ 0x44
 800c04e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e5      	bne.n	800c02c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3308      	adds	r3, #8
 800c066:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06a:	e853 3f00 	ldrex	r3, [r3]
 800c06e:	623b      	str	r3, [r7, #32]
   return(result);
 800c070:	6a3b      	ldr	r3, [r7, #32]
 800c072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c076:	663b      	str	r3, [r7, #96]	@ 0x60
 800c078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	3308      	adds	r3, #8
 800c07e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c080:	633a      	str	r2, [r7, #48]	@ 0x30
 800c082:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c084:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c088:	e841 2300 	strex	r3, r2, [r1]
 800c08c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1e5      	bne.n	800c060 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c096:	2220      	movs	r2, #32
 800c098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c09c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c09e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d118      	bne.n	800c0d6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	e853 3f00 	ldrex	r3, [r3]
 800c0b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f023 0310 	bic.w	r3, r3, #16
 800c0b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0c2:	61fb      	str	r3, [r7, #28]
 800c0c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	69b9      	ldr	r1, [r7, #24]
 800c0c8:	69fa      	ldr	r2, [r7, #28]
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	617b      	str	r3, [r7, #20]
   return(result);
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e6      	bne.n	800c0a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0d8:	2200      	movs	r2, #0
 800c0da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d107      	bne.n	800c0f4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0ee:	f7f5 febb 	bl	8001e68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0f2:	e002      	b.n	800c0fa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c0f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0f6:	f7ff f94d 	bl	800b394 <HAL_UART_RxCpltCallback>
}
 800c0fa:	bf00      	nop
 800c0fc:	3770      	adds	r7, #112	@ 0x70
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2201      	movs	r2, #1
 800c114:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d109      	bne.n	800c132 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c124:	085b      	lsrs	r3, r3, #1
 800c126:	b29b      	uxth	r3, r3
 800c128:	4619      	mov	r1, r3
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f7f5 fe9c 	bl	8001e68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c130:	e002      	b.n	800c138 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7ff f938 	bl	800b3a8 <HAL_UART_RxHalfCpltCallback>
}
 800c138:	bf00      	nop
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c14c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c154:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c15c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c168:	2b80      	cmp	r3, #128	@ 0x80
 800c16a:	d109      	bne.n	800c180 <UART_DMAError+0x40>
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	2b21      	cmp	r3, #33	@ 0x21
 800c170:	d106      	bne.n	800c180 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2200      	movs	r2, #0
 800c176:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c17a:	6978      	ldr	r0, [r7, #20]
 800c17c:	f7ff fe84 	bl	800be88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c18a:	2b40      	cmp	r3, #64	@ 0x40
 800c18c:	d109      	bne.n	800c1a2 <UART_DMAError+0x62>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2b22      	cmp	r3, #34	@ 0x22
 800c192:	d106      	bne.n	800c1a2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2200      	movs	r2, #0
 800c198:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c19c:	6978      	ldr	r0, [r7, #20]
 800c19e:	f7ff feb4 	bl	800bf0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1a8:	f043 0210 	orr.w	r2, r3, #16
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1b2:	6978      	ldr	r0, [r7, #20]
 800c1b4:	f7ff f902 	bl	800b3bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1b8:	bf00      	nop
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7ff f8f0 	bl	800b3bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1dc:	bf00      	nop
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c200:	61fb      	str	r3, [r7, #28]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	61bb      	str	r3, [r7, #24]
 800c20c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6979      	ldr	r1, [r7, #20]
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	613b      	str	r3, [r7, #16]
   return(result);
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e6      	bne.n	800c1ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2220      	movs	r2, #32
 800c222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff f8a7 	bl	800b380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c232:	bf00      	nop
 800c234:	3720      	adds	r7, #32
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c23a:	b480      	push	{r7}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c242:	bf00      	nop
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c256:	bf00      	nop
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c262:	b480      	push	{r7}
 800c264:	b083      	sub	sp, #12
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c26a:	bf00      	nop
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c276:	b480      	push	{r7}
 800c278:	b085      	sub	sp, #20
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c284:	2b01      	cmp	r3, #1
 800c286:	d101      	bne.n	800c28c <HAL_UARTEx_DisableFifoMode+0x16>
 800c288:	2302      	movs	r3, #2
 800c28a:	e027      	b.n	800c2dc <HAL_UARTEx_DisableFifoMode+0x66>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2224      	movs	r2, #36	@ 0x24
 800c298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f022 0201 	bic.w	r2, r2, #1
 800c2b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c2ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d101      	bne.n	800c300 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	e02d      	b.n	800c35c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2224      	movs	r2, #36	@ 0x24
 800c30c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f022 0201 	bic.w	r2, r2, #1
 800c326:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	430a      	orrs	r2, r1
 800c33a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f8a3 	bl	800c488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2220      	movs	r2, #32
 800c34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c374:	2b01      	cmp	r3, #1
 800c376:	d101      	bne.n	800c37c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c378:	2302      	movs	r3, #2
 800c37a:	e02d      	b.n	800c3d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2224      	movs	r2, #36	@ 0x24
 800c388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0201 	bic.w	r2, r2, #1
 800c3a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f865 	bl	800c488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2220      	movs	r2, #32
 800c3ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08c      	sub	sp, #48	@ 0x30
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3f4:	2b20      	cmp	r3, #32
 800c3f6:	d142      	bne.n	800c47e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d002      	beq.n	800c404 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c3fe:	88fb      	ldrh	r3, [r7, #6]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d101      	bne.n	800c408 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	e03b      	b.n	800c480 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2201      	movs	r2, #1
 800c40c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2200      	movs	r2, #0
 800c412:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	461a      	mov	r2, r3
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7ff fc8e 	bl	800bd3c <UART_Start_Receive_DMA>
 800c420:	4603      	mov	r3, r0
 800c422:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c426:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d124      	bne.n	800c478 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c432:	2b01      	cmp	r3, #1
 800c434:	d11d      	bne.n	800c472 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2210      	movs	r2, #16
 800c43c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	e853 3f00 	ldrex	r3, [r3]
 800c44a:	617b      	str	r3, [r7, #20]
   return(result);
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f043 0310 	orr.w	r3, r3, #16
 800c452:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	461a      	mov	r2, r3
 800c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c45e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c460:	6a39      	ldr	r1, [r7, #32]
 800c462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c464:	e841 2300 	strex	r3, r2, [r1]
 800c468:	61fb      	str	r3, [r7, #28]
   return(result);
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1e6      	bne.n	800c43e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c470:	e002      	b.n	800c478 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c478:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c47c:	e000      	b.n	800c480 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c47e:	2302      	movs	r3, #2
  }
}
 800c480:	4618      	mov	r0, r3
 800c482:	3730      	adds	r7, #48	@ 0x30
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c494:	2b00      	cmp	r3, #0
 800c496:	d108      	bne.n	800c4aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4a8:	e031      	b.n	800c50e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4aa:	2308      	movs	r3, #8
 800c4ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4ae:	2308      	movs	r3, #8
 800c4b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	0e5b      	lsrs	r3, r3, #25
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	f003 0307 	and.w	r3, r3, #7
 800c4c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	0f5b      	lsrs	r3, r3, #29
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f003 0307 	and.w	r3, r3, #7
 800c4d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	7b3a      	ldrb	r2, [r7, #12]
 800c4d6:	4911      	ldr	r1, [pc, #68]	@ (800c51c <UARTEx_SetNbDataToProcess+0x94>)
 800c4d8:	5c8a      	ldrb	r2, [r1, r2]
 800c4da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4de:	7b3a      	ldrb	r2, [r7, #12]
 800c4e0:	490f      	ldr	r1, [pc, #60]	@ (800c520 <UARTEx_SetNbDataToProcess+0x98>)
 800c4e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	7b7a      	ldrb	r2, [r7, #13]
 800c4f4:	4909      	ldr	r1, [pc, #36]	@ (800c51c <UARTEx_SetNbDataToProcess+0x94>)
 800c4f6:	5c8a      	ldrb	r2, [r1, r2]
 800c4f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4fc:	7b7a      	ldrb	r2, [r7, #13]
 800c4fe:	4908      	ldr	r1, [pc, #32]	@ (800c520 <UARTEx_SetNbDataToProcess+0x98>)
 800c500:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c502:	fb93 f3f2 	sdiv	r3, r3, r2
 800c506:	b29a      	uxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c50e:	bf00      	nop
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	0800c5f0 	.word	0x0800c5f0
 800c520:	0800c5f8 	.word	0x0800c5f8

0800c524 <memset>:
 800c524:	4402      	add	r2, r0
 800c526:	4603      	mov	r3, r0
 800c528:	4293      	cmp	r3, r2
 800c52a:	d100      	bne.n	800c52e <memset+0xa>
 800c52c:	4770      	bx	lr
 800c52e:	f803 1b01 	strb.w	r1, [r3], #1
 800c532:	e7f9      	b.n	800c528 <memset+0x4>

0800c534 <__libc_init_array>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	4d0d      	ldr	r5, [pc, #52]	@ (800c56c <__libc_init_array+0x38>)
 800c538:	4c0d      	ldr	r4, [pc, #52]	@ (800c570 <__libc_init_array+0x3c>)
 800c53a:	1b64      	subs	r4, r4, r5
 800c53c:	10a4      	asrs	r4, r4, #2
 800c53e:	2600      	movs	r6, #0
 800c540:	42a6      	cmp	r6, r4
 800c542:	d109      	bne.n	800c558 <__libc_init_array+0x24>
 800c544:	4d0b      	ldr	r5, [pc, #44]	@ (800c574 <__libc_init_array+0x40>)
 800c546:	4c0c      	ldr	r4, [pc, #48]	@ (800c578 <__libc_init_array+0x44>)
 800c548:	f000 f826 	bl	800c598 <_init>
 800c54c:	1b64      	subs	r4, r4, r5
 800c54e:	10a4      	asrs	r4, r4, #2
 800c550:	2600      	movs	r6, #0
 800c552:	42a6      	cmp	r6, r4
 800c554:	d105      	bne.n	800c562 <__libc_init_array+0x2e>
 800c556:	bd70      	pop	{r4, r5, r6, pc}
 800c558:	f855 3b04 	ldr.w	r3, [r5], #4
 800c55c:	4798      	blx	r3
 800c55e:	3601      	adds	r6, #1
 800c560:	e7ee      	b.n	800c540 <__libc_init_array+0xc>
 800c562:	f855 3b04 	ldr.w	r3, [r5], #4
 800c566:	4798      	blx	r3
 800c568:	3601      	adds	r6, #1
 800c56a:	e7f2      	b.n	800c552 <__libc_init_array+0x1e>
 800c56c:	0800c608 	.word	0x0800c608
 800c570:	0800c608 	.word	0x0800c608
 800c574:	0800c608 	.word	0x0800c608
 800c578:	0800c60c 	.word	0x0800c60c

0800c57c <memcpy>:
 800c57c:	440a      	add	r2, r1
 800c57e:	4291      	cmp	r1, r2
 800c580:	f100 33ff 	add.w	r3, r0, #4294967295
 800c584:	d100      	bne.n	800c588 <memcpy+0xc>
 800c586:	4770      	bx	lr
 800c588:	b510      	push	{r4, lr}
 800c58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c58e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c592:	4291      	cmp	r1, r2
 800c594:	d1f9      	bne.n	800c58a <memcpy+0xe>
 800c596:	bd10      	pop	{r4, pc}

0800c598 <_init>:
 800c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59a:	bf00      	nop
 800c59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c59e:	bc08      	pop	{r3}
 800c5a0:	469e      	mov	lr, r3
 800c5a2:	4770      	bx	lr

0800c5a4 <_fini>:
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a6:	bf00      	nop
 800c5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5aa:	bc08      	pop	{r3}
 800c5ac:	469e      	mov	lr, r3
 800c5ae:	4770      	bx	lr
