
Robot_Car_Hardware_Side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceec  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800d0c4  0800d0c4  0000e0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d114  0800d114  0000f3fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d114  0800d114  0000e114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d11c  0800d11c  0000f3fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d11c  0800d11c  0000e11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d120  0800d120  0000e120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003fc  20000000  0800d124  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  200003fc  0800d520  0000f3fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  0800d520  0000f904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f3fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ecb  00000000  00000000  0000f42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c7f  00000000  00000000  000372f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  0003bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c5  00000000  00000000  0003dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c98f  00000000  00000000  0003f3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a3d  00000000  00000000  0006bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e7ee  00000000  00000000  00091799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aff87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e3c  00000000  00000000  001affcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001b7e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200003fc 	.word	0x200003fc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d0ac 	.word	0x0800d0ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000400 	.word	0x20000400
 8000214:	0800d0ac 	.word	0x0800d0ac

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b9b5 	b.w	80005a4 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f84d 	bl	80002e8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f840 	bl	80002e8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f82f 	bl	80002e8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f821 	bl	80002e8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_uldivmod>:
 80002b8:	b953      	cbnz	r3, 80002d0 <__aeabi_uldivmod+0x18>
 80002ba:	b94a      	cbnz	r2, 80002d0 <__aeabi_uldivmod+0x18>
 80002bc:	2900      	cmp	r1, #0
 80002be:	bf08      	it	eq
 80002c0:	2800      	cmpeq	r0, #0
 80002c2:	bf1c      	itt	ne
 80002c4:	f04f 31ff 	movne.w	r1, #4294967295
 80002c8:	f04f 30ff 	movne.w	r0, #4294967295
 80002cc:	f000 b96a 	b.w	80005a4 <__aeabi_idiv0>
 80002d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d8:	f000 f806 	bl	80002e8 <__udivmoddi4>
 80002dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e4:	b004      	add	sp, #16
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Coms_IncIdx>:
#ifdef HAS_USB_COMMS
#include "usbd_cdc_if.h"
#endif
#include "usart.h"

static void Coms_IncIdx(uint8_t *idx) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	(*idx)++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
	if(*idx >= FIFO_SIZE) (*idx) = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d902      	bls.n	80005ca <Coms_IncIdx+0x22>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <ComsHandler_PacketToBuf>:

static void ComsHandler_PacketToBuf(DecodedPacket_t *packet, StringBuffer_t *buffer) {
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]

	if(packet->invalid) return;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7adb      	ldrb	r3, [r3, #11]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14c      	bne.n	8000682 <ComsHandler_PacketToBuf+0xac>
	buffer->length = 5 + packet->length;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7a9b      	ldrb	r3, [r3, #10]
 80005ec:	3305      	adds	r3, #5
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	701a      	strb	r2, [r3, #0]

	buffer->data[0] = START_BYTE;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	22aa      	movs	r2, #170	@ 0xaa
 80005f8:	705a      	strb	r2, [r3, #1]
	buffer->data[1] = packet->length;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a9a      	ldrb	r2, [r3, #10]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	709a      	strb	r2, [r3, #2]
	buffer->data[2] = (packet->command & 0xFF00) >> 8;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	70da      	strb	r2, [r3, #3]
	buffer->data[3] = packet->command & 0x00FF;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 800061a:	2304      	movs	r3, #4
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e00c      	b.n	800063a <ComsHandler_PacketToBuf+0x64>
		buffer->data[i] = packet->data[i-4];
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	1f1a      	subs	r2, r3, #4
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	440a      	add	r2, r1
 800062a:	7891      	ldrb	r1, [r2, #2]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3301      	adds	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	429a      	cmp	r2, r3
 8000644:	dbec      	blt.n	8000620 <ComsHandler_PacketToBuf+0x4a>
	}

	uint8_t checksum = buffer->data[0];
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 800064c:	2301      	movs	r3, #1
 800064e:	737b      	strb	r3, [r7, #13]
 8000650:	e009      	b.n	8000666 <ComsHandler_PacketToBuf+0x90>
		checksum ^= buffer->data[i];
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	785a      	ldrb	r2, [r3, #1]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	4053      	eors	r3, r2
 800065e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 8000660:	7b7b      	ldrb	r3, [r7, #13]
 8000662:	3301      	adds	r3, #1
 8000664:	737b      	strb	r3, [r7, #13]
 8000666:	7b7a      	ldrb	r2, [r7, #13]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	429a      	cmp	r2, r3
 8000670:	dbef      	blt.n	8000652 <ComsHandler_PacketToBuf+0x7c>
	}

	buffer->data[buffer->length - 1] = checksum;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	4413      	add	r3, r2
 800067c:	7bba      	ldrb	r2, [r7, #14]
 800067e:	705a      	strb	r2, [r3, #1]
 8000680:	e000      	b.n	8000684 <ComsHandler_PacketToBuf+0xae>
	if(packet->invalid) return;
 8000682:	bf00      	nop
}
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <ComsHandler_BufToPacket>:

static void ComsHandler_BufToPacket(DecodedPacket_t *packet, void *buf) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]

	StringBuffer_t *buffer = (StringBuffer_t *)buf;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	60fb      	str	r3, [r7, #12]

	uint8_t length = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]

	memset(packet->data, 0, MAX_DATA_SIZE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3302      	adds	r3, #2
 80006a4:	2208      	movs	r2, #8
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00c fcc5 	bl	800d038 <memset>

	packet->invalid = false;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	72da      	strb	r2, [r3, #11]
	packet->isNew = true;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	731a      	strb	r2, [r3, #12]

    if (buffer->data[0] != START_BYTE) {
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	2baa      	cmp	r3, #170	@ 0xaa
 80006c0:	d002      	beq.n	80006c8 <ComsHandler_BufToPacket+0x3a>
    	packet->invalid = true; // Invalid start byte, discard packet
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	72da      	strb	r2, [r3, #11]
    }

    packet->length = buffer->data[1];
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	789a      	ldrb	r2, [r3, #2]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	729a      	strb	r2, [r3, #10]
    if (buffer->data[1] > MAX_DATA_SIZE) {
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d905      	bls.n	80006e4 <ComsHandler_BufToPacket+0x56>
		packet->invalid = true;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	72da      	strb	r2, [r3, #11]
		packet->length = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	729a      	strb	r2, [r3, #10]
	}

    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006e4:	230c      	movs	r3, #12
 80006e6:	75bb      	strb	r3, [r7, #22]
 80006e8:	e00b      	b.n	8000702 <ComsHandler_BufToPacket+0x74>
    	if(buffer->data[i] != 0) {
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <ComsHandler_BufToPacket+0x6e>
    		length = i;
 80006f6:	7dbb      	ldrb	r3, [r7, #22]
 80006f8:	75fb      	strb	r3, [r7, #23]
    		break;
 80006fa:	e005      	b.n	8000708 <ComsHandler_BufToPacket+0x7a>
    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	3b01      	subs	r3, #1
 8000700:	75bb      	strb	r3, [r7, #22]
 8000702:	7dbb      	ldrb	r3, [r7, #22]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d8f0      	bhi.n	80006ea <ComsHandler_BufToPacket+0x5c>
    	}
    }

    uint8_t checksum = buffer->data[0];
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	785b      	ldrb	r3, [r3, #1]
 800070c:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 800070e:	2301      	movs	r3, #1
 8000710:	753b      	strb	r3, [r7, #20]
 8000712:	e009      	b.n	8000728 <ComsHandler_BufToPacket+0x9a>
		checksum ^= buffer->data[i];
 8000714:	7d3b      	ldrb	r3, [r7, #20]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	785a      	ldrb	r2, [r3, #1]
 800071c:	7d7b      	ldrb	r3, [r7, #21]
 800071e:	4053      	eors	r3, r2
 8000720:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 8000722:	7d3b      	ldrb	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	753b      	strb	r3, [r7, #20]
 8000728:	7d3a      	ldrb	r2, [r7, #20]
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	429a      	cmp	r2, r3
 800072e:	d3f1      	bcc.n	8000714 <ComsHandler_BufToPacket+0x86>
	}

	if(checksum != buffer->data[length]) {
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	4413      	add	r3, r2
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	7d7a      	ldrb	r2, [r7, #21]
 800073a:	429a      	cmp	r2, r3
 800073c:	d002      	beq.n	8000744 <ComsHandler_BufToPacket+0xb6>
		packet->invalid = true;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	72da      	strb	r2, [r3, #11]
	}

    // Populate the command structure
    packet->command = (buffer->data[2] << 8) | buffer->data[3];
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	78db      	ldrb	r3, [r3, #3]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	801a      	strh	r2, [r3, #0]

    if(packet->length != 0) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7a9b      	ldrb	r3, [r3, #10]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d014      	beq.n	800078e <ComsHandler_BufToPacket+0x100>
    	for(uint8_t i = 0; i < packet->length; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	74fb      	strb	r3, [r7, #19]
 8000768:	e00c      	b.n	8000784 <ComsHandler_BufToPacket+0xf6>
    		packet->data[i] = buffer->data[4+i];
 800076a:	7cfb      	ldrb	r3, [r7, #19]
 800076c:	1d1a      	adds	r2, r3, #4
 800076e:	7cfb      	ldrb	r3, [r7, #19]
 8000770:	68f9      	ldr	r1, [r7, #12]
 8000772:	440a      	add	r2, r1
 8000774:	7851      	ldrb	r1, [r2, #1]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	460a      	mov	r2, r1
 800077c:	709a      	strb	r2, [r3, #2]
    	for(uint8_t i = 0; i < packet->length; i++) {
 800077e:	7cfb      	ldrb	r3, [r7, #19]
 8000780:	3301      	adds	r3, #1
 8000782:	74fb      	strb	r3, [r7, #19]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a9b      	ldrb	r3, [r3, #10]
 8000788:	7cfa      	ldrb	r2, [r7, #19]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3ed      	bcc.n	800076a <ComsHandler_BufToPacket+0xdc>
    	}
    }
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <UART_Send>:

// UART Send Function
static HAL_StatusTypeDef UART_Send(void *config, DecodedPacket_t *packet)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b088      	sub	sp, #32
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)config;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	61fb      	str	r3, [r7, #28]

    StringBuffer_t buf;
    memset(buf.data, 0, MAX_BUF_SIZE);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	3301      	adds	r3, #1
 80007aa:	220d      	movs	r2, #13
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00c fc42 	bl	800d038 <memset>
    ComsHandler_PacketToBuf(packet, &buf);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	6838      	ldr	r0, [r7, #0]
 80007bc:	f7ff ff0b 	bl	80005d6 <ComsHandler_PacketToBuf>

    return HAL_UART_Transmit(huart, buf.data, buf.length, HAL_MAX_DELAY);
 80007c0:	7b3b      	ldrb	r3, [r7, #12]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	1c59      	adds	r1, r3, #1
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	69f8      	ldr	r0, [r7, #28]
 80007d0:	f00a ff8f 	bl	800b6f2 <HAL_UART_Transmit>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <UART_SetupReceive>:

// UART Receive Function
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer

static HAL_StatusTypeDef UART_SetupReceive(void *inst)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007f2:	60bb      	str	r3, [r7, #8]

    memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4613      	mov	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	3370      	adds	r3, #112	@ 0x70
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	3305      	adds	r3, #5
 800080a:	220d      	movs	r2, #13
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f00c fc12 	bl	800d038 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->rxBuf[instance->rxIdx].data, MAX_BUF_SIZE);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	3370      	adds	r3, #112	@ 0x70
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	3305      	adds	r3, #5
 800082a:	220d      	movs	r2, #13
 800082c:	4619      	mov	r1, r3
 800082e:	68b8      	ldr	r0, [r7, #8]
 8000830:	f00c fb60 	bl	800cef4 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(DMA_UART_HANDLE, DMA_IT_HT);
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <UART_SetupReceive+0x70>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <UART_SetupReceive+0x70>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f022 0204 	bic.w	r2, r2, #4
 8000842:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200008a0 	.word	0x200008a0

08000854 <UART_Receive>:

static HAL_StatusTypeDef UART_Receive(void *inst, uint8_t *data, uint16_t length)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	4613      	mov	r3, r2
 8000860:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	617b      	str	r3, [r7, #20]
    //UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;

    instance->rxBuf[instance->rxIdx].length = length;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	b2d8      	uxtb	r0, r3
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	460b      	mov	r3, r1
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	1a5b      	subs	r3, r3, r1
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	3374      	adds	r3, #116	@ 0x74
 800087e:	4602      	mov	r2, r0
 8000880:	701a      	strb	r2, [r3, #0]

    Coms_IncIdx(&instance->rxIdx);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe8f 	bl	80005a8 <Coms_IncIdx>

    UART_SetupReceive(inst);
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff ffa8 	bl	80007e0 <UART_SetupReceive>
    //__HAL_DMA_DISABLE_IT(hdma_usart1_rx, DMA_IT_HT);

    return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <CAN_Send>:
}
#endif

// CAN Send Function
static HAL_StatusTypeDef CAN_Send(void *config, DecodedPacket_t *packet)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b08c      	sub	sp, #48	@ 0x30
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]

#ifdef FDCAN

    FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    FDCAN_TxHeaderTypeDef txHeader;
    txHeader.Identifier = packet->command;  //send command as packet ID
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	60bb      	str	r3, [r7, #8]
    txHeader.IdType = FDCAN_EXTENDED_ID;
 80008ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b2:	60fb      	str	r3, [r7, #12]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
    txHeader.DataLength = packet->length;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	7a9b      	ldrb	r3, [r3, #10]
 80008bc:	617b      	str	r3, [r7, #20]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.MessageMarker = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Only include data bytes 5 to N-1
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, packet->data);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	1c9a      	adds	r2, r3, #2
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80008de:	f006 faeb 	bl	8006eb8 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008e2:	4603      	mov	r3, r0
#endif

	return HAL_OK;
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3730      	adds	r7, #48	@ 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CAN_Receive>:

// CAN Receive Function
//going to be handled in an interrupt as with the all receive functions
static HAL_StatusTypeDef CAN_Receive(void *inst, uint8_t *data, uint16_t length)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b092      	sub	sp, #72	@ 0x48
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]

#ifdef FDCAN
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
    FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)instance->config;
 80008fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
    uint8_t RxData[8];

	// Check if a new message is available

		// Retrieve the message from the FIFO
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, RxData) == HAL_OK)
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	f107 0218 	add.w	r2, r7, #24
 800090e:	2140      	movs	r1, #64	@ 0x40
 8000910:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000912:	f006 fb15 	bl	8006f40 <HAL_FDCAN_GetRxMessage>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d14d      	bne.n	80009b8 <CAN_Receive+0xcc>
		{
			// Process the received message
			instance->rxPacket[instance->processIdx].invalid = false;
 800091c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	4619      	mov	r1, r3
 8000922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000924:	460b      	mov	r3, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	330f      	adds	r3, #15
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
			instance->rxPacket[instance->processIdx].isNew = true;
 8000934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	4619      	mov	r1, r3
 800093a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800093c:	460b      	mov	r3, r1
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	3310      	adds	r3, #16
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
			instance->rxPacket[instance->processIdx].length = rxHeader.DataLength & 0xFF;
 800094c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800094e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	4619      	mov	r1, r3
 8000954:	b2d0      	uxtb	r0, r2
 8000956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000958:	460b      	mov	r3, r1
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	330e      	adds	r3, #14
 8000964:	4602      	mov	r2, r0
 8000966:	701a      	strb	r2, [r3, #0]
			memset(instance->rxPacket[instance->processIdx].data, 0, MAX_DATA_SIZE);
 8000968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	461a      	mov	r2, r3
 800096e:	4613      	mov	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000978:	4413      	add	r3, r2
 800097a:	3306      	adds	r3, #6
 800097c:	2208      	movs	r2, #8
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f00c fb59 	bl	800d038 <memset>
			memcpy(instance->rxPacket[instance->processIdx].data, RxData, MAX_DATA_SIZE);
 8000986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	461a      	mov	r2, r3
 800098c:	4613      	mov	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000996:	4413      	add	r3, r2
 8000998:	3306      	adds	r3, #6
 800099a:	461a      	mov	r2, r3
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	cb03      	ldmia	r3!, {r0, r1}
 80009a2:	6010      	str	r0, [r2, #0]
 80009a4:	6051      	str	r1, [r2, #4]

			Coms_IncIdx(&instance->rxIdx);
 80009a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdfd 	bl	80005a8 <Coms_IncIdx>
			Coms_IncIdx(&instance->processIdx);
 80009ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009b0:	3302      	adds	r3, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fdf8 	bl	80005a8 <Coms_IncIdx>
		{

		}

#endif
    return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3748      	adds	r7, #72	@ 0x48
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <CAN_SetupReceive>:

static HAL_StatusTypeDef CAN_SetupReceive(void *inst)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	617b      	str	r3, [r7, #20]
	FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)instance->config;
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d4:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status = HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	6938      	ldr	r0, [r7, #16]
 80009dc:	f006 fbb8 	bl	8007150 <HAL_FDCAN_ActivateNotification>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
//	uint32_t b = HAL_FDCAN_GetError(hfdcan);
    return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <Comm_Init>:

// Initialize Communication Instance
void Comm_Init(ComsInterface_t *instance, CommType type, void *config)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	460b      	mov	r3, r1
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	72fb      	strb	r3, [r7, #11]
    instance->type = type;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	7afa      	ldrb	r2, [r7, #11]
 8000a02:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    instance->config = config;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    instance->decodeIdx = 0;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2200      	movs	r2, #0
 8000a12:	705a      	strb	r2, [r3, #1]
    instance->rxIdx = 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
    instance->processIdx = 0;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	709a      	strb	r2, [r3, #2]

    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
 8000a24:	e016      	b.n	8000a54 <Comm_Init+0x64>
    	instance->rxPacket[i].invalid = true;
 8000a26:	7dfa      	ldrb	r2, [r7, #23]
 8000a28:	68f9      	ldr	r1, [r7, #12]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	440b      	add	r3, r1
 8000a34:	330f      	adds	r3, #15
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
    	instance->rxPacket[i].isNew = false;
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	440b      	add	r3, r1
 8000a48:	3310      	adds	r3, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	3301      	adds	r3, #1
 8000a52:	75fb      	strb	r3, [r7, #23]
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d9e5      	bls.n	8000a26 <Comm_Init+0x36>
    }

    if (type == COMM_UART) {
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10f      	bne.n	8000a80 <Comm_Init+0x90>
        instance->interface.Send = UART_Send;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <Comm_Init+0xb8>)
 8000a64:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = UART_Receive;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <Comm_Init+0xbc>)
 8000a6c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <Comm_Init+0xc0>)
 8000a74:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        UART_SetupReceive(instance);
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff feb1 	bl	80007e0 <UART_SetupReceive>
        FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;

        CAN_SetupReceive(hfdcan);

    }
}
 8000a7e:	e00f      	b.n	8000aa0 <Comm_Init+0xb0>
    else if (type == COMM_CAN) {
 8000a80:	7afb      	ldrb	r3, [r7, #11]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d10c      	bne.n	8000aa0 <Comm_Init+0xb0>
        instance->interface.Send = CAN_Send;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <Comm_Init+0xc4>)
 8000a8a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = CAN_Receive;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4a09      	ldr	r2, [pc, #36]	@ (8000ab8 <Comm_Init+0xc8>)
 8000a92:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        FDCAN_HandleTypeDef *hfdcan = (FDCAN_HandleTypeDef *)config;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        CAN_SetupReceive(hfdcan);
 8000a9a:	6938      	ldr	r0, [r7, #16]
 8000a9c:	f7ff ff91 	bl	80009c2 <CAN_SetupReceive>
}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08000797 	.word	0x08000797
 8000aac:	08000855 	.word	0x08000855
 8000ab0:	0800068f 	.word	0x0800068f
 8000ab4:	0800089b 	.word	0x0800089b
 8000ab8:	080008ed 	.word	0x080008ed

08000abc <Comm_Send>:

// Wrapper for Sending Data
HAL_StatusTypeDef Comm_Send(ComsInterface_t *instance, DecodedPacket_t *packet)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	if(packet->invalid) return HAL_ERROR;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	7adb      	ldrb	r3, [r3, #11]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <Comm_Send+0x16>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e009      	b.n	8000ae6 <Comm_Send+0x2a>

    return instance->interface.Send(instance->config, packet);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	4798      	blx	r3
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <Comm_Receive>:

// Wrapper for Receiving Data
HAL_StatusTypeDef Comm_Receive(ComsInterface_t *instance, uint8_t *data, uint16_t length)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	4613      	mov	r3, r2
 8000afa:	80fb      	strh	r3, [r7, #6]
    return instance->interface.Receive(instance, data, length);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b02:	88fa      	ldrh	r2, [r7, #6]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	4798      	blx	r3
 8000b0a:	4603      	mov	r3, r0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <Comm_Process>:

void Comm_Process(ComsInterface_t *instance) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	static uint32_t currentTime;
	static uint32_t lastTime;

	currentTime = HAL_GetTick();
 8000b1c:	f003 fbb0 	bl	8004280 <HAL_GetTick>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a22      	ldr	r2, [pc, #136]	@ (8000bac <Comm_Process+0x98>)
 8000b24:	6013      	str	r3, [r2, #0]

	if(instance->type == COMM_UART) {
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d132      	bne.n	8000b96 <Comm_Process+0x82>
		if(currentTime - lastTime > 1000) {
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <Comm_Process+0x98>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b3e:	d92a      	bls.n	8000b96 <Comm_Process+0x82>
			UART_SetupReceive(instance);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fe4d 	bl	80007e0 <UART_SetupReceive>
			lastTime = currentTime;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <Comm_Process+0x98>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b4c:	6013      	str	r3, [r2, #0]
		}
	}

	while (instance->decodeIdx != instance->rxIdx) {
 8000b4e:	e022      	b.n	8000b96 <Comm_Process+0x82>
		instance->interface.ConvertToPacket(&instance->rxPacket[instance->decodeIdx], &instance->rxBuf[instance->decodeIdx]);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	440b      	add	r3, r1
 8000b68:	1d18      	adds	r0, r3, #4
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	460b      	mov	r3, r1
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	3370      	adds	r3, #112	@ 0x70
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3304      	adds	r3, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4790      	blx	r2
		Coms_IncIdx(&instance->decodeIdx);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd0d 	bl	80005a8 <Coms_IncIdx>
		lastTime = currentTime;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <Comm_Process+0x98>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <Comm_Process+0x9c>)
 8000b94:	6013      	str	r3, [r2, #0]
	while (instance->decodeIdx != instance->rxIdx) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	785a      	ldrb	r2, [r3, #1]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d1d6      	bne.n	8000b50 <Comm_Process+0x3c>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000418 	.word	0x20000418
 8000bb0:	2000041c 	.word	0x2000041c

08000bb4 <Comm_GetPacket>:

DecodedPacket_t Comm_GetPacket(ComsInterface_t *instance) {
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	DecodedPacket_t packet = {
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	819a      	strh	r2, [r3, #12]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	74fb      	strb	r3, [r7, #19]
			.invalid = true,
			.isNew = false
	};

	if(instance->decodeIdx == instance->processIdx) {
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	785a      	ldrb	r2, [r3, #1]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d10a      	bne.n	8000bf2 <Comm_GetPacket+0x3e>
		return packet;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	461c      	mov	r4, r3
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000be6:	6020      	str	r0, [r4, #0]
 8000be8:	6061      	str	r1, [r4, #4]
 8000bea:	60a2      	str	r2, [r4, #8]
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	e029      	b.n	8000c46 <Comm_GetPacket+0x92>
	}

	uint8_t idx = instance->processIdx;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	789b      	ldrb	r3, [r3, #2]
 8000bf6:	75fb      	strb	r3, [r7, #23]

	Coms_IncIdx(&instance->processIdx);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fcd3 	bl	80005a8 <Coms_IncIdx>
	memcpy(&packet, &instance->rxPacket[idx], sizeof(instance->rxPacket[idx]));
 8000c02:	7dfa      	ldrb	r2, [r7, #23]
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	1d19      	adds	r1, r3, #4
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	220e      	movs	r2, #14
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f00c fa39 	bl	800d090 <memcpy>

	instance->rxPacket[idx].isNew = false;
 8000c1e:	7dfa      	ldrb	r2, [r7, #23]
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	440b      	add	r3, r1
 8000c2c:	3310      	adds	r3, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]

	return packet;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	461c      	mov	r4, r3
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c3c:	6020      	str	r0, [r4, #0]
 8000c3e:	6061      	str	r1, [r4, #4]
 8000c40:	60a2      	str	r2, [r4, #8]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	81a3      	strh	r3, [r4, #12]
}
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}

08000c4e <IMU_WriteRegister>:

#include "IMU.h"
#include <stdio.h> // For debugging with printf

// Internal helper function: Write a register
static HAL_StatusTypeDef IMU_WriteRegister(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t value) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = { reg, value };
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	733b      	strb	r3, [r7, #12]
 8000c62:	78bb      	ldrb	r3, [r7, #2]
 8000c64:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6858      	ldr	r0, [r3, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	891b      	ldrh	r3, [r3, #8]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	f006 fdd5 	bl	8007820 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(imu->hspi, data, 2, HAL_MAX_DELAY);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f107 010c 	add.w	r1, r7, #12
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2202      	movs	r2, #2
 8000c84:	f007 fed3 	bl	8008a2e <HAL_SPI_Transmit>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6858      	ldr	r0, [r3, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	891b      	ldrh	r3, [r3, #8]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	f006 fdc2 	bl	8007820 <HAL_GPIO_WritePin>

    return status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <IMU_BurstRead>:

// Internal helper function: Burst read
static HAL_StatusTypeDef IMU_BurstRead(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t *buffer, uint8_t length) {
 8000ca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000caa:	b08f      	sub	sp, #60	@ 0x3c
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6178      	str	r0, [r7, #20]
 8000cb0:	60fa      	str	r2, [r7, #12]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	74fb      	strb	r3, [r7, #19]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	74bb      	strb	r3, [r7, #18]
 8000cbc:	466b      	mov	r3, sp
 8000cbe:	461e      	mov	r6, r3

    uint8_t tx_data[length+1];
 8000cc0:	7cbb      	ldrb	r3, [r7, #18]
 8000cc2:	1c59      	adds	r1, r3, #1
 8000cc4:	1e4b      	subs	r3, r1, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc8:	460a      	mov	r2, r1
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603a      	str	r2, [r7, #0]
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	00c3      	lsls	r3, r0, #3
 8000cdc:	6838      	ldr	r0, [r7, #0]
 8000cde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	00c2      	lsls	r2, r0, #3
 8000ce6:	460a      	mov	r2, r1
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4692      	mov	sl, r2
 8000cec:	469b      	mov	fp, r3
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000cfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d02:	460b      	mov	r3, r1
 8000d04:	3307      	adds	r3, #7
 8000d06:	08db      	lsrs	r3, r3, #3
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000d0e:	ab02      	add	r3, sp, #8
 8000d10:	3300      	adds	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_data[length+1];
 8000d14:	7cbb      	ldrb	r3, [r7, #18]
 8000d16:	1c59      	adds	r1, r3, #1
 8000d18:	1e4b      	subs	r3, r1, #1
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	2300      	movs	r3, #0
 8000d20:	4690      	mov	r8, r2
 8000d22:	4699      	mov	r9, r3
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d38:	460a      	mov	r2, r1
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	4614      	mov	r4, r2
 8000d3e:	461d      	mov	r5, r3
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	00eb      	lsls	r3, r5, #3
 8000d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d4e:	00e2      	lsls	r2, r4, #3
 8000d50:	460b      	mov	r3, r1
 8000d52:	3307      	adds	r3, #7
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	ebad 0d03 	sub.w	sp, sp, r3
 8000d5c:	ab02      	add	r3, sp, #8
 8000d5e:	3300      	adds	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    tx_data[0] = reg | IMU_READ_BIT;
 8000d62:	7cfb      	ldrb	r3, [r7, #19]
 8000d64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= length; i++) {
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d74:	e00f      	b.n	8000d96 <IMU_BurstRead+0xf0>
    	tx_data[i] = (tx_data[i-1]+1);
 8000d76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d7e:	5cd2      	ldrb	r2, [r2, r3]
 8000d80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d84:	3201      	adds	r2, #1
 8000d86:	b2d1      	uxtb	r1, r2
 8000d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d8a:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 1; i <= length; i++) {
 8000d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d90:	3301      	adds	r3, #1
 8000d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d96:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000d9a:	7cbb      	ldrb	r3, [r7, #18]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d9ea      	bls.n	8000d76 <IMU_BurstRead+0xd0>
    }

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	6858      	ldr	r0, [r3, #4]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	891b      	ldrh	r3, [r3, #8]
 8000da8:	2200      	movs	r2, #0
 8000daa:	4619      	mov	r1, r3
 8000dac:	f006 fd38 	bl	8007820 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx_data, rx_data, length + 1, HAL_MAX_DELAY);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	7cbb      	ldrb	r3, [r7, #18]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	9200      	str	r2, [sp, #0]
 8000dc2:	69fa      	ldr	r2, [r7, #28]
 8000dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dc6:	f007 ffa8 	bl	8008d1a <HAL_SPI_TransmitReceive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	76fb      	strb	r3, [r7, #27]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	6858      	ldr	r0, [r3, #4]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	891b      	ldrh	r3, [r3, #8]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f006 fd21 	bl	8007820 <HAL_GPIO_WritePin>

    for(uint8_t i = 1; i <= length; i++) {
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000de4:	e00e      	b.n	8000e04 <IMU_BurstRead+0x15e>
    	*(buffer+(i-1)) = rx_data[i];
 8000de6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000dea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000dee:	3b01      	subs	r3, #1
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	440b      	add	r3, r1
 8000df4:	69f9      	ldr	r1, [r7, #28]
 8000df6:	5c8a      	ldrb	r2, [r1, r2]
 8000df8:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= length; i++) {
 8000dfa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000e04:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d9eb      	bls.n	8000de6 <IMU_BurstRead+0x140>
	}


    return status;
 8000e0e:	7efb      	ldrb	r3, [r7, #27]
 8000e10:	46b5      	mov	sp, r6
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3734      	adds	r7, #52	@ 0x34
 8000e16:	46bd      	mov	sp, r7
 8000e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e1c <IMU_Init>:

// Initialize the IMU
HAL_StatusTypeDef IMU_Init(IMU_HandleTypeDef *imu) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
//
//    for(uint8_t i = 0; i < 14; i++) {
//    	data_buffer[i] = 0;
//    }

    if (IMU_WriteRegister(imu, 0x76, 0x00) != HAL_OK) { //userbank 0 select
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2176      	movs	r1, #118	@ 0x76
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff0e 	bl	8000c4e <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
	HAL_Delay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f003 fa30 	bl	8004298 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_DEVICE_CONFIG_REG, IMU_DEVICE_CONFIG_RESET) != HAL_OK) {
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2111      	movs	r1, #17
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff06 	bl	8000c4e <IMU_WriteRegister>
    	//   return HAL_ERROR;
	}

    HAL_Delay(5);
 8000e42:	2005      	movs	r0, #5
 8000e44:	f003 fa28 	bl	8004298 <HAL_Delay>

    if (IMU_BurstRead(imu, IMU_WHO_AM_I_REG, &who_am_i, 1) != HAL_OK || who_am_i != IMU_WHO_AM_I_EXPECTED) {
 8000e48:	f107 020f 	add.w	r2, r7, #15
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2175      	movs	r1, #117	@ 0x75
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff28 	bl	8000ca6 <IMU_BurstRead>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f003 fa1c 	bl	8004298 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_PWR_MGMT_0, IMU_ENABLE_ACCEL_GYRO) != HAL_OK) {
 8000e60:	220f      	movs	r2, #15
 8000e62:	214e      	movs	r1, #78	@ 0x4e
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fef2 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f003 fa14 	bl	8004298 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_GYRO_CONFIG_REG, IMU_GYRO_CONFIG_DATA) != HAL_OK) {
 8000e70:	2248      	movs	r2, #72	@ 0x48
 8000e72:	214f      	movs	r1, #79	@ 0x4f
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff feea 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f003 fa0c 	bl	8004298 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_ACCEL_CONFIG_REG, IMU_ACCEL_CONFIG_DATA) != HAL_OK) {
 8000e80:	2248      	movs	r2, #72	@ 0x48
 8000e82:	2150      	movs	r1, #80	@ 0x50
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fee2 	bl	8000c4e <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f003 fa04 	bl	8004298 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG0_REG, IMU_INT_CONFIG0_DATA) != HAL_OK) {
 8000e90:	2220      	movs	r2, #32
 8000e92:	2163      	movs	r1, #99	@ 0x63
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff feda 	bl	8000c4e <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
    HAL_Delay(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f003 f9fc 	bl	8004298 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_SOURCE_REG, IMU_INT_ENABLE_DATA_RDY) != HAL_OK) {
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	2165      	movs	r1, #101	@ 0x65
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fed2 	bl	8000c4e <IMU_WriteRegister>
       // return HAL_ERROR;
    }
    HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f003 f9f4 	bl	8004298 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG_REG, IMU_INT_ACTIVE_HIGH) != HAL_OK) {
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	2114      	movs	r1, #20
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff feca 	bl	8000c4e <IMU_WriteRegister>
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f003 f9ec 	bl	8004298 <HAL_Delay>


    return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <IMU_ReadAll>:

    return HAL_OK;
}

// Read all data (accelerometer, gyroscope, and temperature)
HAL_StatusTypeDef IMU_ReadAll(IMU_HandleTypeDef *imu) {
 8000eca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	466b      	mov	r3, sp
 8000ed6:	461e      	mov	r6, r3
	uint8_t length = 14;
 8000ed8:	230e      	movs	r3, #14
 8000eda:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[length];
 8000edc:	7df9      	ldrb	r1, [r7, #23]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	b2cb      	uxtb	r3, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4698      	mov	r8, r3
 8000eea:	4691      	mov	r9, r2
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ef8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000efc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f00:	b2cb      	uxtb	r3, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	461c      	mov	r4, r3
 8000f06:	4615      	mov	r5, r2
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	00eb      	lsls	r3, r5, #3
 8000f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f16:	00e2      	lsls	r2, r4, #3
 8000f18:	460b      	mov	r3, r1
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	ebad 0d03 	sub.w	sp, sp, r3
 8000f24:	466b      	mov	r3, sp
 8000f26:	3300      	adds	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
    uint8_t intStatus = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	72fb      	strb	r3, [r7, #11]
    if (IMU_BurstRead(imu, IMU_TEMP_OUT_H, raw_data, length) != HAL_OK) {
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	211d      	movs	r1, #29
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff feb6 	bl	8000ca6 <IMU_BurstRead>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <IMU_ReadAll+0x7a>
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e059      	b.n	8000ff8 <IMU_ReadAll+0x12e>
    }

    imu->accel[0] = (raw_data[2] << 8) | raw_data[3];
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	78db      	ldrb	r3, [r3, #3]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	825a      	strh	r2, [r3, #18]
    imu->accel[1] = (raw_data[4] << 8) | raw_data[5];
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	795b      	ldrb	r3, [r3, #5]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	829a      	strh	r2, [r3, #20]
    imu->accel[2] = (raw_data[6] << 8) | raw_data[7];
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	799b      	ldrb	r3, [r3, #6]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	79db      	ldrb	r3, [r3, #7]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	82da      	strh	r2, [r3, #22]

    imu->temperature = (raw_data[0] << 8) | raw_data[1];
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	83da      	strh	r2, [r3, #30]

    imu->gyro[0] = (raw_data[8] << 8) | raw_data[9];
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	7a1b      	ldrb	r3, [r3, #8]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	7a5b      	ldrb	r3, [r3, #9]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	831a      	strh	r2, [r3, #24]
    imu->gyro[1] = (raw_data[10] << 8) | raw_data[11];
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	7a9b      	ldrb	r3, [r3, #10]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	7adb      	ldrb	r3, [r3, #11]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	835a      	strh	r2, [r3, #26]
    imu->gyro[2] = (raw_data[12] << 8) | raw_data[13];
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	7b1b      	ldrb	r3, [r3, #12]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	7b5b      	ldrb	r3, [r3, #13]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	839a      	strh	r2, [r3, #28]

    if (IMU_BurstRead(imu, IMU_INT_STATUS_REG, &intStatus, 1) != HAL_OK) {
 8000fde:	f107 020b 	add.w	r2, r7, #11
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	212d      	movs	r1, #45	@ 0x2d
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fe5d 	bl	8000ca6 <IMU_BurstRead>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <IMU_ReadAll+0x12c>
		return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <IMU_ReadAll+0x12e>
	}

    return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	46b5      	mov	sp, r6
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001004 <IMU_InterruptHandler>:

// Interrupt handler
void IMU_InterruptHandler(IMU_HandleTypeDef *imu, uint16_t GPIO_pin) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
    if (GPIO_pin != imu->int_pin) return;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	8a1b      	ldrh	r3, [r3, #16]
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	429a      	cmp	r2, r3
 8001018:	d103      	bne.n	8001022 <IMU_InterruptHandler+0x1e>

    if (IMU_ReadAll(imu) == HAL_OK) {
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff55 	bl	8000eca <IMU_ReadAll>
 8001020:	e000      	b.n	8001024 <IMU_InterruptHandler+0x20>
    if (GPIO_pin != imu->int_pin) return;
 8001022:	bf00      	nop
        // Data successfully read
    } else {
        // Handle read error
    }
}
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	@ 0x30
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2220      	movs	r2, #32
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00b fff7 	bl	800d038 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800104a:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800104c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001050:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001054:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001058:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001066:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001074:	2204      	movs	r2, #4
 8001076:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107e:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001086:	2201      	movs	r2, #1
 8001088:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001098:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <MX_ADC1_Init+0xe8>)
 800109a:	2200      	movs	r2, #0
 800109c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	4817      	ldr	r0, [pc, #92]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010b6:	f003 fb8b 	bl	80047d0 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c0:	f000 ff12 	bl	8001ee8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010d0:	f004 fd7e 	bl	8005bd0 <HAL_ADCEx_MultiModeConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010da:	f000 ff05 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_ADC1_Init+0xec>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2306      	movs	r3, #6
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ea:	237f      	movs	r3, #127	@ 0x7f
 80010ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_ADC1_Init+0xe8>)
 80010fc:	f003 ff50 	bl	8004fa0 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001106:	f000 feef 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3730      	adds	r7, #48	@ 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000420 	.word	0x20000420
 8001118:	10c00010 	.word	0x10c00010

0800111c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	@ 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00b ff7f 	bl	800d038 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800113c:	4a31      	ldr	r2, [pc, #196]	@ (8001204 <MX_ADC3_Init+0xe8>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001140:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001142:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001146:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001162:	2204      	movs	r2, #4
 8001164:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001168:	2200      	movs	r2, #0
 800116a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800116e:	2200      	movs	r2, #0
 8001170:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001174:	2201      	movs	r2, #1
 8001176:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_ADC3_Init+0xe4>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_ADC3_Init+0xe4>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011a2:	4817      	ldr	r0, [pc, #92]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011a4:	f003 fb14 	bl	80047d0 <HAL_ADC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011ae:	f000 fe9b 	bl	8001ee8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4810      	ldr	r0, [pc, #64]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011be:	f004 fd07 	bl	8005bd0 <HAL_ADCEx_MultiModeConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011c8:	f000 fe8e 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_ADC3_Init+0xec>)
 80011ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d0:	2306      	movs	r3, #6
 80011d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80011d4:	2302      	movs	r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d8:	237f      	movs	r3, #127	@ 0x7f
 80011da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011dc:	2304      	movs	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_ADC3_Init+0xe4>)
 80011ea:	f003 fed9 	bl	8004fa0 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80011f4:	f000 fe78 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	@ 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000048c 	.word	0x2000048c
 8001204:	50000400 	.word	0x50000400
 8001208:	1d500080 	.word	0x1d500080

0800120c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a2      	sub	sp, #136	@ 0x88
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2254      	movs	r2, #84	@ 0x54
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00b ff03 	bl	800d038 <memset>
  if(adcHandle->Instance==ADC1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800123a:	d14e      	bne.n	80012da <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800123c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001240:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001242:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001246:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4618      	mov	r0, r3
 800124e:	f007 f8f5 	bl	800843c <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001258:	f000 fe46 	bl	8001ee8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800125c:	4b4a      	ldr	r3, [pc, #296]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	4a49      	ldr	r2, [pc, #292]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001262:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001268:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	4a43      	ldr	r2, [pc, #268]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b3e      	ldr	r3, [pc, #248]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	4a3d      	ldr	r2, [pc, #244]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOARD_TEMP_Pin;
 80012a4:	2308      	movs	r3, #8
 80012a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(BOARD_TEMP_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ba:	f006 f917 	bl	80074ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMC_CURRSENSE_Pin;
 80012be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012d0:	4619      	mov	r1, r3
 80012d2:	482e      	ldr	r0, [pc, #184]	@ (800138c <HAL_ADC_MspInit+0x180>)
 80012d4:	f006 f90a 	bl	80074ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012d8:	e051      	b.n	800137e <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a2c      	ldr	r2, [pc, #176]	@ (8001390 <HAL_ADC_MspInit+0x184>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d14c      	bne.n	800137e <HAL_ADC_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 f8a1 	bl	800843c <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 8001300:	f000 fdf2 	bl	8001ee8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_ADC_MspInit+0x17c>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LMC_CURRSENSE_Pin;
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <HAL_ADC_MspInit+0x188>)
 8001360:	f006 f8c4 	bl	80074ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBAT_SW_DIAG_Pin;
 8001364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001368:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VBAT_SW_DIAG_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001376:	4619      	mov	r1, r3
 8001378:	4807      	ldr	r0, [pc, #28]	@ (8001398 <HAL_ADC_MspInit+0x18c>)
 800137a:	f006 f8b7 	bl	80074ec <HAL_GPIO_Init>
}
 800137e:	bf00      	nop
 8001380:	3788      	adds	r7, #136	@ 0x88
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400
 8001390:	50000400 	.word	0x50000400
 8001394:	48001000 	.word	0x48001000
 8001398:	48000c00 	.word	0x48000c00

0800139c <SendResponse>:
		COMMAND_0x0210
};

// Function to initialize the Command Handler

static void SendResponse(ComsInterface_t *interface) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	Comm_Send(interface, &response);
 80013a4:	4903      	ldr	r1, [pc, #12]	@ (80013b4 <SendResponse+0x18>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fb88 	bl	8000abc <Comm_Send>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200004f8 	.word	0x200004f8

080013b8 <SetResponse>:

static void SetResponse(uint16_t command, uint8_t length, uint8_t *data) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	603a      	str	r2, [r7, #0]
 80013c2:	80fb      	strh	r3, [r7, #6]
 80013c4:	460b      	mov	r3, r1
 80013c6:	717b      	strb	r3, [r7, #5]
	if(data == NULL) {
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <SetResponse+0x1e>
		response.length = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <SetResponse+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	729a      	strb	r2, [r3, #10]
 80013d4:	e00e      	b.n	80013f4 <SetResponse+0x3c>
	} else {
		response.length = length;
 80013d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <SetResponse+0x50>)
 80013d8:	797b      	ldrb	r3, [r7, #5]
 80013da:	7293      	strb	r3, [r2, #10]
		memset(response.data, 0, MAX_DATA_SIZE);
 80013dc:	2208      	movs	r2, #8
 80013de:	2100      	movs	r1, #0
 80013e0:	480a      	ldr	r0, [pc, #40]	@ (800140c <SetResponse+0x54>)
 80013e2:	f00b fe29 	bl	800d038 <memset>
		memcpy(response.data, data, response.length);
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <SetResponse+0x50>)
 80013e8:	7a9b      	ldrb	r3, [r3, #10]
 80013ea:	461a      	mov	r2, r3
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <SetResponse+0x54>)
 80013f0:	f00b fe4e 	bl	800d090 <memcpy>
	}
	response.invalid = false;
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SetResponse+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	72da      	strb	r2, [r3, #11]
	response.command = command;
 80013fa:	4a03      	ldr	r2, [pc, #12]	@ (8001408 <SetResponse+0x50>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	8013      	strh	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200004f8 	.word	0x200004f8
 800140c:	200004fa 	.word	0x200004fa

08001410 <Response_OK>:

static void Response_OK() {
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_OK, 0, NULL);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	20ff      	movs	r0, #255	@ 0xff
 800141a:	f7ff ffcd 	bl	80013b8 <SetResponse>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <Response_Invalid>:

static void Response_Invalid() {
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
	SetResponse(COMMAND_INVALID, 0, NULL);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	20fe      	movs	r0, #254	@ 0xfe
 800142c:	f7ff ffc4 	bl	80013b8 <SetResponse>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <makeInt16_t>:

static int16_t makeInt16_t(uint8_t *val1, uint8_t *val2) {
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	return (*val1 << 8) | *val2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <int16_tToUint8_t>:

static void int16_tToUint8_t(int16_t *input, uint8_t *output, uint8_t num) {
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	4613      	mov	r3, r2
 8001468:	71fb      	strb	r3, [r7, #7]
	uint8_t maxLoop = num;
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	75bb      	strb	r3, [r7, #22]

	for(uint8_t i = 0; i < maxLoop; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e01d      	b.n	80014b0 <int16_tToUint8_t+0x54>
		output[2*i] = (input[i] & 0xFF00) >> 8;
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001480:	121a      	asrs	r2, r3, #8
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4619      	mov	r1, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	440b      	add	r3, r1
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
		output[2*i+1] = input[i] & 0xFF;
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	f9b3 1000 	ldrsh.w	r1, [r3]
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	3301      	adds	r3, #1
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4413      	add	r3, r2
 80014a6:	b2ca      	uxtb	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < maxLoop; i++) {
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	3301      	adds	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]
 80014b0:	7dfa      	ldrb	r2, [r7, #23]
 80014b2:	7dbb      	ldrb	r3, [r7, #22]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d3dd      	bcc.n	8001474 <int16_tToUint8_t+0x18>
	}
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <CommandHandler_ProcessCommand>:
void CommandHandler_Init(void) {
    // Initialize any peripherals or variables related to command handling
    // Example: GPIO, Timers, etc.
}
// Function to process a received command
void CommandHandler_ProcessCommand(ComsInterface_t *interface, RobotSystem *robot) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    // Check for NULL pointer
	DecodedPacket_t packet = Comm_GetPacket(interface);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fb6b 	bl	8000bb4 <Comm_GetPacket>

	if(!packet.isNew) return;
 80014de:	7e3b      	ldrb	r3, [r7, #24]
 80014e0:	f083 0301 	eor.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d13c      	bne.n	8001564 <CommandHandler_ProcessCommand+0x9c>

	if(packet.invalid) {
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <CommandHandler_ProcessCommand+0x34>
		Response_Invalid();
 80014f0:	f7ff ff97 	bl	8001422 <Response_Invalid>
		SendResponse(interface);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff51 	bl	800139c <SendResponse>
		return;
 80014fa:	e034      	b.n	8001566 <CommandHandler_ProcessCommand+0x9e>
	}

	RobotSystem_ResetWatchdog(robot);
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f001 ff4c 	bl	800339a <RobotSystem_ResetWatchdog>

	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e029      	b.n	800155c <CommandHandler_ProcessCommand+0x94>
		if (commandTable[i].commandID == packet.command) {
 8001508:	4a18      	ldr	r2, [pc, #96]	@ (800156c <CommandHandler_ProcessCommand+0xa4>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001510:	89bb      	ldrh	r3, [r7, #12]
 8001512:	429a      	cmp	r2, r3
 8001514:	d11f      	bne.n	8001556 <CommandHandler_ProcessCommand+0x8e>
			if(commandTable[i].expLength == 0 || commandTable[i].expLength == packet.length) {
 8001516:	4a15      	ldr	r2, [pc, #84]	@ (800156c <CommandHandler_ProcessCommand+0xa4>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	885b      	ldrh	r3, [r3, #2]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <CommandHandler_ProcessCommand+0x6c>
 8001524:	4a11      	ldr	r2, [pc, #68]	@ (800156c <CommandHandler_ProcessCommand+0xa4>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	885b      	ldrh	r3, [r3, #2]
 800152e:	7dba      	ldrb	r2, [r7, #22]
 8001530:	4293      	cmp	r3, r2
 8001532:	d10a      	bne.n	800154a <CommandHandler_ProcessCommand+0x82>
				commandTable[i].handler(&packet, robot);
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <CommandHandler_ProcessCommand+0xa4>)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	4610      	mov	r0, r2
 8001546:	4798      	blx	r3
 8001548:	e001      	b.n	800154e <CommandHandler_ProcessCommand+0x86>
			} else {
				Response_Invalid();
 800154a:	f7ff ff6a 	bl	8001422 <Response_Invalid>
			}
			SendResponse(interface);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ff24 	bl	800139c <SendResponse>
			return;
 8001554:	e007      	b.n	8001566 <CommandHandler_ProcessCommand+0x9e>
	for (int i = 0; i < sizeof(commandTable) / sizeof(CommandTableEntry_t); i++) {
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d9d2      	bls.n	8001508 <CommandHandler_ProcessCommand+0x40>
 8001562:	e000      	b.n	8001566 <CommandHandler_ProcessCommand+0x9e>
	if(!packet.isNew) return;
 8001564:	bf00      	nop
		}
	}
}
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000

08001570 <Handle_SetMotorEnable>:

void Handle_SetMotorEnable(DecodedPacket_t *packet, RobotSystem *robot) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	uint8_t data = packet->data[0] > 0 ? 1 : 0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	73fb      	strb	r3, [r7, #15]

	if(data) {
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <Handle_SetMotorEnable+0x28>
		RobotSystem_Enable(robot);
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f001 fdf9 	bl	8003188 <RobotSystem_Enable>
 8001596:	e002      	b.n	800159e <Handle_SetMotorEnable+0x2e>
	} else {
		RobotSystem_Disable(robot);
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f001 fe08 	bl	80031ae <RobotSystem_Disable>
	}

	Response_OK();
 800159e:	f7ff ff37 	bl	8001410 <Response_OK>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <Handle_SetMotorSpeed>:

void Handle_SetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	int16_t leftSpeed = makeInt16_t(&packet->data[0], &packet->data[1]);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	1c9a      	adds	r2, r3, #2
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3303      	adds	r3, #3
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff ff38 	bl	8001434 <makeInt16_t>
 80015c4:	4603      	mov	r3, r0
 80015c6:	81fb      	strh	r3, [r7, #14]
	int16_t rightSpeed = makeInt16_t(&packet->data[2], &packet->data[3]);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	1d1a      	adds	r2, r3, #4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3305      	adds	r3, #5
 80015d0:	4619      	mov	r1, r3
 80015d2:	4610      	mov	r0, r2
 80015d4:	f7ff ff2e 	bl	8001434 <makeInt16_t>
 80015d8:	4603      	mov	r3, r0
 80015da:	81bb      	strh	r3, [r7, #12]
	RobotSystem_SetSpeed(robot, leftSpeed, rightSpeed);
 80015dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e4:	4619      	mov	r1, r3
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f001 fcfb 	bl	8002fe2 <RobotSystem_SetSpeed>

	Response_OK();
 80015ec:	f7ff ff10 	bl	8001410 <Response_OK>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <Handle_SetMotorStop>:

void Handle_SetMotorStop(DecodedPacket_t *packet, RobotSystem *robot) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
	RobotSystem_SetSpeed(robot, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	6838      	ldr	r0, [r7, #0]
 8001608:	f001 fceb 	bl	8002fe2 <RobotSystem_SetSpeed>

	Response_OK();
 800160c:	f7ff ff00 	bl	8001410 <Response_OK>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <Handle_SetOneMotorSpeed>:

void Handle_SetOneMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	int16_t speed = makeInt16_t(&packet->data[0], &packet->data[1]);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	1c9a      	adds	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3303      	adds	r3, #3
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	f7ff ff01 	bl	8001434 <makeInt16_t>
 8001632:	4603      	mov	r3, r0
 8001634:	81fb      	strh	r3, [r7, #14]

	if(packet->command == COMMAND_SETLEFTSPEED) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	f240 1203 	movw	r2, #259	@ 0x103
 800163e:	4293      	cmp	r3, r2
 8001640:	d106      	bne.n	8001650 <Handle_SetOneMotorSpeed+0x38>
		RobotSystem_SetLeftSpeed(robot, speed);
 8001642:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001646:	4619      	mov	r1, r3
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f001 fcf5 	bl	8003038 <RobotSystem_SetLeftSpeed>
 800164e:	e00a      	b.n	8001666 <Handle_SetOneMotorSpeed+0x4e>
	} else if(packet->command == COMMAND_SETRIGHTSPEED) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001658:	d105      	bne.n	8001666 <Handle_SetOneMotorSpeed+0x4e>
		RobotSystem_SetRightSpeed(robot, speed);
 800165a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800165e:	4619      	mov	r1, r3
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f001 fd03 	bl	800306c <RobotSystem_SetRightSpeed>
	}

	Response_OK();
 8001666:	f7ff fed3 	bl	8001410 <Response_OK>
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <Handle_GetMotorPosition>:

void Handle_GetMotorPosition(DecodedPacket_t *packet, RobotSystem *robot) {
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
	int16_t wheelPos[2];
	uint8_t data[4];

	RobotSystem_GetMotorPosition(robot, &wheelPos[0], &wheelPos[1]);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	1c9a      	adds	r2, r3, #2
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f001 fd1c 	bl	80030c6 <RobotSystem_GetMotorPosition>

	int16_tToUint8_t(wheelPos, data, 2);
 800168e:	f107 0108 	add.w	r1, r7, #8
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2202      	movs	r2, #2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fedf 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETMOTORPOSITION, 4, data);
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	461a      	mov	r2, r3
 80016a4:	2104      	movs	r1, #4
 80016a6:	f240 1081 	movw	r0, #385	@ 0x181
 80016aa:	f7ff fe85 	bl	80013b8 <SetResponse>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <Handle_GetMotorSpeed>:

void Handle_GetMotorSpeed(DecodedPacket_t *packet, RobotSystem *robot) {
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
	int16_t speed[2];
	uint8_t data[4];

	RobotSystem_GetMotorSpeed(robot, &speed[0], &speed[1]);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	1c9a      	adds	r2, r3, #2
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f001 fd0f 	bl	80030f0 <RobotSystem_GetMotorSpeed>

	int16_tToUint8_t(speed, data, 2);
 80016d2:	f107 0108 	add.w	r1, r7, #8
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2202      	movs	r2, #2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff febd 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETMOTORSPEED, 4, data);
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	461a      	mov	r2, r3
 80016e8:	2104      	movs	r1, #4
 80016ea:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80016ee:	f7ff fe63 	bl	80013b8 <SetResponse>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <Handle_WakeUp>:

void Handle_WakeUp(DecodedPacket_t *packet, RobotSystem *robot) {
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff fe55 	bl	80013b8 <SetResponse>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <Handle_Ready>:

void Handle_Ready(DecodedPacket_t *packet, RobotSystem *robot) {
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
	SetResponse(COMMAND_READY, 0, NULL);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff fe47 	bl	80013b8 <SetResponse>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <Handle_Shutdown>:

void Handle_Shutdown(DecodedPacket_t *packet, RobotSystem *robot) {
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
	RobotSystem_Shutdown(robot);
 800173c:	6838      	ldr	r0, [r7, #0]
 800173e:	f001 fe4a 	bl	80033d6 <RobotSystem_Shutdown>
	Response_OK();
 8001742:	f7ff fe65 	bl	8001410 <Response_OK>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <Handle_GetAccelVals>:

void Handle_GetAccelVals(DecodedPacket_t *packet, RobotSystem *robot) {
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	int16_t accel[3];
	uint8_t data[6];

	RobotSystem_GetAccelVals(robot, accel);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	6838      	ldr	r0, [r7, #0]
 8001760:	f001 fde3 	bl	800332a <RobotSystem_GetAccelVals>

	int16_tToUint8_t(accel, data, 3);
 8001764:	f107 0108 	add.w	r1, r7, #8
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2203      	movs	r2, #3
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fe74 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETACCELVALS, 6, data);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	461a      	mov	r2, r3
 800177a:	2106      	movs	r1, #6
 800177c:	f240 2001 	movw	r0, #513	@ 0x201
 8001780:	f7ff fe1a 	bl	80013b8 <SetResponse>
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <Handle_GetGyroVals>:

void Handle_GetGyroVals(DecodedPacket_t *packet, RobotSystem *robot) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	int16_t gyro[3];
	uint8_t data[6];

	RobotSystem_GetGyroVals(robot, gyro);
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f001 fde0 	bl	8003362 <RobotSystem_GetGyroVals>

	int16_tToUint8_t(gyro, data, 3);
 80017a2:	f107 0108 	add.w	r1, r7, #8
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	2203      	movs	r2, #3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe55 	bl	800145c <int16_tToUint8_t>

	SetResponse(COMMAND_GETGYROVALS, 6, data);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	461a      	mov	r2, r3
 80017b8:	2106      	movs	r1, #6
 80017ba:	f44f 7004 	mov.w	r0, #528	@ 0x210
 80017be:	f7ff fdfb 	bl	80013b8 <SetResponse>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <Handle_GetBatVolt>:

void Handle_GetBatVolt(DecodedPacket_t *packet, RobotSystem *robot) {
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
	uint16_t batVolt;
	uint8_t data[2];

	RobotSystem_GetBatVolt(robot, &batVolt);
 80017d4:	f107 030e 	add.w	r3, r7, #14
 80017d8:	4619      	mov	r1, r3
 80017da:	6838      	ldr	r0, [r7, #0]
 80017dc:	f001 fdeb 	bl	80033b6 <RobotSystem_GetBatVolt>

	data[0] = batVolt >> 8;
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	733b      	strb	r3, [r7, #12]
	data[1] = batVolt & 0xFF;
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	737b      	strb	r3, [r7, #13]
	SetResponse(COMMAND_GETBATVOLT, 2, data);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	461a      	mov	r2, r3
 80017f6:	2102      	movs	r1, #2
 80017f8:	2080      	movs	r0, #128	@ 0x80
 80017fa:	f7ff fddd 	bl	80013b8 <SetResponse>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <MX_DAC2_Init>:

DAC_HandleTypeDef hdac2;

/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2230      	movs	r2, #48	@ 0x30
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f00b fc0f 	bl	800d038 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <MX_DAC2_Init+0x6c>)
 800181c:	4a16      	ldr	r2, [pc, #88]	@ (8001878 <MX_DAC2_Init+0x70>)
 800181e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001820:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_DAC2_Init+0x6c>)
 8001822:	f004 fbec 	bl	8005ffe <HAL_DAC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800182c:	f000 fb5c 	bl	8001ee8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001830:	2302      	movs	r3, #2
 8001832:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <MX_DAC2_Init+0x6c>)
 800185c:	f004 fc8c 	bl	8006178 <HAL_DAC_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001866:	f000 fb3f 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	3730      	adds	r7, #48	@ 0x30
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000508 	.word	0x20000508
 8001878:	50000c00 	.word	0x50000c00

0800187c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	@ 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a15      	ldr	r2, [pc, #84]	@ (80018f0 <HAL_DAC_MspInit+0x74>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d124      	bne.n	80018e8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* DAC2 clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_DAC_MspInit+0x78>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <HAL_DAC_MspInit+0x78>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_DAC_MspInit+0x78>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_DAC_MspInit+0x78>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <HAL_DAC_MspInit+0x78>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <HAL_DAC_MspInit+0x78>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = WHEEL_MOTOR_CURRENT_LIMIT_Pin;
 80018ce:	2340      	movs	r3, #64	@ 0x40
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d2:	2303      	movs	r3, #3
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WHEEL_MOTOR_CURRENT_LIMIT_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e4:	f005 fe02 	bl	80074ec <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	50000c00 	.word	0x50000c00
 80018f4:	40021000 	.word	0x40021000

080018f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <MX_DMA_Init+0x50>)
 8001900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001902:	4a11      	ldr	r2, [pc, #68]	@ (8001948 <MX_DMA_Init+0x50>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6493      	str	r3, [r2, #72]	@ 0x48
 800190a:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <MX_DMA_Init+0x50>)
 800190c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_DMA_Init+0x50>)
 8001918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191a:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <MX_DMA_Init+0x50>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6493      	str	r3, [r2, #72]	@ 0x48
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_DMA_Init+0x50>)
 8001924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	200b      	movs	r0, #11
 8001934:	f004 fb2f 	bl	8005f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001938:	200b      	movs	r0, #11
 800193a:	f004 fb46 	bl	8005fca <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000

0800194c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001952:	4b2e      	ldr	r3, [pc, #184]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 8001954:	4a2e      	ldr	r2, [pc, #184]	@ (8001a10 <MX_FDCAN1_Init+0xc4>)
 8001956:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV8;
 8001958:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 800195a:	2204      	movs	r2, #4
 800195c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800195e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001964:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800196a:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 800196c:	2201      	movs	r2, #1
 800196e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001970:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 8001972:	2200      	movs	r2, #0
 8001974:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 8001978:	2200      	movs	r2, #0
 800197a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 800197e:	2202      	movs	r2, #2
 8001980:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 8001984:	2201      	movs	r2, #1
 8001986:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001988:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 800198a:	220f      	movs	r2, #15
 800198c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 8001990:	2204      	movs	r2, #4
 8001992:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001994:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 8001996:	2202      	movs	r2, #2
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 800199c:	2201      	movs	r2, #1
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 80019a2:	220f      	movs	r2, #15
 80019a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 80019a8:	2204      	movs	r2, #4
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80019be:	4813      	ldr	r0, [pc, #76]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 80019c0:	f005 f8c6 	bl	8006b50 <HAL_FDCAN_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80019ca:	f000 fa8d 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  HAL_FDCAN_MspInit(&hfdcan1);
 80019ce:	480f      	ldr	r0, [pc, #60]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 80019d0:	f000 f820 	bl	8001a14 <HAL_FDCAN_MspInit>

  FDCAN_FilterTypeDef sFilterConfig;

    /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80019d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019d8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80019de:	2302      	movs	r3, #2
 80019e0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80019e2:	2301      	movs	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	@ (8001a0c <MX_FDCAN1_Init+0xc0>)
 80019f4:	f005 fa06 	bl	8006e04 <HAL_FDCAN_ConfigFilter>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_FDCAN1_Init+0xb6>
    {
      Error_Handler();
 80019fe:	f000 fa73 	bl	8001ee8 <Error_Handler>
//    uint32_t b = HAL_FDCAN_GetError(&hfdcan1);
//
//    HAL_Delay(1);
  /* USER CODE END FDCAN1_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000051c 	.word	0x2000051c
 8001a10:	40006400 	.word	0x40006400

08001a14 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b09e      	sub	sp, #120	@ 0x78
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2254      	movs	r2, #84	@ 0x54
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00b faff 	bl	800d038 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001abc <HAL_FDCAN_MspInit+0xa8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d137      	bne.n	8001ab4 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001a4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4618      	mov	r0, r3
 8001a56:	f006 fcf1 	bl	800843c <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a60:	f000 fa42 	bl	8001ee8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a64:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <HAL_FDCAN_MspInit+0xac>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a68:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <HAL_FDCAN_MspInit+0xac>)
 8001a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <HAL_FDCAN_MspInit+0xac>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_FDCAN_MspInit+0xac>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a80:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <HAL_FDCAN_MspInit+0xac>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_FDCAN_MspInit+0xac>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a94:	2303      	movs	r3, #3
 8001a96:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001aa4:	2309      	movs	r3, #9
 8001aa6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <HAL_FDCAN_MspInit+0xb0>)
 8001ab0:	f005 fd1c 	bl	80074ec <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3778      	adds	r7, #120	@ 0x78
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40006400 	.word	0x40006400
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	48000c00 	.word	0x48000c00

08001ac8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	4a79      	ldr	r2, [pc, #484]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aea:	4b77      	ldr	r3, [pc, #476]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af6:	4b74      	ldr	r3, [pc, #464]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	4a73      	ldr	r2, [pc, #460]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001afc:	f043 0320 	orr.w	r3, r3, #32
 8001b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b02:	4b71      	ldr	r3, [pc, #452]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a6d      	ldr	r2, [pc, #436]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b6b      	ldr	r3, [pc, #428]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b68      	ldr	r3, [pc, #416]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a67      	ldr	r2, [pc, #412]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b65      	ldr	r3, [pc, #404]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3e:	4b62      	ldr	r3, [pc, #392]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	4a61      	ldr	r2, [pc, #388]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b56:	4b5c      	ldr	r3, [pc, #368]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b62:	4b59      	ldr	r3, [pc, #356]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6e:	4b56      	ldr	r3, [pc, #344]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	4a55      	ldr	r2, [pc, #340]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7a:	4b53      	ldr	r3, [pc, #332]	@ (8001cc8 <MX_GPIO_Init+0x200>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nAUX2_EN_Pin|LED_A_INT_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b90:	f005 fe46 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, nDEBUG_LED2_Pin|nDEBUG_LED1_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8001b9a:	484c      	ldr	r0, [pc, #304]	@ (8001ccc <MX_GPIO_Init+0x204>)
 8001b9c:	f005 fe40 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX2_OUTPUT_GPIO_Port, AUX2_OUTPUT_Pin, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ba6:	484a      	ldr	r0, [pc, #296]	@ (8001cd0 <MX_GPIO_Init+0x208>)
 8001ba8:	f005 fe3a 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCM_GYRO_SPI_GPIO_Port, nCS_MCM_GYRO_SPI_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4848      	ldr	r0, [pc, #288]	@ (8001cd4 <MX_GPIO_Init+0x20c>)
 8001bb2:	f005 fe35 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCM_KILL_Pin|CAN_EN_5V_Pin|nCAN_STBY_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001bbc:	4845      	ldr	r0, [pc, #276]	@ (8001cd4 <MX_GPIO_Init+0x20c>)
 8001bbe:	f005 fe2f 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nWHEEL_MOTOR_SHDN_GPIO_Port, nWHEEL_MOTOR_SHDN_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	4844      	ldr	r0, [pc, #272]	@ (8001cd8 <MX_GPIO_Init+0x210>)
 8001bc8:	f005 fe2a 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nAUX2_EN_Pin|LED_A_INT_Pin;
 8001bcc:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be8:	f005 fc80 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = nDEBUG_LED2_Pin|nDEBUG_LED1_Pin;
 8001bec:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4831      	ldr	r0, [pc, #196]	@ (8001ccc <MX_GPIO_Init+0x204>)
 8001c06:	f005 fc71 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRMC_CURRFAULT_Pin;
 8001c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nRMC_CURRFAULT_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	482f      	ldr	r0, [pc, #188]	@ (8001cdc <MX_GPIO_Init+0x214>)
 8001c20:	f005 fc64 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = V_3V3_DIAG_Pin|V_5V_DIAG_Pin|nLMC_CURRFAULT_Pin;
 8001c24:	f44f 7341 	mov.w	r3, #772	@ 0x304
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4825      	ldr	r0, [pc, #148]	@ (8001cd0 <MX_GPIO_Init+0x208>)
 8001c3a:	f005 fc57 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX2_OUTPUT_Pin;
 8001c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUX2_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	481e      	ldr	r0, [pc, #120]	@ (8001cd0 <MX_GPIO_Init+0x208>)
 8001c58:	f005 fc48 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4818      	ldr	r0, [pc, #96]	@ (8001cd4 <MX_GPIO_Init+0x20c>)
 8001c72:	f005 fc3b 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_MCM_GYRO_SPI_Pin|MCM_KILL_Pin|CAN_EN_5V_Pin|nCAN_STBY_Pin;
 8001c76:	f240 3382 	movw	r3, #898	@ 0x382
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4811      	ldr	r0, [pc, #68]	@ (8001cd4 <MX_GPIO_Init+0x20c>)
 8001c90:	f005 fc2c 	bl	80074ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nWHEEL_MOTOR_SHDN_Pin;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nWHEEL_MOTOR_SHDN_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <MX_GPIO_Init+0x210>)
 8001cac:	f005 fc1e 	bl	80074ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2006      	movs	r0, #6
 8001cb6:	f004 f96e 	bl	8005f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cba:	2006      	movs	r0, #6
 8001cbc:	f004 f985 	bl	8005fca <HAL_NVIC_EnableIRQ>

}
 8001cc0:	bf00      	nop
 8001cc2:	3730      	adds	r7, #48	@ 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	48001400 	.word	0x48001400
 8001cd0:	48000c00 	.word	0x48000c00
 8001cd4:	48001800 	.word	0x48001800
 8001cd8:	48001000 	.word	0x48001000
 8001cdc:	48000400 	.word	0x48000400

08001ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b0f1      	sub	sp, #452	@ 0x1c4
 8001ce4:	af6c      	add	r7, sp, #432	@ 0x1b0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ce6:	f002 fa66 	bl	80041b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cea:	f000 f881 	bl	8001df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cee:	f7ff feeb 	bl	8001ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cf2:	f7ff fe01 	bl	80018f8 <MX_DMA_Init>
  MX_ADC3_Init();
 8001cf6:	f7ff fa11 	bl	800111c <MX_ADC3_Init>
  MX_DAC2_Init();
 8001cfa:	f7ff fd85 	bl	8001808 <MX_DAC2_Init>
  MX_USART2_UART_Init();
 8001cfe:	f002 f955 	bl	8003fac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001d02:	f001 fb77 	bl	80033f4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001d06:	f7ff f991 	bl	800102c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d0a:	f001 fd1f 	bl	800374c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001d0e:	f001 fef3 	bl	8003af8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001d12:	f001 fde3 	bl	80038dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8001d16:	f001 fe67 	bl	80039e8 <MX_TIM5_Init>
  MX_FDCAN1_Init();
 8001d1a:	f7ff fe17 	bl	800194c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(nCAN_STBY_GPIO_Port, nCAN_STBY_Pin, GPIO_PIN_SET);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d24:	482a      	ldr	r0, [pc, #168]	@ (8001dd0 <main+0xf0>)
 8001d26:	f005 fd7b 	bl	8007820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_EN_5V_GPIO_Port, CAN_EN_5V_Pin, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d30:	4827      	ldr	r0, [pc, #156]	@ (8001dd0 <main+0xf0>)
 8001d32:	f005 fd75 	bl	8007820 <HAL_GPIO_WritePin>

  RobotSystem_Init(&robot, leftWheel, rightWheel, imu, sys);
 8001d36:	4e27      	ldr	r6, [pc, #156]	@ (8001dd4 <main+0xf4>)
 8001d38:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <main+0xf8>)
 8001d3a:	ac66      	add	r4, sp, #408	@ 0x198
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d46:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d4a:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <main+0xfc>)
 8001d4c:	ac5e      	add	r4, sp, #376	@ 0x178
 8001d4e:	461d      	mov	r5, r3
 8001d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d5c:	4a20      	ldr	r2, [pc, #128]	@ (8001de0 <main+0x100>)
 8001d5e:	ab2e      	add	r3, sp, #184	@ 0xb8
 8001d60:	4611      	mov	r1, r2
 8001d62:	22c0      	movs	r2, #192	@ 0xc0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f00b f993 	bl	800d090 <memcpy>
 8001d6a:	4668      	mov	r0, sp
 8001d6c:	f106 0308 	add.w	r3, r6, #8
 8001d70:	22b8      	movs	r2, #184	@ 0xb8
 8001d72:	4619      	mov	r1, r3
 8001d74:	f00b f98c 	bl	800d090 <memcpy>
 8001d78:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001d7c:	4819      	ldr	r0, [pc, #100]	@ (8001de4 <main+0x104>)
 8001d7e:	f001 f8d4 	bl	8002f2a <RobotSystem_Init>
  Comm_Init(&serial, COMM_UART, &huart2);
 8001d82:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <main+0x108>)
 8001d84:	2100      	movs	r1, #0
 8001d86:	4819      	ldr	r0, [pc, #100]	@ (8001dec <main+0x10c>)
 8001d88:	f7fe fe32 	bl	80009f0 <Comm_Init>
  //Comm_Init(&canbus, COMM_CAN, &hfdcan1);
  HAL_Delay(250);
 8001d8c:	20fa      	movs	r0, #250	@ 0xfa
 8001d8e:	f002 fa83 	bl	8004298 <HAL_Delay>
  DecodedPacket_t readyPacket = {
 8001d92:	463b      	mov	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	819a      	strh	r2, [r3, #12]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	803b      	strh	r3, [r7, #0]
		  .command = COMMAND_READY,
		  .length = 0,
		  .invalid = false
  };
  Comm_Send(&serial, &readyPacket);
 8001da2:	463b      	mov	r3, r7
 8001da4:	4619      	mov	r1, r3
 8001da6:	4811      	ldr	r0, [pc, #68]	@ (8001dec <main+0x10c>)
 8001da8:	f7fe fe88 	bl	8000abc <Comm_Send>



  readyPacket.length = 2;
 8001dac:	2302      	movs	r3, #2
 8001dae:	72bb      	strb	r3, [r7, #10]
  readyPacket.data[0] = 0xAA;
 8001db0:	23aa      	movs	r3, #170	@ 0xaa
 8001db2:	70bb      	strb	r3, [r7, #2]
  readyPacket.data[1] = 0xCC;
 8001db4:	23cc      	movs	r3, #204	@ 0xcc
 8001db6:	70fb      	strb	r3, [r7, #3]


  while (1)
  {

	  Comm_Process(&serial);
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <main+0x10c>)
 8001dba:	f7fe feab 	bl	8000b14 <Comm_Process>
	  RobotSystem_Calculate(&robot);
 8001dbe:	4809      	ldr	r0, [pc, #36]	@ (8001de4 <main+0x104>)
 8001dc0:	f001 f9ab 	bl	800311a <RobotSystem_Calculate>

	  CommandHandler_ProcessCommand(&serial, &robot);
 8001dc4:	4907      	ldr	r1, [pc, #28]	@ (8001de4 <main+0x104>)
 8001dc6:	4809      	ldr	r0, [pc, #36]	@ (8001dec <main+0x10c>)
 8001dc8:	f7ff fb7e 	bl	80014c8 <CommandHandler_ProcessCommand>
	  Comm_Process(&serial);
 8001dcc:	bf00      	nop
 8001dce:	e7f3      	b.n	8001db8 <main+0xd8>
 8001dd0:	48001800 	.word	0x48001800
 8001dd4:	20000330 	.word	0x20000330
 8001dd8:	20000068 	.word	0x20000068
 8001ddc:	20000080 	.word	0x20000080
 8001de0:	20000270 	.word	0x20000270
 8001de4:	200000a0 	.word	0x200000a0
 8001de8:	2000080c 	.word	0x2000080c
 8001dec:	20000580 	.word	0x20000580

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b094      	sub	sp, #80	@ 0x50
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0318 	add.w	r3, r7, #24
 8001dfa:	2238      	movs	r2, #56	@ 0x38
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00b f91a 	bl	800d038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f005 fd34 	bl	8007880 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e22:	2340      	movs	r3, #64	@ 0x40
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e26:	2302      	movs	r3, #2
 8001e28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001e32:	2314      	movs	r3, #20
 8001e34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e36:	2302      	movs	r3, #2
 8001e38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 fdce 	bl	80079e8 <HAL_RCC_OscConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e52:	f000 f849 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e56:	230f      	movs	r3, #15
 8001e58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 f8cc 	bl	800800c <HAL_RCC_ClockConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e7a:	f000 f835 	bl	8001ee8 <Error_Handler>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3750      	adds	r7, #80	@ 0x50
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	RobotSystem_InterruptHandler(&robot, htim);
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <HAL_TIM_IC_CaptureCallback+0x18>)
 8001e94:	f001 f95b 	bl	800314e <RobotSystem_InterruptHandler>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200000a0 	.word	0x200000a0

08001ea4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
	RobotSystem_ImuInterruptHandler(&robot, GPIO_Pin);
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001eb4:	f001 fa27 	bl	8003306 <RobotSystem_ImuInterruptHandler>

}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200000a0 	.word	0x200000a0

08001ec4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
	Comm_Receive(&serial, 0, size);
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4803      	ldr	r0, [pc, #12]	@ (8001ee4 <HAL_UARTEx_RxEventCallback+0x20>)
 8001ed8:	f7fe fe09 	bl	8000aee <Comm_Receive>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000580 	.word	0x20000580

08001ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <Error_Handler+0x8>

08001ef4 <Motor_Init>:
 */

#include "motor_control.h"

// Initialize a motor
void Motor_Init(Motor *motor) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    // Example: Initialize GPIOs or timers for the motor
	motor->pid.hallCount = 0;
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	motor->pid.lastHallCount = 0;
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	motor->pid.set_speed = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	motor->pid.integral = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	motor->pid.previousFilter = 0;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	motor->pid.lastUpdateTime = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	motor->pid.lastPwmVal = 0;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	motor->pid.lastHallTime = 0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->pid.totalHallTime = 0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	675a      	str	r2, [r3, #116]	@ 0x74
	motor->pid.pwmVal = 0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	motor->pid.filterGain = DER_FILTER_GAIN;
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	motor->pid.maxIntegral = MAX_INTEGRAL_VAL;
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	motor->isFault = false;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	motor->faultRecovery = false;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43


	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall1_Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f007 fd00 	bl	80099b0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall2_Channel);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	885b      	ldrh	r3, [r3, #2]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	f007 fcf8 	bl	80099b0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall3_Channel);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	889b      	ldrh	r3, [r3, #4]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f007 fcf0 	bl	80099b0 <HAL_TIM_IC_Start_IT>

	Motor_Stop(motor);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f960 	bl	8002296 <Motor_Stop>
	ReadHallSensors(motor);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 feb1 	bl	8002d3e <ReadHallSensors>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <Motor_SetSpeed>:

// Set the speed of a motor
void Motor_SetSpeed(Motor *motor, int64_t target_speed) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	e9c7 2300 	strd	r2, r3, [r7]

	if (target_speed == motor->target_speed) return;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ffa:	4299      	cmp	r1, r3
 8001ffc:	bf08      	it	eq
 8001ffe:	4290      	cmpeq	r0, r2
 8002000:	d036      	beq.n	8002070 <Motor_SetSpeed+0x8c>

	if (target_speed > MAX_MOTOR_SPEED) target_speed = MAX_MOTOR_SPEED;
 8002002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002006:	f641 7141 	movw	r1, #8001	@ 0x1f41
 800200a:	428a      	cmp	r2, r1
 800200c:	f173 0300 	sbcs.w	r3, r3, #0
 8002010:	db05      	blt.n	800201e <Motor_SetSpeed+0x3a>
 8002012:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed < -MAX_MOTOR_SPEED) target_speed = -MAX_MOTOR_SPEED;
 800201e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002022:	f512 5ffa 	cmn.w	r2, #8000	@ 0x1f40
 8002026:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800202a:	da04      	bge.n	8002036 <Motor_SetSpeed+0x52>
 800202c:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <Motor_SetSpeed+0x94>)
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed > -MIN_MOTOR_SPEED && target_speed < MIN_MOTOR_SPEED)
 8002036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800203a:	4910      	ldr	r1, [pc, #64]	@ (800207c <Motor_SetSpeed+0x98>)
 800203c:	428a      	cmp	r2, r1
 800203e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002042:	db0c      	blt.n	800205e <Motor_SetSpeed+0x7a>
 8002044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002048:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800204c:	f173 0300 	sbcs.w	r3, r3, #0
 8002050:	da05      	bge.n	800205e <Motor_SetSpeed+0x7a>
			target_speed = 0;
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9c7 2300 	strd	r2, r3, [r7]

	//motor->pid.integral = 0;
	//motor->pid.previousError = 0;

	motor->target_speed = target_speed;
 800205e:	68f9      	ldr	r1, [r7, #12]
 8002060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002064:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	Motor_Calculate(motor);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f935 	bl	80022d8 <Motor_Calculate>
 800206e:	e000      	b.n	8002072 <Motor_SetSpeed+0x8e>
	if (target_speed == motor->target_speed) return;
 8002070:	bf00      	nop
}
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	ffffe0c0 	.word	0xffffe0c0
 800207c:	fffffc19 	.word	0xfffffc19

08002080 <Motor_SetPwm>:


void Motor_SetPwm(Motor *motor, int16_t duty_cycle) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]

	if(duty_cycle > PWM_MAX_VAL) duty_cycle = PWM_MAX_VAL;
 800208c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002094:	dd03      	ble.n	800209e <Motor_SetPwm+0x1e>
 8002096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	e005      	b.n	80020aa <Motor_SetPwm+0x2a>
	else if(duty_cycle < 0) duty_cycle = 0;
 800209e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da01      	bge.n	80020aa <Motor_SetPwm+0x2a>
 80020a6:	2300      	movs	r3, #0
 80020a8:	807b      	strh	r3, [r7, #2]

	motor->pid.pwmVal = duty_cycle;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	887a      	ldrh	r2, [r7, #2]
 80020ae:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_A_IDX], motor->pid.pwmVal);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <Motor_SetPwm+0x4a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80020c8:	e03b      	b.n	8002142 <Motor_SetPwm+0xc2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d108      	bne.n	80020e4 <Motor_SetPwm+0x64>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	460b      	mov	r3, r1
 80020e0:	6393      	str	r3, [r2, #56]	@ 0x38
 80020e2:	e02e      	b.n	8002142 <Motor_SetPwm+0xc2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d108      	bne.n	80020fe <Motor_SetPwm+0x7e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	460b      	mov	r3, r1
 80020fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80020fc:	e021      	b.n	8002142 <Motor_SetPwm+0xc2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d108      	bne.n	8002118 <Motor_SetPwm+0x98>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	460b      	mov	r3, r1
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40
 8002116:	e014      	b.n	8002142 <Motor_SetPwm+0xc2>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800211c:	2b10      	cmp	r3, #16
 800211e:	d108      	bne.n	8002132 <Motor_SetPwm+0xb2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	460b      	mov	r3, r1
 800212e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002130:	e007      	b.n	8002142 <Motor_SetPwm+0xc2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_B_IDX], motor->pid.pwmVal);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <Motor_SetPwm+0xda>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	635a      	str	r2, [r3, #52]	@ 0x34
 8002158:	e03b      	b.n	80021d2 <Motor_SetPwm+0x152>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800215e:	2b04      	cmp	r3, #4
 8002160:	d108      	bne.n	8002174 <Motor_SetPwm+0xf4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	460b      	mov	r3, r1
 8002170:	6393      	str	r3, [r2, #56]	@ 0x38
 8002172:	e02e      	b.n	80021d2 <Motor_SetPwm+0x152>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002178:	2b08      	cmp	r3, #8
 800217a:	d108      	bne.n	800218e <Motor_SetPwm+0x10e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	460b      	mov	r3, r1
 800218a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800218c:	e021      	b.n	80021d2 <Motor_SetPwm+0x152>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d108      	bne.n	80021a8 <Motor_SetPwm+0x128>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	460b      	mov	r3, r1
 80021a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a6:	e014      	b.n	80021d2 <Motor_SetPwm+0x152>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d108      	bne.n	80021c2 <Motor_SetPwm+0x142>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	460b      	mov	r3, r1
 80021be:	6493      	str	r3, [r2, #72]	@ 0x48
 80021c0:	e007      	b.n	80021d2 <Motor_SetPwm+0x152>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	460b      	mov	r3, r1
 80021d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_C_IDX], motor->pid.pwmVal);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d107      	bne.n	80021ea <Motor_SetPwm+0x16a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e8:	e03b      	b.n	8002262 <Motor_SetPwm+0x1e2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d108      	bne.n	8002204 <Motor_SetPwm+0x184>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	460b      	mov	r3, r1
 8002200:	6393      	str	r3, [r2, #56]	@ 0x38
 8002202:	e02e      	b.n	8002262 <Motor_SetPwm+0x1e2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002208:	2b08      	cmp	r3, #8
 800220a:	d108      	bne.n	800221e <Motor_SetPwm+0x19e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	460b      	mov	r3, r1
 800221a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800221c:	e021      	b.n	8002262 <Motor_SetPwm+0x1e2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d108      	bne.n	8002238 <Motor_SetPwm+0x1b8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	460b      	mov	r3, r1
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	e014      	b.n	8002262 <Motor_SetPwm+0x1e2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800223c:	2b10      	cmp	r3, #16
 800223e:	d108      	bne.n	8002252 <Motor_SetPwm+0x1d2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	460b      	mov	r3, r1
 800224e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002250:	e007      	b.n	8002262 <Motor_SetPwm+0x1e2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	460b      	mov	r3, r1
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if(motor->pid.lastPwmVal == 0 && motor->pid.lastPwmVal != motor->pid.pwmVal)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <Motor_SetPwm+0x202>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	@ 0x82
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002278:	429a      	cmp	r2, r3
 800227a:	d002      	beq.n	8002282 <Motor_SetPwm+0x202>
		Motor_Update(motor);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fc43 	bl	8002b08 <Motor_Update>
	motor->pid.lastPwmVal = motor->pid.pwmVal;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <Motor_Stop>:

// Stop a motor
void Motor_Stop(Motor *motor) {
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
    // Set speed to zero to stop the motor
    Motor_SetSpeed(motor, 0);
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fe9c 	bl	8001fe4 <Motor_SetSpeed>
    SetPhase(motor, PHASE_A_IDX, false, false);
 80022ac:	2300      	movs	r3, #0
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fcee 	bl	8002c94 <SetPhase>
    SetPhase(motor, PHASE_B_IDX, false, false);
 80022b8:	2300      	movs	r3, #0
 80022ba:	2200      	movs	r2, #0
 80022bc:	2101      	movs	r1, #1
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fce8 	bl	8002c94 <SetPhase>
    SetPhase(motor, PHASE_C_IDX, false, false);
 80022c4:	2300      	movs	r3, #0
 80022c6:	2200      	movs	r2, #0
 80022c8:	2102      	movs	r1, #2
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fce2 	bl	8002c94 <SetPhase>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <Motor_Calculate>:

void Motor_Calculate(Motor *motor) {
 80022d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022dc:	b0d7      	sub	sp, #348	@ 0x15c
 80022de:	af00      	add	r7, sp, #0
 80022e0:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
	uint32_t currentTime = HAL_GetTick(); // Get the current time in milliseconds
 80022e4:	f001 ffcc 	bl	8004280 <HAL_GetTick>
 80022e8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
	if(Motor_GetFaultStatus(motor)) {
 80022ec:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80022f0:	f000 fde3 	bl	8002eba <Motor_GetFaultStatus>

	}
	// Update PID every certain time cycle
	if ((currentTime - motor->pid.lastUpdateTime) >= PID_CALC_TIMING) {
 80022f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022f8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80022fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	2b13      	cmp	r3, #19
 8002304:	f240 83f5 	bls.w	8002af2 <Motor_Calculate+0x81a>

		if(motor->faultRecovery) {
 8002308:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800230c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <Motor_Calculate+0x46>
			Motor_CurrFaultHandler(motor);
 8002314:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002318:	f000 fdf4 	bl	8002f04 <Motor_CurrFaultHandler>
			return;
 800231c:	e3e9      	b.n	8002af2 <Motor_Calculate+0x81a>
		}
		CalculateDistance(motor);
 800231e:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002322:	f000 fd99 	bl	8002e58 <CalculateDistance>
		if(motor->pid.set_speed > motor->target_speed) {
 8002326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800232a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800232e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002332:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002336:	4282      	cmp	r2, r0
 8002338:	418b      	sbcs	r3, r1
 800233a:	da78      	bge.n	800242e <Motor_Calculate+0x156>
			if(motor->pid.set_speed > 0 && motor->pid.set_speed - motor->acceleration < 0 && motor->target_speed < 0) {
 800233c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002340:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002344:	2a01      	cmp	r2, #1
 8002346:	f173 0300 	sbcs.w	r3, r3, #0
 800234a:	db35      	blt.n	80023b8 <Motor_Calculate+0xe0>
 800234c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002350:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002354:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002358:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800235c:	1a84      	subs	r4, r0, r2
 800235e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8002362:	eb61 0303 	sbc.w	r3, r1, r3
 8002366:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236e:	2b00      	cmp	r3, #0
 8002370:	da22      	bge.n	80023b8 <Motor_Calculate+0xe0>
 8002372:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002376:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800237a:	2b00      	cmp	r3, #0
 800237c:	da1c      	bge.n	80023b8 <Motor_Calculate+0xe0>
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 800237e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002382:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8002386:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800238a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800238e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002392:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002396:	eb10 0802 	adds.w	r8, r0, r2
 800239a:	eb41 0903 	adc.w	r9, r1, r3
 800239e:	45a0      	cmp	r8, r4
 80023a0:	eb79 0305 	sbcs.w	r3, r9, r5
 80023a4:	db3a      	blt.n	800241c <Motor_Calculate+0x144>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 80023a6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 80023b6:	e031      	b.n	800241c <Motor_Calculate+0x144>
				}
			}
			else if(motor->pid.set_speed - motor->acceleration <= motor->target_speed) {
 80023b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023bc:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80023c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023c4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80023c8:	ebb0 0a02 	subs.w	sl, r0, r2
 80023cc:	eb61 0b03 	sbc.w	fp, r1, r3
 80023d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023d4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80023d8:	4552      	cmp	r2, sl
 80023da:	eb73 030b 	sbcs.w	r3, r3, fp
 80023de:	db08      	blt.n	80023f2 <Motor_Calculate+0x11a>
				motor->pid.set_speed = motor->target_speed;
 80023e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023e4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80023e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023ec:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 80023f0:	e014      	b.n	800241c <Motor_Calculate+0x144>
			}
			else {
				motor->pid.set_speed -= motor->acceleration;
 80023f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023f6:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80023fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023fe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002402:	1a84      	subs	r4, r0, r2
 8002404:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8002408:	eb61 0303 	sbc.w	r3, r1, r3
 800240c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002410:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002414:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002418:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 800241c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 800242c:	e08d      	b.n	800254a <Motor_Calculate+0x272>
		} else if(motor->pid.set_speed < motor->target_speed) {
 800242e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002432:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800243a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800243e:	4290      	cmp	r0, r2
 8002440:	eb71 0303 	sbcs.w	r3, r1, r3
 8002444:	f280 8081 	bge.w	800254a <Motor_Calculate+0x272>
			if(motor->pid.set_speed < 0 && motor->pid.set_speed + motor->acceleration > 0 && motor->target_speed > 0) {
 8002448:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800244c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002450:	2b00      	cmp	r3, #0
 8002452:	da3a      	bge.n	80024ca <Motor_Calculate+0x1f2>
 8002454:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002458:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800245c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002460:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002464:	1884      	adds	r4, r0, r2
 8002466:	eb41 0503 	adc.w	r5, r1, r3
 800246a:	2c01      	cmp	r4, #1
 800246c:	f175 0300 	sbcs.w	r3, r5, #0
 8002470:	db2b      	blt.n	80024ca <Motor_Calculate+0x1f2>
 8002472:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002476:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800247a:	2a01      	cmp	r2, #1
 800247c:	f173 0300 	sbcs.w	r3, r3, #0
 8002480:	db23      	blt.n	80024ca <Motor_Calculate+0x1f2>
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 8002482:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002486:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800248a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800248e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002492:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002496:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800249a:	1a86      	subs	r6, r0, r2
 800249c:	f8c7 60e0 	str.w	r6, [r7, #224]	@ 0xe0
 80024a0:	eb61 0303 	sbc.w	r3, r1, r3
 80024a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80024ac:	460b      	mov	r3, r1
 80024ae:	429c      	cmp	r4, r3
 80024b0:	4613      	mov	r3, r2
 80024b2:	eb75 0303 	sbcs.w	r3, r5, r3
 80024b6:	db40      	blt.n	800253a <Motor_Calculate+0x262>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 80024b8:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 80024c8:	e037      	b.n	800253a <Motor_Calculate+0x262>
				}
			}
			else if(motor->pid.set_speed + motor->acceleration >= motor->target_speed) {
 80024ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024ce:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80024d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024d6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80024da:	1884      	adds	r4, r0, r2
 80024dc:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 80024e0:	eb41 0303 	adc.w	r3, r1, r3
 80024e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80024e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80024ec:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80024f0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80024f4:	4621      	mov	r1, r4
 80024f6:	4291      	cmp	r1, r2
 80024f8:	4629      	mov	r1, r5
 80024fa:	4199      	sbcs	r1, r3
 80024fc:	db08      	blt.n	8002510 <Motor_Calculate+0x238>
				motor->pid.set_speed = motor->target_speed;
 80024fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002502:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002506:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800250a:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 800250e:	e014      	b.n	800253a <Motor_Calculate+0x262>
			}
			else {
				motor->pid.set_speed += motor->acceleration;
 8002510:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002514:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002518:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800251c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002520:	1884      	adds	r4, r0, r2
 8002522:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8002526:	eb41 0303 	adc.w	r3, r1, r3
 800252a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800252e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002532:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002536:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 800253a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		}

		//set motor direction based the sign of the set_speed variable
		if(motor->pid.set_speed < 0) {
 800254a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800254e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002552:	2b00      	cmp	r3, #0
 8002554:	da05      	bge.n	8002562 <Motor_Calculate+0x28a>
			motor->direction = false;
 8002556:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800255a:	2300      	movs	r3, #0
 800255c:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
 8002560:	e004      	b.n	800256c <Motor_Calculate+0x294>
		}
		else
		{
			motor->direction = true;
 8002562:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8002566:	2301      	movs	r3, #1
 8002568:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
		}

		// Calculate current speed
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 800256c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002570:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8002574:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002578:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800257c:	1a84      	subs	r4, r0, r2
 800257e:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8002582:	eb61 0303 	sbc.w	r3, r1, r3
 8002586:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				* ( 1000 * 1000 * 60 / ((int64_t)motor->pid.totalHallTime))/SPEED_CALC_HALL_TO_REV; // speed in counts per minute
 800258a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800258e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002590:	2200      	movs	r2, #0
 8002592:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002596:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800259a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800259e:	4822      	ldr	r0, [pc, #136]	@ (8002628 <Motor_Calculate+0x350>)
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	f7fd fe38 	bl	8000218 <__aeabi_ldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80025b0:	4629      	mov	r1, r5
 80025b2:	fb02 f001 	mul.w	r0, r2, r1
 80025b6:	4621      	mov	r1, r4
 80025b8:	fb01 f103 	mul.w	r1, r1, r3
 80025bc:	4401      	add	r1, r0
 80025be:	4620      	mov	r0, r4
 80025c0:	fba0 2302 	umull	r2, r3, r0, r2
 80025c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025c8:	4613      	mov	r3, r2
 80025ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80025d2:	18cb      	adds	r3, r1, r3
 80025d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025d8:	f04f 0207 	mov.w	r2, #7
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80025e4:	f7fd fe18 	bl	8000218 <__aeabi_ldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 80025f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025f4:	e9c3 0114 	strd	r0, r1, [r3, #80]	@ 0x50

		motor->pid.totalHallTime = 0;
 80025f8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80025fc:	2300      	movs	r3, #0
 80025fe:	6753      	str	r3, [r2, #116]	@ 0x74
		motor->pid.lastHallCount = motor->pid.hallCount;
 8002600:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002604:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8002608:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800260c:	e9c3 011a 	strd	r0, r1, [r3, #104]	@ 0x68

		//do no calculations if speed is set to 0
		if(motor->pid.set_speed == 0) {
 8002610:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002614:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002618:	4313      	orrs	r3, r2
 800261a:	d107      	bne.n	800262c <Motor_Calculate+0x354>
			Motor_SetPwm(motor,0);
 800261c:	2100      	movs	r1, #0
 800261e:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002622:	f7ff fd2d 	bl	8002080 <Motor_SetPwm>
			return;
 8002626:	e264      	b.n	8002af2 <Motor_Calculate+0x81a>
 8002628:	03938700 	.word	0x03938700
		}

		// Calculate error
		int64_t error = (motor->pid.set_speed - motor->current_speed);
 800262c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002630:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002634:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002638:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800263c:	1a84      	subs	r4, r0, r2
 800263e:	653c      	str	r4, [r7, #80]	@ 0x50
 8002640:	eb61 0303 	sbc.w	r3, r1, r3
 8002644:	657b      	str	r3, [r7, #84]	@ 0x54
 8002646:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800264a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		// PID calculations
		motor->pid.integral += error * PID_CALC_TIMING/1000; // Integral term, scaled for 50ms
 800264e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002652:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	@ 0x88
 8002656:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800265a:	f04f 0232 	mov.w	r2, #50	@ 0x32
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f7fd fdd9 	bl	8000218 <__aeabi_ldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	18a1      	adds	r1, r4, r2
 800266c:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8002670:	eb45 0303 	adc.w	r3, r5, r3
 8002674:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002678:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800267c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002680:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//clamp integral term to avoid integral windup
		if(motor->pid.integral > motor->pid.maxIntegral) motor->pid.integral = motor->pid.maxIntegral;
 8002684:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002688:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 800268c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002690:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002694:	4282      	cmp	r2, r0
 8002696:	418b      	sbcs	r3, r1
 8002698:	da07      	bge.n	80026aa <Motor_Calculate+0x3d2>
 800269a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800269e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 80026a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026a6:	e9c3 0122 	strd	r0, r1, [r3, #136]	@ 0x88
		if(motor->pid.integral < -1*motor->pid.maxIntegral) motor->pid.integral = -1*motor->pid.maxIntegral;
 80026aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026ae:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80026b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026b6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80026ba:	2400      	movs	r4, #0
 80026bc:	4255      	negs	r5, r2
 80026be:	f8c7 50b0 	str.w	r5, [r7, #176]	@ 0xb0
 80026c2:	eb64 0303 	sbc.w	r3, r4, r3
 80026c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026ca:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80026ce:	4623      	mov	r3, r4
 80026d0:	4298      	cmp	r0, r3
 80026d2:	462b      	mov	r3, r5
 80026d4:	eb71 0303 	sbcs.w	r3, r1, r3
 80026d8:	da11      	bge.n	80026fe <Motor_Calculate+0x426>
 80026da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026de:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80026e2:	2100      	movs	r1, #0
 80026e4:	4250      	negs	r0, r2
 80026e6:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 80026ea:	eb61 0303 	sbc.w	r3, r1, r3
 80026ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80026f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80026fa:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//use derivitave filter to calculate derivative term
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 80026fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002702:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8002706:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800270a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800270e:	fb02 f501 	mul.w	r5, r2, r1
 8002712:	fb00 f403 	mul.w	r4, r0, r3
 8002716:	442c      	add	r4, r5
 8002718:	fba0 2302 	umull	r2, r3, r0, r2
 800271c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002720:	4613      	mov	r3, r2
 8002722:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002726:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800272a:	18e3      	adds	r3, r4, r3
 800272c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002730:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800273c:	f7fd fd6c 	bl	8000218 <__aeabi_ldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4614      	mov	r4, r2
 8002746:	461d      	mov	r5, r3
								+ (100-motor->pid.filterGain)*(error - motor->pid.previousError)/100;
 8002748:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800274c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8002750:	2100      	movs	r1, #0
 8002752:	f1d2 0064 	rsbs	r0, r2, #100	@ 0x64
 8002756:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 800275a:	eb61 0303 	sbc.w	r3, r1, r3
 800275e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002762:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002766:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 800276a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800276e:	1a16      	subs	r6, r2, r0
 8002770:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 8002774:	eb63 0301 	sbc.w	r3, r3, r1
 8002778:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800277c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002780:	464b      	mov	r3, r9
 8002782:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8002786:	4652      	mov	r2, sl
 8002788:	fb02 f203 	mul.w	r2, r2, r3
 800278c:	465b      	mov	r3, fp
 800278e:	4641      	mov	r1, r8
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	4642      	mov	r2, r8
 8002798:	4651      	mov	r1, sl
 800279a:	fba2 1201 	umull	r1, r2, r2, r1
 800279e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80027a2:	460a      	mov	r2, r1
 80027a4:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 80027a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80027ac:	4413      	add	r3, r2
 80027ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80027b2:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80027be:	f7fd fd2b 	bl	8000218 <__aeabi_ldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 80027c6:	18a1      	adds	r1, r4, r2
 80027c8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80027ca:	eb45 0303 	adc.w	r3, r5, r3
 80027ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027d0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80027d4:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

		int64_t derivative = (currentFilter) * 1000/PID_CALC_TIMING; // Derivative term
 80027d8:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	1894      	adds	r4, r2, r2
 80027e2:	643c      	str	r4, [r7, #64]	@ 0x40
 80027e4:	415b      	adcs	r3, r3
 80027e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80027e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027ec:	1814      	adds	r4, r2, r0
 80027ee:	63bc      	str	r4, [r7, #56]	@ 0x38
 80027f0:	414b      	adcs	r3, r1
 80027f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 8002800:	4634      	mov	r4, r6
 8002802:	00e3      	lsls	r3, r4, #3
 8002804:	462c      	mov	r4, r5
 8002806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800280a:	462c      	mov	r4, r5
 800280c:	00e2      	lsls	r2, r4, #3
 800280e:	4614      	mov	r4, r2
 8002810:	461d      	mov	r5, r3
 8002812:	4623      	mov	r3, r4
 8002814:	181b      	adds	r3, r3, r0
 8002816:	633b      	str	r3, [r7, #48]	@ 0x30
 8002818:	462b      	mov	r3, r5
 800281a:	eb41 0303 	adc.w	r3, r1, r3
 800281e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002820:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002824:	460b      	mov	r3, r1
 8002826:	18db      	adds	r3, r3, r3
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282a:	4613      	mov	r3, r2
 800282c:	eb42 0303 	adc.w	r3, r2, r3
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002832:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002836:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		motor->pid.previousFilter = currentFilter;
 800283a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800283e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002842:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		motor->pid.previousError = error;
 8002846:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800284a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800284e:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		// Compute the new PWM value using the PID formula
		int64_t output = motor->pid.Kp * error + motor->pid.Ki * motor->pid.integral + motor->pid.Kd * derivative;
 8002852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002856:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800285a:	17da      	asrs	r2, r3, #31
 800285c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002860:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002864:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002868:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800286c:	462a      	mov	r2, r5
 800286e:	fb02 f203 	mul.w	r2, r2, r3
 8002872:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002876:	4621      	mov	r1, r4
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	441a      	add	r2, r3
 800287e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002882:	4621      	mov	r1, r4
 8002884:	fba3 1301 	umull	r1, r3, r3, r1
 8002888:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800288c:	460b      	mov	r3, r1
 800288e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002896:	18d3      	adds	r3, r2, r3
 8002898:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800289c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028a4:	17da      	asrs	r2, r3, #31
 80028a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028aa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028b2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80028b6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80028ba:	4629      	mov	r1, r5
 80028bc:	fb02 f001 	mul.w	r0, r2, r1
 80028c0:	4621      	mov	r1, r4
 80028c2:	fb01 f103 	mul.w	r1, r1, r3
 80028c6:	4401      	add	r1, r0
 80028c8:	4620      	mov	r0, r4
 80028ca:	fba0 2302 	umull	r2, r3, r0, r2
 80028ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028d2:	4613      	mov	r3, r2
 80028d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80028d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028dc:	18cb      	adds	r3, r1, r3
 80028de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028e2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80028e6:	4623      	mov	r3, r4
 80028e8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 80028ec:	4602      	mov	r2, r0
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028f4:	460b      	mov	r3, r1
 80028f6:	462a      	mov	r2, r5
 80028f8:	eb42 0303 	adc.w	r3, r2, r3
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002900:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002904:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002908:	17da      	asrs	r2, r3, #31
 800290a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800290c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800290e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002912:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002916:	462a      	mov	r2, r5
 8002918:	fb02 f203 	mul.w	r2, r2, r3
 800291c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002920:	4621      	mov	r1, r4
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	441a      	add	r2, r3
 8002928:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800292c:	4621      	mov	r1, r4
 800292e:	fba3 1301 	umull	r1, r3, r3, r1
 8002932:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002936:	460b      	mov	r3, r1
 8002938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800293c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002940:	18d3      	adds	r3, r2, r3
 8002942:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002946:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800294a:	4623      	mov	r3, r4
 800294c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002950:	4602      	mov	r2, r0
 8002952:	189b      	adds	r3, r3, r2
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	460b      	mov	r3, r1
 8002958:	462a      	mov	r2, r5
 800295a:	eb42 0303 	adc.w	r3, r2, r3
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002960:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002964:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150

		// Clamp the output to the valid PWM range
		if(motor->pid.set_speed > 0) {
 8002968:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800296c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002970:	2a01      	cmp	r2, #1
 8002972:	f173 0300 	sbcs.w	r3, r3, #0
 8002976:	db16      	blt.n	80029a6 <Motor_Calculate+0x6ce>
			if (output > OUTPUT_MAX_VAL) output = OUTPUT_MAX_VAL;
 8002978:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800297c:	495f      	ldr	r1, [pc, #380]	@ (8002afc <Motor_Calculate+0x824>)
 800297e:	428a      	cmp	r2, r1
 8002980:	f173 0300 	sbcs.w	r3, r3, #0
 8002984:	db04      	blt.n	8002990 <Motor_Calculate+0x6b8>
 8002986:	4a5e      	ldr	r2, [pc, #376]	@ (8002b00 <Motor_Calculate+0x828>)
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output < 0) output = 0;
 8002990:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002994:	2b00      	cmp	r3, #0
 8002996:	da37      	bge.n	8002a08 <Motor_Calculate+0x730>
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 80029a4:	e030      	b.n	8002a08 <Motor_Calculate+0x730>
		}
		else if(motor->pid.set_speed < 0) {
 80029a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029aa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da24      	bge.n	80029fc <Motor_Calculate+0x724>
			if (output < -OUTPUT_MAX_VAL) output = -OUTPUT_MAX_VAL;
 80029b2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80029b6:	4953      	ldr	r1, [pc, #332]	@ (8002b04 <Motor_Calculate+0x82c>)
 80029b8:	428a      	cmp	r2, r1
 80029ba:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80029be:	da04      	bge.n	80029ca <Motor_Calculate+0x6f2>
 80029c0:	4a50      	ldr	r2, [pc, #320]	@ (8002b04 <Motor_Calculate+0x82c>)
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output > 0) output = 0;
 80029ca:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80029ce:	2a01      	cmp	r2, #1
 80029d0:	f173 0300 	sbcs.w	r3, r3, #0
 80029d4:	db05      	blt.n	80029e2 <Motor_Calculate+0x70a>
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			output*=-1;
 80029e2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80029e6:	2100      	movs	r1, #0
 80029e8:	4250      	negs	r0, r2
 80029ea:	61b8      	str	r0, [r7, #24]
 80029ec:	eb61 0303 	sbc.w	r3, r1, r3
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80029f6:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 80029fa:	e005      	b.n	8002a08 <Motor_Calculate+0x730>
		}
		else {
			output = 0;
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		}

		//shift the output itself to avoid the deadband range of the motor.
		//output is also divided by a factor to allow for more granular kp, ki, and kd values
		output = output/OUTPUT_TO_PWM_MULT + PWM_MIN_VAL;
 8002a08:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8002a0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f7fd fc00 	bl	8000218 <__aeabi_ldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	f112 01af 	adds.w	r1, r2, #175	@ 0xaf
 8002a20:	6139      	str	r1, [r7, #16]
 8002a22:	f143 0300 	adc.w	r3, r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a2c:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(output - motor->pid.pwmVal > PWM_MAX_CHANGE) output = motor->pid.pwmVal + PWM_MAX_CHANGE;
 8002a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a34:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	17da      	asrs	r2, r3, #31
 8002a3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a40:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002a44:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002a48:	4621      	mov	r1, r4
 8002a4a:	1a51      	subs	r1, r2, r1
 8002a4c:	66b9      	str	r1, [r7, #104]	@ 0x68
 8002a4e:	4629      	mov	r1, r5
 8002a50:	eb63 0301 	sbc.w	r3, r3, r1
 8002a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a56:	f240 3321 	movw	r3, #801	@ 0x321
 8002a5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a5e:	4602      	mov	r2, r0
 8002a60:	429a      	cmp	r2, r3
 8002a62:	460b      	mov	r3, r1
 8002a64:	f173 0300 	sbcs.w	r3, r3, #0
 8002a68:	db0c      	blt.n	8002a84 <Motor_Calculate+0x7ac>
 8002a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a6e:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002a72:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8002a76:	17da      	asrs	r2, r3, #31
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	60fa      	str	r2, [r7, #12]
 8002a7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002a80:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(motor->pid.pwmVal - output > PWM_MAX_CHANGE) output = motor->pid.pwmVal - PWM_MAX_CHANGE;
 8002a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a88:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	17da      	asrs	r2, r3, #31
 8002a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a92:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a94:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002a98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	1a89      	subs	r1, r1, r2
 8002aa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	eb61 0303 	sbc.w	r3, r1, r3
 8002aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002aaa:	f240 3321 	movw	r3, #801	@ 0x321
 8002aae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	f173 0300 	sbcs.w	r3, r3, #0
 8002abc:	db0c      	blt.n	8002ad8 <Motor_Calculate+0x800>
 8002abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ac2:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8002ac6:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002aca:	17da      	asrs	r2, r3, #31
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002ad4:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		// Apply the PWM value
		Motor_SetPwm(motor, (int16_t)output);
 8002ad8:	f9b7 3150 	ldrsh.w	r3, [r7, #336]	@ 0x150
 8002adc:	4619      	mov	r1, r3
 8002ade:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002ae2:	f7ff facd 	bl	8002080 <Motor_SetPwm>

		// Update the last update time
		motor->pid.lastUpdateTime = currentTime;
 8002ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002aea:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002aee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
}
 8002af2:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8002af6:	46bd      	mov	sp, r7
 8002af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002afc:	000c96a9 	.word	0x000c96a9
 8002b00:	000c96a8 	.word	0x000c96a8
 8002b04:	fff36958 	.word	0xfff36958

08002b08 <Motor_Update>:

// Update the motor state (optional, e.g., for monitoring or control logic)
void Motor_Update(Motor *motor) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

	CalculateHallTiming(motor);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f944 	bl	8002d9e <CalculateHallTiming>

	ReadHallSensors(motor);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f911 	bl	8002d3e <ReadHallSensors>

	bool direction = motor->isDirInverted ? !motor->direction : motor->direction;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <Motor_Update+0x3c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f083 0301 	eor.w	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e007      	b.n	8002b54 <Motor_Update+0x4c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	73fb      	strb	r3, [r7, #15]

	if(motor->hallState == motor->commutationOrder[0]) {
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d106      	bne.n	8002b74 <Motor_Update+0x6c>
		SetPhases(motor, PHASE_A_IDX, PHASE_C_IDX, direction);
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f84f 	bl	8002c10 <SetPhases>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
	}
	else if(motor->hallState == motor->commutationOrder[5]) {
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
	}
}
 8002b72:	e049      	b.n	8002c08 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[1]) {
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d106      	bne.n	8002b92 <Motor_Update+0x8a>
		SetPhases(motor, PHASE_A_IDX, PHASE_B_IDX, direction);
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2201      	movs	r2, #1
 8002b88:	2100      	movs	r1, #0
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f840 	bl	8002c10 <SetPhases>
}
 8002b90:	e03a      	b.n	8002c08 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[2]) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d106      	bne.n	8002bb0 <Motor_Update+0xa8>
		SetPhases(motor, PHASE_C_IDX, PHASE_B_IDX, direction);
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f831 	bl	8002c10 <SetPhases>
}
 8002bae:	e02b      	b.n	8002c08 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[3]) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d106      	bne.n	8002bce <Motor_Update+0xc6>
		SetPhases(motor, PHASE_C_IDX, PHASE_A_IDX, direction);
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f822 	bl	8002c10 <SetPhases>
}
 8002bcc:	e01c      	b.n	8002c08 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[4]) {
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d106      	bne.n	8002bec <Motor_Update+0xe4>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2101      	movs	r1, #1
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f813 	bl	8002c10 <SetPhases>
}
 8002bea:	e00d      	b.n	8002c08 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[5]) {
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d105      	bne.n	8002c08 <Motor_Update+0x100>
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	2101      	movs	r1, #1
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f804 	bl	8002c10 <SetPhases>
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <SetPhases>:

void SetPhases(Motor *motor, uint8_t highPhase, uint8_t lowPhase, bool direction) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	70fb      	strb	r3, [r7, #3]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70bb      	strb	r3, [r7, #2]
 8002c26:	4613      	mov	r3, r2
 8002c28:	707b      	strb	r3, [r7, #1]
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d82b      	bhi.n	8002c88 <SetPhases+0x78>
 8002c30:	78bb      	ldrb	r3, [r7, #2]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d828      	bhi.n	8002c88 <SetPhases+0x78>
	if(highPhase == lowPhase) return;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	78bb      	ldrb	r3, [r7, #2]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d026      	beq.n	8002c8c <SetPhases+0x7c>

	uint8_t extraPhase = PHASE_A_IDX + PHASE_B_IDX + PHASE_C_IDX - highPhase - lowPhase;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	78bb      	ldrb	r3, [r7, #2]
 8002c42:	4413      	add	r3, r2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f1c3 0303 	rsb	r3, r3, #3
 8002c4a:	73fb      	strb	r3, [r7, #15]

	SetPhase(motor, extraPhase, false, false);
 8002c4c:	7bf9      	ldrb	r1, [r7, #15]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2200      	movs	r2, #0
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f81e 	bl	8002c94 <SetPhase>

	SetPhase(motor, highPhase, true, direction);
 8002c58:	787b      	ldrb	r3, [r7, #1]
 8002c5a:	78f9      	ldrb	r1, [r7, #3]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f818 	bl	8002c94 <SetPhase>
	SetPhase(motor, lowPhase, true, !direction);
 8002c64:	787b      	ldrb	r3, [r7, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bf14      	ite	ne
 8002c6a:	2301      	movne	r3, #1
 8002c6c:	2300      	moveq	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	78b9      	ldrb	r1, [r7, #2]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f807 	bl	8002c94 <SetPhase>
 8002c86:	e002      	b.n	8002c8e <SetPhases+0x7e>
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8002c88:	bf00      	nop
 8002c8a:	e000      	b.n	8002c8e <SetPhases+0x7e>
	if(highPhase == lowPhase) return;
 8002c8c:	bf00      	nop

}
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <SetPhase>:

void SetPhase(Motor *motor, uint8_t phase,  bool OnorOff, bool HighOrLow) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	70fb      	strb	r3, [r7, #3]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70bb      	strb	r3, [r7, #2]
 8002caa:	4613      	mov	r3, r2
 8002cac:	707b      	strb	r3, [r7, #1]
	if(OnorOff) {
 8002cae:	78bb      	ldrb	r3, [r7, #2]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02c      	beq.n	8002d0e <SetPhase+0x7a>
		if(HighOrLow) {
 8002cb4:	787b      	ldrb	r3, [r7, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d014      	beq.n	8002ce4 <SetPhase+0x50>
			HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3218      	adds	r2, #24
 8002cc4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f008 facf 	bl	800b26c <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(motor->Timer, motor->phaseChannel[phase]);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3218      	adds	r2, #24
 8002cd8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f006 fc57 	bl	8009590 <HAL_TIM_PWM_Start>
		}
	} else {
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
	}
}
 8002ce2:	e028      	b.n	8002d36 <SetPhase+0xa2>
			HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3218      	adds	r2, #24
 8002cee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f006 fd5e 	bl	80097b4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(motor->Timer, motor->phaseChannel[phase]);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3218      	adds	r2, #24
 8002d02:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d06:	4619      	mov	r1, r3
 8002d08:	f008 f9ee 	bl	800b0e8 <HAL_TIMEx_PWMN_Start>
}
 8002d0c:	e013      	b.n	8002d36 <SetPhase+0xa2>
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3218      	adds	r2, #24
 8002d18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f006 fd49 	bl	80097b4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3218      	adds	r2, #24
 8002d2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f008 fa9b 	bl	800b26c <HAL_TIMEx_PWMN_Stop>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <ReadHallSensors>:

void ReadHallSensors(Motor *motor) {
 8002d3e:	b590      	push	{r4, r7, lr}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8a9b      	ldrh	r3, [r3, #20]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f004 fd4d 	bl	80077f0 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall2_Port, motor->Hall2_Pin)) << 1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8b9b      	ldrh	r3, [r3, #28]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f004 fd43 	bl	80077f0 <HAL_GPIO_ReadPin>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	b25b      	sxtb	r3, r3
 8002d70:	4323      	orrs	r3, r4
 8002d72:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall3_Port, motor->Hall3_Pin) << 2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f004 fd36 	bl	80077f0 <HAL_GPIO_ReadPin>
 8002d84:	4603      	mov	r3, r0
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	b2da      	uxtb	r2, r3
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}

08002d9e <CalculateHallTiming>:


void CalculateHallTiming(Motor *motor) {
 8002d9e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	uint32_t currentMicroTime = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

	if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	7f1b      	ldrb	r3, [r3, #28]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d109      	bne.n	8002dca <CalculateHallTiming+0x2c>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall1_Channel);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f007 fb5b 	bl	800a47c <HAL_TIM_ReadCapturedValue>
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	e01c      	b.n	8002e04 <CalculateHallTiming+0x66>
	} else if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	7f1b      	ldrb	r3, [r3, #28]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d109      	bne.n	8002de8 <CalculateHallTiming+0x4a>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall2_Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	885b      	ldrh	r3, [r3, #2]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f007 fb4c 	bl	800a47c <HAL_TIM_ReadCapturedValue>
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	e00d      	b.n	8002e04 <CalculateHallTiming+0x66>
	} else if (motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	7f1b      	ldrb	r3, [r3, #28]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d108      	bne.n	8002e04 <CalculateHallTiming+0x66>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall3_Channel);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	889b      	ldrh	r3, [r3, #4]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f007 fb3d 	bl	800a47c <HAL_TIM_ReadCapturedValue>
 8002e02:	60f8      	str	r0, [r7, #12]
	}

	motor->pid.totalHallTime += currentMicroTime - motor->pid.lastHallTime;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	1acb      	subs	r3, r1, r3
 8002e10:	441a      	add	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	675a      	str	r2, [r3, #116]	@ 0x74

	motor->pid.lastHallTime = currentMicroTime;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	671a      	str	r2, [r3, #112]	@ 0x70

	if(motor->direction) motor->pid.hallCount++;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <CalculateHallTiming+0x9e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002e2c:	f112 0801 	adds.w	r8, r2, #1
 8002e30:	f143 0900 	adc.w	r9, r3, #0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	e9c3 8918 	strd	r8, r9, [r3, #96]	@ 0x60
	else motor->pid.hallCount--;
}
 8002e3a:	e008      	b.n	8002e4e <CalculateHallTiming+0xb0>
	else motor->pid.hallCount--;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002e42:	1e54      	subs	r4, r2, #1
 8002e44:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	e9c3 4518 	strd	r4, r5, [r3, #96]	@ 0x60
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002e58 <CalculateDistance>:

void CalculateDistance(Motor *motor) {
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	motor->distance = (int16_t)(motor->pid.hallCount & 0xFFFF); // * RPM_INPUT_DIVISOR / HALL_TICKS_PER_REV);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002e66:	b212      	sxth	r2, r2
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <Motor_GetDistance>:

void Motor_GetDistance(Motor *motor, int16_t *distance) {
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
	*distance = motor->distance;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	801a      	strh	r2, [r3, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <Motor_GetSpeed>:

void Motor_GetSpeed(Motor *motor, int16_t *speed) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
	*speed = motor->current_speed;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002ea8:	b212      	sxth	r2, r2
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	801a      	strh	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <Motor_GetFaultStatus>:

bool Motor_GetFaultStatus(Motor *motor) {
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
	motor->isFault = !HAL_GPIO_ReadPin(motor->Fault_Port, motor->Fault_Pin);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	899b      	ldrh	r3, [r3, #12]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f004 fc8f 	bl	80077f0 <HAL_GPIO_ReadPin>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	if(motor->isFault) motor->faultRecovery = true;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <Motor_GetFaultStatus+0x3c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	return motor->isFault;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <Motor_CurrFaultHandler>:

void Motor_CurrFaultHandler(Motor *motor) {
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	if(motor->faultRecovery) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <Motor_CurrFaultHandler+0x1a>
		//do some stuff. right now. going to just reset and continue normally.
		motor->faultRecovery = false;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	}
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <RobotSystem_Init>:

#include "robot_system.h"

// Initialize the robot system with configurations for the left and right motors

void RobotSystem_Init(RobotSystem *robotSystem, Motor leftMotorConfig, Motor rightMotorConfig, IMU_HandleTypeDef imuConfig, SystemDiagnostics_t sysConfig) {
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	f107 0118 	add.w	r1, r7, #24
 8002f38:	e881 000c 	stmia.w	r1, {r2, r3}
    // Copy configurations into the robot system
    robotSystem->leftWheel = leftMotorConfig;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f107 0318 	add.w	r3, r7, #24
 8002f44:	22c0      	movs	r2, #192	@ 0xc0
 8002f46:	4619      	mov	r1, r3
 8002f48:	f00a f8a2 	bl	800d090 <memcpy>
    robotSystem->rightWheel = rightMotorConfig;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	33c0      	adds	r3, #192	@ 0xc0
 8002f50:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8002f54:	22c0      	movs	r2, #192	@ 0xc0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f00a f89a 	bl	800d090 <memcpy>
    robotSystem->imu = imuConfig;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f503 74c0 	add.w	r4, r3, #384	@ 0x180
 8002f62:	f507 75cc 	add.w	r5, r7, #408	@ 0x198
 8002f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    robotSystem->sys = sysConfig;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f503 74d0 	add.w	r4, r3, #416	@ 0x1a0
 8002f78:	f507 75dc 	add.w	r5, r7, #440	@ 0x1b8
 8002f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f84:	e884 0003 	stmia.w	r4, {r0, r1}

    HAL_DAC_Start(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	@ 0x1c4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f003 f854 	bl	8006044 <HAL_DAC_Start>

    RobotSystem_SetCurrentLimit(robotSystem, MAX_CURRENT_LIMIT);
 8002f9c:	2105      	movs	r1, #5
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f93a 	bl	8003218 <RobotSystem_SetCurrentLimit>

    SysDiag_Init(&robotSystem->sys);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fb26 	bl	80035fc <SysDiag_Init>

    // Initialize the left and right motors
    IMU_Init(&robotSystem->imu);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd ff30 	bl	8000e1c <IMU_Init>
    Motor_Init(&robotSystem->leftWheel);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe ff98 	bl	8001ef4 <Motor_Init>
    Motor_Init(&robotSystem->rightWheel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	33c0      	adds	r3, #192	@ 0xc0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe ff93 	bl	8001ef4 <Motor_Init>

    RobotSystem_Enable(robotSystem);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8da 	bl	8003188 <RobotSystem_Enable>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002fde:	b002      	add	sp, #8
 8002fe0:	4770      	bx	lr

08002fe2 <RobotSystem_SetSpeed>:

// Set the speeds of the left and right motors
void RobotSystem_SetSpeed(RobotSystem *robotSystem, int16_t leftSpeed, int16_t rightSpeed) {
 8002fe2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	803b      	strh	r3, [r7, #0]
	if(robotSystem->motorsEnabled) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d017      	beq.n	800302e <RobotSystem_SetSpeed+0x4c>
		Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003004:	17da      	asrs	r2, r3, #31
 8003006:	4698      	mov	r8, r3
 8003008:	4691      	mov	r9, r2
 800300a:	4642      	mov	r2, r8
 800300c:	464b      	mov	r3, r9
 800300e:	4608      	mov	r0, r1
 8003010:	f7fe ffe8 	bl	8001fe4 <Motor_SetSpeed>
		Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 800301a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800301e:	17da      	asrs	r2, r3, #31
 8003020:	461c      	mov	r4, r3
 8003022:	4615      	mov	r5, r2
 8003024:	4622      	mov	r2, r4
 8003026:	462b      	mov	r3, r5
 8003028:	4608      	mov	r0, r1
 800302a:	f7fe ffdb 	bl	8001fe4 <Motor_SetSpeed>
	}
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003038 <RobotSystem_SetLeftSpeed>:

void RobotSystem_SetLeftSpeed(RobotSystem *robotSystem, int16_t leftSpeed) {
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
	if(robotSystem->motorsEnabled) {
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <RobotSystem_SetLeftSpeed+0x2c>
		Motor_SetSpeed(&robotSystem->leftWheel, leftSpeed);
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003054:	17da      	asrs	r2, r3, #31
 8003056:	461c      	mov	r4, r3
 8003058:	4615      	mov	r5, r2
 800305a:	4622      	mov	r2, r4
 800305c:	462b      	mov	r3, r5
 800305e:	4608      	mov	r0, r1
 8003060:	f7fe ffc0 	bl	8001fe4 <Motor_SetSpeed>
	}
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bdb0      	pop	{r4, r5, r7, pc}

0800306c <RobotSystem_SetRightSpeed>:

void RobotSystem_SetRightSpeed(RobotSystem *robotSystem, int16_t rightSpeed) {
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
	if(robotSystem->motorsEnabled) {
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <RobotSystem_SetRightSpeed+0x30>
		Motor_SetSpeed(&robotSystem->rightWheel, rightSpeed);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8003088:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800308c:	17da      	asrs	r2, r3, #31
 800308e:	461c      	mov	r4, r3
 8003090:	4615      	mov	r5, r2
 8003092:	4622      	mov	r2, r4
 8003094:	462b      	mov	r3, r5
 8003096:	4608      	mov	r0, r1
 8003098:	f7fe ffa4 	bl	8001fe4 <Motor_SetSpeed>
	}
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bdb0      	pop	{r4, r5, r7, pc}

080030a4 <RobotSystem_Stop>:

// Stop both motors in the robot system
void RobotSystem_Stop(RobotSystem *robotSystem) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
    Motor_Stop(&robotSystem->leftWheel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff f8f1 	bl	8002296 <Motor_Stop>
    Motor_Stop(&robotSystem->rightWheel);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	33c0      	adds	r3, #192	@ 0xc0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff f8ec 	bl	8002296 <Motor_Stop>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <RobotSystem_GetMotorPosition>:

void RobotSystem_GetMotorPosition(RobotSystem *robotSystem, int16_t *leftPos, int16_t *rightPos) {
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
	Motor_GetDistance(&robotSystem->leftWheel, leftPos);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fece 	bl	8002e78 <Motor_GetDistance>
	Motor_GetDistance(&robotSystem->rightWheel, rightPos);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	33c0      	adds	r3, #192	@ 0xc0
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fec8 	bl	8002e78 <Motor_GetDistance>
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <RobotSystem_GetMotorSpeed>:

void RobotSystem_GetMotorSpeed(RobotSystem *robotSystem, int16_t *leftSpeed, int16_t *rightSpeed) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
	Motor_GetSpeed(&robotSystem->leftWheel, leftSpeed);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fec9 	bl	8002e98 <Motor_GetSpeed>
	Motor_GetSpeed(&robotSystem->rightWheel, rightSpeed);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	33c0      	adds	r3, #192	@ 0xc0
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fec3 	bl	8002e98 <Motor_GetSpeed>
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <RobotSystem_Calculate>:

void RobotSystem_Calculate(RobotSystem *robotSystem) {
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
	SysDiag_SleepWatchdog(&robotSystem->sys);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fa74 	bl	8003616 <SysDiag_SleepWatchdog>
	Motor_Calculate(&robotSystem->leftWheel);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f8d1 	bl	80022d8 <Motor_Calculate>
	Motor_Calculate(&robotSystem->rightWheel);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	33c0      	adds	r3, #192	@ 0xc0
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f8cc 	bl	80022d8 <Motor_Calculate>
	RobotSystem_WheelFaultHandler(robotSystem);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f8a5 	bl	8003290 <RobotSystem_WheelFaultHandler>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <RobotSystem_InterruptHandler>:

void RobotSystem_InterruptHandler(RobotSystem *robotSystem, TIM_HandleTypeDef *htim) {
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
	if (htim == robotSystem->leftWheel.HallTimer) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d103      	bne.n	800316a <RobotSystem_InterruptHandler+0x1c>
		Motor_Update(&robotSystem->leftWheel);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fccf 	bl	8002b08 <Motor_Update>
	}

	if (htim == robotSystem->rightWheel.HallTimer) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d104      	bne.n	8003180 <RobotSystem_InterruptHandler+0x32>
		Motor_Update(&robotSystem->rightWheel);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	33c0      	adds	r3, #192	@ 0xc0
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fcc4 	bl	8002b08 <Motor_Update>
	}
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <RobotSystem_Enable>:

void RobotSystem_Enable (RobotSystem *robotSystem) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	robotSystem->motorsEnabled = true;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 21c8 	strb.w	r2, [r3, #456]	@ 0x1c8
	RobotSystem_SetEnablePin(robotSystem, true);
 8003198:	2101      	movs	r1, #1
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f81d 	bl	80031da <RobotSystem_SetEnablePin>
	HAL_Delay(20);
 80031a0:	2014      	movs	r0, #20
 80031a2:	f001 f879 	bl	8004298 <HAL_Delay>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <RobotSystem_Disable>:

void RobotSystem_Disable (RobotSystem *robotSystem) {
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
	robotSystem->motorsEnabled = false;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 21c8 	strb.w	r2, [r3, #456]	@ 0x1c8
	RobotSystem_Stop(robotSystem);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ff70 	bl	80030a4 <RobotSystem_Stop>
	RobotSystem_SetEnablePin(robotSystem, false);
 80031c4:	2100      	movs	r1, #0
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f807 	bl	80031da <RobotSystem_SetEnablePin>

	HAL_Delay(20);
 80031cc:	2014      	movs	r0, #20
 80031ce:	f001 f863 	bl	8004298 <HAL_Delay>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <RobotSystem_SetEnablePin>:

void RobotSystem_SetEnablePin(RobotSystem *robotSystem, bool onOrOff) {
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	70fb      	strb	r3, [r7, #3]
	bool setValue = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
	if(onOrOff) setValue = true;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <RobotSystem_SetEnablePin+0x1c>
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e001      	b.n	80031fa <RobotSystem_SetEnablePin+0x20>
	else setValue = false;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(robotSystem->Enable_Port, robotSystem->Enable_Pin, setValue);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 01b8 	ldr.w	r0, [r3, #440]	@ 0x1b8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	@ 0x1bc
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	4619      	mov	r1, r3
 800320a:	f004 fb09 	bl	8007820 <HAL_GPIO_WritePin>
	//__HAL_TIM_SET_COMPARE(robotSystem->FaultTimer, TIM_CHANNEL_1, setValue);
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <RobotSystem_SetCurrentLimit>:

void RobotSystem_SetCurrentLimit(RobotSystem *robotSystem, uint16_t currentLimit) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
	if(currentLimit > MAX_CURRENT_LIMIT) {
 8003224:	887b      	ldrh	r3, [r7, #2]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d901      	bls.n	800322e <RobotSystem_SetCurrentLimit+0x16>
		currentLimit = MAX_CURRENT_LIMIT;
 800322a:	2305      	movs	r3, #5
 800322c:	807b      	strh	r3, [r7, #2]
	}
	robotSystem->currentLimit = currentLimit;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	887a      	ldrh	r2, [r7, #2]
 8003232:	f8a3 21c6 	strh.w	r2, [r3, #454]	@ 0x1c6

	uint32_t voltage = currentLimit * SHUNT_RESISTOR * RESISTORS / RESISTOR2;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	f245 32fc 	movw	r2, #21500	@ 0x53fc
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	4a11      	ldr	r2, [pc, #68]	@ (8003288 <RobotSystem_SetCurrentLimit+0x70>)
 8003242:	fb82 1203 	smull	r1, r2, r2, r3
 8003246:	10d2      	asrs	r2, r2, #3
 8003248:	17db      	asrs	r3, r3, #31
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	60fb      	str	r3, [r7, #12]
	uint32_t dac_value = 4095 * voltage / 3300; // Convert voltage to digital value
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	031b      	lsls	r3, r3, #12
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	4a0c      	ldr	r2, [pc, #48]	@ (800328c <RobotSystem_SetCurrentLimit+0x74>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(robotSystem->currentLimitDAC, robotSystem->currentLimitDACChannel, DAC_ALIGN_12B_R, dac_value);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 01c0 	ldr.w	r0, [r3, #448]	@ 0x1c0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	@ 0x1c4
 800326e:	4619      	mov	r1, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2200      	movs	r2, #0
 8003274:	f002 ff52 	bl	800611c <HAL_DAC_SetValue>
	HAL_Delay(25);
 8003278:	2019      	movs	r0, #25
 800327a:	f001 f80d 	bl	8004298 <HAL_Delay>
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	1b4e81b5 	.word	0x1b4e81b5
 800328c:	09ee009f 	.word	0x09ee009f

08003290 <RobotSystem_WheelFaultHandler>:

void RobotSystem_WheelFaultHandler(RobotSystem *robotSystem) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	if(Motor_GetFaultStatus(&robotSystem->leftWheel)) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fe0d 	bl	8002eba <Motor_GetFaultStatus>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <RobotSystem_WheelFaultHandler+0x1c>
		RobotSystem_ResetEnablePin(robotSystem);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f80f 	bl	80032ca <RobotSystem_ResetEnablePin>
		//RobotSystem_SetLeftSpeed(robotSystem, 0);
	}

	if(Motor_GetFaultStatus(&robotSystem->rightWheel)) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	33c0      	adds	r3, #192	@ 0xc0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fe02 	bl	8002eba <Motor_GetFaultStatus>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <RobotSystem_WheelFaultHandler+0x32>
		RobotSystem_ResetEnablePin(robotSystem);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f804 	bl	80032ca <RobotSystem_ResetEnablePin>
		//RobotSystem_SetRightSpeed(robotSystem, 0);
	}
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <RobotSystem_ResetEnablePin>:

void RobotSystem_ResetEnablePin(RobotSystem *robotSystem) {
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
	if(robotSystem->motorsEnabled) {
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <RobotSystem_ResetEnablePin+0x34>
		RobotSystem_SetEnablePin(robotSystem, false);
 80032dc:	2100      	movs	r1, #0
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff7b 	bl	80031da <RobotSystem_SetEnablePin>

		for(uint16_t i = 0; i < 10; i++) {
 80032e4:	2300      	movs	r3, #0
 80032e6:	81fb      	strh	r3, [r7, #14]
 80032e8:	e002      	b.n	80032f0 <RobotSystem_ResetEnablePin+0x26>
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	3301      	adds	r3, #1
 80032ee:	81fb      	strh	r3, [r7, #14]
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	2b09      	cmp	r3, #9
 80032f4:	d9f9      	bls.n	80032ea <RobotSystem_ResetEnablePin+0x20>

		}
		// Optional: Stop the timer if you want to halt further operation
		RobotSystem_SetEnablePin(robotSystem, true);
 80032f6:	2101      	movs	r1, #1
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff6e 	bl	80031da <RobotSystem_SetEnablePin>
	}
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <RobotSystem_ImuInterruptHandler>:

void RobotSystem_ImuInterruptHandler(RobotSystem *robotSystem, uint16_t GPIO_Pin) {
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	460b      	mov	r3, r1
 8003310:	807b      	strh	r3, [r7, #2]
	IMU_InterruptHandler(&robotSystem->imu, GPIO_Pin);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003318:	887a      	ldrh	r2, [r7, #2]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd fe71 	bl	8001004 <IMU_InterruptHandler>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <RobotSystem_GetAccelVals>:

void RobotSystem_GetAccelVals(RobotSystem *robotSystem, int16_t *accel) {
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
	//if(sizeof(accel)/sizeof(accel[0]) != 3) return;
	accel[0] = robotSystem->imu.accel[0];
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f9b3 2192 	ldrsh.w	r2, [r3, #402]	@ 0x192
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	801a      	strh	r2, [r3, #0]
	accel[1] = robotSystem->imu.accel[1];
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	3302      	adds	r3, #2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	f9b2 2194 	ldrsh.w	r2, [r2, #404]	@ 0x194
 8003348:	801a      	strh	r2, [r3, #0]
	accel[2] = robotSystem->imu.accel[2];
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	f9b2 2196 	ldrsh.w	r2, [r2, #406]	@ 0x196
 8003354:	801a      	strh	r2, [r3, #0]
	//memcpy(accel, robotSystem->imu.accel, sizeof(robotSystem->imu.accel));

}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <RobotSystem_GetGyroVals>:

void RobotSystem_GetGyroVals(RobotSystem *robotSystem, int16_t *gyro) {
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
	//if(sizeof(gyro)/sizeof(gyro[0]) != 3) return;

	gyro[0] = robotSystem->imu.gyro[0];
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f9b3 2198 	ldrsh.w	r2, [r3, #408]	@ 0x198
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	801a      	strh	r2, [r3, #0]
	gyro[1] = robotSystem->imu.gyro[1];
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	3302      	adds	r3, #2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	f9b2 219a 	ldrsh.w	r2, [r2, #410]	@ 0x19a
 8003380:	801a      	strh	r2, [r3, #0]
	gyro[2] = robotSystem->imu.gyro[2];
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	f9b2 219c 	ldrsh.w	r2, [r2, #412]	@ 0x19c
 800338c:	801a      	strh	r2, [r3, #0]

	//memcpy(gyro, robotSystem->imu.gyro, sizeof(robotSystem->imu.gyro));
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <RobotSystem_ResetWatchdog>:

void RobotSystem_GetTempVals(RobotSystem *robotSystem, int16_t *temp) {
	*temp = robotSystem->imu.temperature;
}

void RobotSystem_ResetWatchdog(RobotSystem *robotSystem) {
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
	SysDiag_ResetWatchDog(&robotSystem->sys);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f967 	bl	800367c <SysDiag_ResetWatchDog>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <RobotSystem_GetBatVolt>:

void RobotSystem_GetBatVolt(RobotSystem *robotSystem, uint16_t *batVolt) {
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
	SysDiag_GetBatVoltage(&robotSystem->sys, batVolt);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f965 	bl	8003698 <SysDiag_GetBatVoltage>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <RobotSystem_Shutdown>:

void RobotSystem_Shutdown(RobotSystem *robotSystem) {
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	SysDiag_Kill(&robotSystem->sys);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f932 	bl	800364e <SysDiag_Kill>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <MX_SPI1_Init+0x74>)
 80033fa:	4a1c      	ldr	r2, [pc, #112]	@ (800346c <MX_SPI1_Init+0x78>)
 80033fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003400:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003406:	4b18      	ldr	r3, [pc, #96]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800340c:	4b16      	ldr	r3, [pc, #88]	@ (8003468 <MX_SPI1_Init+0x74>)
 800340e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003412:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003414:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800341a:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <MX_SPI1_Init+0x74>)
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003420:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003426:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003428:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <MX_SPI1_Init+0x74>)
 800342a:	2218      	movs	r2, #24
 800342c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800342e:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003430:	2200      	movs	r2, #0
 8003432:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003434:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003436:	2200      	movs	r2, #0
 8003438:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800343a:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <MX_SPI1_Init+0x74>)
 800343c:	2200      	movs	r2, #0
 800343e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003440:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003442:	2207      	movs	r2, #7
 8003444:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <MX_SPI1_Init+0x74>)
 800344e:	2208      	movs	r2, #8
 8003450:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003452:	4805      	ldr	r0, [pc, #20]	@ (8003468 <MX_SPI1_Init+0x74>)
 8003454:	f005 fa40 	bl	80088d8 <HAL_SPI_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800345e:	f7fe fd43 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000678 	.word	0x20000678
 800346c:	40013000 	.word	0x40013000

08003470 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a17      	ldr	r2, [pc, #92]	@ (80034ec <HAL_SPI_MspInit+0x7c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d127      	bne.n	80034e2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003492:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <HAL_SPI_MspInit+0x80>)
 8003494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003496:	4a16      	ldr	r2, [pc, #88]	@ (80034f0 <HAL_SPI_MspInit+0x80>)
 8003498:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800349c:	6613      	str	r3, [r2, #96]	@ 0x60
 800349e:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <HAL_SPI_MspInit+0x80>)
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034aa:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_SPI_MspInit+0x80>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	4a10      	ldr	r2, [pc, #64]	@ (80034f0 <HAL_SPI_MspInit+0x80>)
 80034b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034b6:	4b0e      	ldr	r3, [pc, #56]	@ (80034f0 <HAL_SPI_MspInit+0x80>)
 80034b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80034c2:	231c      	movs	r3, #28
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034d2:	2305      	movs	r3, #5
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	@ (80034f4 <HAL_SPI_MspInit+0x84>)
 80034de:	f004 f805 	bl	80074ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	@ 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40013000 	.word	0x40013000
 80034f0:	40021000 	.word	0x40021000
 80034f4:	48001800 	.word	0x48001800

080034f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <HAL_MspInit+0x44>)
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	4a0e      	ldr	r2, [pc, #56]	@ (800353c <HAL_MspInit+0x44>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6613      	str	r3, [r2, #96]	@ 0x60
 800350a:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <HAL_MspInit+0x44>)
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4b09      	ldr	r3, [pc, #36]	@ (800353c <HAL_MspInit+0x44>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	4a08      	ldr	r2, [pc, #32]	@ (800353c <HAL_MspInit+0x44>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	@ 0x58
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_MspInit+0x44>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800352e:	f004 fa4b 	bl	80079c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000

08003540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <NMI_Handler+0x4>

08003548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <HardFault_Handler+0x4>

08003550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <MemManage_Handler+0x4>

08003558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <BusFault_Handler+0x4>

08003560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <UsageFault_Handler+0x4>

08003568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003596:	f000 fe61 	bl	800425c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}

0800359e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 80035a2:	2001      	movs	r0, #1
 80035a4:	f004 f954 	bl	8007850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}

080035ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035b0:	4802      	ldr	r0, [pc, #8]	@ (80035bc <DMA1_Channel1_IRQHandler+0x10>)
 80035b2:	f003 f97e 	bl	80068b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200008a0 	.word	0x200008a0

080035c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035c4:	4802      	ldr	r0, [pc, #8]	@ (80035d0 <TIM2_IRQHandler+0x10>)
 80035c6:	f006 fb43 	bl	8009c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000728 	.word	0x20000728

080035d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035d8:	4802      	ldr	r0, [pc, #8]	@ (80035e4 <USART2_IRQHandler+0x10>)
 80035da:	f008 f919 	bl	800b810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	2000080c 	.word	0x2000080c

080035e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035ec:	4802      	ldr	r0, [pc, #8]	@ (80035f8 <TIM5_IRQHandler+0x10>)
 80035ee:	f006 fb2f 	bl	8009c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000774 	.word	0x20000774

080035fc <SysDiag_Init>:
 *      Author: etogb
 */

#include "system_diagnostics.h"

void SysDiag_Init(SystemDiagnostics_t *sys) {
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	sys->lastSleepReset = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <SysDiag_SleepWatchdog>:

void SysDiag_SleepWatchdog(SystemDiagnostics_t *sys) {
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]

	if(sys->sleepTimeout < 1000) return;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003626:	d30e      	bcc.n	8003646 <SysDiag_SleepWatchdog+0x30>

	uint32_t currentTime = HAL_GetTick();
 8003628:	f000 fe2a 	bl	8004280 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

	if(currentTime - sys->lastSleepReset > sys->sleepTimeout) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	1ad2      	subs	r2, r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	429a      	cmp	r2, r3
 800363c:	d904      	bls.n	8003648 <SysDiag_SleepWatchdog+0x32>
		SysDiag_Kill(sys);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f805 	bl	800364e <SysDiag_Kill>
 8003644:	e000      	b.n	8003648 <SysDiag_SleepWatchdog+0x32>
	if(sys->sleepTimeout < 1000) return;
 8003646:	bf00      	nop
	}
}
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <SysDiag_Kill>:


void SysDiag_Kill(SystemDiagnostics_t *sys) {
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
	HAL_Delay(250);
 8003656:	20fa      	movs	r0, #250	@ 0xfa
 8003658:	f000 fe1e 	bl	8004298 <HAL_Delay>
	HAL_GPIO_WritePin(sys->Mcm_Kill_Port, sys->Mcm_Kill_Pin, GPIO_PIN_SET);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	889b      	ldrh	r3, [r3, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	4619      	mov	r1, r3
 8003668:	f004 f8da 	bl	8007820 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800366c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003670:	f000 fe12 	bl	8004298 <HAL_Delay>
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <SysDiag_ResetWatchDog>:

void SysDiag_ResetWatchDog(SystemDiagnostics_t *sys) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	sys->lastSleepReset = HAL_GetTick();
 8003684:	f000 fdfc 	bl	8004280 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	611a      	str	r2, [r3, #16]
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <SysDiag_GetBatVoltage>:

void SysDiag_GetBatVoltage(SystemDiagnostics_t *sys, uint16_t *batVoltage) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	@ 0x30
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]

    ADC_ChannelConfTypeDef sConfig = {0};
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	2220      	movs	r2, #32
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f009 fcc4 	bl	800d038 <memset>

    // Configure the ADC channel
    sConfig.Channel = sys->batAdcChannel;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80036b6:	2306      	movs	r3, #6
 80036b8:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80036ba:	2302      	movs	r3, #2
 80036bc:	613b      	str	r3, [r7, #16]

    HAL_ADC_ConfigChannel(sys->batAdc, &sConfig);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f107 0208 	add.w	r2, r7, #8
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 fc69 	bl	8004fa0 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(sys->batAdc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 fa38 	bl	8004b48 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(sys->batAdc, HAL_MAX_DELAY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 fb49 	bl	8004d78 <HAL_ADC_PollForConversion>

	uint32_t adcVal = HAL_ADC_GetValue(sys->batAdc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fc4a 	bl	8004f84 <HAL_ADC_GetValue>
 80036f0:	62f8      	str	r0, [r7, #44]	@ 0x2c

	HAL_ADC_Stop(sys->batAdc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fb0a 	bl	8004d10 <HAL_ADC_Stop>

	uint32_t tempVolt = adcVal * VBAT_ADC_SLOPE / VBAT_ADC_SCALE + VBAT_ADC_INTERSECT;
 80036fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fe:	226c      	movs	r2, #108	@ 0x6c
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	4a07      	ldr	r2, [pc, #28]	@ (8003724 <SysDiag_GetBatVoltage+0x8c>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	f6a3 0352 	subw	r3, r3, #2130	@ 0x852
 8003710:	62bb      	str	r3, [r7, #40]	@ 0x28

	*batVoltage = tempVolt;
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	b29a      	uxth	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	801a      	strh	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	3730      	adds	r7, #48	@ 0x30
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	51eb851f 	.word	0x51eb851f

08003728 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <SystemInit+0x20>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	4a05      	ldr	r2, [pc, #20]	@ (8003748 <SystemInit+0x20>)
 8003734:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003738:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b09c      	sub	sp, #112	@ 0x70
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003752:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003760:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800376c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
 800377c:	615a      	str	r2, [r3, #20]
 800377e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	2234      	movs	r2, #52	@ 0x34
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f009 fc56 	bl	800d038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800378c:	4b51      	ldr	r3, [pc, #324]	@ (80038d4 <MX_TIM1_Init+0x188>)
 800378e:	4a52      	ldr	r2, [pc, #328]	@ (80038d8 <MX_TIM1_Init+0x18c>)
 8003790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8003792:	4b50      	ldr	r3, [pc, #320]	@ (80038d4 <MX_TIM1_Init+0x188>)
 8003794:	2210      	movs	r2, #16
 8003796:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003798:	4b4e      	ldr	r3, [pc, #312]	@ (80038d4 <MX_TIM1_Init+0x188>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800379e:	4b4d      	ldr	r3, [pc, #308]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80037a0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80037a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a6:	4b4b      	ldr	r3, [pc, #300]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037ac:	4b49      	ldr	r3, [pc, #292]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b2:	4b48      	ldr	r3, [pc, #288]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80037b8:	4846      	ldr	r0, [pc, #280]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80037ba:	f005 fe31 	bl	8009420 <HAL_TIM_Base_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80037c4:	f7fe fb90 	bl	8001ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037cc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80037d2:	4619      	mov	r1, r3
 80037d4:	483f      	ldr	r0, [pc, #252]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80037d6:	f006 fd3b 	bl	800a250 <HAL_TIM_ConfigClockSource>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80037e0:	f7fe fb82 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037e4:	483b      	ldr	r0, [pc, #236]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80037e6:	f005 fe72 	bl	80094ce <HAL_TIM_PWM_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80037f0:	f7fe fb7a 	bl	8001ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f4:	2300      	movs	r3, #0
 80037f6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80037f8:	2300      	movs	r3, #0
 80037fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003800:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003804:	4619      	mov	r1, r3
 8003806:	4833      	ldr	r0, [pc, #204]	@ (80038d4 <MX_TIM1_Init+0x188>)
 8003808:	f007 fd8e 	bl	800b328 <HAL_TIMEx_MasterConfigSynchronization>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003812:	f7fe fb69 	bl	8001ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003816:	2360      	movs	r3, #96	@ 0x60
 8003818:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800381e:	2300      	movs	r3, #0
 8003820:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003822:	2300      	movs	r3, #0
 8003824:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003826:	2300      	movs	r3, #0
 8003828:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800382e:	2300      	movs	r3, #0
 8003830:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003832:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003836:	2200      	movs	r2, #0
 8003838:	4619      	mov	r1, r3
 800383a:	4826      	ldr	r0, [pc, #152]	@ (80038d4 <MX_TIM1_Init+0x188>)
 800383c:	f006 fbf4 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003846:	f7fe fb4f 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800384a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800384e:	2204      	movs	r2, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4820      	ldr	r0, [pc, #128]	@ (80038d4 <MX_TIM1_Init+0x188>)
 8003854:	f006 fbe8 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800385e:	f7fe fb43 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003862:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003866:	2208      	movs	r2, #8
 8003868:	4619      	mov	r1, r3
 800386a:	481a      	ldr	r0, [pc, #104]	@ (80038d4 <MX_TIM1_Init+0x188>)
 800386c:	f006 fbdc 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003876:	f7fe fb37 	bl	8001ee8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800388e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003892:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003898:	2300      	movs	r3, #0
 800389a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80038a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80038aa:	2300      	movs	r3, #0
 80038ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4807      	ldr	r0, [pc, #28]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80038b8:	f007 fdcc 	bl	800b454 <HAL_TIMEx_ConfigBreakDeadTime>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80038c2:	f7fe fb11 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80038c6:	4803      	ldr	r0, [pc, #12]	@ (80038d4 <MX_TIM1_Init+0x188>)
 80038c8:	f000 fa8a 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 80038cc:	bf00      	nop
 80038ce:	3770      	adds	r7, #112	@ 0x70
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200006dc 	.word	0x200006dc
 80038d8:	40012c00 	.word	0x40012c00

080038dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	@ 0x30
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038e2:	f107 0320 	add.w	r3, r7, #32
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003908:	4b36      	ldr	r3, [pc, #216]	@ (80039e4 <MX_TIM2_Init+0x108>)
 800390a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800390e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8003910:	4b34      	ldr	r3, [pc, #208]	@ (80039e4 <MX_TIM2_Init+0x108>)
 8003912:	22a9      	movs	r2, #169	@ 0xa9
 8003914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003916:	4b33      	ldr	r3, [pc, #204]	@ (80039e4 <MX_TIM2_Init+0x108>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800391c:	4b31      	ldr	r3, [pc, #196]	@ (80039e4 <MX_TIM2_Init+0x108>)
 800391e:	f04f 32ff 	mov.w	r2, #4294967295
 8003922:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003924:	4b2f      	ldr	r3, [pc, #188]	@ (80039e4 <MX_TIM2_Init+0x108>)
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800392a:	4b2e      	ldr	r3, [pc, #184]	@ (80039e4 <MX_TIM2_Init+0x108>)
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003930:	482c      	ldr	r0, [pc, #176]	@ (80039e4 <MX_TIM2_Init+0x108>)
 8003932:	f005 fd75 	bl	8009420 <HAL_TIM_Base_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800393c:	f7fe fad4 	bl	8001ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003944:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003946:	f107 0320 	add.w	r3, r7, #32
 800394a:	4619      	mov	r1, r3
 800394c:	4825      	ldr	r0, [pc, #148]	@ (80039e4 <MX_TIM2_Init+0x108>)
 800394e:	f006 fc7f 	bl	800a250 <HAL_TIM_ConfigClockSource>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003958:	f7fe fac6 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800395c:	4821      	ldr	r0, [pc, #132]	@ (80039e4 <MX_TIM2_Init+0x108>)
 800395e:	f005 ffc5 	bl	80098ec <HAL_TIM_IC_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003968:	f7fe fabe 	bl	8001ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	481a      	ldr	r0, [pc, #104]	@ (80039e4 <MX_TIM2_Init+0x108>)
 800397c:	f007 fcd4 	bl	800b328 <HAL_TIMEx_MasterConfigSynchronization>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003986:	f7fe faaf 	bl	8001ee8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800398a:	230a      	movs	r3, #10
 800398c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800398e:	2301      	movs	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	2200      	movs	r2, #0
 800399e:	4619      	mov	r1, r3
 80039a0:	4810      	ldr	r0, [pc, #64]	@ (80039e4 <MX_TIM2_Init+0x108>)
 80039a2:	f006 faa4 	bl	8009eee <HAL_TIM_IC_ConfigChannel>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80039ac:	f7fe fa9c 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	2204      	movs	r2, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	480b      	ldr	r0, [pc, #44]	@ (80039e4 <MX_TIM2_Init+0x108>)
 80039b8:	f006 fa99 	bl	8009eee <HAL_TIM_IC_ConfigChannel>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80039c2:	f7fe fa91 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80039c6:	1d3b      	adds	r3, r7, #4
 80039c8:	2208      	movs	r2, #8
 80039ca:	4619      	mov	r1, r3
 80039cc:	4805      	ldr	r0, [pc, #20]	@ (80039e4 <MX_TIM2_Init+0x108>)
 80039ce:	f006 fa8e 	bl	8009eee <HAL_TIM_IC_ConfigChannel>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80039d8:	f7fe fa86 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039dc:	bf00      	nop
 80039de:	3730      	adds	r7, #48	@ 0x30
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000728 	.word	0x20000728

080039e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	@ 0x30
 80039ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ee:	f107 0320 	add.w	r3, r7, #32
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a14:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a16:	4a37      	ldr	r2, [pc, #220]	@ (8003af4 <MX_TIM5_Init+0x10c>)
 8003a18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8003a1a:	4b35      	ldr	r3, [pc, #212]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a1c:	22a9      	movs	r2, #169	@ 0xa9
 8003a1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a20:	4b33      	ldr	r3, [pc, #204]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003a26:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a28:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2e:	4b30      	ldr	r3, [pc, #192]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a34:	4b2e      	ldr	r3, [pc, #184]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a3a:	482d      	ldr	r0, [pc, #180]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a3c:	f005 fcf0 	bl	8009420 <HAL_TIM_Base_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8003a46:	f7fe fa4f 	bl	8001ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a50:	f107 0320 	add.w	r3, r7, #32
 8003a54:	4619      	mov	r1, r3
 8003a56:	4826      	ldr	r0, [pc, #152]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a58:	f006 fbfa 	bl	800a250 <HAL_TIM_ConfigClockSource>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003a62:	f7fe fa41 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003a66:	4822      	ldr	r0, [pc, #136]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a68:	f005 ff40 	bl	80098ec <HAL_TIM_IC_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003a72:	f7fe fa39 	bl	8001ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4619      	mov	r1, r3
 8003a84:	481a      	ldr	r0, [pc, #104]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003a86:	f007 fc4f 	bl	800b328 <HAL_TIMEx_MasterConfigSynchronization>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8003a90:	f7fe fa2a 	bl	8001ee8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003a94:	230a      	movs	r3, #10
 8003a96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4811      	ldr	r0, [pc, #68]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003aac:	f006 fa1f 	bl	8009eee <HAL_TIM_IC_ConfigChannel>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8003ab6:	f7fe fa17 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	2204      	movs	r2, #4
 8003abe:	4619      	mov	r1, r3
 8003ac0:	480b      	ldr	r0, [pc, #44]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003ac2:	f006 fa14 	bl	8009eee <HAL_TIM_IC_ConfigChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8003acc:	f7fe fa0c 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003ad0:	1d3b      	adds	r3, r7, #4
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4806      	ldr	r0, [pc, #24]	@ (8003af0 <MX_TIM5_Init+0x108>)
 8003ad8:	f006 fa09 	bl	8009eee <HAL_TIM_IC_ConfigChannel>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 8003ae2:	f7fe fa01 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003ae6:	bf00      	nop
 8003ae8:	3730      	adds	r7, #48	@ 0x30
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000774 	.word	0x20000774
 8003af4:	40000c00 	.word	0x40000c00

08003af8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b09c      	sub	sp, #112	@ 0x70
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003afe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	609a      	str	r2, [r3, #8]
 8003b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
 8003b28:	615a      	str	r2, [r3, #20]
 8003b2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	2234      	movs	r2, #52	@ 0x34
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f009 fa80 	bl	800d038 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003b38:	4b51      	ldr	r3, [pc, #324]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b3a:	4a52      	ldr	r2, [pc, #328]	@ (8003c84 <MX_TIM8_Init+0x18c>)
 8003b3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 8003b3e:	4b50      	ldr	r3, [pc, #320]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b40:	2210      	movs	r2, #16
 8003b42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b44:	4b4e      	ldr	r3, [pc, #312]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 8003b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b4c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003b50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b52:	4b4b      	ldr	r3, [pc, #300]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003b58:	4b49      	ldr	r3, [pc, #292]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5e:	4b48      	ldr	r3, [pc, #288]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003b64:	4846      	ldr	r0, [pc, #280]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b66:	f005 fc5b 	bl	8009420 <HAL_TIM_Base_Init>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003b70:	f7fe f9ba 	bl	8001ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b78:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003b7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003b7e:	4619      	mov	r1, r3
 8003b80:	483f      	ldr	r0, [pc, #252]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b82:	f006 fb65 	bl	800a250 <HAL_TIM_ConfigClockSource>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003b8c:	f7fe f9ac 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003b90:	483b      	ldr	r0, [pc, #236]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003b92:	f005 fc9c 	bl	80094ce <HAL_TIM_PWM_Init>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003b9c:	f7fe f9a4 	bl	8001ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003bac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4833      	ldr	r0, [pc, #204]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003bb4:	f007 fbb8 	bl	800b328 <HAL_TIMEx_MasterConfigSynchronization>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003bbe:	f7fe f993 	bl	8001ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bc2:	2360      	movs	r3, #96	@ 0x60
 8003bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003be2:	2200      	movs	r2, #0
 8003be4:	4619      	mov	r1, r3
 8003be6:	4826      	ldr	r0, [pc, #152]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003be8:	f006 fa1e 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003bf2:	f7fe f979 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4820      	ldr	r0, [pc, #128]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003c00:	f006 fa12 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003c0a:	f7fe f96d 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c12:	2208      	movs	r2, #8
 8003c14:	4619      	mov	r1, r3
 8003c16:	481a      	ldr	r0, [pc, #104]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003c18:	f006 fa06 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003c22:	f7fe f961 	bl	8001ee8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003c44:	2300      	movs	r3, #0
 8003c46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003c4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003c56:	2300      	movs	r3, #0
 8003c58:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4807      	ldr	r0, [pc, #28]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003c64:	f007 fbf6 	bl	800b454 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003c6e:	f7fe f93b 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003c72:	4803      	ldr	r0, [pc, #12]	@ (8003c80 <MX_TIM8_Init+0x188>)
 8003c74:	f000 f8b4 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 8003c78:	bf00      	nop
 8003c7a:	3770      	adds	r7, #112	@ 0x70
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200007c0 	.word	0x200007c0
 8003c84:	40013400 	.word	0x40013400

08003c88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	@ 0x38
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a48      	ldr	r2, [pc, #288]	@ (8003dc8 <HAL_TIM_Base_MspInit+0x140>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003caa:	4b48      	ldr	r3, [pc, #288]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cae:	4a47      	ldr	r2, [pc, #284]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003cb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cb6:	4b45      	ldr	r3, [pc, #276]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003cc2:	e07d      	b.n	8003dc0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ccc:	d130      	bne.n	8003d30 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cce:	4b3f      	ldr	r3, [pc, #252]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cda:	4b3c      	ldr	r3, [pc, #240]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ce6:	4b39      	ldr	r3, [pc, #228]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cea:	4a38      	ldr	r2, [pc, #224]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003cec:	f043 0308 	orr.w	r3, r3, #8
 8003cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cf2:	4b36      	ldr	r3, [pc, #216]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LMC_HALL1_Pin|LMC_HALL2_Pin|LMC_HALL3_Pin;
 8003cfe:	2398      	movs	r3, #152	@ 0x98
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d16:	4619      	mov	r1, r3
 8003d18:	482d      	ldr	r0, [pc, #180]	@ (8003dd0 <HAL_TIM_Base_MspInit+0x148>)
 8003d1a:	f003 fbe7 	bl	80074ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2102      	movs	r1, #2
 8003d22:	201c      	movs	r0, #28
 8003d24:	f002 f937 	bl	8005f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d28:	201c      	movs	r0, #28
 8003d2a:	f002 f94e 	bl	8005fca <HAL_NVIC_EnableIRQ>
}
 8003d2e:	e047      	b.n	8003dc0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM5)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a27      	ldr	r2, [pc, #156]	@ (8003dd4 <HAL_TIM_Base_MspInit+0x14c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d131      	bne.n	8003d9e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d3a:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	4a23      	ldr	r2, [pc, #140]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003d40:	f043 0308 	orr.w	r3, r3, #8
 8003d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d46:	4b21      	ldr	r3, [pc, #132]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d52:	4b1e      	ldr	r3, [pc, #120]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	4a1d      	ldr	r2, [pc, #116]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003d58:	f043 0320 	orr.w	r3, r3, #32
 8003d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RMC_HALL2_Pin|RMC_HALL3_Pin|RMC_HALL1_Pin;
 8003d6a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d70:	2302      	movs	r3, #2
 8003d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8003d7c:	2306      	movs	r3, #6
 8003d7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d84:	4619      	mov	r1, r3
 8003d86:	4814      	ldr	r0, [pc, #80]	@ (8003dd8 <HAL_TIM_Base_MspInit+0x150>)
 8003d88:	f003 fbb0 	bl	80074ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2102      	movs	r1, #2
 8003d90:	2032      	movs	r0, #50	@ 0x32
 8003d92:	f002 f900 	bl	8005f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003d96:	2032      	movs	r0, #50	@ 0x32
 8003d98:	f002 f917 	bl	8005fca <HAL_NVIC_EnableIRQ>
}
 8003d9c:	e010      	b.n	8003dc0 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a0e      	ldr	r2, [pc, #56]	@ (8003ddc <HAL_TIM_Base_MspInit+0x154>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10b      	bne.n	8003dc0 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003da8:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	4a07      	ldr	r2, [pc, #28]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003dae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003db2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_TIM_Base_MspInit+0x144>)
 8003db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3738      	adds	r7, #56	@ 0x38
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	48000c00 	.word	0x48000c00
 8003dd4:	40000c00 	.word	0x40000c00
 8003dd8:	48001400 	.word	0x48001400
 8003ddc:	40013400 	.word	0x40013400

08003de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	@ 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 031c 	add.w	r3, r7, #28
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a64      	ldr	r2, [pc, #400]	@ (8003f90 <HAL_TIM_MspPostInit+0x1b0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d166      	bne.n	8003ed0 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e02:	4b64      	ldr	r3, [pc, #400]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e06:	4a63      	ldr	r2, [pc, #396]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e0e:	4b61      	ldr	r3, [pc, #388]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1a:	4b5e      	ldr	r3, [pc, #376]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1e:	4a5d      	ldr	r2, [pc, #372]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e26:	4b5b      	ldr	r3, [pc, #364]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e32:	4b58      	ldr	r3, [pc, #352]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	4a57      	ldr	r2, [pc, #348]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e38:	f043 0310 	orr.w	r3, r3, #16
 8003e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e3e:	4b55      	ldr	r3, [pc, #340]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	693b      	ldr	r3, [r7, #16]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_AL_RMC_Pin;
 8003e4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003e60:	f107 031c 	add.w	r3, r7, #28
 8003e64:	4619      	mov	r1, r3
 8003e66:	484c      	ldr	r0, [pc, #304]	@ (8003f98 <HAL_TIM_MspPostInit+0x1b8>)
 8003e68:	f003 fb40 	bl	80074ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_AH_RMC_Pin|PWM_BH_RMC_Pin|PWM_CH_RMC_Pin;
 8003e6c:	2307      	movs	r3, #7
 8003e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e70:	2302      	movs	r3, #2
 8003e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e80:	f107 031c 	add.w	r3, r7, #28
 8003e84:	4619      	mov	r1, r3
 8003e86:	4844      	ldr	r0, [pc, #272]	@ (8003f98 <HAL_TIM_MspPostInit+0x1b8>)
 8003e88:	f003 fb30 	bl	80074ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_BL_RMC_Pin;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e90:	2302      	movs	r3, #2
 8003e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003e9c:	2306      	movs	r3, #6
 8003e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_BL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003ea0:	f107 031c 	add.w	r3, r7, #28
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	483d      	ldr	r0, [pc, #244]	@ (8003f9c <HAL_TIM_MspPostInit+0x1bc>)
 8003ea8:	f003 fb20 	bl	80074ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_CL_RMC_Pin;
 8003eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003ec2:	f107 031c 	add.w	r3, r7, #28
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4835      	ldr	r0, [pc, #212]	@ (8003fa0 <HAL_TIM_MspPostInit+0x1c0>)
 8003eca:	f003 fb0f 	bl	80074ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003ece:	e05a      	b.n	8003f86 <HAL_TIM_MspPostInit+0x1a6>
  else if(timHandle->Instance==TIM8)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a33      	ldr	r2, [pc, #204]	@ (8003fa4 <HAL_TIM_MspPostInit+0x1c4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d155      	bne.n	8003f86 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eda:	4b2e      	ldr	r3, [pc, #184]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	4a2d      	ldr	r2, [pc, #180]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef2:	4b28      	ldr	r3, [pc, #160]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef6:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003ef8:	f043 0302 	orr.w	r3, r3, #2
 8003efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003efe:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <HAL_TIM_MspPostInit+0x1b4>)
 8003f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_LMC_Pin|PWM_AL_LMC_Pin|PWM_BL_LMC_Pin|PWM_CL_LMC_Pin;
 8003f0a:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 8003f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f20:	f107 031c 	add.w	r3, r7, #28
 8003f24:	4619      	mov	r1, r3
 8003f26:	481c      	ldr	r0, [pc, #112]	@ (8003f98 <HAL_TIM_MspPostInit+0x1b8>)
 8003f28:	f003 fae0 	bl	80074ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AH_LMC_Pin;
 8003f2c:	2340      	movs	r3, #64	@ 0x40
 8003f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8003f3c:	2305      	movs	r3, #5
 8003f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003f40:	f107 031c 	add.w	r3, r7, #28
 8003f44:	4619      	mov	r1, r3
 8003f46:	4815      	ldr	r0, [pc, #84]	@ (8003f9c <HAL_TIM_MspPostInit+0x1bc>)
 8003f48:	f003 fad0 	bl	80074ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_CH_LMC_Pin;
 8003f4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f52:	2302      	movs	r3, #2
 8003f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003f5e:	230a      	movs	r3, #10
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CH_LMC_GPIO_Port, &GPIO_InitStruct);
 8003f62:	f107 031c 	add.w	r3, r7, #28
 8003f66:	4619      	mov	r1, r3
 8003f68:	480c      	ldr	r0, [pc, #48]	@ (8003f9c <HAL_TIM_MspPostInit+0x1bc>)
 8003f6a:	f003 fabf 	bl	80074ec <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa8 <HAL_TIM_MspPostInit+0x1c8>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa8 <HAL_TIM_MspPostInit+0x1c8>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f78:	6053      	str	r3, [r2, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <HAL_TIM_MspPostInit+0x1c8>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa8 <HAL_TIM_MspPostInit+0x1c8>)
 8003f80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f84:	6053      	str	r3, [r2, #4]
}
 8003f86:	bf00      	nop
 8003f88:	3730      	adds	r7, #48	@ 0x30
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40021000 	.word	0x40021000
 8003f98:	48000800 	.word	0x48000800
 8003f9c:	48000400 	.word	0x48000400
 8003fa0:	48001000 	.word	0x48001000
 8003fa4:	40013400 	.word	0x40013400
 8003fa8:	40010000 	.word	0x40010000

08003fac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003fb0:	4b22      	ldr	r3, [pc, #136]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fb2:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <MX_USART2_UART_Init+0x94>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8003fb6:	4b21      	ldr	r3, [pc, #132]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fb8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8003fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fca:	4b1c      	ldr	r3, [pc, #112]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd6:	4b19      	ldr	r3, [pc, #100]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fdc:	4b17      	ldr	r3, [pc, #92]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fe2:	4b16      	ldr	r3, [pc, #88]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fe8:	4b14      	ldr	r3, [pc, #80]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fee:	4b13      	ldr	r3, [pc, #76]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ff4:	4811      	ldr	r0, [pc, #68]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8003ff6:	f007 fb2c 	bl	800b652 <HAL_UART_Init>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004000:	f7fd ff72 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004004:	2100      	movs	r1, #0
 8004006:	480d      	ldr	r0, [pc, #52]	@ (800403c <MX_USART2_UART_Init+0x90>)
 8004008:	f008 fef8 	bl	800cdfc <HAL_UARTEx_SetTxFifoThreshold>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004012:	f7fd ff69 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004016:	2100      	movs	r1, #0
 8004018:	4808      	ldr	r0, [pc, #32]	@ (800403c <MX_USART2_UART_Init+0x90>)
 800401a:	f008 ff2d 	bl	800ce78 <HAL_UARTEx_SetRxFifoThreshold>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004024:	f7fd ff60 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004028:	4804      	ldr	r0, [pc, #16]	@ (800403c <MX_USART2_UART_Init+0x90>)
 800402a:	f008 feae 	bl	800cd8a <HAL_UARTEx_DisableFifoMode>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004034:	f7fd ff58 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	2000080c 	.word	0x2000080c
 8004040:	40004400 	.word	0x40004400

08004044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b09e      	sub	sp, #120	@ 0x78
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800405c:	f107 0310 	add.w	r3, r7, #16
 8004060:	2254      	movs	r2, #84	@ 0x54
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f008 ffe7 	bl	800d038 <memset>
  if(uartHandle->Instance==USART2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a38      	ldr	r2, [pc, #224]	@ (8004150 <HAL_UART_MspInit+0x10c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d168      	bne.n	8004146 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004074:	2302      	movs	r3, #2
 8004076:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800407c:	f107 0310 	add.w	r3, r7, #16
 8004080:	4618      	mov	r0, r3
 8004082:	f004 f9db 	bl	800843c <HAL_RCCEx_PeriphCLKConfig>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800408c:	f7fd ff2c 	bl	8001ee8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004090:	4b30      	ldr	r3, [pc, #192]	@ (8004154 <HAL_UART_MspInit+0x110>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	4a2f      	ldr	r2, [pc, #188]	@ (8004154 <HAL_UART_MspInit+0x110>)
 8004096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409a:	6593      	str	r3, [r2, #88]	@ 0x58
 800409c:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <HAL_UART_MspInit+0x110>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004154 <HAL_UART_MspInit+0x110>)
 80040aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ac:	4a29      	ldr	r2, [pc, #164]	@ (8004154 <HAL_UART_MspInit+0x110>)
 80040ae:	f043 0308 	orr.w	r3, r3, #8
 80040b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040b4:	4b27      	ldr	r3, [pc, #156]	@ (8004154 <HAL_UART_MspInit+0x110>)
 80040b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = AUX2_TX_Pin|AUX2_RX_Pin;
 80040c0:	2360      	movs	r3, #96	@ 0x60
 80040c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c4:	2302      	movs	r3, #2
 80040c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040cc:	2300      	movs	r3, #0
 80040ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040d0:	2307      	movs	r3, #7
 80040d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80040d8:	4619      	mov	r1, r3
 80040da:	481f      	ldr	r0, [pc, #124]	@ (8004158 <HAL_UART_MspInit+0x114>)
 80040dc:	f003 fa06 	bl	80074ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80040e0:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <HAL_UART_MspInit+0x118>)
 80040e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004160 <HAL_UART_MspInit+0x11c>)
 80040e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80040e6:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <HAL_UART_MspInit+0x118>)
 80040e8:	221a      	movs	r2, #26
 80040ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040ec:	4b1b      	ldr	r3, [pc, #108]	@ (800415c <HAL_UART_MspInit+0x118>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040f2:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <HAL_UART_MspInit+0x118>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040f8:	4b18      	ldr	r3, [pc, #96]	@ (800415c <HAL_UART_MspInit+0x118>)
 80040fa:	2280      	movs	r2, #128	@ 0x80
 80040fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040fe:	4b17      	ldr	r3, [pc, #92]	@ (800415c <HAL_UART_MspInit+0x118>)
 8004100:	2200      	movs	r2, #0
 8004102:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004104:	4b15      	ldr	r3, [pc, #84]	@ (800415c <HAL_UART_MspInit+0x118>)
 8004106:	2200      	movs	r2, #0
 8004108:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800410a:	4b14      	ldr	r3, [pc, #80]	@ (800415c <HAL_UART_MspInit+0x118>)
 800410c:	2200      	movs	r2, #0
 800410e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004110:	4b12      	ldr	r3, [pc, #72]	@ (800415c <HAL_UART_MspInit+0x118>)
 8004112:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8004116:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004118:	4810      	ldr	r0, [pc, #64]	@ (800415c <HAL_UART_MspInit+0x118>)
 800411a:	f002 f9e7 	bl	80064ec <HAL_DMA_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8004124:	f7fd fee0 	bl	8001ee8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a0c      	ldr	r2, [pc, #48]	@ (800415c <HAL_UART_MspInit+0x118>)
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004130:	4a0a      	ldr	r2, [pc, #40]	@ (800415c <HAL_UART_MspInit+0x118>)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	2026      	movs	r0, #38	@ 0x26
 800413c:	f001 ff2b 	bl	8005f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004140:	2026      	movs	r0, #38	@ 0x26
 8004142:	f001 ff42 	bl	8005fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004146:	bf00      	nop
 8004148:	3778      	adds	r7, #120	@ 0x78
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40004400 	.word	0x40004400
 8004154:	40021000 	.word	0x40021000
 8004158:	48000c00 	.word	0x48000c00
 800415c:	200008a0 	.word	0x200008a0
 8004160:	40020008 	.word	0x40020008

08004164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004164:	480d      	ldr	r0, [pc, #52]	@ (800419c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004166:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004168:	f7ff fade 	bl	8003728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800416c:	480c      	ldr	r0, [pc, #48]	@ (80041a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800416e:	490d      	ldr	r1, [pc, #52]	@ (80041a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004170:	4a0d      	ldr	r2, [pc, #52]	@ (80041a8 <LoopForever+0xe>)
  movs r3, #0
 8004172:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004174:	e002      	b.n	800417c <LoopCopyDataInit>

08004176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417a:	3304      	adds	r3, #4

0800417c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800417c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800417e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004180:	d3f9      	bcc.n	8004176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004182:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004184:	4c0a      	ldr	r4, [pc, #40]	@ (80041b0 <LoopForever+0x16>)
  movs r3, #0
 8004186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004188:	e001      	b.n	800418e <LoopFillZerobss>

0800418a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800418c:	3204      	adds	r2, #4

0800418e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800418e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004190:	d3fb      	bcc.n	800418a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004192:	f008 ff59 	bl	800d048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004196:	f7fd fda3 	bl	8001ce0 <main>

0800419a <LoopForever>:

LoopForever:
    b LoopForever
 800419a:	e7fe      	b.n	800419a <LoopForever>
  ldr   r0, =_estack
 800419c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041a4:	200003fc 	.word	0x200003fc
  ldr r2, =_sidata
 80041a8:	0800d124 	.word	0x0800d124
  ldr r2, =_sbss
 80041ac:	200003fc 	.word	0x200003fc
  ldr r4, =_ebss
 80041b0:	20000904 	.word	0x20000904

080041b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041b4:	e7fe      	b.n	80041b4 <ADC1_2_IRQHandler>

080041b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c0:	2003      	movs	r0, #3
 80041c2:	f001 fedd 	bl	8005f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041c6:	200f      	movs	r0, #15
 80041c8:	f000 f80e 	bl	80041e8 <HAL_InitTick>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	71fb      	strb	r3, [r7, #7]
 80041d6:	e001      	b.n	80041dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041d8:	f7ff f98e 	bl	80034f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041dc:	79fb      	ldrb	r3, [r7, #7]

}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80041f4:	4b16      	ldr	r3, [pc, #88]	@ (8004250 <HAL_InitTick+0x68>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d022      	beq.n	8004242 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80041fc:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <HAL_InitTick+0x6c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b13      	ldr	r3, [pc, #76]	@ (8004250 <HAL_InitTick+0x68>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004208:	fbb1 f3f3 	udiv	r3, r1, r3
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	4618      	mov	r0, r3
 8004212:	f001 fee8 	bl	8005fe6 <HAL_SYSTICK_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10f      	bne.n	800423c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b0f      	cmp	r3, #15
 8004220:	d809      	bhi.n	8004236 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004222:	2200      	movs	r2, #0
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	f04f 30ff 	mov.w	r0, #4294967295
 800422a:	f001 feb4 	bl	8005f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800422e:	4a0a      	ldr	r2, [pc, #40]	@ (8004258 <HAL_InitTick+0x70>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e007      	b.n	8004246 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	e004      	b.n	8004246 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e001      	b.n	8004246 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	200003f8 	.word	0x200003f8
 8004254:	200003f0 	.word	0x200003f0
 8004258:	200003f4 	.word	0x200003f4

0800425c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <HAL_IncTick+0x1c>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_IncTick+0x20>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4413      	add	r3, r2
 800426a:	4a03      	ldr	r2, [pc, #12]	@ (8004278 <HAL_IncTick+0x1c>)
 800426c:	6013      	str	r3, [r2, #0]
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000900 	.word	0x20000900
 800427c:	200003f8 	.word	0x200003f8

08004280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return uwTick;
 8004284:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <HAL_GetTick+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000900 	.word	0x20000900

08004298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a0:	f7ff ffee 	bl	8004280 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d004      	beq.n	80042bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80042b2:	4b09      	ldr	r3, [pc, #36]	@ (80042d8 <HAL_Delay+0x40>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042bc:	bf00      	nop
 80042be:	f7ff ffdf 	bl	8004280 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d8f7      	bhi.n	80042be <HAL_Delay+0x26>
  {
  }
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	200003f8 	.word	0x200003f8

080042dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	609a      	str	r2, [r3, #8]
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	609a      	str	r2, [r3, #8]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3360      	adds	r3, #96	@ 0x60
 8004356:	461a      	mov	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <LL_ADC_SetOffset+0x44>)
 8004366:	4013      	ands	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	4313      	orrs	r3, r2
 8004374:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	03fff000 	.word	0x03fff000

0800438c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3360      	adds	r3, #96	@ 0x60
 800439a:	461a      	mov	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3360      	adds	r3, #96	@ 0x60
 80043c8:	461a      	mov	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	431a      	orrs	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b087      	sub	sp, #28
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3360      	adds	r3, #96	@ 0x60
 80043fe:	461a      	mov	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	431a      	orrs	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3360      	adds	r3, #96	@ 0x60
 8004434:	461a      	mov	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	431a      	orrs	r2, r3
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	615a      	str	r2, [r3, #20]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3330      	adds	r3, #48	@ 0x30
 80044b6:	461a      	mov	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	4413      	add	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	211f      	movs	r1, #31
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	401a      	ands	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0e9b      	lsrs	r3, r3, #26
 80044de:	f003 011f 	and.w	r1, r3, #31
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	431a      	orrs	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044fe:	b480      	push	{r7}
 8004500:	b087      	sub	sp, #28
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3314      	adds	r3, #20
 800450e:	461a      	mov	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	0e5b      	lsrs	r3, r3, #25
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	4413      	add	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	0d1b      	lsrs	r3, r3, #20
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2107      	movs	r1, #7
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	0d1b      	lsrs	r3, r3, #20
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	431a      	orrs	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456c:	43db      	mvns	r3, r3
 800456e:	401a      	ands	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f003 0318 	and.w	r3, r3, #24
 8004576:	4908      	ldr	r1, [pc, #32]	@ (8004598 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004578:	40d9      	lsrs	r1, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	400b      	ands	r3, r1
 800457e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004582:	431a      	orrs	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	0007ffff 	.word	0x0007ffff

0800459c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 031f 	and.w	r3, r3, #31
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80045e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6093      	str	r3, [r2, #8]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800460c:	d101      	bne.n	8004612 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004630:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004634:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800465c:	d101      	bne.n	8004662 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004680:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004684:	f043 0201 	orr.w	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046ac:	f043 0202 	orr.w	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <LL_ADC_IsEnabled+0x18>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <LL_ADC_IsEnabled+0x1a>
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d101      	bne.n	80046fe <LL_ADC_IsDisableOngoing+0x18>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <LL_ADC_IsDisableOngoing+0x1a>
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800471c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004720:	f043 0204 	orr.w	r2, r3, #4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004748:	f043 0210 	orr.w	r2, r3, #16
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d101      	bne.n	8004774 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004792:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004796:	f043 0220 	orr.w	r2, r3, #32
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d101      	bne.n	80047c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e1a9      	b.n	8004b3e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fc fd07 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fef1 	bl	80045f8 <LL_ADC_IsDeepPowerDownEnabled>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fed7 	bl	80045d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff ff0c 	bl	8004648 <LL_ADC_IsInternalRegulatorEnabled>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d115      	bne.n	8004862 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fef0 	bl	8004620 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004840:	4b9c      	ldr	r3, [pc, #624]	@ (8004ab4 <HAL_ADC_Init+0x2e4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	4a9c      	ldr	r2, [pc, #624]	@ (8004ab8 <HAL_ADC_Init+0x2e8>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004854:	e002      	b.n	800485c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b01      	subs	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f9      	bne.n	8004856 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff feee 	bl	8004648 <LL_ADC_IsInternalRegulatorEnabled>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10d      	bne.n	800488e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004876:	f043 0210 	orr.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff ff62 	bl	800475c <LL_ADC_REG_IsConversionOngoing>
 8004898:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 8142 	bne.w	8004b2c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 813e 	bne.w	8004b2c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80048b8:	f043 0202 	orr.w	r2, r3, #2
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fefb 	bl	80046c0 <LL_ADC_IsEnabled>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d141      	bne.n	8004954 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048d8:	d004      	beq.n	80048e4 <HAL_ADC_Init+0x114>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a77      	ldr	r2, [pc, #476]	@ (8004abc <HAL_ADC_Init+0x2ec>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d10f      	bne.n	8004904 <HAL_ADC_Init+0x134>
 80048e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80048e8:	f7ff feea 	bl	80046c0 <LL_ADC_IsEnabled>
 80048ec:	4604      	mov	r4, r0
 80048ee:	4873      	ldr	r0, [pc, #460]	@ (8004abc <HAL_ADC_Init+0x2ec>)
 80048f0:	f7ff fee6 	bl	80046c0 <LL_ADC_IsEnabled>
 80048f4:	4603      	mov	r3, r0
 80048f6:	4323      	orrs	r3, r4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e012      	b.n	800492a <HAL_ADC_Init+0x15a>
 8004904:	486e      	ldr	r0, [pc, #440]	@ (8004ac0 <HAL_ADC_Init+0x2f0>)
 8004906:	f7ff fedb 	bl	80046c0 <LL_ADC_IsEnabled>
 800490a:	4604      	mov	r4, r0
 800490c:	486d      	ldr	r0, [pc, #436]	@ (8004ac4 <HAL_ADC_Init+0x2f4>)
 800490e:	f7ff fed7 	bl	80046c0 <LL_ADC_IsEnabled>
 8004912:	4603      	mov	r3, r0
 8004914:	431c      	orrs	r4, r3
 8004916:	486c      	ldr	r0, [pc, #432]	@ (8004ac8 <HAL_ADC_Init+0x2f8>)
 8004918:	f7ff fed2 	bl	80046c0 <LL_ADC_IsEnabled>
 800491c:	4603      	mov	r3, r0
 800491e:	4323      	orrs	r3, r4
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d012      	beq.n	8004954 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004936:	d004      	beq.n	8004942 <HAL_ADC_Init+0x172>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5f      	ldr	r2, [pc, #380]	@ (8004abc <HAL_ADC_Init+0x2ec>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_ADC_Init+0x176>
 8004942:	4a62      	ldr	r2, [pc, #392]	@ (8004acc <HAL_ADC_Init+0x2fc>)
 8004944:	e000      	b.n	8004948 <HAL_ADC_Init+0x178>
 8004946:	4a62      	ldr	r2, [pc, #392]	@ (8004ad0 <HAL_ADC_Init+0x300>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f7ff fcc4 	bl	80042dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	7f5b      	ldrb	r3, [r3, #29]
 8004958:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800495e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004964:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800496a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004972:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800497e:	2b01      	cmp	r3, #1
 8004980:	d106      	bne.n	8004990 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	045b      	lsls	r3, r3, #17
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d009      	beq.n	80049ac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	4b48      	ldr	r3, [pc, #288]	@ (8004ad4 <HAL_ADC_Init+0x304>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	69b9      	ldr	r1, [r7, #24]
 80049bc:	430b      	orrs	r3, r1
 80049be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fee5 	bl	80047aa <LL_ADC_INJ_IsConversionOngoing>
 80049e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d17f      	bne.n	8004ae8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d17c      	bne.n	8004ae8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80049f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80049fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a0a:	f023 0302 	bic.w	r3, r3, #2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004a2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004a38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6911      	ldr	r1, [r2, #16]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004a4e:	e013      	b.n	8004a78 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d12a      	bne.n	8004ad8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a98:	4311      	orrs	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	611a      	str	r2, [r3, #16]
 8004ab2:	e019      	b.n	8004ae8 <HAL_ADC_Init+0x318>
 8004ab4:	200003f0 	.word	0x200003f0
 8004ab8:	053e2d63 	.word	0x053e2d63
 8004abc:	50000100 	.word	0x50000100
 8004ac0:	50000400 	.word	0x50000400
 8004ac4:	50000500 	.word	0x50000500
 8004ac8:	50000600 	.word	0x50000600
 8004acc:	50000300 	.word	0x50000300
 8004ad0:	50000700 	.word	0x50000700
 8004ad4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10c      	bne.n	8004b0a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	f023 010f 	bic.w	r1, r3, #15
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	1e5a      	subs	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b08:	e007      	b.n	8004b1a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 020f 	bic.w	r2, r2, #15
 8004b18:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	f043 0201 	orr.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b2a:	e007      	b.n	8004b3c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b30:	f043 0210 	orr.w	r2, r3, #16
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3724      	adds	r7, #36	@ 0x24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd90      	pop	{r4, r7, pc}
 8004b46:	bf00      	nop

08004b48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b58:	d004      	beq.n	8004b64 <HAL_ADC_Start+0x1c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a67      	ldr	r2, [pc, #412]	@ (8004cfc <HAL_ADC_Start+0x1b4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <HAL_ADC_Start+0x20>
 8004b64:	4b66      	ldr	r3, [pc, #408]	@ (8004d00 <HAL_ADC_Start+0x1b8>)
 8004b66:	e000      	b.n	8004b6a <HAL_ADC_Start+0x22>
 8004b68:	4b66      	ldr	r3, [pc, #408]	@ (8004d04 <HAL_ADC_Start+0x1bc>)
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fd16 	bl	800459c <LL_ADC_GetMultimode>
 8004b70:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fdf0 	bl	800475c <LL_ADC_REG_IsConversionOngoing>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 80b4 	bne.w	8004cec <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADC_Start+0x4a>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e0af      	b.n	8004cf2 <HAL_ADC_Start+0x1aa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fefc 	bl	8005998 <ADC_Enable>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 809b 	bne.w	8004ce2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8004cfc <HAL_ADC_Start+0x1b4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_ADC_Start+0x96>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a4e      	ldr	r2, [pc, #312]	@ (8004d08 <HAL_ADC_Start+0x1c0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d002      	beq.n	8004bda <HAL_ADC_Start+0x92>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	e003      	b.n	8004be2 <HAL_ADC_Start+0x9a>
 8004bda:	4b4c      	ldr	r3, [pc, #304]	@ (8004d0c <HAL_ADC_Start+0x1c4>)
 8004bdc:	e001      	b.n	8004be2 <HAL_ADC_Start+0x9a>
 8004bde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d002      	beq.n	8004bf0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c08:	d106      	bne.n	8004c18 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0e:	f023 0206 	bic.w	r2, r3, #6
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c16:	e002      	b.n	8004c1e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	221c      	movs	r2, #28
 8004c24:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a32      	ldr	r2, [pc, #200]	@ (8004cfc <HAL_ADC_Start+0x1b4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <HAL_ADC_Start+0x104>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a32      	ldr	r2, [pc, #200]	@ (8004d08 <HAL_ADC_Start+0x1c0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d002      	beq.n	8004c48 <HAL_ADC_Start+0x100>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	e003      	b.n	8004c50 <HAL_ADC_Start+0x108>
 8004c48:	4b30      	ldr	r3, [pc, #192]	@ (8004d0c <HAL_ADC_Start+0x1c4>)
 8004c4a:	e001      	b.n	8004c50 <HAL_ADC_Start+0x108>
 8004c4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d008      	beq.n	8004c6a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d002      	beq.n	8004c6a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b09      	cmp	r3, #9
 8004c68:	d114      	bne.n	8004c94 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fd3d 	bl	800470c <LL_ADC_REG_StartConversion>
 8004c92:	e02d      	b.n	8004cf0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a15      	ldr	r2, [pc, #84]	@ (8004cfc <HAL_ADC_Start+0x1b4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_ADC_Start+0x176>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a16      	ldr	r2, [pc, #88]	@ (8004d08 <HAL_ADC_Start+0x1c0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d002      	beq.n	8004cba <HAL_ADC_Start+0x172>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	e003      	b.n	8004cc2 <HAL_ADC_Start+0x17a>
 8004cba:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <HAL_ADC_Start+0x1c4>)
 8004cbc:	e001      	b.n	8004cc2 <HAL_ADC_Start+0x17a>
 8004cbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004cc2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00f      	beq.n	8004cf0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cd8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ce0:	e006      	b.n	8004cf0 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004cea:	e001      	b.n	8004cf0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
 8004cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	50000100 	.word	0x50000100
 8004d00:	50000300 	.word	0x50000300
 8004d04:	50000700 	.word	0x50000700
 8004d08:	50000500 	.word	0x50000500
 8004d0c:	50000400 	.word	0x50000400

08004d10 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_Stop+0x16>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e023      	b.n	8004d6e <HAL_ADC_Stop+0x5e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004d2e:	2103      	movs	r1, #3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fd75 	bl	8005820 <ADC_ConversionStop>
 8004d36:	4603      	mov	r3, r0
 8004d38:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d111      	bne.n	8004d64 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 febf 	bl	8005ac4 <ADC_Disable>
 8004d46:	4603      	mov	r3, r0
 8004d48:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d8a:	d004      	beq.n	8004d96 <HAL_ADC_PollForConversion+0x1e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a77      	ldr	r2, [pc, #476]	@ (8004f70 <HAL_ADC_PollForConversion+0x1f8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <HAL_ADC_PollForConversion+0x22>
 8004d96:	4b77      	ldr	r3, [pc, #476]	@ (8004f74 <HAL_ADC_PollForConversion+0x1fc>)
 8004d98:	e000      	b.n	8004d9c <HAL_ADC_PollForConversion+0x24>
 8004d9a:	4b77      	ldr	r3, [pc, #476]	@ (8004f78 <HAL_ADC_PollForConversion+0x200>)
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fbfd 	bl	800459c <LL_ADC_GetMultimode>
 8004da2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d102      	bne.n	8004db2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004dac:	2308      	movs	r3, #8
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e037      	b.n	8004e22 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d002      	beq.n	8004dc4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b09      	cmp	r3, #9
 8004dc2:	d111      	bne.n	8004de8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd6:	f043 0220 	orr.w	r2, r3, #32
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0c1      	b.n	8004f66 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004de2:	2304      	movs	r3, #4
 8004de4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004de6:	e01c      	b.n	8004e22 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004df0:	d004      	beq.n	8004dfc <HAL_ADC_PollForConversion+0x84>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a5e      	ldr	r2, [pc, #376]	@ (8004f70 <HAL_ADC_PollForConversion+0x1f8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_ADC_PollForConversion+0x88>
 8004dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8004f74 <HAL_ADC_PollForConversion+0x1fc>)
 8004dfe:	e000      	b.n	8004e02 <HAL_ADC_PollForConversion+0x8a>
 8004e00:	4b5d      	ldr	r3, [pc, #372]	@ (8004f78 <HAL_ADC_PollForConversion+0x200>)
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fbd8 	bl	80045b8 <LL_ADC_GetMultiDMATransfer>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e12:	f043 0220 	orr.w	r2, r3, #32
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e0a3      	b.n	8004f66 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004e1e:	2304      	movs	r3, #4
 8004e20:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004e22:	f7ff fa2d 	bl	8004280 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e28:	e021      	b.n	8004e6e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d01d      	beq.n	8004e6e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004e32:	f7ff fa25 	bl	8004280 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <HAL_ADC_PollForConversion+0xd0>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d112      	bne.n	8004e6e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e07b      	b.n	8004f66 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0d6      	beq.n	8004e2a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff faf7 	bl	8004480 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01c      	beq.n	8004ed2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	7f5b      	ldrb	r3, [r3, #29]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d118      	bne.n	8004ed2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d111      	bne.n	8004ed2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ebe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d105      	bne.n	8004ed2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a26      	ldr	r2, [pc, #152]	@ (8004f70 <HAL_ADC_PollForConversion+0x1f8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_ADC_PollForConversion+0x178>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a26      	ldr	r2, [pc, #152]	@ (8004f7c <HAL_ADC_PollForConversion+0x204>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d002      	beq.n	8004eec <HAL_ADC_PollForConversion+0x174>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	e003      	b.n	8004ef4 <HAL_ADC_PollForConversion+0x17c>
 8004eec:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <HAL_ADC_PollForConversion+0x208>)
 8004eee:	e001      	b.n	8004ef4 <HAL_ADC_PollForConversion+0x17c>
 8004ef0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d008      	beq.n	8004f0e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b05      	cmp	r3, #5
 8004f06:	d002      	beq.n	8004f0e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b09      	cmp	r3, #9
 8004f0c:	d104      	bne.n	8004f18 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e014      	b.n	8004f42 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a14      	ldr	r2, [pc, #80]	@ (8004f70 <HAL_ADC_PollForConversion+0x1f8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_ADC_PollForConversion+0x1be>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <HAL_ADC_PollForConversion+0x204>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d002      	beq.n	8004f32 <HAL_ADC_PollForConversion+0x1ba>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	e003      	b.n	8004f3a <HAL_ADC_PollForConversion+0x1c2>
 8004f32:	4b13      	ldr	r3, [pc, #76]	@ (8004f80 <HAL_ADC_PollForConversion+0x208>)
 8004f34:	e001      	b.n	8004f3a <HAL_ADC_PollForConversion+0x1c2>
 8004f36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d104      	bne.n	8004f52 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e008      	b.n	8004f64 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	220c      	movs	r2, #12
 8004f62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	50000100 	.word	0x50000100
 8004f74:	50000300 	.word	0x50000300
 8004f78:	50000700 	.word	0x50000700
 8004f7c:	50000500 	.word	0x50000500
 8004f80:	50000400 	.word	0x50000400

08004f84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b0b6      	sub	sp, #216	@ 0xd8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d102      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x24>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	f000 bc13 	b.w	80057ea <HAL_ADC_ConfigChannel+0x84a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fbc3 	bl	800475c <LL_ADC_REG_IsConversionOngoing>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 83f3 	bne.w	80057c4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f7ff fa5b 	bl	80044a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fbb1 	bl	800475c <LL_ADC_REG_IsConversionOngoing>
 8004ffa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fbd1 	bl	80047aa <LL_ADC_INJ_IsConversionOngoing>
 8005008:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800500c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 81d9 	bne.w	80053c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800501a:	2b00      	cmp	r3, #0
 800501c:	f040 81d4 	bne.w	80053c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005028:	d10f      	bne.n	800504a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	4619      	mov	r1, r3
 8005036:	f7ff fa62 	bl	80044fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fa09 	bl	800445a <LL_ADC_SetSamplingTimeCommonConfig>
 8005048:	e00e      	b.n	8005068 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	461a      	mov	r2, r3
 8005058:	f7ff fa51 	bl	80044fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f9f9 	bl	800445a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	08db      	lsrs	r3, r3, #3
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b04      	cmp	r3, #4
 8005088:	d022      	beq.n	80050d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6919      	ldr	r1, [r3, #16]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800509a:	f7ff f953 	bl	8004344 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6919      	ldr	r1, [r3, #16]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f7ff f99f 	bl	80043ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d102      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x126>
 80050c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050c4:	e000      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x128>
 80050c6:	2300      	movs	r3, #0
 80050c8:	461a      	mov	r2, r3
 80050ca:	f7ff f9ab 	bl	8004424 <LL_ADC_SetOffsetSaturation>
 80050ce:	e17b      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff f958 	bl	800438c <LL_ADC_GetOffsetChannel>
 80050dc:	4603      	mov	r3, r0
 80050de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x15c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2100      	movs	r1, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff f94d 	bl	800438c <LL_ADC_GetOffsetChannel>
 80050f2:	4603      	mov	r3, r0
 80050f4:	0e9b      	lsrs	r3, r3, #26
 80050f6:	f003 021f 	and.w	r2, r3, #31
 80050fa:	e01e      	b.n	800513a <HAL_ADC_ConfigChannel+0x19a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff f942 	bl	800438c <LL_ADC_GetOffsetChannel>
 8005108:	4603      	mov	r3, r0
 800510a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005112:	fa93 f3a3 	rbit	r3, r3
 8005116:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800511a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800511e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800512a:	2320      	movs	r3, #32
 800512c:	e004      	b.n	8005138 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800512e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005132:	fab3 f383 	clz	r3, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x1b2>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	0e9b      	lsrs	r3, r3, #26
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	e018      	b.n	8005184 <HAL_ADC_ConfigChannel+0x1e4>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800515e:	fa93 f3a3 	rbit	r3, r3
 8005162:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800516a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800516e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005176:	2320      	movs	r3, #32
 8005178:	e004      	b.n	8005184 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800517a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800517e:	fab3 f383 	clz	r3, r3
 8005182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005184:	429a      	cmp	r2, r3
 8005186:	d106      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2200      	movs	r2, #0
 800518e:	2100      	movs	r1, #0
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff f911 	bl	80043b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2101      	movs	r1, #1
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff f8f5 	bl	800438c <LL_ADC_GetOffsetChannel>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x222>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2101      	movs	r1, #1
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff f8ea 	bl	800438c <LL_ADC_GetOffsetChannel>
 80051b8:	4603      	mov	r3, r0
 80051ba:	0e9b      	lsrs	r3, r3, #26
 80051bc:	f003 021f 	and.w	r2, r3, #31
 80051c0:	e01e      	b.n	8005200 <HAL_ADC_ConfigChannel+0x260>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2101      	movs	r1, #1
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff f8df 	bl	800438c <LL_ADC_GetOffsetChannel>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80051d8:	fa93 f3a3 	rbit	r3, r3
 80051dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80051e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80051e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80051f0:	2320      	movs	r3, #32
 80051f2:	e004      	b.n	80051fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80051f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80051f8:	fab3 f383 	clz	r3, r3
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005208:	2b00      	cmp	r3, #0
 800520a:	d105      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x278>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	0e9b      	lsrs	r3, r3, #26
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	e018      	b.n	800524a <HAL_ADC_ConfigChannel+0x2aa>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005220:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005224:	fa93 f3a3 	rbit	r3, r3
 8005228:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800522c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800523c:	2320      	movs	r3, #32
 800523e:	e004      	b.n	800524a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005240:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005244:	fab3 f383 	clz	r3, r3
 8005248:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800524a:	429a      	cmp	r2, r3
 800524c:	d106      	bne.n	800525c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	2101      	movs	r1, #1
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff f8ae 	bl	80043b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2102      	movs	r1, #2
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff f892 	bl	800438c <LL_ADC_GetOffsetChannel>
 8005268:	4603      	mov	r3, r0
 800526a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x2e8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2102      	movs	r1, #2
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff f887 	bl	800438c <LL_ADC_GetOffsetChannel>
 800527e:	4603      	mov	r3, r0
 8005280:	0e9b      	lsrs	r3, r3, #26
 8005282:	f003 021f 	and.w	r2, r3, #31
 8005286:	e01e      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x326>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2102      	movs	r1, #2
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff f87c 	bl	800438c <LL_ADC_GetOffsetChannel>
 8005294:	4603      	mov	r3, r0
 8005296:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80052a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80052ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80052b6:	2320      	movs	r3, #32
 80052b8:	e004      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80052ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052be:	fab3 f383 	clz	r3, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d105      	bne.n	80052de <HAL_ADC_ConfigChannel+0x33e>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	0e9b      	lsrs	r3, r3, #26
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	e016      	b.n	800530c <HAL_ADC_ConfigChannel+0x36c>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80052f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80052f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80052fe:	2320      	movs	r3, #32
 8005300:	e004      	b.n	800530c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005302:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005306:	fab3 f383 	clz	r3, r3
 800530a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800530c:	429a      	cmp	r2, r3
 800530e:	d106      	bne.n	800531e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2200      	movs	r2, #0
 8005316:	2102      	movs	r1, #2
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff f84d 	bl	80043b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2103      	movs	r1, #3
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f831 	bl	800438c <LL_ADC_GetOffsetChannel>
 800532a:	4603      	mov	r3, r0
 800532c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <HAL_ADC_ConfigChannel+0x3aa>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2103      	movs	r1, #3
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f826 	bl	800438c <LL_ADC_GetOffsetChannel>
 8005340:	4603      	mov	r3, r0
 8005342:	0e9b      	lsrs	r3, r3, #26
 8005344:	f003 021f 	and.w	r2, r3, #31
 8005348:	e017      	b.n	800537a <HAL_ADC_ConfigChannel+0x3da>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2103      	movs	r1, #3
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff f81b 	bl	800438c <LL_ADC_GetOffsetChannel>
 8005356:	4603      	mov	r3, r0
 8005358:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800535c:	fa93 f3a3 	rbit	r3, r3
 8005360:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005362:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005364:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800536c:	2320      	movs	r3, #32
 800536e:	e003      	b.n	8005378 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005372:	fab3 f383 	clz	r3, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x3f2>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	0e9b      	lsrs	r3, r3, #26
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	e011      	b.n	80053b6 <HAL_ADC_ConfigChannel+0x416>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800539a:	fa93 f3a3 	rbit	r3, r3
 800539e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80053a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80053a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80053aa:	2320      	movs	r3, #32
 80053ac:	e003      	b.n	80053b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80053ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b0:	fab3 f383 	clz	r3, r3
 80053b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d106      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	2103      	movs	r1, #3
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe fff8 	bl	80043b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff f977 	bl	80046c0 <LL_ADC_IsEnabled>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f040 813d 	bne.w	8005654 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f7ff f8b4 	bl	8004554 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4aa2      	ldr	r2, [pc, #648]	@ (800567c <HAL_ADC_ConfigChannel+0x6dc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	f040 812e 	bne.w	8005654 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x480>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	0e9b      	lsrs	r3, r3, #26
 800540e:	3301      	adds	r3, #1
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	2b09      	cmp	r3, #9
 8005416:	bf94      	ite	ls
 8005418:	2301      	movls	r3, #1
 800541a:	2300      	movhi	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e019      	b.n	8005454 <HAL_ADC_ConfigChannel+0x4b4>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005428:	fa93 f3a3 	rbit	r3, r3
 800542c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800542e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005430:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005438:	2320      	movs	r3, #32
 800543a:	e003      	b.n	8005444 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800543c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800543e:	fab3 f383 	clz	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	3301      	adds	r3, #1
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	2b09      	cmp	r3, #9
 800544c:	bf94      	ite	ls
 800544e:	2301      	movls	r3, #1
 8005450:	2300      	movhi	r3, #0
 8005452:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005454:	2b00      	cmp	r3, #0
 8005456:	d079      	beq.n	800554c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005460:	2b00      	cmp	r3, #0
 8005462:	d107      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x4d4>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	0e9b      	lsrs	r3, r3, #26
 800546a:	3301      	adds	r3, #1
 800546c:	069b      	lsls	r3, r3, #26
 800546e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005472:	e015      	b.n	80054a0 <HAL_ADC_ConfigChannel+0x500>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800547c:	fa93 f3a3 	rbit	r3, r3
 8005480:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005484:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800548c:	2320      	movs	r3, #32
 800548e:	e003      	b.n	8005498 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005492:	fab3 f383 	clz	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	3301      	adds	r3, #1
 800549a:	069b      	lsls	r3, r3, #26
 800549c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x520>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	0e9b      	lsrs	r3, r3, #26
 80054b2:	3301      	adds	r3, #1
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	2101      	movs	r1, #1
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	e017      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x550>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c8:	fa93 f3a3 	rbit	r3, r3
 80054cc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80054ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80054d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80054d8:	2320      	movs	r3, #32
 80054da:	e003      	b.n	80054e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80054dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054de:	fab3 f383 	clz	r3, r3
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	3301      	adds	r3, #1
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	ea42 0103 	orr.w	r1, r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <HAL_ADC_ConfigChannel+0x576>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	0e9b      	lsrs	r3, r3, #26
 8005506:	3301      	adds	r3, #1
 8005508:	f003 021f 	and.w	r2, r3, #31
 800550c:	4613      	mov	r3, r2
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4413      	add	r3, r2
 8005512:	051b      	lsls	r3, r3, #20
 8005514:	e018      	b.n	8005548 <HAL_ADC_ConfigChannel+0x5a8>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551e:	fa93 f3a3 	rbit	r3, r3
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800552e:	2320      	movs	r3, #32
 8005530:	e003      	b.n	800553a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005534:	fab3 f383 	clz	r3, r3
 8005538:	b2db      	uxtb	r3, r3
 800553a:	3301      	adds	r3, #1
 800553c:	f003 021f 	and.w	r2, r3, #31
 8005540:	4613      	mov	r3, r2
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	4413      	add	r3, r2
 8005546:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005548:	430b      	orrs	r3, r1
 800554a:	e07e      	b.n	800564a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005554:	2b00      	cmp	r3, #0
 8005556:	d107      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x5c8>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	0e9b      	lsrs	r3, r3, #26
 800555e:	3301      	adds	r3, #1
 8005560:	069b      	lsls	r3, r3, #26
 8005562:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005566:	e015      	b.n	8005594 <HAL_ADC_ConfigChannel+0x5f4>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005580:	2320      	movs	r3, #32
 8005582:	e003      	b.n	800558c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	b2db      	uxtb	r3, r3
 800558c:	3301      	adds	r3, #1
 800558e:	069b      	lsls	r3, r3, #26
 8005590:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x614>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	0e9b      	lsrs	r3, r3, #26
 80055a6:	3301      	adds	r3, #1
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	2101      	movs	r1, #1
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	e017      	b.n	80055e4 <HAL_ADC_ConfigChannel+0x644>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	fa93 f3a3 	rbit	r3, r3
 80055c0:	61fb      	str	r3, [r7, #28]
  return result;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80055cc:	2320      	movs	r3, #32
 80055ce:	e003      	b.n	80055d8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	fab3 f383 	clz	r3, r3
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	3301      	adds	r3, #1
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2101      	movs	r1, #1
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	ea42 0103 	orr.w	r1, r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x670>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	0e9b      	lsrs	r3, r3, #26
 80055fa:	3301      	adds	r3, #1
 80055fc:	f003 021f 	and.w	r2, r3, #31
 8005600:	4613      	mov	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4413      	add	r3, r2
 8005606:	3b1e      	subs	r3, #30
 8005608:	051b      	lsls	r3, r3, #20
 800560a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800560e:	e01b      	b.n	8005648 <HAL_ADC_ConfigChannel+0x6a8>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	613b      	str	r3, [r7, #16]
  return result;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005628:	2320      	movs	r3, #32
 800562a:	e003      	b.n	8005634 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3301      	adds	r3, #1
 8005636:	f003 021f 	and.w	r2, r3, #31
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	3b1e      	subs	r3, #30
 8005642:	051b      	lsls	r3, r3, #20
 8005644:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005648:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800564e:	4619      	mov	r1, r3
 8005650:	f7fe ff55 	bl	80044fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4b09      	ldr	r3, [pc, #36]	@ (8005680 <HAL_ADC_ConfigChannel+0x6e0>)
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80be 	beq.w	80057de <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800566a:	d004      	beq.n	8005676 <HAL_ADC_ConfigChannel+0x6d6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a04      	ldr	r2, [pc, #16]	@ (8005684 <HAL_ADC_ConfigChannel+0x6e4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d10a      	bne.n	800568c <HAL_ADC_ConfigChannel+0x6ec>
 8005676:	4b04      	ldr	r3, [pc, #16]	@ (8005688 <HAL_ADC_ConfigChannel+0x6e8>)
 8005678:	e009      	b.n	800568e <HAL_ADC_ConfigChannel+0x6ee>
 800567a:	bf00      	nop
 800567c:	407f0000 	.word	0x407f0000
 8005680:	80080000 	.word	0x80080000
 8005684:	50000100 	.word	0x50000100
 8005688:	50000300 	.word	0x50000300
 800568c:	4b59      	ldr	r3, [pc, #356]	@ (80057f4 <HAL_ADC_ConfigChannel+0x854>)
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fe4a 	bl	8004328 <LL_ADC_GetCommonPathInternalCh>
 8005694:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a56      	ldr	r2, [pc, #344]	@ (80057f8 <HAL_ADC_ConfigChannel+0x858>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_ADC_ConfigChannel+0x70c>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a55      	ldr	r2, [pc, #340]	@ (80057fc <HAL_ADC_ConfigChannel+0x85c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d13a      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d134      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056c0:	d005      	beq.n	80056ce <HAL_ADC_ConfigChannel+0x72e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005800 <HAL_ADC_ConfigChannel+0x860>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	f040 8085 	bne.w	80057d8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056d6:	d004      	beq.n	80056e2 <HAL_ADC_ConfigChannel+0x742>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a49      	ldr	r2, [pc, #292]	@ (8005804 <HAL_ADC_ConfigChannel+0x864>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d101      	bne.n	80056e6 <HAL_ADC_ConfigChannel+0x746>
 80056e2:	4a49      	ldr	r2, [pc, #292]	@ (8005808 <HAL_ADC_ConfigChannel+0x868>)
 80056e4:	e000      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x748>
 80056e6:	4a43      	ldr	r2, [pc, #268]	@ (80057f4 <HAL_ADC_ConfigChannel+0x854>)
 80056e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f7fe fe05 	bl	8004302 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056f8:	4b44      	ldr	r3, [pc, #272]	@ (800580c <HAL_ADC_ConfigChannel+0x86c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	099b      	lsrs	r3, r3, #6
 80056fe:	4a44      	ldr	r2, [pc, #272]	@ (8005810 <HAL_ADC_ConfigChannel+0x870>)
 8005700:	fba2 2303 	umull	r2, r3, r2, r3
 8005704:	099b      	lsrs	r3, r3, #6
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	4613      	mov	r3, r2
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005712:	e002      	b.n	800571a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3b01      	subs	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f9      	bne.n	8005714 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005720:	e05a      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a3b      	ldr	r2, [pc, #236]	@ (8005814 <HAL_ADC_ConfigChannel+0x874>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d125      	bne.n	8005778 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800572c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11f      	bne.n	8005778 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a31      	ldr	r2, [pc, #196]	@ (8005804 <HAL_ADC_ConfigChannel+0x864>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d104      	bne.n	800574c <HAL_ADC_ConfigChannel+0x7ac>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a34      	ldr	r2, [pc, #208]	@ (8005818 <HAL_ADC_ConfigChannel+0x878>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d047      	beq.n	80057dc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005754:	d004      	beq.n	8005760 <HAL_ADC_ConfigChannel+0x7c0>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2a      	ldr	r2, [pc, #168]	@ (8005804 <HAL_ADC_ConfigChannel+0x864>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x7c4>
 8005760:	4a29      	ldr	r2, [pc, #164]	@ (8005808 <HAL_ADC_ConfigChannel+0x868>)
 8005762:	e000      	b.n	8005766 <HAL_ADC_ConfigChannel+0x7c6>
 8005764:	4a23      	ldr	r2, [pc, #140]	@ (80057f4 <HAL_ADC_ConfigChannel+0x854>)
 8005766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800576a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800576e:	4619      	mov	r1, r3
 8005770:	4610      	mov	r0, r2
 8005772:	f7fe fdc6 	bl	8004302 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005776:	e031      	b.n	80057dc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a27      	ldr	r2, [pc, #156]	@ (800581c <HAL_ADC_ConfigChannel+0x87c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d12d      	bne.n	80057de <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d127      	bne.n	80057de <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1c      	ldr	r2, [pc, #112]	@ (8005804 <HAL_ADC_ConfigChannel+0x864>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d022      	beq.n	80057de <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a0:	d004      	beq.n	80057ac <HAL_ADC_ConfigChannel+0x80c>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a17      	ldr	r2, [pc, #92]	@ (8005804 <HAL_ADC_ConfigChannel+0x864>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d101      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x810>
 80057ac:	4a16      	ldr	r2, [pc, #88]	@ (8005808 <HAL_ADC_ConfigChannel+0x868>)
 80057ae:	e000      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x812>
 80057b0:	4a10      	ldr	r2, [pc, #64]	@ (80057f4 <HAL_ADC_ConfigChannel+0x854>)
 80057b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f7fe fda0 	bl	8004302 <LL_ADC_SetCommonPathInternalCh>
 80057c2:	e00c      	b.n	80057de <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c8:	f043 0220 	orr.w	r2, r3, #32
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80057d6:	e002      	b.n	80057de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80057e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	37d8      	adds	r7, #216	@ 0xd8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	50000700 	.word	0x50000700
 80057f8:	c3210000 	.word	0xc3210000
 80057fc:	90c00010 	.word	0x90c00010
 8005800:	50000600 	.word	0x50000600
 8005804:	50000100 	.word	0x50000100
 8005808:	50000300 	.word	0x50000300
 800580c:	200003f0 	.word	0x200003f0
 8005810:	053e2d63 	.word	0x053e2d63
 8005814:	c7520000 	.word	0xc7520000
 8005818:	50000500 	.word	0x50000500
 800581c:	cb840000 	.word	0xcb840000

08005820 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe ff90 	bl	800475c <LL_ADC_REG_IsConversionOngoing>
 800583c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe ffb1 	bl	80047aa <LL_ADC_INJ_IsConversionOngoing>
 8005848:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8098 	beq.w	8005988 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d02a      	beq.n	80058bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	7f5b      	ldrb	r3, [r3, #29]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d126      	bne.n	80058bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	7f1b      	ldrb	r3, [r3, #28]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d122      	bne.n	80058bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005876:	2301      	movs	r3, #1
 8005878:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800587a:	e014      	b.n	80058a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4a45      	ldr	r2, [pc, #276]	@ (8005994 <ADC_ConversionStop+0x174>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d90d      	bls.n	80058a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005888:	f043 0210 	orr.w	r2, r3, #16
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005894:	f043 0201 	orr.w	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e074      	b.n	800598a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b0:	2b40      	cmp	r3, #64	@ 0x40
 80058b2:	d1e3      	bne.n	800587c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2240      	movs	r2, #64	@ 0x40
 80058ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d014      	beq.n	80058ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe ff48 	bl	800475c <LL_ADC_REG_IsConversionOngoing>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00c      	beq.n	80058ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe ff05 	bl	80046e6 <LL_ADC_IsDisableOngoing>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe ff24 	bl	8004734 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d014      	beq.n	800591c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe ff57 	bl	80047aa <LL_ADC_INJ_IsConversionOngoing>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe feed 	bl	80046e6 <LL_ADC_IsDisableOngoing>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe ff33 	bl	8004782 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d005      	beq.n	800592e <ADC_ConversionStop+0x10e>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d105      	bne.n	8005934 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005928:	230c      	movs	r3, #12
 800592a:	617b      	str	r3, [r7, #20]
        break;
 800592c:	e005      	b.n	800593a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800592e:	2308      	movs	r3, #8
 8005930:	617b      	str	r3, [r7, #20]
        break;
 8005932:	e002      	b.n	800593a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005934:	2304      	movs	r3, #4
 8005936:	617b      	str	r3, [r7, #20]
        break;
 8005938:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800593a:	f7fe fca1 	bl	8004280 <HAL_GetTick>
 800593e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005940:	e01b      	b.n	800597a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005942:	f7fe fc9d 	bl	8004280 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b05      	cmp	r3, #5
 800594e:	d914      	bls.n	800597a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00d      	beq.n	800597a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005962:	f043 0210 	orr.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e007      	b.n	800598a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1dc      	bne.n	8005942 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	a33fffff 	.word	0xa33fffff

08005998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe fe89 	bl	80046c0 <LL_ADC_IsEnabled>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d176      	bne.n	8005aa2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	4b3c      	ldr	r3, [pc, #240]	@ (8005aac <ADC_Enable+0x114>)
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00d      	beq.n	80059de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c6:	f043 0210 	orr.w	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e062      	b.n	8005aa4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fe44 	bl	8004670 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059f0:	d004      	beq.n	80059fc <ADC_Enable+0x64>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab0 <ADC_Enable+0x118>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <ADC_Enable+0x68>
 80059fc:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab4 <ADC_Enable+0x11c>)
 80059fe:	e000      	b.n	8005a02 <ADC_Enable+0x6a>
 8005a00:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab8 <ADC_Enable+0x120>)
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fc90 	bl	8004328 <LL_ADC_GetCommonPathInternalCh>
 8005a08:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d013      	beq.n	8005a3a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a12:	4b2a      	ldr	r3, [pc, #168]	@ (8005abc <ADC_Enable+0x124>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	4a29      	ldr	r2, [pc, #164]	@ (8005ac0 <ADC_Enable+0x128>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	099b      	lsrs	r3, r3, #6
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	4613      	mov	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a2c:	e002      	b.n	8005a34 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f9      	bne.n	8005a2e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a3a:	f7fe fc21 	bl	8004280 <HAL_GetTick>
 8005a3e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a40:	e028      	b.n	8005a94 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fe3a 	bl	80046c0 <LL_ADC_IsEnabled>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fe0a 	bl	8004670 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a5c:	f7fe fc10 	bl	8004280 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d914      	bls.n	8005a94 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d00d      	beq.n	8005a94 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a7c:	f043 0210 	orr.w	r2, r3, #16
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a88:	f043 0201 	orr.w	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e007      	b.n	8005aa4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d1cf      	bne.n	8005a42 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	8000003f 	.word	0x8000003f
 8005ab0:	50000100 	.word	0x50000100
 8005ab4:	50000300 	.word	0x50000300
 8005ab8:	50000700 	.word	0x50000700
 8005abc:	200003f0 	.word	0x200003f0
 8005ac0:	053e2d63 	.word	0x053e2d63

08005ac4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe fe08 	bl	80046e6 <LL_ADC_IsDisableOngoing>
 8005ad6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe fdef 	bl	80046c0 <LL_ADC_IsEnabled>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d047      	beq.n	8005b78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d144      	bne.n	8005b78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 030d 	and.w	r3, r3, #13
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d10c      	bne.n	8005b16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fdc9 	bl	8004698 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b0e:	f7fe fbb7 	bl	8004280 <HAL_GetTick>
 8005b12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b14:	e029      	b.n	8005b6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1a:	f043 0210 	orr.w	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e023      	b.n	8005b7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b32:	f7fe fba5 	bl	8004280 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d914      	bls.n	8005b6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00d      	beq.n	8005b6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b52:	f043 0210 	orr.w	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b5e:	f043 0201 	orr.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e007      	b.n	8005b7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1dc      	bne.n	8005b32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <LL_ADC_IsEnabled>:
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <LL_ADC_IsEnabled+0x18>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <LL_ADC_IsEnabled+0x1a>
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <LL_ADC_REG_IsConversionOngoing>:
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d101      	bne.n	8005bc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b0a1      	sub	sp, #132	@ 0x84
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e0e7      	b.n	8005dbe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c06:	d102      	bne.n	8005c0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005c08:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c0a:	60bb      	str	r3, [r7, #8]
 8005c0c:	e009      	b.n	8005c22 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a6e      	ldr	r2, [pc, #440]	@ (8005dcc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d102      	bne.n	8005c1e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005c18:	4b6d      	ldr	r3, [pc, #436]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	e001      	b.n	8005c22 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10b      	bne.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2c:	f043 0220 	orr.w	r2, r3, #32
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0be      	b.n	8005dbe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff ffb0 	bl	8005ba8 <LL_ADC_REG_IsConversionOngoing>
 8005c48:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff ffaa 	bl	8005ba8 <LL_ADC_REG_IsConversionOngoing>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 80a0 	bne.w	8005d9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f040 809c 	bne.w	8005d9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6c:	d004      	beq.n	8005c78 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a55      	ldr	r2, [pc, #340]	@ (8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005c78:	4b56      	ldr	r3, [pc, #344]	@ (8005dd4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005c7a:	e000      	b.n	8005c7e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005c7c:	4b56      	ldr	r3, [pc, #344]	@ (8005dd8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005c7e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d04b      	beq.n	8005d20 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c9a:	035b      	lsls	r3, r3, #13
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ca2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cac:	d004      	beq.n	8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a45      	ldr	r2, [pc, #276]	@ (8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d10f      	bne.n	8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005cb8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005cbc:	f7ff ff61 	bl	8005b82 <LL_ADC_IsEnabled>
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	4841      	ldr	r0, [pc, #260]	@ (8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005cc4:	f7ff ff5d 	bl	8005b82 <LL_ADC_IsEnabled>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	4323      	orrs	r3, r4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bf0c      	ite	eq
 8005cd0:	2301      	moveq	r3, #1
 8005cd2:	2300      	movne	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e012      	b.n	8005cfe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005cd8:	483c      	ldr	r0, [pc, #240]	@ (8005dcc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005cda:	f7ff ff52 	bl	8005b82 <LL_ADC_IsEnabled>
 8005cde:	4604      	mov	r4, r0
 8005ce0:	483b      	ldr	r0, [pc, #236]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005ce2:	f7ff ff4e 	bl	8005b82 <LL_ADC_IsEnabled>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	431c      	orrs	r4, r3
 8005cea:	483c      	ldr	r0, [pc, #240]	@ (8005ddc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005cec:	f7ff ff49 	bl	8005b82 <LL_ADC_IsEnabled>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4323      	orrs	r3, r4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bf0c      	ite	eq
 8005cf8:	2301      	moveq	r3, #1
 8005cfa:	2300      	movne	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d056      	beq.n	8005db0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005d02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d0a:	f023 030f 	bic.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	6811      	ldr	r1, [r2, #0]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	6892      	ldr	r2, [r2, #8]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d1c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d1e:	e047      	b.n	8005db0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d2a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d34:	d004      	beq.n	8005d40 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a23      	ldr	r2, [pc, #140]	@ (8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10f      	bne.n	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005d40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d44:	f7ff ff1d 	bl	8005b82 <LL_ADC_IsEnabled>
 8005d48:	4604      	mov	r4, r0
 8005d4a:	481f      	ldr	r0, [pc, #124]	@ (8005dc8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d4c:	f7ff ff19 	bl	8005b82 <LL_ADC_IsEnabled>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4323      	orrs	r3, r4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bf0c      	ite	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	e012      	b.n	8005d86 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005d60:	481a      	ldr	r0, [pc, #104]	@ (8005dcc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005d62:	f7ff ff0e 	bl	8005b82 <LL_ADC_IsEnabled>
 8005d66:	4604      	mov	r4, r0
 8005d68:	4819      	ldr	r0, [pc, #100]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005d6a:	f7ff ff0a 	bl	8005b82 <LL_ADC_IsEnabled>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	431c      	orrs	r4, r3
 8005d72:	481a      	ldr	r0, [pc, #104]	@ (8005ddc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005d74:	f7ff ff05 	bl	8005b82 <LL_ADC_IsEnabled>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4323      	orrs	r3, r4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bf0c      	ite	eq
 8005d80:	2301      	moveq	r3, #1
 8005d82:	2300      	movne	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d012      	beq.n	8005db0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d92:	f023 030f 	bic.w	r3, r3, #15
 8005d96:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005d98:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d9a:	e009      	b.n	8005db0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da0:	f043 0220 	orr.w	r2, r3, #32
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005dae:	e000      	b.n	8005db2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005db0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005dba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3784      	adds	r7, #132	@ 0x84
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd90      	pop	{r4, r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	50000100 	.word	0x50000100
 8005dcc:	50000400 	.word	0x50000400
 8005dd0:	50000500 	.word	0x50000500
 8005dd4:	50000300 	.word	0x50000300
 8005dd8:	50000700 	.word	0x50000700
 8005ddc:	50000600 	.word	0x50000600

08005de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005df0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <__NVIC_SetPriorityGrouping+0x44>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e12:	4a04      	ldr	r2, [pc, #16]	@ (8005e24 <__NVIC_SetPriorityGrouping+0x44>)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	60d3      	str	r3, [r2, #12]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	e000ed00 	.word	0xe000ed00

08005e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e2c:	4b04      	ldr	r3, [pc, #16]	@ (8005e40 <__NVIC_GetPriorityGrouping+0x18>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	0a1b      	lsrs	r3, r3, #8
 8005e32:	f003 0307 	and.w	r3, r3, #7
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	e000ed00 	.word	0xe000ed00

08005e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	db0b      	blt.n	8005e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	f003 021f 	and.w	r2, r3, #31
 8005e5c:	4907      	ldr	r1, [pc, #28]	@ (8005e7c <__NVIC_EnableIRQ+0x38>)
 8005e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2001      	movs	r0, #1
 8005e66:	fa00 f202 	lsl.w	r2, r0, r2
 8005e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	e000e100 	.word	0xe000e100

08005e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	6039      	str	r1, [r7, #0]
 8005e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	db0a      	blt.n	8005eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	490c      	ldr	r1, [pc, #48]	@ (8005ecc <__NVIC_SetPriority+0x4c>)
 8005e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9e:	0112      	lsls	r2, r2, #4
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ea8:	e00a      	b.n	8005ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	4908      	ldr	r1, [pc, #32]	@ (8005ed0 <__NVIC_SetPriority+0x50>)
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	3b04      	subs	r3, #4
 8005eb8:	0112      	lsls	r2, r2, #4
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	761a      	strb	r2, [r3, #24]
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	e000e100 	.word	0xe000e100
 8005ed0:	e000ed00 	.word	0xe000ed00

08005ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b089      	sub	sp, #36	@ 0x24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f1c3 0307 	rsb	r3, r3, #7
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	bf28      	it	cs
 8005ef2:	2304      	movcs	r3, #4
 8005ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	2b06      	cmp	r3, #6
 8005efc:	d902      	bls.n	8005f04 <NVIC_EncodePriority+0x30>
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3b03      	subs	r3, #3
 8005f02:	e000      	b.n	8005f06 <NVIC_EncodePriority+0x32>
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	43da      	mvns	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	401a      	ands	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	43d9      	mvns	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f2c:	4313      	orrs	r3, r2
         );
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3724      	adds	r7, #36	@ 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f4c:	d301      	bcc.n	8005f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e00f      	b.n	8005f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f52:	4a0a      	ldr	r2, [pc, #40]	@ (8005f7c <SysTick_Config+0x40>)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f5a:	210f      	movs	r1, #15
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	f7ff ff8e 	bl	8005e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f64:	4b05      	ldr	r3, [pc, #20]	@ (8005f7c <SysTick_Config+0x40>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f6a:	4b04      	ldr	r3, [pc, #16]	@ (8005f7c <SysTick_Config+0x40>)
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	e000e010 	.word	0xe000e010

08005f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ff29 	bl	8005de0 <__NVIC_SetPriorityGrouping>
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fa4:	f7ff ff40 	bl	8005e28 <__NVIC_GetPriorityGrouping>
 8005fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	6978      	ldr	r0, [r7, #20]
 8005fb0:	f7ff ff90 	bl	8005ed4 <NVIC_EncodePriority>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff ff5f 	bl	8005e80 <__NVIC_SetPriority>
}
 8005fc2:	bf00      	nop
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ff33 	bl	8005e44 <__NVIC_EnableIRQ>
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff ffa4 	bl	8005f3c <SysTick_Config>
 8005ff4:	4603      	mov	r3, r0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e014      	b.n	800603a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	791b      	ldrb	r3, [r3, #4]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d105      	bne.n	8006026 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fb fc2b 	bl	800187c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e056      	b.n	8006106 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	795b      	ldrb	r3, [r3, #5]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_DAC_Start+0x20>
 8006060:	2302      	movs	r3, #2
 8006062:	e050      	b.n	8006106 <HAL_DAC_Start+0xc2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6819      	ldr	r1, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2201      	movs	r2, #1
 800607e:	409a      	lsls	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006088:	4b22      	ldr	r3, [pc, #136]	@ (8006114 <HAL_DAC_Start+0xd0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	099b      	lsrs	r3, r3, #6
 800608e:	4a22      	ldr	r2, [pc, #136]	@ (8006118 <HAL_DAC_Start+0xd4>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	099b      	lsrs	r3, r3, #6
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800609a:	e002      	b.n	80060a2 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3b01      	subs	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f9      	bne.n	800609c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10f      	bne.n	80060ce <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d11d      	bne.n	80060f8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	e014      	b.n	80060f8 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2102      	movs	r1, #2
 80060e0:	fa01 f303 	lsl.w	r3, r1, r3
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d107      	bne.n	80060f8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0202 	orr.w	r2, r2, #2
 80060f6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	200003f0 	.word	0x200003f0
 8006118:	053e2d63 	.word	0x053e2d63

0800611c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e018      	b.n	800616a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4413      	add	r3, r2
 8006150:	3308      	adds	r3, #8
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e004      	b.n	8006160 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4413      	add	r3, r2
 800615c:	3314      	adds	r3, #20
 800615e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	461a      	mov	r2, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	@ 0x28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_DAC_ConfigChannel+0x1c>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e1a1      	b.n	80064dc <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	795b      	ldrb	r3, [r3, #5]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_DAC_ConfigChannel+0x32>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e198      	b.n	80064dc <HAL_DAC_ConfigChannel+0x364>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2202      	movs	r2, #2
 80061b4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d17a      	bne.n	80062b4 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80061be:	f7fe f85f 	bl	8004280 <HAL_GetTick>
 80061c2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d13d      	bne.n	8006246 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061ca:	e018      	b.n	80061fe <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80061cc:	f7fe f858 	bl	8004280 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d911      	bls.n	80061fe <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f043 0208 	orr.w	r2, r3, #8
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2203      	movs	r2, #3
 80061f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e16e      	b.n	80064dc <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1df      	bne.n	80061cc <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006214:	641a      	str	r2, [r3, #64]	@ 0x40
 8006216:	e020      	b.n	800625a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006218:	f7fe f832 	bl	8004280 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	d90f      	bls.n	8006246 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800622c:	2b00      	cmp	r3, #0
 800622e:	da0a      	bge.n	8006246 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f043 0208 	orr.w	r2, r3, #8
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2203      	movs	r2, #3
 8006240:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e14a      	b.n	80064dc <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624c:	2b00      	cmp	r3, #0
 800624e:	dbe3      	blt.n	8006218 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006258:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800626a:	fa01 f303 	lsl.w	r3, r1, r3
 800626e:	43db      	mvns	r3, r3
 8006270:	ea02 0103 	and.w	r1, r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	409a      	lsls	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	21ff      	movs	r1, #255	@ 0xff
 8006296:	fa01 f303 	lsl.w	r3, r1, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	ea02 0103 	and.w	r1, r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	409a      	lsls	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d11d      	bne.n	80062f8 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	221f      	movs	r2, #31
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	43db      	mvns	r3, r3
 80062d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d4:	4013      	ands	r3, r2
 80062d6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ec:	4313      	orrs	r3, r2
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2207      	movs	r2, #7
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	43db      	mvns	r3, r3
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	4013      	ands	r3, r2
 8006312:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d102      	bne.n	8006322 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800631c:	2300      	movs	r3, #0
 800631e:	623b      	str	r3, [r7, #32]
 8006320:	e00f      	b.n	8006342 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d102      	bne.n	8006330 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800632a:	2301      	movs	r3, #1
 800632c:	623b      	str	r3, [r7, #32]
 800632e:	e008      	b.n	8006342 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006338:	2301      	movs	r3, #1
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	e001      	b.n	8006342 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800633e:	2300      	movs	r3, #0
 8006340:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	6a3a      	ldr	r2, [r7, #32]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	43db      	mvns	r3, r3
 8006362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006364:	4013      	ands	r3, r2
 8006366:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	791b      	ldrb	r3, [r3, #4]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d102      	bne.n	8006376 <HAL_DAC_ConfigChannel+0x1fe>
 8006370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006374:	e000      	b.n	8006378 <HAL_DAC_ConfigChannel+0x200>
 8006376:	2300      	movs	r3, #0
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	43db      	mvns	r3, r3
 800638e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006390:	4013      	ands	r3, r2
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	795b      	ldrb	r3, [r3, #5]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d102      	bne.n	80063a2 <HAL_DAC_ConfigChannel+0x22a>
 800639c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063a0:	e000      	b.n	80063a4 <HAL_DAC_ConfigChannel+0x22c>
 80063a2:	2300      	movs	r3, #0
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d114      	bne.n	80063e4 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80063ba:	f001 ffc3 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 80063be:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4a48      	ldr	r2, [pc, #288]	@ (80064e4 <HAL_DAC_ConfigChannel+0x36c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d904      	bls.n	80063d2 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d0:	e00f      	b.n	80063f2 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4a44      	ldr	r2, [pc, #272]	@ (80064e8 <HAL_DAC_ConfigChannel+0x370>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d90a      	bls.n	80063f0 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e2:	e006      	b.n	80063f2 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ea:	4313      	orrs	r3, r2
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ee:	e000      	b.n	80063f2 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80063f0:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006400:	4313      	orrs	r3, r2
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6819      	ldr	r1, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	43da      	mvns	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	400a      	ands	r2, r1
 8006428:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	43db      	mvns	r3, r3
 8006442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006444:	4013      	ands	r3, r2
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800645c:	4313      	orrs	r3, r2
 800645e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006466:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6819      	ldr	r1, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	22c0      	movs	r2, #192	@ 0xc0
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43da      	mvns	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	400a      	ands	r2, r1
 8006482:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	089b      	lsrs	r3, r3, #2
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	43db      	mvns	r3, r3
 80064b8:	ea02 0103 	and.w	r1, r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	409a      	lsls	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80064da:	7ffb      	ldrb	r3, [r7, #31]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3728      	adds	r7, #40	@ 0x28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	09896800 	.word	0x09896800
 80064e8:	04c4b400 	.word	0x04c4b400

080064ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e08d      	b.n	800661a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	4b47      	ldr	r3, [pc, #284]	@ (8006624 <HAL_DMA_Init+0x138>)
 8006506:	429a      	cmp	r2, r3
 8006508:	d80f      	bhi.n	800652a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	4b45      	ldr	r3, [pc, #276]	@ (8006628 <HAL_DMA_Init+0x13c>)
 8006512:	4413      	add	r3, r2
 8006514:	4a45      	ldr	r2, [pc, #276]	@ (800662c <HAL_DMA_Init+0x140>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	009a      	lsls	r2, r3, #2
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a42      	ldr	r2, [pc, #264]	@ (8006630 <HAL_DMA_Init+0x144>)
 8006526:	641a      	str	r2, [r3, #64]	@ 0x40
 8006528:	e00e      	b.n	8006548 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	4b40      	ldr	r3, [pc, #256]	@ (8006634 <HAL_DMA_Init+0x148>)
 8006532:	4413      	add	r3, r2
 8006534:	4a3d      	ldr	r2, [pc, #244]	@ (800662c <HAL_DMA_Init+0x140>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	091b      	lsrs	r3, r3, #4
 800653c:	009a      	lsls	r2, r3, #2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a3c      	ldr	r2, [pc, #240]	@ (8006638 <HAL_DMA_Init+0x14c>)
 8006546:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800655e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006562:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800656c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa76 	bl	8006a8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065a8:	d102      	bne.n	80065b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d010      	beq.n	80065f0 <HAL_DMA_Init+0x104>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d80c      	bhi.n	80065f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa96 	bl	8006b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80065ec:	605a      	str	r2, [r3, #4]
 80065ee:	e008      	b.n	8006602 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40020407 	.word	0x40020407
 8006628:	bffdfff8 	.word	0xbffdfff8
 800662c:	cccccccd 	.word	0xcccccccd
 8006630:	40020000 	.word	0x40020000
 8006634:	bffdfbf8 	.word	0xbffdfbf8
 8006638:	40020400 	.word	0x40020400

0800663c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_DMA_Start_IT+0x20>
 8006658:	2302      	movs	r3, #2
 800665a:	e066      	b.n	800672a <HAL_DMA_Start_IT+0xee>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d155      	bne.n	800671c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f9bb 	bl	8006a10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 020e 	orr.w	r2, r2, #14
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e00f      	b.n	80066d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0204 	bic.w	r2, r2, #4
 80066c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 020a 	orr.w	r2, r2, #10
 80066d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006704:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006708:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0201 	orr.w	r2, r2, #1
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e005      	b.n	8006728 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006724:	2302      	movs	r3, #2
 8006726:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d005      	beq.n	8006756 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2204      	movs	r2, #4
 800674e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
 8006754:	e037      	b.n	80067c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 020e 	bic.w	r2, r2, #14
 8006764:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006774:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678a:	f003 021f 	and.w	r2, r3, #31
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	2101      	movs	r1, #1
 8006794:	fa01 f202 	lsl.w	r2, r1, r2
 8006798:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d00d      	beq.n	8006818 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2204      	movs	r2, #4
 8006800:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	73fb      	strb	r3, [r7, #15]
 8006816:	e047      	b.n	80068a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 020e 	bic.w	r2, r2, #14
 8006826:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006842:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006846:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684c:	f003 021f 	and.w	r2, r3, #31
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006854:	2101      	movs	r1, #1
 8006856:	fa01 f202 	lsl.w	r2, r1, r2
 800685a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006864:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00c      	beq.n	8006888 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006878:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800687c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006886:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	4798      	blx	r3
    }
  }
  return status;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2204      	movs	r2, #4
 80068d4:	409a      	lsls	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4013      	ands	r3, r2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d026      	beq.n	800692c <HAL_DMA_IRQHandler+0x7a>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d021      	beq.n	800692c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0204 	bic.w	r2, r2, #4
 8006904:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690a:	f003 021f 	and.w	r2, r3, #31
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	2104      	movs	r1, #4
 8006914:	fa01 f202 	lsl.w	r2, r1, r2
 8006918:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691e:	2b00      	cmp	r3, #0
 8006920:	d071      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800692a:	e06c      	b.n	8006a06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	2202      	movs	r2, #2
 8006936:	409a      	lsls	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d02e      	beq.n	800699e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d029      	beq.n	800699e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10b      	bne.n	8006970 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 020a 	bic.w	r2, r2, #10
 8006966:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006974:	f003 021f 	and.w	r2, r3, #31
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697c:	2102      	movs	r1, #2
 800697e:	fa01 f202 	lsl.w	r2, r1, r2
 8006982:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d038      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800699c:	e033      	b.n	8006a06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2208      	movs	r2, #8
 80069a8:	409a      	lsls	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d02a      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d025      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 020e 	bic.w	r2, r2, #14
 80069ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d0:	f003 021f 	and.w	r2, r3, #31
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	2101      	movs	r1, #1
 80069da:	fa01 f202 	lsl.w	r2, r1, r2
 80069de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
}
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006a38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	f003 021f 	and.w	r2, r3, #31
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a46:	2101      	movs	r1, #1
 8006a48:	fa01 f202 	lsl.w	r2, r1, r2
 8006a4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b10      	cmp	r3, #16
 8006a5c:	d108      	bne.n	8006a70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a6e:	e007      	b.n	8006a80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	60da      	str	r2, [r3, #12]
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4b16      	ldr	r3, [pc, #88]	@ (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d802      	bhi.n	8006aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006aa0:	4b15      	ldr	r3, [pc, #84]	@ (8006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e001      	b.n	8006aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006aa6:	4b15      	ldr	r3, [pc, #84]	@ (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006aa8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	3b08      	subs	r3, #8
 8006ab6:	4a12      	ldr	r2, [pc, #72]	@ (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac4:	089b      	lsrs	r3, r3, #2
 8006ac6:	009a      	lsls	r2, r3, #2
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	4413      	add	r3, r2
 8006acc:	461a      	mov	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2201      	movs	r2, #1
 8006ae0:	409a      	lsls	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40020407 	.word	0x40020407
 8006af8:	40020800 	.word	0x40020800
 8006afc:	40020820 	.word	0x40020820
 8006b00:	cccccccd 	.word	0xcccccccd
 8006b04:	40020880 	.word	0x40020880

08006b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	461a      	mov	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a08      	ldr	r2, [pc, #32]	@ (8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b2a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2201      	movs	r2, #1
 8006b36:	409a      	lsls	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006b3c:	bf00      	nop
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	1000823f 	.word	0x1000823f
 8006b4c:	40020940 	.word	0x40020940

08006b50 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e147      	b.n	8006df2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fa ff4c 	bl	8001a14 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0210 	bic.w	r2, r2, #16
 8006b8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b8c:	f7fd fb78 	bl	8004280 <HAL_GetTick>
 8006b90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b92:	e012      	b.n	8006bba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b94:	f7fd fb74 	bl	8004280 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b0a      	cmp	r3, #10
 8006ba0:	d90b      	bls.n	8006bba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba6:	f043 0201 	orr.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e11b      	b.n	8006df2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d0e5      	beq.n	8006b94 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bd8:	f7fd fb52 	bl	8004280 <HAL_GetTick>
 8006bdc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006bde:	e012      	b.n	8006c06 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006be0:	f7fd fb4e 	bl	8004280 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b0a      	cmp	r3, #10
 8006bec:	d90b      	bls.n	8006c06 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf2:	f043 0201 	orr.w	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e0f5      	b.n	8006df2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0e5      	beq.n	8006be0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0202 	orr.w	r2, r2, #2
 8006c22:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a74      	ldr	r2, [pc, #464]	@ (8006dfc <HAL_FDCAN_Init+0x2ac>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d103      	bne.n	8006c36 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006c2e:	4a74      	ldr	r2, [pc, #464]	@ (8006e00 <HAL_FDCAN_Init+0x2b0>)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7c1b      	ldrb	r3, [r3, #16]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d108      	bne.n	8006c50 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c4c:	619a      	str	r2, [r3, #24]
 8006c4e:	e007      	b.n	8006c60 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	7c5b      	ldrb	r3, [r3, #17]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d108      	bne.n	8006c7a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c76:	619a      	str	r2, [r3, #24]
 8006c78:	e007      	b.n	8006c8a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	699a      	ldr	r2, [r3, #24]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c88:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7c9b      	ldrb	r3, [r3, #18]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d108      	bne.n	8006ca4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699a      	ldr	r2, [r3, #24]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ca0:	619a      	str	r2, [r3, #24]
 8006ca2:	e007      	b.n	8006cb4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cb2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699a      	ldr	r2, [r3, #24]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006cd8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0210 	bic.w	r2, r2, #16
 8006ce8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d108      	bne.n	8006d04 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699a      	ldr	r2, [r3, #24]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0204 	orr.w	r2, r2, #4
 8006d00:	619a      	str	r2, [r3, #24]
 8006d02:	e02c      	b.n	8006d5e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d028      	beq.n	8006d5e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d01c      	beq.n	8006d4e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d22:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0210 	orr.w	r2, r2, #16
 8006d32:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d110      	bne.n	8006d5e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0220 	orr.w	r2, r2, #32
 8006d4a:	619a      	str	r2, [r3, #24]
 8006d4c:	e007      	b.n	8006d5e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0220 	orr.w	r2, r2, #32
 8006d5c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d6e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d76:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d86:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d88:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d92:	d115      	bne.n	8006dc0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d98:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006da2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da8:	3b01      	subs	r3, #1
 8006daa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006dac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db4:	3b01      	subs	r3, #1
 8006db6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006dbc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006dbe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 faa0 	bl	800731c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40006400 	.word	0x40006400
 8006e00:	40006500 	.word	0x40006500

08006e04 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e14:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d002      	beq.n	8006e22 <HAL_FDCAN_ConfigFilter+0x1e>
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d13d      	bne.n	8006e9e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d119      	bne.n	8006e5e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e36:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006e3e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e01d      	b.n	8006e9a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	075a      	lsls	r2, r3, #29
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	079a      	lsls	r2, r3, #30
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	3304      	adds	r3, #4
 8006e92:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e006      	b.n	8006eac <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea2:	f043 0202 	orr.w	r2, r3, #2
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
  }
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d12c      	bne.n	8006f2a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d007      	beq.n	8006ef0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e023      	b.n	8006f38 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006ef8:	0c1b      	lsrs	r3, r3, #16
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fa74 	bl	80073f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2101      	movs	r1, #1
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	fa01 f202 	lsl.w	r2, r1, r2
 8006f18:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	409a      	lsls	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e006      	b.n	8006f38 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f2e:	f043 0208 	orr.w	r2, r3, #8
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
  }
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b08b      	sub	sp, #44	@ 0x2c
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f58:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006f5a:	7efb      	ldrb	r3, [r7, #27]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	f040 80e8 	bne.w	8007132 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b40      	cmp	r3, #64	@ 0x40
 8006f66:	d137      	bne.n	8006fd8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d107      	bne.n	8006f88 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0db      	b.n	8007140 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f90:	0e1b      	lsrs	r3, r3, #24
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d10a      	bne.n	8006fb0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fa2:	0a5b      	lsrs	r3, r3, #9
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006fac:	2301      	movs	r3, #1
 8006fae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	4413      	add	r3, r2
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	440b      	add	r3, r1
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd6:	e036      	b.n	8007046 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d107      	bne.n	8006ff8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e0a3      	b.n	8007140 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007000:	0e1b      	lsrs	r3, r3, #24
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d10a      	bne.n	8007020 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800701c:	2301      	movs	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007028:	0a1b      	lsrs	r3, r3, #8
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	4413      	add	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	440b      	add	r3, r1
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d107      	bne.n	800706a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	0c9b      	lsrs	r3, r3, #18
 8007060:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e005      	b.n	8007076 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	3304      	adds	r3, #4
 8007092:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	b29a      	uxth	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	0c1b      	lsrs	r3, r3, #16
 80070a4:	f003 020f 	and.w	r2, r3, #15
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	0e1b      	lsrs	r3, r3, #24
 80070ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	0fda      	lsrs	r2, r3, #31
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	3304      	adds	r3, #4
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80070e6:	2300      	movs	r3, #0
 80070e8:	623b      	str	r3, [r7, #32]
 80070ea:	e00a      	b.n	8007102 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	441a      	add	r2, r3
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	440b      	add	r3, r1
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	3301      	adds	r3, #1
 8007100:	623b      	str	r3, [r7, #32]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	4a11      	ldr	r2, [pc, #68]	@ (800714c <HAL_FDCAN_GetRxMessage+0x20c>)
 8007108:	5cd3      	ldrb	r3, [r2, r3]
 800710a:	461a      	mov	r2, r3
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	4293      	cmp	r3, r2
 8007110:	d3ec      	bcc.n	80070ec <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b40      	cmp	r3, #64	@ 0x40
 8007116:	d105      	bne.n	8007124 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8007122:	e004      	b.n	800712e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	e006      	b.n	8007140 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007136:	f043 0208 	orr.w	r2, r3, #8
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	372c      	adds	r7, #44	@ 0x2c
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	0800d0dc 	.word	0x0800d0dc

08007150 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007162:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d003      	beq.n	8007172 <HAL_FDCAN_ActivateNotification+0x22>
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	2b02      	cmp	r3, #2
 800716e:	f040 80c8 	bne.w	8007302 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007178:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d03b      	beq.n	8007206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d031      	beq.n	8007206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d027      	beq.n	8007206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01d      	beq.n	8007206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d013      	beq.n	8007206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00c      	beq.n	8007216 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	d107      	bne.n	8007216 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0201 	orr.w	r2, r2, #1
 8007214:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d13b      	bne.n	80072a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007230:	2b00      	cmp	r3, #0
 8007232:	d004      	beq.n	800723e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d131      	bne.n	80072a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d127      	bne.n	80072a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d11d      	bne.n	80072a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800726c:	2b00      	cmp	r3, #0
 800726e:	d004      	beq.n	800727a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f003 0310 	and.w	r3, r3, #16
 8007276:	2b00      	cmp	r3, #0
 8007278:	d113      	bne.n	80072a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007280:	2b00      	cmp	r3, #0
 8007282:	d004      	beq.n	800728e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00c      	beq.n	80072b2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0202 	orr.w	r2, r2, #2
 80072b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d009      	beq.n	80072d0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e006      	b.n	8007310 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007306:	f043 0202 	orr.w	r2, r3, #2
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
  }
}
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007324:	4b30      	ldr	r3, [pc, #192]	@ (80073e8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8007326:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a2f      	ldr	r2, [pc, #188]	@ (80073ec <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d103      	bne.n	800733a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007338:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a2c      	ldr	r2, [pc, #176]	@ (80073f0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d103      	bne.n	800734c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800734a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800735a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007362:	041a      	lsls	r2, r3, #16
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007380:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007388:	061a      	lsls	r2, r3, #24
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	e005      	b.n	80073ce <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3304      	adds	r3, #4
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d3f3      	bcc.n	80073c2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	4000a400 	.word	0x4000a400
 80073ec:	40006800 	.word	0x40006800
 80073f0:	40006c00 	.word	0x40006c00

080073f4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	@ 0x24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007412:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800741a:	4313      	orrs	r3, r2
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	e00a      	b.n	8007436 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007428:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800742e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007430:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007434:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007440:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007446:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800744c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007454:	4313      	orrs	r3, r2
 8007456:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	4613      	mov	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	4413      	add	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	440b      	add	r3, r1
 8007468:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	69fa      	ldr	r2, [r7, #28]
 800746e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	3304      	adds	r3, #4
 8007474:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	3304      	adds	r3, #4
 8007480:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	e020      	b.n	80074ca <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	3303      	adds	r3, #3
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	4413      	add	r3, r2
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	3302      	adds	r3, #2
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	440b      	add	r3, r1
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074a0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	3301      	adds	r3, #1
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	440b      	add	r3, r1
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80074ae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	440a      	add	r2, r1
 80074b6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80074b8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	3304      	adds	r3, #4
 80074c2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	3304      	adds	r3, #4
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	4a06      	ldr	r2, [pc, #24]	@ (80074e8 <FDCAN_CopyMessageToRAM+0xf4>)
 80074d0:	5cd3      	ldrb	r3, [r2, r3]
 80074d2:	461a      	mov	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d3d6      	bcc.n	8007488 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	3724      	adds	r7, #36	@ 0x24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	0800d0dc 	.word	0x0800d0dc

080074ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80074fa:	e15a      	b.n	80077b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	2101      	movs	r1, #1
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	fa01 f303 	lsl.w	r3, r1, r3
 8007508:	4013      	ands	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 814c 	beq.w	80077ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f003 0303 	and.w	r3, r3, #3
 800751c:	2b01      	cmp	r3, #1
 800751e:	d005      	beq.n	800752c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007528:	2b02      	cmp	r3, #2
 800752a:	d130      	bne.n	800758e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	2203      	movs	r2, #3
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	43db      	mvns	r3, r3
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4013      	ands	r3, r2
 8007542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007562:	2201      	movs	r2, #1
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	fa02 f303 	lsl.w	r3, r2, r3
 800756a:	43db      	mvns	r3, r3
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4013      	ands	r3, r2
 8007570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	091b      	lsrs	r3, r3, #4
 8007578:	f003 0201 	and.w	r2, r3, #1
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b03      	cmp	r3, #3
 8007598:	d017      	beq.n	80075ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	2203      	movs	r2, #3
 80075a6:	fa02 f303 	lsl.w	r3, r2, r3
 80075aa:	43db      	mvns	r3, r3
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4013      	ands	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d123      	bne.n	800761e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	08da      	lsrs	r2, r3, #3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3208      	adds	r2, #8
 80075de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	220f      	movs	r2, #15
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	43db      	mvns	r3, r3
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	4013      	ands	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	08da      	lsrs	r2, r3, #3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3208      	adds	r2, #8
 8007618:	6939      	ldr	r1, [r7, #16]
 800761a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	2203      	movs	r2, #3
 800762a:	fa02 f303 	lsl.w	r3, r2, r3
 800762e:	43db      	mvns	r3, r3
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4013      	ands	r3, r2
 8007634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f003 0203 	and.w	r2, r3, #3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	fa02 f303 	lsl.w	r3, r2, r3
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 80a6 	beq.w	80077ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007660:	4b5b      	ldr	r3, [pc, #364]	@ (80077d0 <HAL_GPIO_Init+0x2e4>)
 8007662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007664:	4a5a      	ldr	r2, [pc, #360]	@ (80077d0 <HAL_GPIO_Init+0x2e4>)
 8007666:	f043 0301 	orr.w	r3, r3, #1
 800766a:	6613      	str	r3, [r2, #96]	@ 0x60
 800766c:	4b58      	ldr	r3, [pc, #352]	@ (80077d0 <HAL_GPIO_Init+0x2e4>)
 800766e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
 8007676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007678:	4a56      	ldr	r2, [pc, #344]	@ (80077d4 <HAL_GPIO_Init+0x2e8>)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	089b      	lsrs	r3, r3, #2
 800767e:	3302      	adds	r3, #2
 8007680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	220f      	movs	r2, #15
 8007690:	fa02 f303 	lsl.w	r3, r2, r3
 8007694:	43db      	mvns	r3, r3
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4013      	ands	r3, r2
 800769a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80076a2:	d01f      	beq.n	80076e4 <HAL_GPIO_Init+0x1f8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a4c      	ldr	r2, [pc, #304]	@ (80077d8 <HAL_GPIO_Init+0x2ec>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d019      	beq.n	80076e0 <HAL_GPIO_Init+0x1f4>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a4b      	ldr	r2, [pc, #300]	@ (80077dc <HAL_GPIO_Init+0x2f0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d013      	beq.n	80076dc <HAL_GPIO_Init+0x1f0>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a4a      	ldr	r2, [pc, #296]	@ (80077e0 <HAL_GPIO_Init+0x2f4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00d      	beq.n	80076d8 <HAL_GPIO_Init+0x1ec>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a49      	ldr	r2, [pc, #292]	@ (80077e4 <HAL_GPIO_Init+0x2f8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d007      	beq.n	80076d4 <HAL_GPIO_Init+0x1e8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a48      	ldr	r2, [pc, #288]	@ (80077e8 <HAL_GPIO_Init+0x2fc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d101      	bne.n	80076d0 <HAL_GPIO_Init+0x1e4>
 80076cc:	2305      	movs	r3, #5
 80076ce:	e00a      	b.n	80076e6 <HAL_GPIO_Init+0x1fa>
 80076d0:	2306      	movs	r3, #6
 80076d2:	e008      	b.n	80076e6 <HAL_GPIO_Init+0x1fa>
 80076d4:	2304      	movs	r3, #4
 80076d6:	e006      	b.n	80076e6 <HAL_GPIO_Init+0x1fa>
 80076d8:	2303      	movs	r3, #3
 80076da:	e004      	b.n	80076e6 <HAL_GPIO_Init+0x1fa>
 80076dc:	2302      	movs	r3, #2
 80076de:	e002      	b.n	80076e6 <HAL_GPIO_Init+0x1fa>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <HAL_GPIO_Init+0x1fa>
 80076e4:	2300      	movs	r3, #0
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	f002 0203 	and.w	r2, r2, #3
 80076ec:	0092      	lsls	r2, r2, #2
 80076ee:	4093      	lsls	r3, r2
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076f6:	4937      	ldr	r1, [pc, #220]	@ (80077d4 <HAL_GPIO_Init+0x2e8>)
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	089b      	lsrs	r3, r3, #2
 80076fc:	3302      	adds	r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007704:	4b39      	ldr	r3, [pc, #228]	@ (80077ec <HAL_GPIO_Init+0x300>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	43db      	mvns	r3, r3
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4013      	ands	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007728:	4a30      	ldr	r2, [pc, #192]	@ (80077ec <HAL_GPIO_Init+0x300>)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800772e:	4b2f      	ldr	r3, [pc, #188]	@ (80077ec <HAL_GPIO_Init+0x300>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	43db      	mvns	r3, r3
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4013      	ands	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007752:	4a26      	ldr	r2, [pc, #152]	@ (80077ec <HAL_GPIO_Init+0x300>)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007758:	4b24      	ldr	r3, [pc, #144]	@ (80077ec <HAL_GPIO_Init+0x300>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	43db      	mvns	r3, r3
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4013      	ands	r3, r2
 8007766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800777c:	4a1b      	ldr	r2, [pc, #108]	@ (80077ec <HAL_GPIO_Init+0x300>)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007782:	4b1a      	ldr	r3, [pc, #104]	@ (80077ec <HAL_GPIO_Init+0x300>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	43db      	mvns	r3, r3
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4013      	ands	r3, r2
 8007790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80077a6:	4a11      	ldr	r2, [pc, #68]	@ (80077ec <HAL_GPIO_Init+0x300>)
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	3301      	adds	r3, #1
 80077b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	fa22 f303 	lsr.w	r3, r2, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f47f ae9d 	bne.w	80074fc <HAL_GPIO_Init+0x10>
  }
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	40021000 	.word	0x40021000
 80077d4:	40010000 	.word	0x40010000
 80077d8:	48000400 	.word	0x48000400
 80077dc:	48000800 	.word	0x48000800
 80077e0:	48000c00 	.word	0x48000c00
 80077e4:	48001000 	.word	0x48001000
 80077e8:	48001400 	.word	0x48001400
 80077ec:	40010400 	.word	0x40010400

080077f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691a      	ldr	r2, [r3, #16]
 8007800:	887b      	ldrh	r3, [r7, #2]
 8007802:	4013      	ands	r3, r2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
 800780c:	e001      	b.n	8007812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	807b      	strh	r3, [r7, #2]
 800782c:	4613      	mov	r3, r2
 800782e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007830:	787b      	ldrb	r3, [r7, #1]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007836:	887a      	ldrh	r2, [r7, #2]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800783c:	e002      	b.n	8007844 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800783e:	887a      	ldrh	r2, [r7, #2]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800785a:	4b08      	ldr	r3, [pc, #32]	@ (800787c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800785c:	695a      	ldr	r2, [r3, #20]
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d006      	beq.n	8007874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007866:	4a05      	ldr	r2, [pc, #20]	@ (800787c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800786c:	88fb      	ldrh	r3, [r7, #6]
 800786e:	4618      	mov	r0, r3
 8007870:	f7fa fb18 	bl	8001ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40010400 	.word	0x40010400

08007880 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d141      	bne.n	8007912 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800788e:	4b4b      	ldr	r3, [pc, #300]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789a:	d131      	bne.n	8007900 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800789c:	4b47      	ldr	r3, [pc, #284]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800789e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a2:	4a46      	ldr	r2, [pc, #280]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078ac:	4b43      	ldr	r3, [pc, #268]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80078b4:	4a41      	ldr	r2, [pc, #260]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078bc:	4b40      	ldr	r3, [pc, #256]	@ (80079c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2232      	movs	r2, #50	@ 0x32
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
 80078c6:	4a3f      	ldr	r2, [pc, #252]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	0c9b      	lsrs	r3, r3, #18
 80078ce:	3301      	adds	r3, #1
 80078d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078d2:	e002      	b.n	80078da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078da:	4b38      	ldr	r3, [pc, #224]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e6:	d102      	bne.n	80078ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f2      	bne.n	80078d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078ee:	4b33      	ldr	r3, [pc, #204]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078fa:	d158      	bne.n	80079ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e057      	b.n	80079b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007900:	4b2e      	ldr	r3, [pc, #184]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007906:	4a2d      	ldr	r2, [pc, #180]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800790c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007910:	e04d      	b.n	80079ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007918:	d141      	bne.n	800799e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800791a:	4b28      	ldr	r3, [pc, #160]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007926:	d131      	bne.n	800798c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007928:	4b24      	ldr	r3, [pc, #144]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800792a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800792e:	4a23      	ldr	r2, [pc, #140]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007938:	4b20      	ldr	r3, [pc, #128]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007940:	4a1e      	ldr	r2, [pc, #120]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007946:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007948:	4b1d      	ldr	r3, [pc, #116]	@ (80079c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2232      	movs	r2, #50	@ 0x32
 800794e:	fb02 f303 	mul.w	r3, r2, r3
 8007952:	4a1c      	ldr	r2, [pc, #112]	@ (80079c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007954:	fba2 2303 	umull	r2, r3, r2, r3
 8007958:	0c9b      	lsrs	r3, r3, #18
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800795e:	e002      	b.n	8007966 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3b01      	subs	r3, #1
 8007964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007966:	4b15      	ldr	r3, [pc, #84]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800796e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007972:	d102      	bne.n	800797a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f2      	bne.n	8007960 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800797a:	4b10      	ldr	r3, [pc, #64]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007986:	d112      	bne.n	80079ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e011      	b.n	80079b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800798c:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007992:	4a0a      	ldr	r2, [pc, #40]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007998:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800799c:	e007      	b.n	80079ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800799e:	4b07      	ldr	r3, [pc, #28]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80079a6:	4a05      	ldr	r2, [pc, #20]	@ (80079bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	40007000 	.word	0x40007000
 80079c0:	200003f0 	.word	0x200003f0
 80079c4:	431bde83 	.word	0x431bde83

080079c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80079cc:	4b05      	ldr	r3, [pc, #20]	@ (80079e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	4a04      	ldr	r2, [pc, #16]	@ (80079e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80079d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079d6:	6093      	str	r3, [r2, #8]
}
 80079d8:	bf00      	nop
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40007000 	.word	0x40007000

080079e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e2fe      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d075      	beq.n	8007af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a06:	4b97      	ldr	r3, [pc, #604]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 030c 	and.w	r3, r3, #12
 8007a0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a10:	4b94      	ldr	r3, [pc, #592]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	2b0c      	cmp	r3, #12
 8007a1e:	d102      	bne.n	8007a26 <HAL_RCC_OscConfig+0x3e>
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d002      	beq.n	8007a2c <HAL_RCC_OscConfig+0x44>
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d10b      	bne.n	8007a44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a2c:	4b8d      	ldr	r3, [pc, #564]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d05b      	beq.n	8007af0 <HAL_RCC_OscConfig+0x108>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d157      	bne.n	8007af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e2d9      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a4c:	d106      	bne.n	8007a5c <HAL_RCC_OscConfig+0x74>
 8007a4e:	4b85      	ldr	r3, [pc, #532]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a84      	ldr	r2, [pc, #528]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e01d      	b.n	8007a98 <HAL_RCC_OscConfig+0xb0>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a64:	d10c      	bne.n	8007a80 <HAL_RCC_OscConfig+0x98>
 8007a66:	4b7f      	ldr	r3, [pc, #508]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a7e      	ldr	r2, [pc, #504]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	4b7c      	ldr	r3, [pc, #496]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a7b      	ldr	r2, [pc, #492]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	e00b      	b.n	8007a98 <HAL_RCC_OscConfig+0xb0>
 8007a80:	4b78      	ldr	r3, [pc, #480]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a77      	ldr	r2, [pc, #476]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	4b75      	ldr	r3, [pc, #468]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a74      	ldr	r2, [pc, #464]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d013      	beq.n	8007ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa0:	f7fc fbee 	bl	8004280 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aa8:	f7fc fbea 	bl	8004280 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b64      	cmp	r3, #100	@ 0x64
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e29e      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aba:	4b6a      	ldr	r3, [pc, #424]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <HAL_RCC_OscConfig+0xc0>
 8007ac6:	e014      	b.n	8007af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac8:	f7fc fbda 	bl	8004280 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad0:	f7fc fbd6 	bl	8004280 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	@ 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e28a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ae2:	4b60      	ldr	r3, [pc, #384]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCC_OscConfig+0xe8>
 8007aee:	e000      	b.n	8007af2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d075      	beq.n	8007bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007afe:	4b59      	ldr	r3, [pc, #356]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 030c 	and.w	r3, r3, #12
 8007b06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b08:	4b56      	ldr	r3, [pc, #344]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b0c      	cmp	r3, #12
 8007b16:	d102      	bne.n	8007b1e <HAL_RCC_OscConfig+0x136>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d002      	beq.n	8007b24 <HAL_RCC_OscConfig+0x13c>
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d11f      	bne.n	8007b64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b24:	4b4f      	ldr	r3, [pc, #316]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <HAL_RCC_OscConfig+0x154>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e25d      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b3c:	4b49      	ldr	r3, [pc, #292]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	061b      	lsls	r3, r3, #24
 8007b4a:	4946      	ldr	r1, [pc, #280]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b50:	4b45      	ldr	r3, [pc, #276]	@ (8007c68 <HAL_RCC_OscConfig+0x280>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fc fb47 	bl	80041e8 <HAL_InitTick>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d043      	beq.n	8007be8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e249      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d023      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a3c      	ldr	r2, [pc, #240]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b78:	f7fc fb82 	bl	8004280 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b7e:	e008      	b.n	8007b92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b80:	f7fc fb7e 	bl	8004280 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d901      	bls.n	8007b92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e232      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b92:	4b34      	ldr	r3, [pc, #208]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0f0      	beq.n	8007b80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b9e:	4b31      	ldr	r3, [pc, #196]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	061b      	lsls	r3, r3, #24
 8007bac:	492d      	ldr	r1, [pc, #180]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	604b      	str	r3, [r1, #4]
 8007bb2:	e01a      	b.n	8007bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007bba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fc fb5e 	bl	8004280 <HAL_GetTick>
 8007bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bc8:	f7fc fb5a 	bl	8004280 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e20e      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bda:	4b22      	ldr	r3, [pc, #136]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f0      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x1e0>
 8007be6:	e000      	b.n	8007bea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007be8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0308 	and.w	r3, r3, #8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d041      	beq.n	8007c7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01c      	beq.n	8007c38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bfe:	4b19      	ldr	r3, [pc, #100]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c04:	4a17      	ldr	r2, [pc, #92]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0e:	f7fc fb37 	bl	8004280 <HAL_GetTick>
 8007c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c16:	f7fc fb33 	bl	8004280 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e1e7      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c28:	4b0e      	ldr	r3, [pc, #56]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0ef      	beq.n	8007c16 <HAL_RCC_OscConfig+0x22e>
 8007c36:	e020      	b.n	8007c7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c38:	4b0a      	ldr	r3, [pc, #40]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c3e:	4a09      	ldr	r2, [pc, #36]	@ (8007c64 <HAL_RCC_OscConfig+0x27c>)
 8007c40:	f023 0301 	bic.w	r3, r3, #1
 8007c44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c48:	f7fc fb1a 	bl	8004280 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c4e:	e00d      	b.n	8007c6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c50:	f7fc fb16 	bl	8004280 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d906      	bls.n	8007c6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e1ca      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
 8007c62:	bf00      	nop
 8007c64:	40021000 	.word	0x40021000
 8007c68:	200003f4 	.word	0x200003f4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1ea      	bne.n	8007c50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80a6 	beq.w	8007dd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c8c:	4b84      	ldr	r3, [pc, #528]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_RCC_OscConfig+0x2b4>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <HAL_RCC_OscConfig+0x2b6>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00d      	beq.n	8007cbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cae:	4b7c      	ldr	r3, [pc, #496]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cbe:	4b79      	ldr	r3, [pc, #484]	@ (8007ea4 <HAL_RCC_OscConfig+0x4bc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d118      	bne.n	8007cfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cca:	4b76      	ldr	r3, [pc, #472]	@ (8007ea4 <HAL_RCC_OscConfig+0x4bc>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a75      	ldr	r2, [pc, #468]	@ (8007ea4 <HAL_RCC_OscConfig+0x4bc>)
 8007cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cd6:	f7fc fad3 	bl	8004280 <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cdc:	e008      	b.n	8007cf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cde:	f7fc facf 	bl	8004280 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d901      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e183      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8007ea4 <HAL_RCC_OscConfig+0x4bc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0f0      	beq.n	8007cde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d108      	bne.n	8007d16 <HAL_RCC_OscConfig+0x32e>
 8007d04:	4b66      	ldr	r3, [pc, #408]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d0a:	4a65      	ldr	r2, [pc, #404]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d0c:	f043 0301 	orr.w	r3, r3, #1
 8007d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d14:	e024      	b.n	8007d60 <HAL_RCC_OscConfig+0x378>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	d110      	bne.n	8007d40 <HAL_RCC_OscConfig+0x358>
 8007d1e:	4b60      	ldr	r3, [pc, #384]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d24:	4a5e      	ldr	r2, [pc, #376]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d26:	f043 0304 	orr.w	r3, r3, #4
 8007d2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d34:	4a5a      	ldr	r2, [pc, #360]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d3e:	e00f      	b.n	8007d60 <HAL_RCC_OscConfig+0x378>
 8007d40:	4b57      	ldr	r3, [pc, #348]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d46:	4a56      	ldr	r2, [pc, #344]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007d50:	4b53      	ldr	r3, [pc, #332]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d56:	4a52      	ldr	r2, [pc, #328]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d58:	f023 0304 	bic.w	r3, r3, #4
 8007d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d016      	beq.n	8007d96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d68:	f7fc fa8a 	bl	8004280 <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d6e:	e00a      	b.n	8007d86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d70:	f7fc fa86 	bl	8004280 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e138      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d86:	4b46      	ldr	r3, [pc, #280]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0ed      	beq.n	8007d70 <HAL_RCC_OscConfig+0x388>
 8007d94:	e015      	b.n	8007dc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d96:	f7fc fa73 	bl	8004280 <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d9c:	e00a      	b.n	8007db4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d9e:	f7fc fa6f 	bl	8004280 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d901      	bls.n	8007db4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e121      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007db4:	4b3a      	ldr	r3, [pc, #232]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1ed      	bne.n	8007d9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007dc2:	7ffb      	ldrb	r3, [r7, #31]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d105      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dc8:	4b35      	ldr	r3, [pc, #212]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dcc:	4a34      	ldr	r2, [pc, #208]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007dce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dd2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d03c      	beq.n	8007e5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01c      	beq.n	8007e22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007de8:	4b2d      	ldr	r3, [pc, #180]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dee:	4a2c      	ldr	r2, [pc, #176]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007df0:	f043 0301 	orr.w	r3, r3, #1
 8007df4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df8:	f7fc fa42 	bl	8004280 <HAL_GetTick>
 8007dfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dfe:	e008      	b.n	8007e12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e00:	f7fc fa3e 	bl	8004280 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e0f2      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e12:	4b23      	ldr	r3, [pc, #140]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0ef      	beq.n	8007e00 <HAL_RCC_OscConfig+0x418>
 8007e20:	e01b      	b.n	8007e5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e22:	4b1f      	ldr	r3, [pc, #124]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007e2a:	f023 0301 	bic.w	r3, r3, #1
 8007e2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e32:	f7fc fa25 	bl	8004280 <HAL_GetTick>
 8007e36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e3a:	f7fc fa21 	bl	8004280 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e0d5      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e4c:	4b14      	ldr	r3, [pc, #80]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1ef      	bne.n	8007e3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 80c9 	beq.w	8007ff6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e64:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 030c 	and.w	r3, r3, #12
 8007e6c:	2b0c      	cmp	r3, #12
 8007e6e:	f000 8083 	beq.w	8007f78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d15e      	bne.n	8007f38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e7a:	4b09      	ldr	r3, [pc, #36]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a08      	ldr	r2, [pc, #32]	@ (8007ea0 <HAL_RCC_OscConfig+0x4b8>)
 8007e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e86:	f7fc f9fb 	bl	8004280 <HAL_GetTick>
 8007e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e8c:	e00c      	b.n	8007ea8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e8e:	f7fc f9f7 	bl	8004280 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d905      	bls.n	8007ea8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e0ab      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
 8007ea0:	40021000 	.word	0x40021000
 8007ea4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ea8:	4b55      	ldr	r3, [pc, #340]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1ec      	bne.n	8007e8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007eb4:	4b52      	ldr	r3, [pc, #328]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	4b52      	ldr	r3, [pc, #328]	@ (8008004 <HAL_RCC_OscConfig+0x61c>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6a11      	ldr	r1, [r2, #32]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ec4:	3a01      	subs	r2, #1
 8007ec6:	0112      	lsls	r2, r2, #4
 8007ec8:	4311      	orrs	r1, r2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007ece:	0212      	lsls	r2, r2, #8
 8007ed0:	4311      	orrs	r1, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ed6:	0852      	lsrs	r2, r2, #1
 8007ed8:	3a01      	subs	r2, #1
 8007eda:	0552      	lsls	r2, r2, #21
 8007edc:	4311      	orrs	r1, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ee2:	0852      	lsrs	r2, r2, #1
 8007ee4:	3a01      	subs	r2, #1
 8007ee6:	0652      	lsls	r2, r2, #25
 8007ee8:	4311      	orrs	r1, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007eee:	06d2      	lsls	r2, r2, #27
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	4943      	ldr	r1, [pc, #268]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef8:	4b41      	ldr	r3, [pc, #260]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a40      	ldr	r2, [pc, #256]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f04:	4b3e      	ldr	r3, [pc, #248]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	4a3d      	ldr	r2, [pc, #244]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f10:	f7fc f9b6 	bl	8004280 <HAL_GetTick>
 8007f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f18:	f7fc f9b2 	bl	8004280 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e066      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f2a:	4b35      	ldr	r3, [pc, #212]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0f0      	beq.n	8007f18 <HAL_RCC_OscConfig+0x530>
 8007f36:	e05e      	b.n	8007ff6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f38:	4b31      	ldr	r3, [pc, #196]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a30      	ldr	r2, [pc, #192]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f44:	f7fc f99c 	bl	8004280 <HAL_GetTick>
 8007f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f4a:	e008      	b.n	8007f5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f4c:	f7fc f998 	bl	8004280 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e04c      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f5e:	4b28      	ldr	r3, [pc, #160]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1f0      	bne.n	8007f4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007f6a:	4b25      	ldr	r3, [pc, #148]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	4924      	ldr	r1, [pc, #144]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f70:	4b25      	ldr	r3, [pc, #148]	@ (8008008 <HAL_RCC_OscConfig+0x620>)
 8007f72:	4013      	ands	r3, r2
 8007f74:	60cb      	str	r3, [r1, #12]
 8007f76:	e03e      	b.n	8007ff6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e039      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007f84:	4b1e      	ldr	r3, [pc, #120]	@ (8008000 <HAL_RCC_OscConfig+0x618>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f003 0203 	and.w	r2, r3, #3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d12c      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d123      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d11b      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d113      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd4:	085b      	lsrs	r3, r3, #1
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d109      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe8:	085b      	lsrs	r3, r3, #1
 8007fea:	3b01      	subs	r3, #1
 8007fec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d001      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40021000 	.word	0x40021000
 8008004:	019f800c 	.word	0x019f800c
 8008008:	feeefffc 	.word	0xfeeefffc

0800800c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e11e      	b.n	8008262 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008024:	4b91      	ldr	r3, [pc, #580]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d910      	bls.n	8008054 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008032:	4b8e      	ldr	r3, [pc, #568]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f023 020f 	bic.w	r2, r3, #15
 800803a:	498c      	ldr	r1, [pc, #560]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	4313      	orrs	r3, r2
 8008040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008042:	4b8a      	ldr	r3, [pc, #552]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d001      	beq.n	8008054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e106      	b.n	8008262 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d073      	beq.n	8008148 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d129      	bne.n	80080bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008068:	4b81      	ldr	r3, [pc, #516]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e0f4      	b.n	8008262 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008078:	f000 f99c 	bl	80083b4 <RCC_GetSysClockFreqFromPLLSource>
 800807c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	4a7c      	ldr	r2, [pc, #496]	@ (8008274 <HAL_RCC_ClockConfig+0x268>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d93f      	bls.n	8008106 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008086:	4b7a      	ldr	r3, [pc, #488]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800809a:	2b00      	cmp	r3, #0
 800809c:	d033      	beq.n	8008106 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d12f      	bne.n	8008106 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80080a6:	4b72      	ldr	r3, [pc, #456]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ae:	4a70      	ldr	r2, [pc, #448]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80080b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80080b6:	2380      	movs	r3, #128	@ 0x80
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e024      	b.n	8008106 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d107      	bne.n	80080d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080c4:	4b6a      	ldr	r3, [pc, #424]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0c6      	b.n	8008262 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080d4:	4b66      	ldr	r3, [pc, #408]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e0be      	b.n	8008262 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80080e4:	f000 f8ce 	bl	8008284 <HAL_RCC_GetSysClockFreq>
 80080e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	4a61      	ldr	r2, [pc, #388]	@ (8008274 <HAL_RCC_ClockConfig+0x268>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d909      	bls.n	8008106 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80080f2:	4b5f      	ldr	r3, [pc, #380]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080fa:	4a5d      	ldr	r2, [pc, #372]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80080fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008100:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008102:	2380      	movs	r3, #128	@ 0x80
 8008104:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008106:	4b5a      	ldr	r3, [pc, #360]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f023 0203 	bic.w	r2, r3, #3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	4957      	ldr	r1, [pc, #348]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008114:	4313      	orrs	r3, r2
 8008116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008118:	f7fc f8b2 	bl	8004280 <HAL_GetTick>
 800811c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800811e:	e00a      	b.n	8008136 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008120:	f7fc f8ae 	bl	8004280 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e095      	b.n	8008262 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008136:	4b4e      	ldr	r3, [pc, #312]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 020c 	and.w	r2, r3, #12
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	429a      	cmp	r2, r3
 8008146:	d1eb      	bne.n	8008120 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d023      	beq.n	800819c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008160:	4b43      	ldr	r3, [pc, #268]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	4a42      	ldr	r2, [pc, #264]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008166:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800816a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b00      	cmp	r3, #0
 8008176:	d007      	beq.n	8008188 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008178:	4b3d      	ldr	r3, [pc, #244]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008180:	4a3b      	ldr	r2, [pc, #236]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008182:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008186:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008188:	4b39      	ldr	r3, [pc, #228]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	4936      	ldr	r1, [pc, #216]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008196:	4313      	orrs	r3, r2
 8008198:	608b      	str	r3, [r1, #8]
 800819a:	e008      	b.n	80081ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b80      	cmp	r3, #128	@ 0x80
 80081a0:	d105      	bne.n	80081ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80081a2:	4b33      	ldr	r3, [pc, #204]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	4a32      	ldr	r2, [pc, #200]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80081a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081ae:	4b2f      	ldr	r3, [pc, #188]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d21d      	bcs.n	80081f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081bc:	4b2b      	ldr	r3, [pc, #172]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f023 020f 	bic.w	r2, r3, #15
 80081c4:	4929      	ldr	r1, [pc, #164]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80081cc:	f7fc f858 	bl	8004280 <HAL_GetTick>
 80081d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d2:	e00a      	b.n	80081ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081d4:	f7fc f854 	bl	8004280 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e03b      	b.n	8008262 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ea:	4b20      	ldr	r3, [pc, #128]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d1ed      	bne.n	80081d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d008      	beq.n	8008216 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008204:	4b1a      	ldr	r3, [pc, #104]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	4917      	ldr	r1, [pc, #92]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008212:	4313      	orrs	r3, r2
 8008214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0308 	and.w	r3, r3, #8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d009      	beq.n	8008236 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008222:	4b13      	ldr	r3, [pc, #76]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	490f      	ldr	r1, [pc, #60]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008232:	4313      	orrs	r3, r2
 8008234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008236:	f000 f825 	bl	8008284 <HAL_RCC_GetSysClockFreq>
 800823a:	4602      	mov	r2, r0
 800823c:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	091b      	lsrs	r3, r3, #4
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	490c      	ldr	r1, [pc, #48]	@ (8008278 <HAL_RCC_ClockConfig+0x26c>)
 8008248:	5ccb      	ldrb	r3, [r1, r3]
 800824a:	f003 031f 	and.w	r3, r3, #31
 800824e:	fa22 f303 	lsr.w	r3, r2, r3
 8008252:	4a0a      	ldr	r2, [pc, #40]	@ (800827c <HAL_RCC_ClockConfig+0x270>)
 8008254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008256:	4b0a      	ldr	r3, [pc, #40]	@ (8008280 <HAL_RCC_ClockConfig+0x274>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4618      	mov	r0, r3
 800825c:	f7fb ffc4 	bl	80041e8 <HAL_InitTick>
 8008260:	4603      	mov	r3, r0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	40022000 	.word	0x40022000
 8008270:	40021000 	.word	0x40021000
 8008274:	04c4b400 	.word	0x04c4b400
 8008278:	0800d0c4 	.word	0x0800d0c4
 800827c:	200003f0 	.word	0x200003f0
 8008280:	200003f4 	.word	0x200003f4

08008284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800828a:	4b2c      	ldr	r3, [pc, #176]	@ (800833c <HAL_RCC_GetSysClockFreq+0xb8>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 030c 	and.w	r3, r3, #12
 8008292:	2b04      	cmp	r3, #4
 8008294:	d102      	bne.n	800829c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008296:	4b2a      	ldr	r3, [pc, #168]	@ (8008340 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	e047      	b.n	800832c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800829c:	4b27      	ldr	r3, [pc, #156]	@ (800833c <HAL_RCC_GetSysClockFreq+0xb8>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 030c 	and.w	r3, r3, #12
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d102      	bne.n	80082ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80082a8:	4b25      	ldr	r3, [pc, #148]	@ (8008340 <HAL_RCC_GetSysClockFreq+0xbc>)
 80082aa:	613b      	str	r3, [r7, #16]
 80082ac:	e03e      	b.n	800832c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80082ae:	4b23      	ldr	r3, [pc, #140]	@ (800833c <HAL_RCC_GetSysClockFreq+0xb8>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 030c 	and.w	r3, r3, #12
 80082b6:	2b0c      	cmp	r3, #12
 80082b8:	d136      	bne.n	8008328 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80082ba:	4b20      	ldr	r3, [pc, #128]	@ (800833c <HAL_RCC_GetSysClockFreq+0xb8>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082c4:	4b1d      	ldr	r3, [pc, #116]	@ (800833c <HAL_RCC_GetSysClockFreq+0xb8>)
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	091b      	lsrs	r3, r3, #4
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	3301      	adds	r3, #1
 80082d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d10c      	bne.n	80082f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082d8:	4a19      	ldr	r2, [pc, #100]	@ (8008340 <HAL_RCC_GetSysClockFreq+0xbc>)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e0:	4a16      	ldr	r2, [pc, #88]	@ (800833c <HAL_RCC_GetSysClockFreq+0xb8>)
 80082e2:	68d2      	ldr	r2, [r2, #12]
 80082e4:	0a12      	lsrs	r2, r2, #8
 80082e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	617b      	str	r3, [r7, #20]
      break;
 80082f0:	e00c      	b.n	800830c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082f2:	4a13      	ldr	r2, [pc, #76]	@ (8008340 <HAL_RCC_GetSysClockFreq+0xbc>)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fa:	4a10      	ldr	r2, [pc, #64]	@ (800833c <HAL_RCC_GetSysClockFreq+0xb8>)
 80082fc:	68d2      	ldr	r2, [r2, #12]
 80082fe:	0a12      	lsrs	r2, r2, #8
 8008300:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008304:	fb02 f303 	mul.w	r3, r2, r3
 8008308:	617b      	str	r3, [r7, #20]
      break;
 800830a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800830c:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <HAL_RCC_GetSysClockFreq+0xb8>)
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	0e5b      	lsrs	r3, r3, #25
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	3301      	adds	r3, #1
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	fbb2 f3f3 	udiv	r3, r2, r3
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	e001      	b.n	800832c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008328:	2300      	movs	r3, #0
 800832a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800832c:	693b      	ldr	r3, [r7, #16]
}
 800832e:	4618      	mov	r0, r3
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40021000 	.word	0x40021000
 8008340:	00f42400 	.word	0x00f42400

08008344 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008348:	4b03      	ldr	r3, [pc, #12]	@ (8008358 <HAL_RCC_GetHCLKFreq+0x14>)
 800834a:	681b      	ldr	r3, [r3, #0]
}
 800834c:	4618      	mov	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	200003f0 	.word	0x200003f0

0800835c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008360:	f7ff fff0 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 8008364:	4602      	mov	r2, r0
 8008366:	4b06      	ldr	r3, [pc, #24]	@ (8008380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	0a1b      	lsrs	r3, r3, #8
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	4904      	ldr	r1, [pc, #16]	@ (8008384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008372:	5ccb      	ldrb	r3, [r1, r3]
 8008374:	f003 031f 	and.w	r3, r3, #31
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800837c:	4618      	mov	r0, r3
 800837e:	bd80      	pop	{r7, pc}
 8008380:	40021000 	.word	0x40021000
 8008384:	0800d0d4 	.word	0x0800d0d4

08008388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800838c:	f7ff ffda 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 8008390:	4602      	mov	r2, r0
 8008392:	4b06      	ldr	r3, [pc, #24]	@ (80083ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	0adb      	lsrs	r3, r3, #11
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	4904      	ldr	r1, [pc, #16]	@ (80083b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800839e:	5ccb      	ldrb	r3, [r1, r3]
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40021000 	.word	0x40021000
 80083b0:	0800d0d4 	.word	0x0800d0d4

080083b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083ba:	4b1e      	ldr	r3, [pc, #120]	@ (8008434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083c4:	4b1b      	ldr	r3, [pc, #108]	@ (8008434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	091b      	lsrs	r3, r3, #4
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d10c      	bne.n	80083f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083d8:	4a17      	ldr	r2, [pc, #92]	@ (8008438 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e0:	4a14      	ldr	r2, [pc, #80]	@ (8008434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083e2:	68d2      	ldr	r2, [r2, #12]
 80083e4:	0a12      	lsrs	r2, r2, #8
 80083e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083ea:	fb02 f303 	mul.w	r3, r2, r3
 80083ee:	617b      	str	r3, [r7, #20]
    break;
 80083f0:	e00c      	b.n	800840c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083f2:	4a11      	ldr	r2, [pc, #68]	@ (8008438 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fa:	4a0e      	ldr	r2, [pc, #56]	@ (8008434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083fc:	68d2      	ldr	r2, [r2, #12]
 80083fe:	0a12      	lsrs	r2, r2, #8
 8008400:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008404:	fb02 f303 	mul.w	r3, r2, r3
 8008408:	617b      	str	r3, [r7, #20]
    break;
 800840a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800840c:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	0e5b      	lsrs	r3, r3, #25
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	3301      	adds	r3, #1
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	fbb2 f3f3 	udiv	r3, r2, r3
 8008424:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008426:	687b      	ldr	r3, [r7, #4]
}
 8008428:	4618      	mov	r0, r3
 800842a:	371c      	adds	r7, #28
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	40021000 	.word	0x40021000
 8008438:	00f42400 	.word	0x00f42400

0800843c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008444:	2300      	movs	r3, #0
 8008446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008448:	2300      	movs	r3, #0
 800844a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8098 	beq.w	800858a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800845a:	2300      	movs	r3, #0
 800845c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800845e:	4b43      	ldr	r3, [pc, #268]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10d      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800846a:	4b40      	ldr	r3, [pc, #256]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800846c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800846e:	4a3f      	ldr	r2, [pc, #252]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008474:	6593      	str	r3, [r2, #88]	@ 0x58
 8008476:	4b3d      	ldr	r3, [pc, #244]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800847a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800847e:	60bb      	str	r3, [r7, #8]
 8008480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008482:	2301      	movs	r3, #1
 8008484:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008486:	4b3a      	ldr	r3, [pc, #232]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a39      	ldr	r2, [pc, #228]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800848c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008490:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008492:	f7fb fef5 	bl	8004280 <HAL_GetTick>
 8008496:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008498:	e009      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800849a:	f7fb fef1 	bl	8004280 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d902      	bls.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	74fb      	strb	r3, [r7, #19]
        break;
 80084ac:	e005      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084ae:	4b30      	ldr	r3, [pc, #192]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0ef      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80084ba:	7cfb      	ldrb	r3, [r7, #19]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d159      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084c0:	4b2a      	ldr	r3, [pc, #168]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01e      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d019      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80084dc:	4b23      	ldr	r3, [pc, #140]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084e8:	4b20      	ldr	r3, [pc, #128]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ee:	4a1f      	ldr	r2, [pc, #124]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084f8:	4b1c      	ldr	r3, [pc, #112]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084fe:	4a1b      	ldr	r2, [pc, #108]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008508:	4a18      	ldr	r2, [pc, #96]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d016      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851a:	f7fb feb1 	bl	8004280 <HAL_GetTick>
 800851e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008520:	e00b      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008522:	f7fb fead 	bl	8004280 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008530:	4293      	cmp	r3, r2
 8008532:	d902      	bls.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	74fb      	strb	r3, [r7, #19]
            break;
 8008538:	e006      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800853a:	4b0c      	ldr	r3, [pc, #48]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800853c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0ec      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008548:	7cfb      	ldrb	r3, [r7, #19]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10b      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800854e:	4b07      	ldr	r3, [pc, #28]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800855c:	4903      	ldr	r1, [pc, #12]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800855e:	4313      	orrs	r3, r2
 8008560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008564:	e008      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008566:	7cfb      	ldrb	r3, [r7, #19]
 8008568:	74bb      	strb	r3, [r7, #18]
 800856a:	e005      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800856c:	40021000 	.word	0x40021000
 8008570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008574:	7cfb      	ldrb	r3, [r7, #19]
 8008576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008578:	7c7b      	ldrb	r3, [r7, #17]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d105      	bne.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800857e:	4ba7      	ldr	r3, [pc, #668]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008582:	4aa6      	ldr	r2, [pc, #664]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008588:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008596:	4ba1      	ldr	r3, [pc, #644]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800859c:	f023 0203 	bic.w	r2, r3, #3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	499d      	ldr	r1, [pc, #628]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085b8:	4b98      	ldr	r3, [pc, #608]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085be:	f023 020c 	bic.w	r2, r3, #12
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	4995      	ldr	r1, [pc, #596]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0304 	and.w	r3, r3, #4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085da:	4b90      	ldr	r3, [pc, #576]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	498c      	ldr	r1, [pc, #560]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085fc:	4b87      	ldr	r3, [pc, #540]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008602:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	4984      	ldr	r1, [pc, #528]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800860c:	4313      	orrs	r3, r2
 800860e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800861e:	4b7f      	ldr	r3, [pc, #508]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008624:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	497b      	ldr	r1, [pc, #492]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800862e:	4313      	orrs	r3, r2
 8008630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0320 	and.w	r3, r3, #32
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008640:	4b76      	ldr	r3, [pc, #472]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008646:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	4973      	ldr	r1, [pc, #460]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008650:	4313      	orrs	r3, r2
 8008652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008662:	4b6e      	ldr	r3, [pc, #440]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008668:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	496a      	ldr	r1, [pc, #424]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008672:	4313      	orrs	r3, r2
 8008674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008684:	4b65      	ldr	r3, [pc, #404]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800868a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	4962      	ldr	r1, [pc, #392]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086a6:	4b5d      	ldr	r3, [pc, #372]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b4:	4959      	ldr	r1, [pc, #356]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086c8:	4b54      	ldr	r3, [pc, #336]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086ce:	f023 0203 	bic.w	r2, r3, #3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d6:	4951      	ldr	r1, [pc, #324]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ea:	4b4c      	ldr	r3, [pc, #304]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f8:	4948      	ldr	r1, [pc, #288]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008708:	2b00      	cmp	r3, #0
 800870a:	d015      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800870c:	4b43      	ldr	r3, [pc, #268]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800870e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008712:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800871a:	4940      	ldr	r1, [pc, #256]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800871c:	4313      	orrs	r3, r2
 800871e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800872a:	d105      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800872c:	4b3b      	ldr	r3, [pc, #236]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4a3a      	ldr	r2, [pc, #232]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008736:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008740:	2b00      	cmp	r3, #0
 8008742:	d015      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008744:	4b35      	ldr	r3, [pc, #212]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800874a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008752:	4932      	ldr	r1, [pc, #200]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008754:	4313      	orrs	r3, r2
 8008756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008762:	d105      	bne.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008764:	4b2d      	ldr	r3, [pc, #180]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	4a2c      	ldr	r2, [pc, #176]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800876a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800876e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d015      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800877c:	4b27      	ldr	r3, [pc, #156]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800877e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008782:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	4924      	ldr	r1, [pc, #144]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800878c:	4313      	orrs	r3, r2
 800878e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800879a:	d105      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800879c:	4b1f      	ldr	r3, [pc, #124]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	4a1e      	ldr	r2, [pc, #120]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d015      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087b4:	4b19      	ldr	r3, [pc, #100]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c2:	4916      	ldr	r1, [pc, #88]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087d2:	d105      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087d4:	4b11      	ldr	r3, [pc, #68]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4a10      	ldr	r2, [pc, #64]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d019      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087ec:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fa:	4908      	ldr	r1, [pc, #32]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800880a:	d109      	bne.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800880c:	4b03      	ldr	r3, [pc, #12]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	4a02      	ldr	r2, [pc, #8]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008816:	60d3      	str	r3, [r2, #12]
 8008818:	e002      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800881a:	bf00      	nop
 800881c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d015      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800882c:	4b29      	ldr	r3, [pc, #164]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800882e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008832:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800883a:	4926      	ldr	r1, [pc, #152]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800883c:	4313      	orrs	r3, r2
 800883e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800884a:	d105      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800884c:	4b21      	ldr	r3, [pc, #132]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	4a20      	ldr	r2, [pc, #128]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008856:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d015      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008864:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800886a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008872:	4918      	ldr	r1, [pc, #96]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008874:	4313      	orrs	r3, r2
 8008876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800887e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008882:	d105      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008884:	4b13      	ldr	r3, [pc, #76]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	4a12      	ldr	r2, [pc, #72]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800888a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800888e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d015      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800889c:	4b0d      	ldr	r3, [pc, #52]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800889e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088aa:	490a      	ldr	r1, [pc, #40]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088ba:	d105      	bne.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088bc:	4b05      	ldr	r3, [pc, #20]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	4a04      	ldr	r2, [pc, #16]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80088c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80088c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40021000 	.word	0x40021000

080088d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e09d      	b.n	8008a26 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d108      	bne.n	8008904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088fa:	d009      	beq.n	8008910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	61da      	str	r2, [r3, #28]
 8008902:	e005      	b.n	8008910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7fa fda0 	bl	8003470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008946:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008950:	d902      	bls.n	8008958 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	e002      	b.n	800895e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800895c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008966:	d007      	beq.n	8008978 <HAL_SPI_Init+0xa0>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008970:	d002      	beq.n	8008978 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	431a      	orrs	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089a6:	431a      	orrs	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089b0:	431a      	orrs	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ba:	ea42 0103 	orr.w	r1, r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	0c1b      	lsrs	r3, r3, #16
 80089d4:	f003 0204 	and.w	r2, r3, #4
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	431a      	orrs	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80089f4:	ea42 0103 	orr.w	r1, r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69da      	ldr	r2, [r3, #28]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b088      	sub	sp, #32
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	603b      	str	r3, [r7, #0]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a3e:	f7fb fc1f 	bl	8004280 <HAL_GetTick>
 8008a42:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d001      	beq.n	8008a58 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008a54:	2302      	movs	r3, #2
 8008a56:	e15c      	b.n	8008d12 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <HAL_SPI_Transmit+0x36>
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e154      	b.n	8008d12 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d101      	bne.n	8008a76 <HAL_SPI_Transmit+0x48>
 8008a72:	2302      	movs	r3, #2
 8008a74:	e14d      	b.n	8008d12 <HAL_SPI_Transmit+0x2e4>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2203      	movs	r2, #3
 8008a82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	88fa      	ldrh	r2, [r7, #6]
 8008a96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	88fa      	ldrh	r2, [r7, #6]
 8008a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ac8:	d10f      	bne.n	8008aea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ad8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ae8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af4:	2b40      	cmp	r3, #64	@ 0x40
 8008af6:	d007      	beq.n	8008b08 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b10:	d952      	bls.n	8008bb8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <HAL_SPI_Transmit+0xf2>
 8008b1a:	8b7b      	ldrh	r3, [r7, #26]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d145      	bne.n	8008bac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b24:	881a      	ldrh	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b30:	1c9a      	adds	r2, r3, #2
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b44:	e032      	b.n	8008bac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d112      	bne.n	8008b7a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b58:	881a      	ldrh	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b64:	1c9a      	adds	r2, r3, #2
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	3b01      	subs	r3, #1
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b78:	e018      	b.n	8008bac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b7a:	f7fb fb81 	bl	8004280 <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d803      	bhi.n	8008b92 <HAL_SPI_Transmit+0x164>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d102      	bne.n	8008b98 <HAL_SPI_Transmit+0x16a>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e0b2      	b.n	8008d12 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1c7      	bne.n	8008b46 <HAL_SPI_Transmit+0x118>
 8008bb6:	e083      	b.n	8008cc0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_SPI_Transmit+0x198>
 8008bc0:	8b7b      	ldrh	r3, [r7, #26]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d177      	bne.n	8008cb6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d912      	bls.n	8008bf6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd4:	881a      	ldrh	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be0:	1c9a      	adds	r2, r3, #2
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b02      	subs	r3, #2
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008bf4:	e05f      	b.n	8008cb6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	330c      	adds	r3, #12
 8008c00:	7812      	ldrb	r2, [r2, #0]
 8008c02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c1c:	e04b      	b.n	8008cb6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d12b      	bne.n	8008c84 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d912      	bls.n	8008c5c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	881a      	ldrh	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c46:	1c9a      	adds	r2, r3, #2
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b02      	subs	r3, #2
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c5a:	e02c      	b.n	8008cb6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	330c      	adds	r3, #12
 8008c66:	7812      	ldrb	r2, [r2, #0]
 8008c68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c82:	e018      	b.n	8008cb6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c84:	f7fb fafc 	bl	8004280 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d803      	bhi.n	8008c9c <HAL_SPI_Transmit+0x26e>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9a:	d102      	bne.n	8008ca2 <HAL_SPI_Transmit+0x274>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e02d      	b.n	8008d12 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1ae      	bne.n	8008c1e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fb65 	bl	8009394 <SPI_EndRxTxTransaction>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	617b      	str	r3, [r7, #20]
 8008cf2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e000      	b.n	8008d12 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008d10:	2300      	movs	r3, #0
  }
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3720      	adds	r7, #32
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b08a      	sub	sp, #40	@ 0x28
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	60f8      	str	r0, [r7, #12]
 8008d22:	60b9      	str	r1, [r7, #8]
 8008d24:	607a      	str	r2, [r7, #4]
 8008d26:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d2c:	f7fb faa8 	bl	8004280 <HAL_GetTick>
 8008d30:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d38:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008d40:	887b      	ldrh	r3, [r7, #2]
 8008d42:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008d44:	887b      	ldrh	r3, [r7, #2]
 8008d46:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d48:	7ffb      	ldrb	r3, [r7, #31]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d00c      	beq.n	8008d68 <HAL_SPI_TransmitReceive+0x4e>
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d54:	d106      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x4a>
 8008d5e:	7ffb      	ldrb	r3, [r7, #31]
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d001      	beq.n	8008d68 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008d64:	2302      	movs	r3, #2
 8008d66:	e1f3      	b.n	8009150 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <HAL_SPI_TransmitReceive+0x60>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <HAL_SPI_TransmitReceive+0x60>
 8008d74:	887b      	ldrh	r3, [r7, #2]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e1e8      	b.n	8009150 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d101      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x72>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e1e1      	b.n	8009150 <HAL_SPI_TransmitReceive+0x436>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d003      	beq.n	8008da8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2205      	movs	r2, #5
 8008da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	887a      	ldrh	r2, [r7, #2]
 8008db8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	887a      	ldrh	r2, [r7, #2]
 8008dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	887a      	ldrh	r2, [r7, #2]
 8008dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	887a      	ldrh	r2, [r7, #2]
 8008dd4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008dea:	d802      	bhi.n	8008df2 <HAL_SPI_TransmitReceive+0xd8>
 8008dec:	8abb      	ldrh	r3, [r7, #20]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d908      	bls.n	8008e04 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e00:	605a      	str	r2, [r3, #4]
 8008e02:	e007      	b.n	8008e14 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e12:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e1e:	2b40      	cmp	r3, #64	@ 0x40
 8008e20:	d007      	beq.n	8008e32 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e3a:	f240 8083 	bls.w	8008f44 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_SPI_TransmitReceive+0x132>
 8008e46:	8afb      	ldrh	r3, [r7, #22]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d16f      	bne.n	8008f2c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e50:	881a      	ldrh	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5c:	1c9a      	adds	r2, r3, #2
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e70:	e05c      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d11b      	bne.n	8008eb8 <HAL_SPI_TransmitReceive+0x19e>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d016      	beq.n	8008eb8 <HAL_SPI_TransmitReceive+0x19e>
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d113      	bne.n	8008eb8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e94:	881a      	ldrh	r2, [r3, #0]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea0:	1c9a      	adds	r2, r3, #2
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d11c      	bne.n	8008f00 <HAL_SPI_TransmitReceive+0x1e6>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d016      	beq.n	8008f00 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008edc:	b292      	uxth	r2, r2
 8008ede:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee4:	1c9a      	adds	r2, r3, #2
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008efc:	2301      	movs	r3, #1
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f00:	f7fb f9be 	bl	8004280 <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d80d      	bhi.n	8008f2c <HAL_SPI_TransmitReceive+0x212>
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d009      	beq.n	8008f2c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e111      	b.n	8009150 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d19d      	bne.n	8008e72 <HAL_SPI_TransmitReceive+0x158>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d197      	bne.n	8008e72 <HAL_SPI_TransmitReceive+0x158>
 8008f42:	e0e5      	b.n	8009110 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_SPI_TransmitReceive+0x23a>
 8008f4c:	8afb      	ldrh	r3, [r7, #22]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	f040 80d1 	bne.w	80090f6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d912      	bls.n	8008f84 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f62:	881a      	ldrh	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6e:	1c9a      	adds	r2, r3, #2
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b02      	subs	r3, #2
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f82:	e0b8      	b.n	80090f6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008faa:	e0a4      	b.n	80090f6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d134      	bne.n	8009024 <HAL_SPI_TransmitReceive+0x30a>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d02f      	beq.n	8009024 <HAL_SPI_TransmitReceive+0x30a>
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d12c      	bne.n	8009024 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d912      	bls.n	8008ffa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd8:	881a      	ldrh	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe4:	1c9a      	adds	r2, r3, #2
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	3b02      	subs	r3, #2
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ff8:	e012      	b.n	8009020 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	330c      	adds	r3, #12
 8009004:	7812      	ldrb	r2, [r2, #0]
 8009006:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009016:	b29b      	uxth	r3, r3
 8009018:	3b01      	subs	r3, #1
 800901a:	b29a      	uxth	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b01      	cmp	r3, #1
 8009030:	d148      	bne.n	80090c4 <HAL_SPI_TransmitReceive+0x3aa>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009038:	b29b      	uxth	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d042      	beq.n	80090c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b01      	cmp	r3, #1
 8009048:	d923      	bls.n	8009092 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009054:	b292      	uxth	r2, r2
 8009056:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905c:	1c9a      	adds	r2, r3, #2
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b02      	subs	r3, #2
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800907a:	b29b      	uxth	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	d81f      	bhi.n	80090c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	e016      	b.n	80090c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f103 020c 	add.w	r2, r3, #12
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909e:	7812      	ldrb	r2, [r2, #0]
 80090a0:	b2d2      	uxtb	r2, r2
 80090a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090c0:	2301      	movs	r3, #1
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80090c4:	f7fb f8dc 	bl	8004280 <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d803      	bhi.n	80090dc <HAL_SPI_TransmitReceive+0x3c2>
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090da:	d102      	bne.n	80090e2 <HAL_SPI_TransmitReceive+0x3c8>
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e02c      	b.n	8009150 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f47f af55 	bne.w	8008fac <HAL_SPI_TransmitReceive+0x292>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	f47f af4e 	bne.w	8008fac <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009110:	6a3a      	ldr	r2, [r7, #32]
 8009112:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f93d 	bl	8009394 <SPI_EndRxTxTransaction>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d008      	beq.n	8009132 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2220      	movs	r2, #32
 8009124:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e00e      	b.n	8009150 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800914e:	2300      	movs	r3, #0
  }
}
 8009150:	4618      	mov	r0, r3
 8009152:	3728      	adds	r7, #40	@ 0x28
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	4613      	mov	r3, r2
 8009166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009168:	f7fb f88a 	bl	8004280 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4413      	add	r3, r2
 8009176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009178:	f7fb f882 	bl	8004280 <HAL_GetTick>
 800917c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800917e:	4b39      	ldr	r3, [pc, #228]	@ (8009264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	015b      	lsls	r3, r3, #5
 8009184:	0d1b      	lsrs	r3, r3, #20
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	fb02 f303 	mul.w	r3, r2, r3
 800918c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800918e:	e054      	b.n	800923a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d050      	beq.n	800923a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009198:	f7fb f872 	bl	8004280 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d902      	bls.n	80091ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d13d      	bne.n	800922a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091c6:	d111      	bne.n	80091ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091d0:	d004      	beq.n	80091dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091da:	d107      	bne.n	80091ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091f4:	d10f      	bne.n	8009216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	e017      	b.n	800925a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	3b01      	subs	r3, #1
 8009238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4013      	ands	r3, r2
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	429a      	cmp	r2, r3
 8009248:	bf0c      	ite	eq
 800924a:	2301      	moveq	r3, #1
 800924c:	2300      	movne	r3, #0
 800924e:	b2db      	uxtb	r3, r3
 8009250:	461a      	mov	r2, r3
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	429a      	cmp	r2, r3
 8009256:	d19b      	bne.n	8009190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200003f0 	.word	0x200003f0

08009268 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	@ 0x28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800927a:	f7fb f801 	bl	8004280 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	4413      	add	r3, r2
 8009288:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800928a:	f7fa fff9 	bl	8004280 <HAL_GetTick>
 800928e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009298:	4b3d      	ldr	r3, [pc, #244]	@ (8009390 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	00da      	lsls	r2, r3, #3
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	0d1b      	lsrs	r3, r3, #20
 80092a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092aa:	fb02 f303 	mul.w	r3, r2, r3
 80092ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092b0:	e060      	b.n	8009374 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092b8:	d107      	bne.n	80092ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d104      	bne.n	80092ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d050      	beq.n	8009374 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092d2:	f7fa ffd5 	bl	8004280 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092de:	429a      	cmp	r2, r3
 80092e0:	d902      	bls.n	80092e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80092e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d13d      	bne.n	8009364 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009300:	d111      	bne.n	8009326 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800930a:	d004      	beq.n	8009316 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009314:	d107      	bne.n	8009326 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009324:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800932e:	d10f      	bne.n	8009350 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800934e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e010      	b.n	8009386 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	3b01      	subs	r3, #1
 8009372:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4013      	ands	r3, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	d196      	bne.n	80092b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3728      	adds	r7, #40	@ 0x28
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	200003f0 	.word	0x200003f0

08009394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af02      	add	r7, sp, #8
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f7ff ff5b 	bl	8009268 <SPI_WaitFifoStateUntilTimeout>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093bc:	f043 0220 	orr.w	r2, r3, #32
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e027      	b.n	8009418 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2200      	movs	r2, #0
 80093d0:	2180      	movs	r1, #128	@ 0x80
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff fec0 	bl	8009158 <SPI_WaitFlagStateUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093e2:	f043 0220 	orr.w	r2, r3, #32
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e014      	b.n	8009418 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff ff34 	bl	8009268 <SPI_WaitFifoStateUntilTimeout>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800940a:	f043 0220 	orr.w	r2, r3, #32
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e000      	b.n	8009418 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e049      	b.n	80094c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d106      	bne.n	800944c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7fa fc1e 	bl	8003c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3304      	adds	r3, #4
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f001 f878 	bl	800a554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e049      	b.n	8009574 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d106      	bne.n	80094fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f841 	bl	800957c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2202      	movs	r2, #2
 80094fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f001 f821 	bl	800a554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d109      	bne.n	80095b4 <HAL_TIM_PWM_Start+0x24>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	bf14      	ite	ne
 80095ac:	2301      	movne	r3, #1
 80095ae:	2300      	moveq	r3, #0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	e03c      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d109      	bne.n	80095ce <HAL_TIM_PWM_Start+0x3e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	bf14      	ite	ne
 80095c6:	2301      	movne	r3, #1
 80095c8:	2300      	moveq	r3, #0
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	e02f      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d109      	bne.n	80095e8 <HAL_TIM_PWM_Start+0x58>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	bf14      	ite	ne
 80095e0:	2301      	movne	r3, #1
 80095e2:	2300      	moveq	r3, #0
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	e022      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b0c      	cmp	r3, #12
 80095ec:	d109      	bne.n	8009602 <HAL_TIM_PWM_Start+0x72>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	bf14      	ite	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	2300      	moveq	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	e015      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b10      	cmp	r3, #16
 8009606:	d109      	bne.n	800961c <HAL_TIM_PWM_Start+0x8c>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b01      	cmp	r3, #1
 8009612:	bf14      	ite	ne
 8009614:	2301      	movne	r3, #1
 8009616:	2300      	moveq	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	e008      	b.n	800962e <HAL_TIM_PWM_Start+0x9e>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	bf14      	ite	ne
 8009628:	2301      	movne	r3, #1
 800962a:	2300      	moveq	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e0a6      	b.n	8009784 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d104      	bne.n	8009646 <HAL_TIM_PWM_Start+0xb6>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009644:	e023      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b04      	cmp	r3, #4
 800964a:	d104      	bne.n	8009656 <HAL_TIM_PWM_Start+0xc6>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009654:	e01b      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b08      	cmp	r3, #8
 800965a:	d104      	bne.n	8009666 <HAL_TIM_PWM_Start+0xd6>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009664:	e013      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b0c      	cmp	r3, #12
 800966a:	d104      	bne.n	8009676 <HAL_TIM_PWM_Start+0xe6>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009674:	e00b      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b10      	cmp	r3, #16
 800967a:	d104      	bne.n	8009686 <HAL_TIM_PWM_Start+0xf6>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009684:	e003      	b.n	800968e <HAL_TIM_PWM_Start+0xfe>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2201      	movs	r2, #1
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	4618      	mov	r0, r3
 8009698:	f001 fd00 	bl	800b09c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a3a      	ldr	r2, [pc, #232]	@ (800978c <HAL_TIM_PWM_Start+0x1fc>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d018      	beq.n	80096d8 <HAL_TIM_PWM_Start+0x148>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a39      	ldr	r2, [pc, #228]	@ (8009790 <HAL_TIM_PWM_Start+0x200>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d013      	beq.n	80096d8 <HAL_TIM_PWM_Start+0x148>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a37      	ldr	r2, [pc, #220]	@ (8009794 <HAL_TIM_PWM_Start+0x204>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00e      	beq.n	80096d8 <HAL_TIM_PWM_Start+0x148>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a36      	ldr	r2, [pc, #216]	@ (8009798 <HAL_TIM_PWM_Start+0x208>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d009      	beq.n	80096d8 <HAL_TIM_PWM_Start+0x148>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a34      	ldr	r2, [pc, #208]	@ (800979c <HAL_TIM_PWM_Start+0x20c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d004      	beq.n	80096d8 <HAL_TIM_PWM_Start+0x148>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a33      	ldr	r2, [pc, #204]	@ (80097a0 <HAL_TIM_PWM_Start+0x210>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d101      	bne.n	80096dc <HAL_TIM_PWM_Start+0x14c>
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <HAL_TIM_PWM_Start+0x14e>
 80096dc:	2300      	movs	r3, #0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d007      	beq.n	80096f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a25      	ldr	r2, [pc, #148]	@ (800978c <HAL_TIM_PWM_Start+0x1fc>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d022      	beq.n	8009742 <HAL_TIM_PWM_Start+0x1b2>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009704:	d01d      	beq.n	8009742 <HAL_TIM_PWM_Start+0x1b2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a26      	ldr	r2, [pc, #152]	@ (80097a4 <HAL_TIM_PWM_Start+0x214>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d018      	beq.n	8009742 <HAL_TIM_PWM_Start+0x1b2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a24      	ldr	r2, [pc, #144]	@ (80097a8 <HAL_TIM_PWM_Start+0x218>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d013      	beq.n	8009742 <HAL_TIM_PWM_Start+0x1b2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a23      	ldr	r2, [pc, #140]	@ (80097ac <HAL_TIM_PWM_Start+0x21c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d00e      	beq.n	8009742 <HAL_TIM_PWM_Start+0x1b2>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a19      	ldr	r2, [pc, #100]	@ (8009790 <HAL_TIM_PWM_Start+0x200>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d009      	beq.n	8009742 <HAL_TIM_PWM_Start+0x1b2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a18      	ldr	r2, [pc, #96]	@ (8009794 <HAL_TIM_PWM_Start+0x204>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d004      	beq.n	8009742 <HAL_TIM_PWM_Start+0x1b2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a18      	ldr	r2, [pc, #96]	@ (80097a0 <HAL_TIM_PWM_Start+0x210>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d115      	bne.n	800976e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	4b19      	ldr	r3, [pc, #100]	@ (80097b0 <HAL_TIM_PWM_Start+0x220>)
 800974a:	4013      	ands	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b06      	cmp	r3, #6
 8009752:	d015      	beq.n	8009780 <HAL_TIM_PWM_Start+0x1f0>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800975a:	d011      	beq.n	8009780 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0201 	orr.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800976c:	e008      	b.n	8009780 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f042 0201 	orr.w	r2, r2, #1
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	e000      	b.n	8009782 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009780:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	40012c00 	.word	0x40012c00
 8009790:	40013400 	.word	0x40013400
 8009794:	40014000 	.word	0x40014000
 8009798:	40014400 	.word	0x40014400
 800979c:	40014800 	.word	0x40014800
 80097a0:	40015000 	.word	0x40015000
 80097a4:	40000400 	.word	0x40000400
 80097a8:	40000800 	.word	0x40000800
 80097ac:	40000c00 	.word	0x40000c00
 80097b0:	00010007 	.word	0x00010007

080097b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2200      	movs	r2, #0
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 fc68 	bl	800b09c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a40      	ldr	r2, [pc, #256]	@ (80098d4 <HAL_TIM_PWM_Stop+0x120>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d018      	beq.n	8009808 <HAL_TIM_PWM_Stop+0x54>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a3f      	ldr	r2, [pc, #252]	@ (80098d8 <HAL_TIM_PWM_Stop+0x124>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d013      	beq.n	8009808 <HAL_TIM_PWM_Stop+0x54>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a3d      	ldr	r2, [pc, #244]	@ (80098dc <HAL_TIM_PWM_Stop+0x128>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00e      	beq.n	8009808 <HAL_TIM_PWM_Stop+0x54>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a3c      	ldr	r2, [pc, #240]	@ (80098e0 <HAL_TIM_PWM_Stop+0x12c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d009      	beq.n	8009808 <HAL_TIM_PWM_Stop+0x54>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a3a      	ldr	r2, [pc, #232]	@ (80098e4 <HAL_TIM_PWM_Stop+0x130>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d004      	beq.n	8009808 <HAL_TIM_PWM_Stop+0x54>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a39      	ldr	r2, [pc, #228]	@ (80098e8 <HAL_TIM_PWM_Stop+0x134>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d101      	bne.n	800980c <HAL_TIM_PWM_Stop+0x58>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <HAL_TIM_PWM_Stop+0x5a>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d017      	beq.n	8009842 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6a1a      	ldr	r2, [r3, #32]
 8009818:	f241 1311 	movw	r3, #4369	@ 0x1111
 800981c:	4013      	ands	r3, r2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10f      	bne.n	8009842 <HAL_TIM_PWM_Stop+0x8e>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6a1a      	ldr	r2, [r3, #32]
 8009828:	f244 4344 	movw	r3, #17476	@ 0x4444
 800982c:	4013      	ands	r3, r2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d107      	bne.n	8009842 <HAL_TIM_PWM_Stop+0x8e>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009840:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6a1a      	ldr	r2, [r3, #32]
 8009848:	f241 1311 	movw	r3, #4369	@ 0x1111
 800984c:	4013      	ands	r3, r2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10f      	bne.n	8009872 <HAL_TIM_PWM_Stop+0xbe>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6a1a      	ldr	r2, [r3, #32]
 8009858:	f244 4344 	movw	r3, #17476	@ 0x4444
 800985c:	4013      	ands	r3, r2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d107      	bne.n	8009872 <HAL_TIM_PWM_Stop+0xbe>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f022 0201 	bic.w	r2, r2, #1
 8009870:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d104      	bne.n	8009882 <HAL_TIM_PWM_Stop+0xce>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009880:	e023      	b.n	80098ca <HAL_TIM_PWM_Stop+0x116>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b04      	cmp	r3, #4
 8009886:	d104      	bne.n	8009892 <HAL_TIM_PWM_Stop+0xde>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009890:	e01b      	b.n	80098ca <HAL_TIM_PWM_Stop+0x116>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b08      	cmp	r3, #8
 8009896:	d104      	bne.n	80098a2 <HAL_TIM_PWM_Stop+0xee>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098a0:	e013      	b.n	80098ca <HAL_TIM_PWM_Stop+0x116>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b0c      	cmp	r3, #12
 80098a6:	d104      	bne.n	80098b2 <HAL_TIM_PWM_Stop+0xfe>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80098b0:	e00b      	b.n	80098ca <HAL_TIM_PWM_Stop+0x116>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b10      	cmp	r3, #16
 80098b6:	d104      	bne.n	80098c2 <HAL_TIM_PWM_Stop+0x10e>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098c0:	e003      	b.n	80098ca <HAL_TIM_PWM_Stop+0x116>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	40012c00 	.word	0x40012c00
 80098d8:	40013400 	.word	0x40013400
 80098dc:	40014000 	.word	0x40014000
 80098e0:	40014400 	.word	0x40014400
 80098e4:	40014800 	.word	0x40014800
 80098e8:	40015000 	.word	0x40015000

080098ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e049      	b.n	8009992 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f841 	bl	800999a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f000 fe12 	bl	800a554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80099a2:	bf00      	nop
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
	...

080099b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <HAL_TIM_IC_Start_IT+0x1e>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	e023      	b.n	8009a16 <HAL_TIM_IC_Start_IT+0x66>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d104      	bne.n	80099de <HAL_TIM_IC_Start_IT+0x2e>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	e01b      	b.n	8009a16 <HAL_TIM_IC_Start_IT+0x66>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d104      	bne.n	80099ee <HAL_TIM_IC_Start_IT+0x3e>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	e013      	b.n	8009a16 <HAL_TIM_IC_Start_IT+0x66>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b0c      	cmp	r3, #12
 80099f2:	d104      	bne.n	80099fe <HAL_TIM_IC_Start_IT+0x4e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	e00b      	b.n	8009a16 <HAL_TIM_IC_Start_IT+0x66>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b10      	cmp	r3, #16
 8009a02:	d104      	bne.n	8009a0e <HAL_TIM_IC_Start_IT+0x5e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	e003      	b.n	8009a16 <HAL_TIM_IC_Start_IT+0x66>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <HAL_TIM_IC_Start_IT+0x78>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	e013      	b.n	8009a50 <HAL_TIM_IC_Start_IT+0xa0>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d104      	bne.n	8009a38 <HAL_TIM_IC_Start_IT+0x88>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	e00b      	b.n	8009a50 <HAL_TIM_IC_Start_IT+0xa0>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b08      	cmp	r3, #8
 8009a3c:	d104      	bne.n	8009a48 <HAL_TIM_IC_Start_IT+0x98>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	e003      	b.n	8009a50 <HAL_TIM_IC_Start_IT+0xa0>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d102      	bne.n	8009a5e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a58:	7b7b      	ldrb	r3, [r7, #13]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d001      	beq.n	8009a62 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e0e2      	b.n	8009c28 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d104      	bne.n	8009a72 <HAL_TIM_IC_Start_IT+0xc2>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a70:	e023      	b.n	8009aba <HAL_TIM_IC_Start_IT+0x10a>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d104      	bne.n	8009a82 <HAL_TIM_IC_Start_IT+0xd2>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a80:	e01b      	b.n	8009aba <HAL_TIM_IC_Start_IT+0x10a>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	d104      	bne.n	8009a92 <HAL_TIM_IC_Start_IT+0xe2>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a90:	e013      	b.n	8009aba <HAL_TIM_IC_Start_IT+0x10a>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b0c      	cmp	r3, #12
 8009a96:	d104      	bne.n	8009aa2 <HAL_TIM_IC_Start_IT+0xf2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009aa0:	e00b      	b.n	8009aba <HAL_TIM_IC_Start_IT+0x10a>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b10      	cmp	r3, #16
 8009aa6:	d104      	bne.n	8009ab2 <HAL_TIM_IC_Start_IT+0x102>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2202      	movs	r2, #2
 8009aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ab0:	e003      	b.n	8009aba <HAL_TIM_IC_Start_IT+0x10a>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d104      	bne.n	8009aca <HAL_TIM_IC_Start_IT+0x11a>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ac8:	e013      	b.n	8009af2 <HAL_TIM_IC_Start_IT+0x142>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d104      	bne.n	8009ada <HAL_TIM_IC_Start_IT+0x12a>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ad8:	e00b      	b.n	8009af2 <HAL_TIM_IC_Start_IT+0x142>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b08      	cmp	r3, #8
 8009ade:	d104      	bne.n	8009aea <HAL_TIM_IC_Start_IT+0x13a>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ae8:	e003      	b.n	8009af2 <HAL_TIM_IC_Start_IT+0x142>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2202      	movs	r2, #2
 8009aee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b0c      	cmp	r3, #12
 8009af6:	d841      	bhi.n	8009b7c <HAL_TIM_IC_Start_IT+0x1cc>
 8009af8:	a201      	add	r2, pc, #4	@ (adr r2, 8009b00 <HAL_TIM_IC_Start_IT+0x150>)
 8009afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afe:	bf00      	nop
 8009b00:	08009b35 	.word	0x08009b35
 8009b04:	08009b7d 	.word	0x08009b7d
 8009b08:	08009b7d 	.word	0x08009b7d
 8009b0c:	08009b7d 	.word	0x08009b7d
 8009b10:	08009b47 	.word	0x08009b47
 8009b14:	08009b7d 	.word	0x08009b7d
 8009b18:	08009b7d 	.word	0x08009b7d
 8009b1c:	08009b7d 	.word	0x08009b7d
 8009b20:	08009b59 	.word	0x08009b59
 8009b24:	08009b7d 	.word	0x08009b7d
 8009b28:	08009b7d 	.word	0x08009b7d
 8009b2c:	08009b7d 	.word	0x08009b7d
 8009b30:	08009b6b 	.word	0x08009b6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0202 	orr.w	r2, r2, #2
 8009b42:	60da      	str	r2, [r3, #12]
      break;
 8009b44:	e01d      	b.n	8009b82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68da      	ldr	r2, [r3, #12]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f042 0204 	orr.w	r2, r2, #4
 8009b54:	60da      	str	r2, [r3, #12]
      break;
 8009b56:	e014      	b.n	8009b82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f042 0208 	orr.w	r2, r2, #8
 8009b66:	60da      	str	r2, [r3, #12]
      break;
 8009b68:	e00b      	b.n	8009b82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68da      	ldr	r2, [r3, #12]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f042 0210 	orr.w	r2, r2, #16
 8009b78:	60da      	str	r2, [r3, #12]
      break;
 8009b7a:	e002      	b.n	8009b82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b80:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d14e      	bne.n	8009c26 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fa83 	bl	800b09c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a25      	ldr	r2, [pc, #148]	@ (8009c30 <HAL_TIM_IC_Start_IT+0x280>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d022      	beq.n	8009be6 <HAL_TIM_IC_Start_IT+0x236>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ba8:	d01d      	beq.n	8009be6 <HAL_TIM_IC_Start_IT+0x236>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a21      	ldr	r2, [pc, #132]	@ (8009c34 <HAL_TIM_IC_Start_IT+0x284>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d018      	beq.n	8009be6 <HAL_TIM_IC_Start_IT+0x236>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8009c38 <HAL_TIM_IC_Start_IT+0x288>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d013      	beq.n	8009be6 <HAL_TIM_IC_Start_IT+0x236>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8009c3c <HAL_TIM_IC_Start_IT+0x28c>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d00e      	beq.n	8009be6 <HAL_TIM_IC_Start_IT+0x236>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8009c40 <HAL_TIM_IC_Start_IT+0x290>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d009      	beq.n	8009be6 <HAL_TIM_IC_Start_IT+0x236>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8009c44 <HAL_TIM_IC_Start_IT+0x294>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d004      	beq.n	8009be6 <HAL_TIM_IC_Start_IT+0x236>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a19      	ldr	r2, [pc, #100]	@ (8009c48 <HAL_TIM_IC_Start_IT+0x298>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d115      	bne.n	8009c12 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689a      	ldr	r2, [r3, #8]
 8009bec:	4b17      	ldr	r3, [pc, #92]	@ (8009c4c <HAL_TIM_IC_Start_IT+0x29c>)
 8009bee:	4013      	ands	r3, r2
 8009bf0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b06      	cmp	r3, #6
 8009bf6:	d015      	beq.n	8009c24 <HAL_TIM_IC_Start_IT+0x274>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bfe:	d011      	beq.n	8009c24 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0201 	orr.w	r2, r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c10:	e008      	b.n	8009c24 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0201 	orr.w	r2, r2, #1
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e000      	b.n	8009c26 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c24:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	40012c00 	.word	0x40012c00
 8009c34:	40000400 	.word	0x40000400
 8009c38:	40000800 	.word	0x40000800
 8009c3c:	40000c00 	.word	0x40000c00
 8009c40:	40013400 	.word	0x40013400
 8009c44:	40014000 	.word	0x40014000
 8009c48:	40015000 	.word	0x40015000
 8009c4c:	00010007 	.word	0x00010007

08009c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d020      	beq.n	8009cb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01b      	beq.n	8009cb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f06f 0202 	mvn.w	r2, #2
 8009c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7f8 f8f4 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8009ca0:	e005      	b.n	8009cae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fc38 	bl	800a518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fc3f 	bl	800a52c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f003 0304 	and.w	r3, r3, #4
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d020      	beq.n	8009d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01b      	beq.n	8009d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f06f 0204 	mvn.w	r2, #4
 8009cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7f8 f8ce 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8009cec:	e005      	b.n	8009cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fc12 	bl	800a518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fc19 	bl	800a52c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d020      	beq.n	8009d4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01b      	beq.n	8009d4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f06f 0208 	mvn.w	r2, #8
 8009d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2204      	movs	r2, #4
 8009d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	f003 0303 	and.w	r3, r3, #3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7f8 f8a8 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8009d38:	e005      	b.n	8009d46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fbec 	bl	800a518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fbf3 	bl	800a52c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f003 0310 	and.w	r3, r3, #16
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d020      	beq.n	8009d98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f003 0310 	and.w	r3, r3, #16
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01b      	beq.n	8009d98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f06f 0210 	mvn.w	r2, #16
 8009d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	69db      	ldr	r3, [r3, #28]
 8009d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7f8 f882 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8009d84:	e005      	b.n	8009d92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fbc6 	bl	800a518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fbcd 	bl	800a52c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00c      	beq.n	8009dbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d007      	beq.n	8009dbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f06f 0201 	mvn.w	r2, #1
 8009db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fba4 	bl	800a504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d104      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00c      	beq.n	8009dea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d007      	beq.n	8009dea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fbd3 	bl	800b590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00c      	beq.n	8009e0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d007      	beq.n	8009e0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 fbcb 	bl	800b5a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00c      	beq.n	8009e32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fb87 	bl	800a540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00c      	beq.n	8009e56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d007      	beq.n	8009e56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f06f 0220 	mvn.w	r2, #32
 8009e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 fb93 	bl	800b57c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00c      	beq.n	8009e7a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d007      	beq.n	8009e7a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 fb9f 	bl	800b5b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00c      	beq.n	8009e9e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 fb97 	bl	800b5cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00c      	beq.n	8009ec2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 fb8f 	bl	800b5e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00c      	beq.n	8009ee6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 fb87 	bl	800b5f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b086      	sub	sp, #24
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_TIM_IC_ConfigChannel+0x1e>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e088      	b.n	800a01e <HAL_TIM_IC_ConfigChannel+0x130>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d11b      	bne.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009f2a:	f000 fef1 	bl	800ad10 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 020c 	bic.w	r2, r2, #12
 8009f3c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6999      	ldr	r1, [r3, #24]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	619a      	str	r2, [r3, #24]
 8009f50:	e060      	b.n	800a014 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	d11c      	bne.n	8009f92 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009f68:	f000 ff75 	bl	800ae56 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	699a      	ldr	r2, [r3, #24]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009f7a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6999      	ldr	r1, [r3, #24]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	021a      	lsls	r2, r3, #8
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	430a      	orrs	r2, r1
 8009f8e:	619a      	str	r2, [r3, #24]
 8009f90:	e040      	b.n	800a014 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	d11b      	bne.n	8009fd0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009fa8:	f000 ffc2 	bl	800af30 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	69da      	ldr	r2, [r3, #28]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f022 020c 	bic.w	r2, r2, #12
 8009fba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	69d9      	ldr	r1, [r3, #28]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	61da      	str	r2, [r3, #28]
 8009fce:	e021      	b.n	800a014 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b0c      	cmp	r3, #12
 8009fd4:	d11c      	bne.n	800a010 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009fe6:	f000 ffdf 	bl	800afa8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009ff8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	69d9      	ldr	r1, [r3, #28]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	021a      	lsls	r2, r3, #8
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	61da      	str	r2, [r3, #28]
 800a00e:	e001      	b.n	800a014 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d101      	bne.n	800a046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a042:	2302      	movs	r3, #2
 800a044:	e0ff      	b.n	800a246 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b14      	cmp	r3, #20
 800a052:	f200 80f0 	bhi.w	800a236 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a056:	a201      	add	r2, pc, #4	@ (adr r2, 800a05c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a0b1 	.word	0x0800a0b1
 800a060:	0800a237 	.word	0x0800a237
 800a064:	0800a237 	.word	0x0800a237
 800a068:	0800a237 	.word	0x0800a237
 800a06c:	0800a0f1 	.word	0x0800a0f1
 800a070:	0800a237 	.word	0x0800a237
 800a074:	0800a237 	.word	0x0800a237
 800a078:	0800a237 	.word	0x0800a237
 800a07c:	0800a133 	.word	0x0800a133
 800a080:	0800a237 	.word	0x0800a237
 800a084:	0800a237 	.word	0x0800a237
 800a088:	0800a237 	.word	0x0800a237
 800a08c:	0800a173 	.word	0x0800a173
 800a090:	0800a237 	.word	0x0800a237
 800a094:	0800a237 	.word	0x0800a237
 800a098:	0800a237 	.word	0x0800a237
 800a09c:	0800a1b5 	.word	0x0800a1b5
 800a0a0:	0800a237 	.word	0x0800a237
 800a0a4:	0800a237 	.word	0x0800a237
 800a0a8:	0800a237 	.word	0x0800a237
 800a0ac:	0800a1f5 	.word	0x0800a1f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68b9      	ldr	r1, [r7, #8]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 fb00 	bl	800a6bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699a      	ldr	r2, [r3, #24]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0208 	orr.w	r2, r2, #8
 800a0ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 0204 	bic.w	r2, r2, #4
 800a0da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6999      	ldr	r1, [r3, #24]
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	619a      	str	r2, [r3, #24]
      break;
 800a0ee:	e0a5      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68b9      	ldr	r1, [r7, #8]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 fb7a 	bl	800a7f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	699a      	ldr	r2, [r3, #24]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a10a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a11a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6999      	ldr	r1, [r3, #24]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	021a      	lsls	r2, r3, #8
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	619a      	str	r2, [r3, #24]
      break;
 800a130:	e084      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68b9      	ldr	r1, [r7, #8]
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 fbed 	bl	800a918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69da      	ldr	r2, [r3, #28]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0208 	orr.w	r2, r2, #8
 800a14c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69da      	ldr	r2, [r3, #28]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f022 0204 	bic.w	r2, r2, #4
 800a15c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69d9      	ldr	r1, [r3, #28]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	691a      	ldr	r2, [r3, #16]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	430a      	orrs	r2, r1
 800a16e:	61da      	str	r2, [r3, #28]
      break;
 800a170:	e064      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68b9      	ldr	r1, [r7, #8]
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fc5f 	bl	800aa3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69da      	ldr	r2, [r3, #28]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a18c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69da      	ldr	r2, [r3, #28]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a19c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69d9      	ldr	r1, [r3, #28]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	021a      	lsls	r2, r3, #8
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	61da      	str	r2, [r3, #28]
      break;
 800a1b2:	e043      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 fcd2 	bl	800ab64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0208 	orr.w	r2, r2, #8
 800a1ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0204 	bic.w	r2, r2, #4
 800a1de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	691a      	ldr	r2, [r3, #16]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a1f2:	e023      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68b9      	ldr	r1, [r7, #8]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fd1c 	bl	800ac38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a20e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a21e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	021a      	lsls	r2, r3, #8
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a234:	e002      	b.n	800a23c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	75fb      	strb	r3, [r7, #23]
      break;
 800a23a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop

0800a250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a264:	2b01      	cmp	r3, #1
 800a266:	d101      	bne.n	800a26c <HAL_TIM_ConfigClockSource+0x1c>
 800a268:	2302      	movs	r3, #2
 800a26a:	e0f6      	b.n	800a45a <HAL_TIM_ConfigClockSource+0x20a>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2202      	movs	r2, #2
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a28a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a28e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a6f      	ldr	r2, [pc, #444]	@ (800a464 <HAL_TIM_ConfigClockSource+0x214>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	f000 80c1 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a2ac:	4a6d      	ldr	r2, [pc, #436]	@ (800a464 <HAL_TIM_ConfigClockSource+0x214>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	f200 80c6 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2b4:	4a6c      	ldr	r2, [pc, #432]	@ (800a468 <HAL_TIM_ConfigClockSource+0x218>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	f000 80b9 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a2bc:	4a6a      	ldr	r2, [pc, #424]	@ (800a468 <HAL_TIM_ConfigClockSource+0x218>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	f200 80be 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2c4:	4a69      	ldr	r2, [pc, #420]	@ (800a46c <HAL_TIM_ConfigClockSource+0x21c>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	f000 80b1 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a2cc:	4a67      	ldr	r2, [pc, #412]	@ (800a46c <HAL_TIM_ConfigClockSource+0x21c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	f200 80b6 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2d4:	4a66      	ldr	r2, [pc, #408]	@ (800a470 <HAL_TIM_ConfigClockSource+0x220>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	f000 80a9 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a2dc:	4a64      	ldr	r2, [pc, #400]	@ (800a470 <HAL_TIM_ConfigClockSource+0x220>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	f200 80ae 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2e4:	4a63      	ldr	r2, [pc, #396]	@ (800a474 <HAL_TIM_ConfigClockSource+0x224>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	f000 80a1 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a2ec:	4a61      	ldr	r2, [pc, #388]	@ (800a474 <HAL_TIM_ConfigClockSource+0x224>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	f200 80a6 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2f4:	4a60      	ldr	r2, [pc, #384]	@ (800a478 <HAL_TIM_ConfigClockSource+0x228>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	f000 8099 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a2fc:	4a5e      	ldr	r2, [pc, #376]	@ (800a478 <HAL_TIM_ConfigClockSource+0x228>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	f200 809e 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a304:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a308:	f000 8091 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a30c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a310:	f200 8096 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a318:	f000 8089 	beq.w	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a31c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a320:	f200 808e 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a328:	d03e      	beq.n	800a3a8 <HAL_TIM_ConfigClockSource+0x158>
 800a32a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a32e:	f200 8087 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a336:	f000 8086 	beq.w	800a446 <HAL_TIM_ConfigClockSource+0x1f6>
 800a33a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a33e:	d87f      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a340:	2b70      	cmp	r3, #112	@ 0x70
 800a342:	d01a      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x12a>
 800a344:	2b70      	cmp	r3, #112	@ 0x70
 800a346:	d87b      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a348:	2b60      	cmp	r3, #96	@ 0x60
 800a34a:	d050      	beq.n	800a3ee <HAL_TIM_ConfigClockSource+0x19e>
 800a34c:	2b60      	cmp	r3, #96	@ 0x60
 800a34e:	d877      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a350:	2b50      	cmp	r3, #80	@ 0x50
 800a352:	d03c      	beq.n	800a3ce <HAL_TIM_ConfigClockSource+0x17e>
 800a354:	2b50      	cmp	r3, #80	@ 0x50
 800a356:	d873      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a358:	2b40      	cmp	r3, #64	@ 0x40
 800a35a:	d058      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0x1be>
 800a35c:	2b40      	cmp	r3, #64	@ 0x40
 800a35e:	d86f      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a360:	2b30      	cmp	r3, #48	@ 0x30
 800a362:	d064      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a364:	2b30      	cmp	r3, #48	@ 0x30
 800a366:	d86b      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a368:	2b20      	cmp	r3, #32
 800a36a:	d060      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d867      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05c      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a374:	2b10      	cmp	r3, #16
 800a376:	d05a      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x1de>
 800a378:	e062      	b.n	800a440 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a38a:	f000 fe67 	bl	800b05c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a39c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	609a      	str	r2, [r3, #8]
      break;
 800a3a6:	e04f      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3b8:	f000 fe50 	bl	800b05c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3ca:	609a      	str	r2, [r3, #8]
      break;
 800a3cc:	e03c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f000 fd0c 	bl	800adf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2150      	movs	r1, #80	@ 0x50
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fe1b 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800a3ec:	e02c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f000 fd68 	bl	800aed0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2160      	movs	r1, #96	@ 0x60
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fe0b 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800a40c:	e01c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a41a:	461a      	mov	r2, r3
 800a41c:	f000 fcec 	bl	800adf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2140      	movs	r1, #64	@ 0x40
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fdfb 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800a42c:	e00c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f000 fdf2 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800a43e:	e003      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]
      break;
 800a444:	e000      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	00100070 	.word	0x00100070
 800a468:	00100060 	.word	0x00100060
 800a46c:	00100050 	.word	0x00100050
 800a470:	00100040 	.word	0x00100040
 800a474:	00100030 	.word	0x00100030
 800a478:	00100020 	.word	0x00100020

0800a47c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a486:	2300      	movs	r3, #0
 800a488:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b0c      	cmp	r3, #12
 800a48e:	d831      	bhi.n	800a4f4 <HAL_TIM_ReadCapturedValue+0x78>
 800a490:	a201      	add	r2, pc, #4	@ (adr r2, 800a498 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a4cd 	.word	0x0800a4cd
 800a49c:	0800a4f5 	.word	0x0800a4f5
 800a4a0:	0800a4f5 	.word	0x0800a4f5
 800a4a4:	0800a4f5 	.word	0x0800a4f5
 800a4a8:	0800a4d7 	.word	0x0800a4d7
 800a4ac:	0800a4f5 	.word	0x0800a4f5
 800a4b0:	0800a4f5 	.word	0x0800a4f5
 800a4b4:	0800a4f5 	.word	0x0800a4f5
 800a4b8:	0800a4e1 	.word	0x0800a4e1
 800a4bc:	0800a4f5 	.word	0x0800a4f5
 800a4c0:	0800a4f5 	.word	0x0800a4f5
 800a4c4:	0800a4f5 	.word	0x0800a4f5
 800a4c8:	0800a4eb 	.word	0x0800a4eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d2:	60fb      	str	r3, [r7, #12]

      break;
 800a4d4:	e00f      	b.n	800a4f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4dc:	60fb      	str	r3, [r7, #12]

      break;
 800a4de:	e00a      	b.n	800a4f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e6:	60fb      	str	r3, [r7, #12]

      break;
 800a4e8:	e005      	b.n	800a4f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f0:	60fb      	str	r3, [r7, #12]

      break;
 800a4f2:	e000      	b.n	800a4f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a4f4:	bf00      	nop
  }

  return tmpreg;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a4c      	ldr	r2, [pc, #304]	@ (800a698 <TIM_Base_SetConfig+0x144>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d017      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a572:	d013      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a49      	ldr	r2, [pc, #292]	@ (800a69c <TIM_Base_SetConfig+0x148>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00f      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a48      	ldr	r2, [pc, #288]	@ (800a6a0 <TIM_Base_SetConfig+0x14c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d00b      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a47      	ldr	r2, [pc, #284]	@ (800a6a4 <TIM_Base_SetConfig+0x150>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d007      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a46      	ldr	r2, [pc, #280]	@ (800a6a8 <TIM_Base_SetConfig+0x154>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d003      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a45      	ldr	r2, [pc, #276]	@ (800a6ac <TIM_Base_SetConfig+0x158>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d108      	bne.n	800a5ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a39      	ldr	r2, [pc, #228]	@ (800a698 <TIM_Base_SetConfig+0x144>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d023      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5bc:	d01f      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a36      	ldr	r2, [pc, #216]	@ (800a69c <TIM_Base_SetConfig+0x148>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d01b      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a35      	ldr	r2, [pc, #212]	@ (800a6a0 <TIM_Base_SetConfig+0x14c>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d017      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a34      	ldr	r2, [pc, #208]	@ (800a6a4 <TIM_Base_SetConfig+0x150>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d013      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a33      	ldr	r2, [pc, #204]	@ (800a6a8 <TIM_Base_SetConfig+0x154>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d00f      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a33      	ldr	r2, [pc, #204]	@ (800a6b0 <TIM_Base_SetConfig+0x15c>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d00b      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a32      	ldr	r2, [pc, #200]	@ (800a6b4 <TIM_Base_SetConfig+0x160>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d007      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a31      	ldr	r2, [pc, #196]	@ (800a6b8 <TIM_Base_SetConfig+0x164>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d003      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ac <TIM_Base_SetConfig+0x158>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d108      	bne.n	800a610 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a18      	ldr	r2, [pc, #96]	@ (800a698 <TIM_Base_SetConfig+0x144>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d013      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6a8 <TIM_Base_SetConfig+0x154>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00f      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a1a      	ldr	r2, [pc, #104]	@ (800a6b0 <TIM_Base_SetConfig+0x15c>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00b      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a19      	ldr	r2, [pc, #100]	@ (800a6b4 <TIM_Base_SetConfig+0x160>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d007      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a18      	ldr	r2, [pc, #96]	@ (800a6b8 <TIM_Base_SetConfig+0x164>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a13      	ldr	r2, [pc, #76]	@ (800a6ac <TIM_Base_SetConfig+0x158>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d103      	bne.n	800a66c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	691a      	ldr	r2, [r3, #16]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d105      	bne.n	800a68a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f023 0201 	bic.w	r2, r3, #1
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	611a      	str	r2, [r3, #16]
  }
}
 800a68a:	bf00      	nop
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40012c00 	.word	0x40012c00
 800a69c:	40000400 	.word	0x40000400
 800a6a0:	40000800 	.word	0x40000800
 800a6a4:	40000c00 	.word	0x40000c00
 800a6a8:	40013400 	.word	0x40013400
 800a6ac:	40015000 	.word	0x40015000
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40014400 	.word	0x40014400
 800a6b8:	40014800 	.word	0x40014800

0800a6bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	f023 0201 	bic.w	r2, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f023 0302 	bic.w	r3, r3, #2
 800a708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4313      	orrs	r3, r2
 800a712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a30      	ldr	r2, [pc, #192]	@ (800a7d8 <TIM_OC1_SetConfig+0x11c>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d013      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a2f      	ldr	r2, [pc, #188]	@ (800a7dc <TIM_OC1_SetConfig+0x120>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d00f      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a2e      	ldr	r2, [pc, #184]	@ (800a7e0 <TIM_OC1_SetConfig+0x124>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d00b      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a2d      	ldr	r2, [pc, #180]	@ (800a7e4 <TIM_OC1_SetConfig+0x128>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d007      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a2c      	ldr	r2, [pc, #176]	@ (800a7e8 <TIM_OC1_SetConfig+0x12c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d003      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a2b      	ldr	r2, [pc, #172]	@ (800a7ec <TIM_OC1_SetConfig+0x130>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d10c      	bne.n	800a75e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f023 0308 	bic.w	r3, r3, #8
 800a74a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	4313      	orrs	r3, r2
 800a754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f023 0304 	bic.w	r3, r3, #4
 800a75c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a1d      	ldr	r2, [pc, #116]	@ (800a7d8 <TIM_OC1_SetConfig+0x11c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d013      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a1c      	ldr	r2, [pc, #112]	@ (800a7dc <TIM_OC1_SetConfig+0x120>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d00f      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a1b      	ldr	r2, [pc, #108]	@ (800a7e0 <TIM_OC1_SetConfig+0x124>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d00b      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a1a      	ldr	r2, [pc, #104]	@ (800a7e4 <TIM_OC1_SetConfig+0x128>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d007      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a19      	ldr	r2, [pc, #100]	@ (800a7e8 <TIM_OC1_SetConfig+0x12c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d003      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a18      	ldr	r2, [pc, #96]	@ (800a7ec <TIM_OC1_SetConfig+0x130>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d111      	bne.n	800a7b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a79c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	621a      	str	r2, [r3, #32]
}
 800a7cc:	bf00      	nop
 800a7ce:	371c      	adds	r7, #28
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	40012c00 	.word	0x40012c00
 800a7dc:	40013400 	.word	0x40013400
 800a7e0:	40014000 	.word	0x40014000
 800a7e4:	40014400 	.word	0x40014400
 800a7e8:	40014800 	.word	0x40014800
 800a7ec:	40015000 	.word	0x40015000

0800a7f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a1b      	ldr	r3, [r3, #32]
 800a804:	f023 0210 	bic.w	r2, r3, #16
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a81e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0320 	bic.w	r3, r3, #32
 800a83e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a2c      	ldr	r2, [pc, #176]	@ (800a900 <TIM_OC2_SetConfig+0x110>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d007      	beq.n	800a864 <TIM_OC2_SetConfig+0x74>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a2b      	ldr	r2, [pc, #172]	@ (800a904 <TIM_OC2_SetConfig+0x114>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_OC2_SetConfig+0x74>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a2a      	ldr	r2, [pc, #168]	@ (800a908 <TIM_OC2_SetConfig+0x118>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d10d      	bne.n	800a880 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4313      	orrs	r3, r2
 800a876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a87e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a1f      	ldr	r2, [pc, #124]	@ (800a900 <TIM_OC2_SetConfig+0x110>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d013      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a1e      	ldr	r2, [pc, #120]	@ (800a904 <TIM_OC2_SetConfig+0x114>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d00f      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a1e      	ldr	r2, [pc, #120]	@ (800a90c <TIM_OC2_SetConfig+0x11c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00b      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a1d      	ldr	r2, [pc, #116]	@ (800a910 <TIM_OC2_SetConfig+0x120>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d007      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a914 <TIM_OC2_SetConfig+0x124>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d003      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a17      	ldr	r2, [pc, #92]	@ (800a908 <TIM_OC2_SetConfig+0x118>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d113      	bne.n	800a8d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	699b      	ldr	r3, [r3, #24]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	621a      	str	r2, [r3, #32]
}
 800a8f2:	bf00      	nop
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	40012c00 	.word	0x40012c00
 800a904:	40013400 	.word	0x40013400
 800a908:	40015000 	.word	0x40015000
 800a90c:	40014000 	.word	0x40014000
 800a910:	40014400 	.word	0x40014400
 800a914:	40014800 	.word	0x40014800

0800a918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f023 0303 	bic.w	r3, r3, #3
 800a952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	021b      	lsls	r3, r3, #8
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	4313      	orrs	r3, r2
 800a970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a2b      	ldr	r2, [pc, #172]	@ (800aa24 <TIM_OC3_SetConfig+0x10c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d007      	beq.n	800a98a <TIM_OC3_SetConfig+0x72>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a2a      	ldr	r2, [pc, #168]	@ (800aa28 <TIM_OC3_SetConfig+0x110>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d003      	beq.n	800a98a <TIM_OC3_SetConfig+0x72>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a29      	ldr	r2, [pc, #164]	@ (800aa2c <TIM_OC3_SetConfig+0x114>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d10d      	bne.n	800a9a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	021b      	lsls	r3, r3, #8
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a1e      	ldr	r2, [pc, #120]	@ (800aa24 <TIM_OC3_SetConfig+0x10c>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d013      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa28 <TIM_OC3_SetConfig+0x110>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d00f      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa30 <TIM_OC3_SetConfig+0x118>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d00b      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a1c      	ldr	r2, [pc, #112]	@ (800aa34 <TIM_OC3_SetConfig+0x11c>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d007      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a1b      	ldr	r2, [pc, #108]	@ (800aa38 <TIM_OC3_SetConfig+0x120>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d003      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a16      	ldr	r2, [pc, #88]	@ (800aa2c <TIM_OC3_SetConfig+0x114>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d113      	bne.n	800a9fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	011b      	lsls	r3, r3, #4
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	621a      	str	r2, [r3, #32]
}
 800aa18:	bf00      	nop
 800aa1a:	371c      	adds	r7, #28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	40012c00 	.word	0x40012c00
 800aa28:	40013400 	.word	0x40013400
 800aa2c:	40015000 	.word	0x40015000
 800aa30:	40014000 	.word	0x40014000
 800aa34:	40014400 	.word	0x40014400
 800aa38:	40014800 	.word	0x40014800

0800aa3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	021b      	lsls	r3, r3, #8
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	031b      	lsls	r3, r3, #12
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a2c      	ldr	r2, [pc, #176]	@ (800ab4c <TIM_OC4_SetConfig+0x110>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d007      	beq.n	800aab0 <TIM_OC4_SetConfig+0x74>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a2b      	ldr	r2, [pc, #172]	@ (800ab50 <TIM_OC4_SetConfig+0x114>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d003      	beq.n	800aab0 <TIM_OC4_SetConfig+0x74>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ab54 <TIM_OC4_SetConfig+0x118>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d10d      	bne.n	800aacc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	031b      	lsls	r3, r3, #12
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a1f      	ldr	r2, [pc, #124]	@ (800ab4c <TIM_OC4_SetConfig+0x110>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d013      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a1e      	ldr	r2, [pc, #120]	@ (800ab50 <TIM_OC4_SetConfig+0x114>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00f      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a1e      	ldr	r2, [pc, #120]	@ (800ab58 <TIM_OC4_SetConfig+0x11c>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d00b      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a1d      	ldr	r2, [pc, #116]	@ (800ab5c <TIM_OC4_SetConfig+0x120>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d007      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a1c      	ldr	r2, [pc, #112]	@ (800ab60 <TIM_OC4_SetConfig+0x124>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d003      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a17      	ldr	r2, [pc, #92]	@ (800ab54 <TIM_OC4_SetConfig+0x118>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d113      	bne.n	800ab24 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	019b      	lsls	r3, r3, #6
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	019b      	lsls	r3, r3, #6
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	621a      	str	r2, [r3, #32]
}
 800ab3e:	bf00      	nop
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	40012c00 	.word	0x40012c00
 800ab50:	40013400 	.word	0x40013400
 800ab54:	40015000 	.word	0x40015000
 800ab58:	40014000 	.word	0x40014000
 800ab5c:	40014400 	.word	0x40014400
 800ab60:	40014800 	.word	0x40014800

0800ab64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aba8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	041b      	lsls	r3, r3, #16
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a19      	ldr	r2, [pc, #100]	@ (800ac20 <TIM_OC5_SetConfig+0xbc>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d013      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a18      	ldr	r2, [pc, #96]	@ (800ac24 <TIM_OC5_SetConfig+0xc0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00f      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a17      	ldr	r2, [pc, #92]	@ (800ac28 <TIM_OC5_SetConfig+0xc4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d00b      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a16      	ldr	r2, [pc, #88]	@ (800ac2c <TIM_OC5_SetConfig+0xc8>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d007      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a15      	ldr	r2, [pc, #84]	@ (800ac30 <TIM_OC5_SetConfig+0xcc>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d003      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a14      	ldr	r2, [pc, #80]	@ (800ac34 <TIM_OC5_SetConfig+0xd0>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d109      	bne.n	800abfa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800abec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	621a      	str	r2, [r3, #32]
}
 800ac14:	bf00      	nop
 800ac16:	371c      	adds	r7, #28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	40012c00 	.word	0x40012c00
 800ac24:	40013400 	.word	0x40013400
 800ac28:	40014000 	.word	0x40014000
 800ac2c:	40014400 	.word	0x40014400
 800ac30:	40014800 	.word	0x40014800
 800ac34:	40015000 	.word	0x40015000

0800ac38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a1b      	ldr	r3, [r3, #32]
 800ac4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	051b      	lsls	r3, r3, #20
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a1a      	ldr	r2, [pc, #104]	@ (800acf8 <TIM_OC6_SetConfig+0xc0>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d013      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a19      	ldr	r2, [pc, #100]	@ (800acfc <TIM_OC6_SetConfig+0xc4>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00f      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a18      	ldr	r2, [pc, #96]	@ (800ad00 <TIM_OC6_SetConfig+0xc8>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d00b      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a17      	ldr	r2, [pc, #92]	@ (800ad04 <TIM_OC6_SetConfig+0xcc>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d007      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a16      	ldr	r2, [pc, #88]	@ (800ad08 <TIM_OC6_SetConfig+0xd0>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a15      	ldr	r2, [pc, #84]	@ (800ad0c <TIM_OC6_SetConfig+0xd4>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d109      	bne.n	800acd0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	029b      	lsls	r3, r3, #10
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	4313      	orrs	r3, r2
 800acce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	621a      	str	r2, [r3, #32]
}
 800acea:	bf00      	nop
 800acec:	371c      	adds	r7, #28
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	40012c00 	.word	0x40012c00
 800acfc:	40013400 	.word	0x40013400
 800ad00:	40014000 	.word	0x40014000
 800ad04:	40014400 	.word	0x40014400
 800ad08:	40014800 	.word	0x40014800
 800ad0c:	40015000 	.word	0x40015000

0800ad10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6a1b      	ldr	r3, [r3, #32]
 800ad28:	f023 0201 	bic.w	r2, r3, #1
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4a28      	ldr	r2, [pc, #160]	@ (800addc <TIM_TI1_SetConfig+0xcc>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d01b      	beq.n	800ad76 <TIM_TI1_SetConfig+0x66>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad44:	d017      	beq.n	800ad76 <TIM_TI1_SetConfig+0x66>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	4a25      	ldr	r2, [pc, #148]	@ (800ade0 <TIM_TI1_SetConfig+0xd0>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d013      	beq.n	800ad76 <TIM_TI1_SetConfig+0x66>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	4a24      	ldr	r2, [pc, #144]	@ (800ade4 <TIM_TI1_SetConfig+0xd4>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d00f      	beq.n	800ad76 <TIM_TI1_SetConfig+0x66>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4a23      	ldr	r2, [pc, #140]	@ (800ade8 <TIM_TI1_SetConfig+0xd8>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d00b      	beq.n	800ad76 <TIM_TI1_SetConfig+0x66>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	4a22      	ldr	r2, [pc, #136]	@ (800adec <TIM_TI1_SetConfig+0xdc>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d007      	beq.n	800ad76 <TIM_TI1_SetConfig+0x66>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	4a21      	ldr	r2, [pc, #132]	@ (800adf0 <TIM_TI1_SetConfig+0xe0>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d003      	beq.n	800ad76 <TIM_TI1_SetConfig+0x66>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4a20      	ldr	r2, [pc, #128]	@ (800adf4 <TIM_TI1_SetConfig+0xe4>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d101      	bne.n	800ad7a <TIM_TI1_SetConfig+0x6a>
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <TIM_TI1_SetConfig+0x6c>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d008      	beq.n	800ad92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f023 0303 	bic.w	r3, r3, #3
 800ad86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	e003      	b.n	800ad9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f043 0301 	orr.w	r3, r3, #1
 800ad98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ada0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	011b      	lsls	r3, r3, #4
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	4313      	orrs	r3, r2
 800adac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f023 030a 	bic.w	r3, r3, #10
 800adb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	f003 030a 	and.w	r3, r3, #10
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	621a      	str	r2, [r3, #32]
}
 800adce:	bf00      	nop
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	40012c00 	.word	0x40012c00
 800ade0:	40000400 	.word	0x40000400
 800ade4:	40000800 	.word	0x40000800
 800ade8:	40000c00 	.word	0x40000c00
 800adec:	40013400 	.word	0x40013400
 800adf0:	40014000 	.word	0x40014000
 800adf4:	40015000 	.word	0x40015000

0800adf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	f023 0201 	bic.w	r2, r3, #1
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f023 030a 	bic.w	r3, r3, #10
 800ae34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	621a      	str	r2, [r3, #32]
}
 800ae4a:	bf00      	nop
 800ae4c:	371c      	adds	r7, #28
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b087      	sub	sp, #28
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	60f8      	str	r0, [r7, #12]
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
 800ae62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	f023 0210 	bic.w	r2, r3, #16
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	021b      	lsls	r3, r3, #8
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ae94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	031b      	lsls	r3, r3, #12
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aea8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	621a      	str	r2, [r3, #32]
}
 800aec4:	bf00      	nop
 800aec6:	371c      	adds	r7, #28
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	f023 0210 	bic.w	r2, r3, #16
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aefa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	031b      	lsls	r3, r3, #12
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	4313      	orrs	r3, r2
 800af04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	4313      	orrs	r3, r2
 800af16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	621a      	str	r2, [r3, #32]
}
 800af24:	bf00      	nop
 800af26:	371c      	adds	r7, #28
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af30:	b480      	push	{r7}
 800af32:	b087      	sub	sp, #28
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f023 0303 	bic.w	r3, r3, #3
 800af5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4313      	orrs	r3, r2
 800af64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800af6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	011b      	lsls	r3, r3, #4
 800af72:	b2db      	uxtb	r3, r3
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	4313      	orrs	r3, r2
 800af78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800af80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	021b      	lsls	r3, r3, #8
 800af86:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	621a      	str	r2, [r3, #32]
}
 800af9c:	bf00      	nop
 800af9e:	371c      	adds	r7, #28
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
 800afb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	69db      	ldr	r3, [r3, #28]
 800afcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afd4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	021b      	lsls	r3, r3, #8
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	4313      	orrs	r3, r2
 800afde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800afe6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	031b      	lsls	r3, r3, #12
 800afec:	b29b      	uxth	r3, r3
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800affa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	031b      	lsls	r3, r3, #12
 800b000:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	4313      	orrs	r3, r2
 800b008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	621a      	str	r2, [r3, #32]
}
 800b016:	bf00      	nop
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b022:	b480      	push	{r7}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b03c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	f043 0307 	orr.w	r3, r3, #7
 800b048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	609a      	str	r2, [r3, #8]
}
 800b050:	bf00      	nop
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	021a      	lsls	r2, r3, #8
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	431a      	orrs	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	4313      	orrs	r3, r2
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	609a      	str	r2, [r3, #8]
}
 800b090:	bf00      	nop
 800b092:	371c      	adds	r7, #28
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f003 031f 	and.w	r3, r3, #31
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1a      	ldr	r2, [r3, #32]
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	401a      	ands	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6a1a      	ldr	r2, [r3, #32]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	f003 031f 	and.w	r3, r3, #31
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
	...

0800b0e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d109      	bne.n	800b10c <HAL_TIMEx_PWMN_Start+0x24>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b01      	cmp	r3, #1
 800b102:	bf14      	ite	ne
 800b104:	2301      	movne	r3, #1
 800b106:	2300      	moveq	r3, #0
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	e022      	b.n	800b152 <HAL_TIMEx_PWMN_Start+0x6a>
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d109      	bne.n	800b126 <HAL_TIMEx_PWMN_Start+0x3e>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	bf14      	ite	ne
 800b11e:	2301      	movne	r3, #1
 800b120:	2300      	moveq	r3, #0
 800b122:	b2db      	uxtb	r3, r3
 800b124:	e015      	b.n	800b152 <HAL_TIMEx_PWMN_Start+0x6a>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d109      	bne.n	800b140 <HAL_TIMEx_PWMN_Start+0x58>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b01      	cmp	r3, #1
 800b136:	bf14      	ite	ne
 800b138:	2301      	movne	r3, #1
 800b13a:	2300      	moveq	r3, #0
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	e008      	b.n	800b152 <HAL_TIMEx_PWMN_Start+0x6a>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b01      	cmp	r3, #1
 800b14a:	bf14      	ite	ne
 800b14c:	2301      	movne	r3, #1
 800b14e:	2300      	moveq	r3, #0
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e073      	b.n	800b242 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d104      	bne.n	800b16a <HAL_TIMEx_PWMN_Start+0x82>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2202      	movs	r2, #2
 800b164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b168:	e013      	b.n	800b192 <HAL_TIMEx_PWMN_Start+0xaa>
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2b04      	cmp	r3, #4
 800b16e:	d104      	bne.n	800b17a <HAL_TIMEx_PWMN_Start+0x92>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b178:	e00b      	b.n	800b192 <HAL_TIMEx_PWMN_Start+0xaa>
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b08      	cmp	r3, #8
 800b17e:	d104      	bne.n	800b18a <HAL_TIMEx_PWMN_Start+0xa2>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b188:	e003      	b.n	800b192 <HAL_TIMEx_PWMN_Start+0xaa>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2202      	movs	r2, #2
 800b18e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2204      	movs	r2, #4
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 fa34 	bl	800b608 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b1ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a25      	ldr	r2, [pc, #148]	@ (800b24c <HAL_TIMEx_PWMN_Start+0x164>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d022      	beq.n	800b200 <HAL_TIMEx_PWMN_Start+0x118>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1c2:	d01d      	beq.n	800b200 <HAL_TIMEx_PWMN_Start+0x118>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a21      	ldr	r2, [pc, #132]	@ (800b250 <HAL_TIMEx_PWMN_Start+0x168>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d018      	beq.n	800b200 <HAL_TIMEx_PWMN_Start+0x118>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a20      	ldr	r2, [pc, #128]	@ (800b254 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d013      	beq.n	800b200 <HAL_TIMEx_PWMN_Start+0x118>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a1e      	ldr	r2, [pc, #120]	@ (800b258 <HAL_TIMEx_PWMN_Start+0x170>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00e      	beq.n	800b200 <HAL_TIMEx_PWMN_Start+0x118>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a1d      	ldr	r2, [pc, #116]	@ (800b25c <HAL_TIMEx_PWMN_Start+0x174>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d009      	beq.n	800b200 <HAL_TIMEx_PWMN_Start+0x118>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b260 <HAL_TIMEx_PWMN_Start+0x178>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d004      	beq.n	800b200 <HAL_TIMEx_PWMN_Start+0x118>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a1a      	ldr	r2, [pc, #104]	@ (800b264 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d115      	bne.n	800b22c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689a      	ldr	r2, [r3, #8]
 800b206:	4b18      	ldr	r3, [pc, #96]	@ (800b268 <HAL_TIMEx_PWMN_Start+0x180>)
 800b208:	4013      	ands	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2b06      	cmp	r3, #6
 800b210:	d015      	beq.n	800b23e <HAL_TIMEx_PWMN_Start+0x156>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b218:	d011      	beq.n	800b23e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f042 0201 	orr.w	r2, r2, #1
 800b228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b22a:	e008      	b.n	800b23e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	e000      	b.n	800b240 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b23e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	40012c00 	.word	0x40012c00
 800b250:	40000400 	.word	0x40000400
 800b254:	40000800 	.word	0x40000800
 800b258:	40000c00 	.word	0x40000c00
 800b25c:	40013400 	.word	0x40013400
 800b260:	40014000 	.word	0x40014000
 800b264:	40015000 	.word	0x40015000
 800b268:	00010007 	.word	0x00010007

0800b26c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2200      	movs	r2, #0
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 f9c2 	bl	800b608 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6a1a      	ldr	r2, [r3, #32]
 800b28a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b28e:	4013      	ands	r3, r2
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10f      	bne.n	800b2b4 <HAL_TIMEx_PWMN_Stop+0x48>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6a1a      	ldr	r2, [r3, #32]
 800b29a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b29e:	4013      	ands	r3, r2
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d107      	bne.n	800b2b4 <HAL_TIMEx_PWMN_Stop+0x48>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b2b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	6a1a      	ldr	r2, [r3, #32]
 800b2ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b2be:	4013      	ands	r3, r2
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10f      	bne.n	800b2e4 <HAL_TIMEx_PWMN_Stop+0x78>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6a1a      	ldr	r2, [r3, #32]
 800b2ca:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d107      	bne.n	800b2e4 <HAL_TIMEx_PWMN_Stop+0x78>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f022 0201 	bic.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d104      	bne.n	800b2f4 <HAL_TIMEx_PWMN_Stop+0x88>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2f2:	e013      	b.n	800b31c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b04      	cmp	r3, #4
 800b2f8:	d104      	bne.n	800b304 <HAL_TIMEx_PWMN_Stop+0x98>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b302:	e00b      	b.n	800b31c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	2b08      	cmp	r3, #8
 800b308:	d104      	bne.n	800b314 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b312:	e003      	b.n	800b31c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
	...

0800b328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d101      	bne.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b33c:	2302      	movs	r3, #2
 800b33e:	e074      	b.n	800b42a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a34      	ldr	r2, [pc, #208]	@ (800b438 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d009      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a33      	ldr	r2, [pc, #204]	@ (800b43c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d004      	beq.n	800b37e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a31      	ldr	r2, [pc, #196]	@ (800b440 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d108      	bne.n	800b390 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b39a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a21      	ldr	r2, [pc, #132]	@ (800b438 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d022      	beq.n	800b3fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3c0:	d01d      	beq.n	800b3fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a1f      	ldr	r2, [pc, #124]	@ (800b444 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d018      	beq.n	800b3fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b448 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d013      	beq.n	800b3fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a1c      	ldr	r2, [pc, #112]	@ (800b44c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d00e      	beq.n	800b3fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a15      	ldr	r2, [pc, #84]	@ (800b43c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d009      	beq.n	800b3fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a18      	ldr	r2, [pc, #96]	@ (800b450 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d004      	beq.n	800b3fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a11      	ldr	r2, [pc, #68]	@ (800b440 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d10c      	bne.n	800b418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	40012c00 	.word	0x40012c00
 800b43c:	40013400 	.word	0x40013400
 800b440:	40015000 	.word	0x40015000
 800b444:	40000400 	.word	0x40000400
 800b448:	40000800 	.word	0x40000800
 800b44c:	40000c00 	.word	0x40000c00
 800b450:	40014000 	.word	0x40014000

0800b454 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b45e:	2300      	movs	r3, #0
 800b460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d101      	bne.n	800b470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b46c:	2302      	movs	r3, #2
 800b46e:	e078      	b.n	800b562 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	4313      	orrs	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	4313      	orrs	r3, r2
 800b492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	041b      	lsls	r3, r3, #16
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a1c      	ldr	r2, [pc, #112]	@ (800b570 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d009      	beq.n	800b516 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a1b      	ldr	r2, [pc, #108]	@ (800b574 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d004      	beq.n	800b516 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a19      	ldr	r2, [pc, #100]	@ (800b578 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d11c      	bne.n	800b550 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b520:	051b      	lsls	r3, r3, #20
 800b522:	4313      	orrs	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	6a1b      	ldr	r3, [r3, #32]
 800b530:	4313      	orrs	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53e:	4313      	orrs	r3, r2
 800b540:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54c:	4313      	orrs	r3, r2
 800b54e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	40012c00 	.word	0x40012c00
 800b574:	40013400 	.word	0x40013400
 800b578:	40015000 	.word	0x40015000

0800b57c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b608:	b480      	push	{r7}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f003 030f 	and.w	r3, r3, #15
 800b61a:	2204      	movs	r2, #4
 800b61c:	fa02 f303 	lsl.w	r3, r2, r3
 800b620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6a1a      	ldr	r2, [r3, #32]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	43db      	mvns	r3, r3
 800b62a:	401a      	ands	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6a1a      	ldr	r2, [r3, #32]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f003 030f 	and.w	r3, r3, #15
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	fa01 f303 	lsl.w	r3, r1, r3
 800b640:	431a      	orrs	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	621a      	str	r2, [r3, #32]
}
 800b646:	bf00      	nop
 800b648:	371c      	adds	r7, #28
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	e042      	b.n	800b6ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7f8 fce4 	bl	8004044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2224      	movs	r2, #36	@ 0x24
 800b680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f022 0201 	bic.w	r2, r2, #1
 800b692:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 ff1d 	bl	800c4dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fc1e 	bl	800bee4 <UART_SetConfig>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d101      	bne.n	800b6b2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e01b      	b.n	800b6ea <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b6c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	689a      	ldr	r2, [r3, #8]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b6d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f042 0201 	orr.w	r2, r2, #1
 800b6e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 ff9c 	bl	800c620 <UART_CheckIdleState>
 800b6e8:	4603      	mov	r3, r0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b08a      	sub	sp, #40	@ 0x28
 800b6f6:	af02      	add	r7, sp, #8
 800b6f8:	60f8      	str	r0, [r7, #12]
 800b6fa:	60b9      	str	r1, [r7, #8]
 800b6fc:	603b      	str	r3, [r7, #0]
 800b6fe:	4613      	mov	r3, r2
 800b700:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b708:	2b20      	cmp	r3, #32
 800b70a:	d17b      	bne.n	800b804 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d002      	beq.n	800b718 <HAL_UART_Transmit+0x26>
 800b712:	88fb      	ldrh	r3, [r7, #6]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	e074      	b.n	800b806 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2221      	movs	r2, #33	@ 0x21
 800b728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b72c:	f7f8 fda8 	bl	8004280 <HAL_GetTick>
 800b730:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	88fa      	ldrh	r2, [r7, #6]
 800b736:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	88fa      	ldrh	r2, [r7, #6]
 800b73e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b74a:	d108      	bne.n	800b75e <HAL_UART_Transmit+0x6c>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d104      	bne.n	800b75e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b754:	2300      	movs	r3, #0
 800b756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	61bb      	str	r3, [r7, #24]
 800b75c:	e003      	b.n	800b766 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b766:	e030      	b.n	800b7ca <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	9300      	str	r3, [sp, #0]
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2200      	movs	r2, #0
 800b770:	2180      	movs	r1, #128	@ 0x80
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f000 fffe 	bl	800c774 <UART_WaitOnFlagUntilTimeout>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d005      	beq.n	800b78a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2220      	movs	r2, #32
 800b782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b786:	2303      	movs	r3, #3
 800b788:	e03d      	b.n	800b806 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10b      	bne.n	800b7a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b79e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	3302      	adds	r3, #2
 800b7a4:	61bb      	str	r3, [r7, #24]
 800b7a6:	e007      	b.n	800b7b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1c8      	bne.n	800b768 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2140      	movs	r1, #64	@ 0x40
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 ffc7 	bl	800c774 <UART_WaitOnFlagUntilTimeout>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d005      	beq.n	800b7f8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e006      	b.n	800b806 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2220      	movs	r2, #32
 800b7fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	e000      	b.n	800b806 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b804:	2302      	movs	r3, #2
  }
}
 800b806:	4618      	mov	r0, r3
 800b808:	3720      	adds	r7, #32
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b0ba      	sub	sp, #232	@ 0xe8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b836:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b83a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b83e:	4013      	ands	r3, r2
 800b840:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b844:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d11b      	bne.n	800b884 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d015      	beq.n	800b884 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b85c:	f003 0320 	and.w	r3, r3, #32
 800b860:	2b00      	cmp	r3, #0
 800b862:	d105      	bne.n	800b870 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d009      	beq.n	800b884 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 8300 	beq.w	800be7a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
      }
      return;
 800b882:	e2fa      	b.n	800be7a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 8123 	beq.w	800bad4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b88e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b892:	4b8d      	ldr	r3, [pc, #564]	@ (800bac8 <HAL_UART_IRQHandler+0x2b8>)
 800b894:	4013      	ands	r3, r2
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b89a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b89e:	4b8b      	ldr	r3, [pc, #556]	@ (800bacc <HAL_UART_IRQHandler+0x2bc>)
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f000 8116 	beq.w	800bad4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8ac:	f003 0301 	and.w	r3, r3, #1
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d011      	beq.n	800b8d8 <HAL_UART_IRQHandler+0xc8>
 800b8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00b      	beq.n	800b8d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ce:	f043 0201 	orr.w	r2, r3, #1
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8dc:	f003 0302 	and.w	r3, r3, #2
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d011      	beq.n	800b908 <HAL_UART_IRQHandler+0xf8>
 800b8e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8e8:	f003 0301 	and.w	r3, r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00b      	beq.n	800b908 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8fe:	f043 0204 	orr.w	r2, r3, #4
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b90c:	f003 0304 	and.w	r3, r3, #4
 800b910:	2b00      	cmp	r3, #0
 800b912:	d011      	beq.n	800b938 <HAL_UART_IRQHandler+0x128>
 800b914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00b      	beq.n	800b938 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2204      	movs	r2, #4
 800b926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b92e:	f043 0202 	orr.w	r2, r3, #2
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b93c:	f003 0308 	and.w	r3, r3, #8
 800b940:	2b00      	cmp	r3, #0
 800b942:	d017      	beq.n	800b974 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b948:	f003 0320 	and.w	r3, r3, #32
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d105      	bne.n	800b95c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b950:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b954:	4b5c      	ldr	r3, [pc, #368]	@ (800bac8 <HAL_UART_IRQHandler+0x2b8>)
 800b956:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00b      	beq.n	800b974 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2208      	movs	r2, #8
 800b962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b96a:	f043 0208 	orr.w	r2, r3, #8
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d012      	beq.n	800b9a6 <HAL_UART_IRQHandler+0x196>
 800b980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b984:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00c      	beq.n	800b9a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b99c:	f043 0220 	orr.w	r2, r3, #32
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 8266 	beq.w	800be7e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9b6:	f003 0320 	and.w	r3, r3, #32
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d013      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9c2:	f003 0320 	and.w	r3, r3, #32
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d105      	bne.n	800b9d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d007      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9fa:	2b40      	cmp	r3, #64	@ 0x40
 800b9fc:	d005      	beq.n	800ba0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b9fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ba02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d054      	beq.n	800bab4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f001 f807 	bl	800ca1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba1a:	2b40      	cmp	r3, #64	@ 0x40
 800ba1c:	d146      	bne.n	800baac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3308      	adds	r3, #8
 800ba24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ba34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3308      	adds	r3, #8
 800ba46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ba4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ba4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ba56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ba5a:	e841 2300 	strex	r3, r2, [r1]
 800ba5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ba62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1d9      	bne.n	800ba1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d017      	beq.n	800baa4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba7a:	4a15      	ldr	r2, [pc, #84]	@ (800bad0 <HAL_UART_IRQHandler+0x2c0>)
 800ba7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fa fead 	bl	80067e4 <HAL_DMA_Abort_IT>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d019      	beq.n	800bac4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ba9e:	4610      	mov	r0, r2
 800baa0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baa2:	e00f      	b.n	800bac4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa13 	bl	800bed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baaa:	e00b      	b.n	800bac4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fa0f 	bl	800bed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bab2:	e007      	b.n	800bac4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fa0b 	bl	800bed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bac2:	e1dc      	b.n	800be7e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bac4:	bf00      	nop
    return;
 800bac6:	e1da      	b.n	800be7e <HAL_UART_IRQHandler+0x66e>
 800bac8:	10000001 	.word	0x10000001
 800bacc:	04000120 	.word	0x04000120
 800bad0:	0800ccd5 	.word	0x0800ccd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bad8:	2b01      	cmp	r3, #1
 800bada:	f040 8170 	bne.w	800bdbe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bae2:	f003 0310 	and.w	r3, r3, #16
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 8169 	beq.w	800bdbe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800baec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baf0:	f003 0310 	and.w	r3, r3, #16
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 8162 	beq.w	800bdbe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2210      	movs	r2, #16
 800bb00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb0c:	2b40      	cmp	r3, #64	@ 0x40
 800bb0e:	f040 80d8 	bne.w	800bcc2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f000 80af 	beq.w	800bc88 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb34:	429a      	cmp	r2, r3
 800bb36:	f080 80a7 	bcs.w	800bc88 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 0320 	and.w	r3, r3, #32
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f040 8087 	bne.w	800bc66 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bb64:	e853 3f00 	ldrex	r3, [r3]
 800bb68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bb6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bb86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bb8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bb9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1da      	bne.n	800bb58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3308      	adds	r3, #8
 800bba8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbac:	e853 3f00 	ldrex	r3, [r3]
 800bbb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bbb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbb4:	f023 0301 	bic.w	r3, r3, #1
 800bbb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bbc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bbca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bbce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bbd2:	e841 2300 	strex	r3, r2, [r1]
 800bbd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bbd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e1      	bne.n	800bba2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbe8:	e853 3f00 	ldrex	r3, [r3]
 800bbec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bbee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc0a:	e841 2300 	strex	r3, r2, [r1]
 800bc0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1e3      	bne.n	800bbde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2220      	movs	r2, #32
 800bc1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc2c:	e853 3f00 	ldrex	r3, [r3]
 800bc30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc34:	f023 0310 	bic.w	r3, r3, #16
 800bc38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	461a      	mov	r2, r3
 800bc42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc4e:	e841 2300 	strex	r3, r2, [r1]
 800bc52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e4      	bne.n	800bc24 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fa fd66 	bl	8006732 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2202      	movs	r2, #2
 800bc6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7f6 f91f 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bc86:	e0fc      	b.n	800be82 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc92:	429a      	cmp	r2, r3
 800bc94:	f040 80f5 	bne.w	800be82 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 0320 	and.w	r3, r3, #32
 800bca6:	2b20      	cmp	r3, #32
 800bca8:	f040 80eb 	bne.w	800be82 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2202      	movs	r2, #2
 800bcb0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7f6 f902 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
      return;
 800bcc0:	e0df      	b.n	800be82 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 80d1 	beq.w	800be86 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800bce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 80cc 	beq.w	800be86 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf6:	e853 3f00 	ldrex	r3, [r3]
 800bcfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bcfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd10:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd18:	e841 2300 	strex	r3, r2, [r1]
 800bd1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1e4      	bne.n	800bcee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	3308      	adds	r3, #8
 800bd2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2e:	e853 3f00 	ldrex	r3, [r3]
 800bd32:	623b      	str	r3, [r7, #32]
   return(result);
 800bd34:	6a3b      	ldr	r3, [r7, #32]
 800bd36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd3a:	f023 0301 	bic.w	r3, r3, #1
 800bd3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3308      	adds	r3, #8
 800bd48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bd4c:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd54:	e841 2300 	strex	r3, r2, [r1]
 800bd58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e1      	bne.n	800bd24 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2220      	movs	r2, #32
 800bd64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	e853 3f00 	ldrex	r3, [r3]
 800bd80:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f023 0310 	bic.w	r3, r3, #16
 800bd88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
 800bd92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd96:	61fb      	str	r3, [r7, #28]
 800bd98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9a:	69b9      	ldr	r1, [r7, #24]
 800bd9c:	69fa      	ldr	r2, [r7, #28]
 800bd9e:	e841 2300 	strex	r3, r2, [r1]
 800bda2:	617b      	str	r3, [r7, #20]
   return(result);
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1e4      	bne.n	800bd74 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2202      	movs	r2, #2
 800bdae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bdb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7f6 f884 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bdbc:	e063      	b.n	800be86 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bdbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00e      	beq.n	800bde8 <HAL_UART_IRQHandler+0x5d8>
 800bdca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d008      	beq.n	800bde8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bdde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 ffb4 	bl	800cd4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bde6:	e051      	b.n	800be8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d014      	beq.n	800be1e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bdf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d105      	bne.n	800be0c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d008      	beq.n	800be1e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be10:	2b00      	cmp	r3, #0
 800be12:	d03a      	beq.n	800be8a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	4798      	blx	r3
    }
    return;
 800be1c:	e035      	b.n	800be8a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be26:	2b00      	cmp	r3, #0
 800be28:	d009      	beq.n	800be3e <HAL_UART_IRQHandler+0x62e>
 800be2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 ff5e 	bl	800ccf8 <UART_EndTransmit_IT>
    return;
 800be3c:	e026      	b.n	800be8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be46:	2b00      	cmp	r3, #0
 800be48:	d009      	beq.n	800be5e <HAL_UART_IRQHandler+0x64e>
 800be4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d003      	beq.n	800be5e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 ff8d 	bl	800cd76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be5c:	e016      	b.n	800be8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800be5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be66:	2b00      	cmp	r3, #0
 800be68:	d010      	beq.n	800be8c <HAL_UART_IRQHandler+0x67c>
 800be6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	da0c      	bge.n	800be8c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 ff75 	bl	800cd62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be78:	e008      	b.n	800be8c <HAL_UART_IRQHandler+0x67c>
      return;
 800be7a:	bf00      	nop
 800be7c:	e006      	b.n	800be8c <HAL_UART_IRQHandler+0x67c>
    return;
 800be7e:	bf00      	nop
 800be80:	e004      	b.n	800be8c <HAL_UART_IRQHandler+0x67c>
      return;
 800be82:	bf00      	nop
 800be84:	e002      	b.n	800be8c <HAL_UART_IRQHandler+0x67c>
      return;
 800be86:	bf00      	nop
 800be88:	e000      	b.n	800be8c <HAL_UART_IRQHandler+0x67c>
    return;
 800be8a:	bf00      	nop
  }
}
 800be8c:	37e8      	adds	r7, #232	@ 0xe8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop

0800be94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bee8:	b08c      	sub	sp, #48	@ 0x30
 800beea:	af00      	add	r7, sp, #0
 800beec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	689a      	ldr	r2, [r3, #8]
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	431a      	orrs	r2, r3
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	431a      	orrs	r2, r3
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	69db      	ldr	r3, [r3, #28]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	4baa      	ldr	r3, [pc, #680]	@ (800c1bc <UART_SetConfig+0x2d8>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	6812      	ldr	r2, [r2, #0]
 800bf1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	68da      	ldr	r2, [r3, #12]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a9f      	ldr	r2, [pc, #636]	@ (800c1c0 <UART_SetConfig+0x2dc>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d004      	beq.n	800bf50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800bf5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	6812      	ldr	r2, [r2, #0]
 800bf62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf64:	430b      	orrs	r3, r1
 800bf66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6e:	f023 010f 	bic.w	r1, r3, #15
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a90      	ldr	r2, [pc, #576]	@ (800c1c4 <UART_SetConfig+0x2e0>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d125      	bne.n	800bfd4 <UART_SetConfig+0xf0>
 800bf88:	4b8f      	ldr	r3, [pc, #572]	@ (800c1c8 <UART_SetConfig+0x2e4>)
 800bf8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf8e:	f003 0303 	and.w	r3, r3, #3
 800bf92:	2b03      	cmp	r3, #3
 800bf94:	d81a      	bhi.n	800bfcc <UART_SetConfig+0xe8>
 800bf96:	a201      	add	r2, pc, #4	@ (adr r2, 800bf9c <UART_SetConfig+0xb8>)
 800bf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9c:	0800bfad 	.word	0x0800bfad
 800bfa0:	0800bfbd 	.word	0x0800bfbd
 800bfa4:	0800bfb5 	.word	0x0800bfb5
 800bfa8:	0800bfc5 	.word	0x0800bfc5
 800bfac:	2301      	movs	r3, #1
 800bfae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfb2:	e116      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfba:	e112      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800bfbc:	2304      	movs	r3, #4
 800bfbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfc2:	e10e      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800bfc4:	2308      	movs	r3, #8
 800bfc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfca:	e10a      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800bfcc:	2310      	movs	r3, #16
 800bfce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfd2:	e106      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a7c      	ldr	r2, [pc, #496]	@ (800c1cc <UART_SetConfig+0x2e8>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d138      	bne.n	800c050 <UART_SetConfig+0x16c>
 800bfde:	4b7a      	ldr	r3, [pc, #488]	@ (800c1c8 <UART_SetConfig+0x2e4>)
 800bfe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfe4:	f003 030c 	and.w	r3, r3, #12
 800bfe8:	2b0c      	cmp	r3, #12
 800bfea:	d82d      	bhi.n	800c048 <UART_SetConfig+0x164>
 800bfec:	a201      	add	r2, pc, #4	@ (adr r2, 800bff4 <UART_SetConfig+0x110>)
 800bfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff2:	bf00      	nop
 800bff4:	0800c029 	.word	0x0800c029
 800bff8:	0800c049 	.word	0x0800c049
 800bffc:	0800c049 	.word	0x0800c049
 800c000:	0800c049 	.word	0x0800c049
 800c004:	0800c039 	.word	0x0800c039
 800c008:	0800c049 	.word	0x0800c049
 800c00c:	0800c049 	.word	0x0800c049
 800c010:	0800c049 	.word	0x0800c049
 800c014:	0800c031 	.word	0x0800c031
 800c018:	0800c049 	.word	0x0800c049
 800c01c:	0800c049 	.word	0x0800c049
 800c020:	0800c049 	.word	0x0800c049
 800c024:	0800c041 	.word	0x0800c041
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c02e:	e0d8      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c030:	2302      	movs	r3, #2
 800c032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c036:	e0d4      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c038:	2304      	movs	r3, #4
 800c03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c03e:	e0d0      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c040:	2308      	movs	r3, #8
 800c042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c046:	e0cc      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c048:	2310      	movs	r3, #16
 800c04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c04e:	e0c8      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a5e      	ldr	r2, [pc, #376]	@ (800c1d0 <UART_SetConfig+0x2ec>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d125      	bne.n	800c0a6 <UART_SetConfig+0x1c2>
 800c05a:	4b5b      	ldr	r3, [pc, #364]	@ (800c1c8 <UART_SetConfig+0x2e4>)
 800c05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c060:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c064:	2b30      	cmp	r3, #48	@ 0x30
 800c066:	d016      	beq.n	800c096 <UART_SetConfig+0x1b2>
 800c068:	2b30      	cmp	r3, #48	@ 0x30
 800c06a:	d818      	bhi.n	800c09e <UART_SetConfig+0x1ba>
 800c06c:	2b20      	cmp	r3, #32
 800c06e:	d00a      	beq.n	800c086 <UART_SetConfig+0x1a2>
 800c070:	2b20      	cmp	r3, #32
 800c072:	d814      	bhi.n	800c09e <UART_SetConfig+0x1ba>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <UART_SetConfig+0x19a>
 800c078:	2b10      	cmp	r3, #16
 800c07a:	d008      	beq.n	800c08e <UART_SetConfig+0x1aa>
 800c07c:	e00f      	b.n	800c09e <UART_SetConfig+0x1ba>
 800c07e:	2300      	movs	r3, #0
 800c080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c084:	e0ad      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c086:	2302      	movs	r3, #2
 800c088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c08c:	e0a9      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c08e:	2304      	movs	r3, #4
 800c090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c094:	e0a5      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c096:	2308      	movs	r3, #8
 800c098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c09c:	e0a1      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c09e:	2310      	movs	r3, #16
 800c0a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0a4:	e09d      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a4a      	ldr	r2, [pc, #296]	@ (800c1d4 <UART_SetConfig+0x2f0>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d125      	bne.n	800c0fc <UART_SetConfig+0x218>
 800c0b0:	4b45      	ldr	r3, [pc, #276]	@ (800c1c8 <UART_SetConfig+0x2e4>)
 800c0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c0ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800c0bc:	d016      	beq.n	800c0ec <UART_SetConfig+0x208>
 800c0be:	2bc0      	cmp	r3, #192	@ 0xc0
 800c0c0:	d818      	bhi.n	800c0f4 <UART_SetConfig+0x210>
 800c0c2:	2b80      	cmp	r3, #128	@ 0x80
 800c0c4:	d00a      	beq.n	800c0dc <UART_SetConfig+0x1f8>
 800c0c6:	2b80      	cmp	r3, #128	@ 0x80
 800c0c8:	d814      	bhi.n	800c0f4 <UART_SetConfig+0x210>
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <UART_SetConfig+0x1f0>
 800c0ce:	2b40      	cmp	r3, #64	@ 0x40
 800c0d0:	d008      	beq.n	800c0e4 <UART_SetConfig+0x200>
 800c0d2:	e00f      	b.n	800c0f4 <UART_SetConfig+0x210>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0da:	e082      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c0dc:	2302      	movs	r3, #2
 800c0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0e2:	e07e      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c0e4:	2304      	movs	r3, #4
 800c0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0ea:	e07a      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c0ec:	2308      	movs	r3, #8
 800c0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0f2:	e076      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c0f4:	2310      	movs	r3, #16
 800c0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0fa:	e072      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a35      	ldr	r2, [pc, #212]	@ (800c1d8 <UART_SetConfig+0x2f4>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d12a      	bne.n	800c15c <UART_SetConfig+0x278>
 800c106:	4b30      	ldr	r3, [pc, #192]	@ (800c1c8 <UART_SetConfig+0x2e4>)
 800c108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c10c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c114:	d01a      	beq.n	800c14c <UART_SetConfig+0x268>
 800c116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c11a:	d81b      	bhi.n	800c154 <UART_SetConfig+0x270>
 800c11c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c120:	d00c      	beq.n	800c13c <UART_SetConfig+0x258>
 800c122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c126:	d815      	bhi.n	800c154 <UART_SetConfig+0x270>
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <UART_SetConfig+0x250>
 800c12c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c130:	d008      	beq.n	800c144 <UART_SetConfig+0x260>
 800c132:	e00f      	b.n	800c154 <UART_SetConfig+0x270>
 800c134:	2300      	movs	r3, #0
 800c136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c13a:	e052      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c13c:	2302      	movs	r3, #2
 800c13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c142:	e04e      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c144:	2304      	movs	r3, #4
 800c146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c14a:	e04a      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c14c:	2308      	movs	r3, #8
 800c14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c152:	e046      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c154:	2310      	movs	r3, #16
 800c156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c15a:	e042      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a17      	ldr	r2, [pc, #92]	@ (800c1c0 <UART_SetConfig+0x2dc>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d13a      	bne.n	800c1dc <UART_SetConfig+0x2f8>
 800c166:	4b18      	ldr	r3, [pc, #96]	@ (800c1c8 <UART_SetConfig+0x2e4>)
 800c168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c16c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c170:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c174:	d01a      	beq.n	800c1ac <UART_SetConfig+0x2c8>
 800c176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c17a:	d81b      	bhi.n	800c1b4 <UART_SetConfig+0x2d0>
 800c17c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c180:	d00c      	beq.n	800c19c <UART_SetConfig+0x2b8>
 800c182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c186:	d815      	bhi.n	800c1b4 <UART_SetConfig+0x2d0>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <UART_SetConfig+0x2b0>
 800c18c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c190:	d008      	beq.n	800c1a4 <UART_SetConfig+0x2c0>
 800c192:	e00f      	b.n	800c1b4 <UART_SetConfig+0x2d0>
 800c194:	2300      	movs	r3, #0
 800c196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c19a:	e022      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c19c:	2302      	movs	r3, #2
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1a2:	e01e      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c1a4:	2304      	movs	r3, #4
 800c1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1aa:	e01a      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c1ac:	2308      	movs	r3, #8
 800c1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1b2:	e016      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c1b4:	2310      	movs	r3, #16
 800c1b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1ba:	e012      	b.n	800c1e2 <UART_SetConfig+0x2fe>
 800c1bc:	cfff69f3 	.word	0xcfff69f3
 800c1c0:	40008000 	.word	0x40008000
 800c1c4:	40013800 	.word	0x40013800
 800c1c8:	40021000 	.word	0x40021000
 800c1cc:	40004400 	.word	0x40004400
 800c1d0:	40004800 	.word	0x40004800
 800c1d4:	40004c00 	.word	0x40004c00
 800c1d8:	40005000 	.word	0x40005000
 800c1dc:	2310      	movs	r3, #16
 800c1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4aae      	ldr	r2, [pc, #696]	@ (800c4a0 <UART_SetConfig+0x5bc>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	f040 8097 	bne.w	800c31c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c1f2:	2b08      	cmp	r3, #8
 800c1f4:	d823      	bhi.n	800c23e <UART_SetConfig+0x35a>
 800c1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1fc <UART_SetConfig+0x318>)
 800c1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fc:	0800c221 	.word	0x0800c221
 800c200:	0800c23f 	.word	0x0800c23f
 800c204:	0800c229 	.word	0x0800c229
 800c208:	0800c23f 	.word	0x0800c23f
 800c20c:	0800c22f 	.word	0x0800c22f
 800c210:	0800c23f 	.word	0x0800c23f
 800c214:	0800c23f 	.word	0x0800c23f
 800c218:	0800c23f 	.word	0x0800c23f
 800c21c:	0800c237 	.word	0x0800c237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c220:	f7fc f89c 	bl	800835c <HAL_RCC_GetPCLK1Freq>
 800c224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c226:	e010      	b.n	800c24a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c228:	4b9e      	ldr	r3, [pc, #632]	@ (800c4a4 <UART_SetConfig+0x5c0>)
 800c22a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c22c:	e00d      	b.n	800c24a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c22e:	f7fc f829 	bl	8008284 <HAL_RCC_GetSysClockFreq>
 800c232:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c234:	e009      	b.n	800c24a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c23a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c23c:	e005      	b.n	800c24a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c23e:	2300      	movs	r3, #0
 800c240:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c248:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 8130 	beq.w	800c4b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c256:	4a94      	ldr	r2, [pc, #592]	@ (800c4a8 <UART_SetConfig+0x5c4>)
 800c258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c25c:	461a      	mov	r2, r3
 800c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c260:	fbb3 f3f2 	udiv	r3, r3, r2
 800c264:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	4613      	mov	r3, r2
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	4413      	add	r3, r2
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	429a      	cmp	r2, r3
 800c274:	d305      	bcc.n	800c282 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d903      	bls.n	800c28a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c288:	e113      	b.n	800c4b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28c:	2200      	movs	r2, #0
 800c28e:	60bb      	str	r3, [r7, #8]
 800c290:	60fa      	str	r2, [r7, #12]
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c296:	4a84      	ldr	r2, [pc, #528]	@ (800c4a8 <UART_SetConfig+0x5c4>)
 800c298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	2200      	movs	r2, #0
 800c2a0:	603b      	str	r3, [r7, #0]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2ac:	f7f4 f804 	bl	80002b8 <__aeabi_uldivmod>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	f04f 0200 	mov.w	r2, #0
 800c2bc:	f04f 0300 	mov.w	r3, #0
 800c2c0:	020b      	lsls	r3, r1, #8
 800c2c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2c6:	0202      	lsls	r2, r0, #8
 800c2c8:	6979      	ldr	r1, [r7, #20]
 800c2ca:	6849      	ldr	r1, [r1, #4]
 800c2cc:	0849      	lsrs	r1, r1, #1
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	eb12 0804 	adds.w	r8, r2, r4
 800c2d8:	eb43 0905 	adc.w	r9, r3, r5
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	469a      	mov	sl, r3
 800c2e4:	4693      	mov	fp, r2
 800c2e6:	4652      	mov	r2, sl
 800c2e8:	465b      	mov	r3, fp
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	4649      	mov	r1, r9
 800c2ee:	f7f3 ffe3 	bl	80002b8 <__aeabi_uldivmod>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c2fa:	6a3b      	ldr	r3, [r7, #32]
 800c2fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c300:	d308      	bcc.n	800c314 <UART_SetConfig+0x430>
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c308:	d204      	bcs.n	800c314 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	6a3a      	ldr	r2, [r7, #32]
 800c310:	60da      	str	r2, [r3, #12]
 800c312:	e0ce      	b.n	800c4b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c31a:	e0ca      	b.n	800c4b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	69db      	ldr	r3, [r3, #28]
 800c320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c324:	d166      	bne.n	800c3f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c326:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c32a:	2b08      	cmp	r3, #8
 800c32c:	d827      	bhi.n	800c37e <UART_SetConfig+0x49a>
 800c32e:	a201      	add	r2, pc, #4	@ (adr r2, 800c334 <UART_SetConfig+0x450>)
 800c330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c334:	0800c359 	.word	0x0800c359
 800c338:	0800c361 	.word	0x0800c361
 800c33c:	0800c369 	.word	0x0800c369
 800c340:	0800c37f 	.word	0x0800c37f
 800c344:	0800c36f 	.word	0x0800c36f
 800c348:	0800c37f 	.word	0x0800c37f
 800c34c:	0800c37f 	.word	0x0800c37f
 800c350:	0800c37f 	.word	0x0800c37f
 800c354:	0800c377 	.word	0x0800c377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c358:	f7fc f800 	bl	800835c <HAL_RCC_GetPCLK1Freq>
 800c35c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c35e:	e014      	b.n	800c38a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c360:	f7fc f812 	bl	8008388 <HAL_RCC_GetPCLK2Freq>
 800c364:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c366:	e010      	b.n	800c38a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c368:	4b4e      	ldr	r3, [pc, #312]	@ (800c4a4 <UART_SetConfig+0x5c0>)
 800c36a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c36c:	e00d      	b.n	800c38a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c36e:	f7fb ff89 	bl	8008284 <HAL_RCC_GetSysClockFreq>
 800c372:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c374:	e009      	b.n	800c38a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c37a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c37c:	e005      	b.n	800c38a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c37e:	2300      	movs	r3, #0
 800c380:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 8090 	beq.w	800c4b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c396:	4a44      	ldr	r2, [pc, #272]	@ (800c4a8 <UART_SetConfig+0x5c4>)
 800c398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c39c:	461a      	mov	r2, r3
 800c39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3a4:	005a      	lsls	r2, r3, #1
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	085b      	lsrs	r3, r3, #1
 800c3ac:	441a      	add	r2, r3
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3b8:	6a3b      	ldr	r3, [r7, #32]
 800c3ba:	2b0f      	cmp	r3, #15
 800c3bc:	d916      	bls.n	800c3ec <UART_SetConfig+0x508>
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3c4:	d212      	bcs.n	800c3ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c3c6:	6a3b      	ldr	r3, [r7, #32]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	f023 030f 	bic.w	r3, r3, #15
 800c3ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3d0:	6a3b      	ldr	r3, [r7, #32]
 800c3d2:	085b      	lsrs	r3, r3, #1
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	f003 0307 	and.w	r3, r3, #7
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	8bfb      	ldrh	r3, [r7, #30]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	8bfa      	ldrh	r2, [r7, #30]
 800c3e8:	60da      	str	r2, [r3, #12]
 800c3ea:	e062      	b.n	800c4b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c3f2:	e05e      	b.n	800c4b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c3f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c3f8:	2b08      	cmp	r3, #8
 800c3fa:	d828      	bhi.n	800c44e <UART_SetConfig+0x56a>
 800c3fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c404 <UART_SetConfig+0x520>)
 800c3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c402:	bf00      	nop
 800c404:	0800c429 	.word	0x0800c429
 800c408:	0800c431 	.word	0x0800c431
 800c40c:	0800c439 	.word	0x0800c439
 800c410:	0800c44f 	.word	0x0800c44f
 800c414:	0800c43f 	.word	0x0800c43f
 800c418:	0800c44f 	.word	0x0800c44f
 800c41c:	0800c44f 	.word	0x0800c44f
 800c420:	0800c44f 	.word	0x0800c44f
 800c424:	0800c447 	.word	0x0800c447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c428:	f7fb ff98 	bl	800835c <HAL_RCC_GetPCLK1Freq>
 800c42c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c42e:	e014      	b.n	800c45a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c430:	f7fb ffaa 	bl	8008388 <HAL_RCC_GetPCLK2Freq>
 800c434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c436:	e010      	b.n	800c45a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c438:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a4 <UART_SetConfig+0x5c0>)
 800c43a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c43c:	e00d      	b.n	800c45a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c43e:	f7fb ff21 	bl	8008284 <HAL_RCC_GetSysClockFreq>
 800c442:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c444:	e009      	b.n	800c45a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c44a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c44c:	e005      	b.n	800c45a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c44e:	2300      	movs	r3, #0
 800c450:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c458:	bf00      	nop
    }

    if (pclk != 0U)
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d028      	beq.n	800c4b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c464:	4a10      	ldr	r2, [pc, #64]	@ (800c4a8 <UART_SetConfig+0x5c4>)
 800c466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c46a:	461a      	mov	r2, r3
 800c46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	085b      	lsrs	r3, r3, #1
 800c478:	441a      	add	r2, r3
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c484:	6a3b      	ldr	r3, [r7, #32]
 800c486:	2b0f      	cmp	r3, #15
 800c488:	d910      	bls.n	800c4ac <UART_SetConfig+0x5c8>
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c490:	d20c      	bcs.n	800c4ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	b29a      	uxth	r2, r3
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60da      	str	r2, [r3, #12]
 800c49c:	e009      	b.n	800c4b2 <UART_SetConfig+0x5ce>
 800c49e:	bf00      	nop
 800c4a0:	40008000 	.word	0x40008000
 800c4a4:	00f42400 	.word	0x00f42400
 800c4a8:	0800d0ec 	.word	0x0800d0ec
      }
      else
      {
        ret = HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c4ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3730      	adds	r7, #48	@ 0x30
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c4dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4e8:	f003 0308 	and.w	r3, r3, #8
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00a      	beq.n	800c506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	430a      	orrs	r2, r1
 800c504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00a      	beq.n	800c528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	430a      	orrs	r2, r1
 800c526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c52c:	f003 0302 	and.w	r3, r3, #2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00a      	beq.n	800c54a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	430a      	orrs	r2, r1
 800c548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c54e:	f003 0304 	and.w	r3, r3, #4
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	430a      	orrs	r2, r1
 800c56a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c570:	f003 0310 	and.w	r3, r3, #16
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00a      	beq.n	800c58e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	430a      	orrs	r2, r1
 800c58c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c592:	f003 0320 	and.w	r3, r3, #32
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00a      	beq.n	800c5b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	430a      	orrs	r2, r1
 800c5ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01a      	beq.n	800c5f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5da:	d10a      	bne.n	800c5f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	430a      	orrs	r2, r1
 800c5f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00a      	beq.n	800c614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	430a      	orrs	r2, r1
 800c612:	605a      	str	r2, [r3, #4]
  }
}
 800c614:	bf00      	nop
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b098      	sub	sp, #96	@ 0x60
 800c624:	af02      	add	r7, sp, #8
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c630:	f7f7 fe26 	bl	8004280 <HAL_GetTick>
 800c634:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f003 0308 	and.w	r3, r3, #8
 800c640:	2b08      	cmp	r3, #8
 800c642:	d12f      	bne.n	800c6a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c644:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c64c:	2200      	movs	r2, #0
 800c64e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f88e 	bl	800c774 <UART_WaitOnFlagUntilTimeout>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d022      	beq.n	800c6a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c666:	e853 3f00 	ldrex	r3, [r3]
 800c66a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c66e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c672:	653b      	str	r3, [r7, #80]	@ 0x50
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	461a      	mov	r2, r3
 800c67a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c67c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c67e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c684:	e841 2300 	strex	r3, r2, [r1]
 800c688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1e6      	bne.n	800c65e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2220      	movs	r2, #32
 800c694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e063      	b.n	800c76c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f003 0304 	and.w	r3, r3, #4
 800c6ae:	2b04      	cmp	r3, #4
 800c6b0:	d149      	bne.n	800c746 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f857 	bl	800c774 <UART_WaitOnFlagUntilTimeout>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d03c      	beq.n	800c746 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d4:	e853 3f00 	ldrex	r3, [r3]
 800c6d8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6f2:	e841 2300 	strex	r3, r2, [r1]
 800c6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1e6      	bne.n	800c6cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3308      	adds	r3, #8
 800c704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	e853 3f00 	ldrex	r3, [r3]
 800c70c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f023 0301 	bic.w	r3, r3, #1
 800c714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3308      	adds	r3, #8
 800c71c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c71e:	61fa      	str	r2, [r7, #28]
 800c720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c722:	69b9      	ldr	r1, [r7, #24]
 800c724:	69fa      	ldr	r2, [r7, #28]
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	617b      	str	r3, [r7, #20]
   return(result);
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e5      	bne.n	800c6fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2220      	movs	r2, #32
 800c736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	e012      	b.n	800c76c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2220      	movs	r2, #32
 800c74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2220      	movs	r2, #32
 800c752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3758      	adds	r7, #88	@ 0x58
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	603b      	str	r3, [r7, #0]
 800c780:	4613      	mov	r3, r2
 800c782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c784:	e04f      	b.n	800c826 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78c:	d04b      	beq.n	800c826 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c78e:	f7f7 fd77 	bl	8004280 <HAL_GetTick>
 800c792:	4602      	mov	r2, r0
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d302      	bcc.n	800c7a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e04e      	b.n	800c846 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f003 0304 	and.w	r3, r3, #4
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d037      	beq.n	800c826 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	2b80      	cmp	r3, #128	@ 0x80
 800c7ba:	d034      	beq.n	800c826 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2b40      	cmp	r3, #64	@ 0x40
 800c7c0:	d031      	beq.n	800c826 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	f003 0308 	and.w	r3, r3, #8
 800c7cc:	2b08      	cmp	r3, #8
 800c7ce:	d110      	bne.n	800c7f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2208      	movs	r2, #8
 800c7d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 f920 	bl	800ca1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e029      	b.n	800c846 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	69db      	ldr	r3, [r3, #28]
 800c7f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c800:	d111      	bne.n	800c826 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c80a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 f906 	bl	800ca1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2220      	movs	r2, #32
 800c816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	e00f      	b.n	800c846 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	69da      	ldr	r2, [r3, #28]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	4013      	ands	r3, r2
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	429a      	cmp	r2, r3
 800c834:	bf0c      	ite	eq
 800c836:	2301      	moveq	r3, #1
 800c838:	2300      	movne	r3, #0
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	461a      	mov	r2, r3
 800c83e:	79fb      	ldrb	r3, [r7, #7]
 800c840:	429a      	cmp	r2, r3
 800c842:	d0a0      	beq.n	800c786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b096      	sub	sp, #88	@ 0x58
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	4613      	mov	r3, r2
 800c85c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	88fa      	ldrh	r2, [r7, #6]
 800c868:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2222      	movs	r2, #34	@ 0x22
 800c878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c882:	2b00      	cmp	r3, #0
 800c884:	d02d      	beq.n	800c8e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c88c:	4a40      	ldr	r2, [pc, #256]	@ (800c990 <UART_Start_Receive_DMA+0x140>)
 800c88e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c896:	4a3f      	ldr	r2, [pc, #252]	@ (800c994 <UART_Start_Receive_DMA+0x144>)
 800c898:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8a0:	4a3d      	ldr	r2, [pc, #244]	@ (800c998 <UART_Start_Receive_DMA+0x148>)
 800c8a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3324      	adds	r3, #36	@ 0x24
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	88fb      	ldrh	r3, [r7, #6]
 800c8c4:	f7f9 feba 	bl	800663c <HAL_DMA_Start_IT>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d009      	beq.n	800c8e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2210      	movs	r2, #16
 800c8d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2220      	movs	r2, #32
 800c8da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e051      	b.n	800c986 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d018      	beq.n	800c91c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	461a      	mov	r2, r3
 800c906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c90a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c90e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e6      	bne.n	800c8ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3308      	adds	r3, #8
 800c922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c926:	e853 3f00 	ldrex	r3, [r3]
 800c92a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92e:	f043 0301 	orr.w	r3, r3, #1
 800c932:	653b      	str	r3, [r7, #80]	@ 0x50
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	3308      	adds	r3, #8
 800c93a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c93c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c93e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c940:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c942:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c944:	e841 2300 	strex	r3, r2, [r1]
 800c948:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1e5      	bne.n	800c91c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3308      	adds	r3, #8
 800c956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	e853 3f00 	ldrex	r3, [r3]
 800c95e:	613b      	str	r3, [r7, #16]
   return(result);
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3308      	adds	r3, #8
 800c96e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c970:	623a      	str	r2, [r7, #32]
 800c972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c974:	69f9      	ldr	r1, [r7, #28]
 800c976:	6a3a      	ldr	r2, [r7, #32]
 800c978:	e841 2300 	strex	r3, r2, [r1]
 800c97c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1e5      	bne.n	800c950 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3758      	adds	r7, #88	@ 0x58
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	0800caeb 	.word	0x0800caeb
 800c994:	0800cc17 	.word	0x0800cc17
 800c998:	0800cc55 	.word	0x0800cc55

0800c99c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b08f      	sub	sp, #60	@ 0x3c
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	e853 3f00 	ldrex	r3, [r3]
 800c9b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c9b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ca:	e841 2300 	strex	r3, r2, [r1]
 800c9ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1e6      	bne.n	800c9a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	3308      	adds	r3, #8
 800c9dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	e853 3f00 	ldrex	r3, [r3]
 800c9e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c9ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3308      	adds	r3, #8
 800c9f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9f6:	61ba      	str	r2, [r7, #24]
 800c9f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fa:	6979      	ldr	r1, [r7, #20]
 800c9fc:	69ba      	ldr	r2, [r7, #24]
 800c9fe:	e841 2300 	strex	r3, r2, [r1]
 800ca02:	613b      	str	r3, [r7, #16]
   return(result);
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1e5      	bne.n	800c9d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2220      	movs	r2, #32
 800ca0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ca12:	bf00      	nop
 800ca14:	373c      	adds	r7, #60	@ 0x3c
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b095      	sub	sp, #84	@ 0x54
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca2e:	e853 3f00 	ldrex	r3, [r3]
 800ca32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	461a      	mov	r2, r3
 800ca42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca44:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca4c:	e841 2300 	strex	r3, r2, [r1]
 800ca50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1e6      	bne.n	800ca26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca60:	6a3b      	ldr	r3, [r7, #32]
 800ca62:	e853 3f00 	ldrex	r3, [r3]
 800ca66:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca6e:	f023 0301 	bic.w	r3, r3, #1
 800ca72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3308      	adds	r3, #8
 800ca7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca84:	e841 2300 	strex	r3, r2, [r1]
 800ca88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1e3      	bne.n	800ca58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d118      	bne.n	800caca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	e853 3f00 	ldrex	r3, [r3]
 800caa4:	60bb      	str	r3, [r7, #8]
   return(result);
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	f023 0310 	bic.w	r3, r3, #16
 800caac:	647b      	str	r3, [r7, #68]	@ 0x44
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cab6:	61bb      	str	r3, [r7, #24]
 800cab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caba:	6979      	ldr	r1, [r7, #20]
 800cabc:	69ba      	ldr	r2, [r7, #24]
 800cabe:	e841 2300 	strex	r3, r2, [r1]
 800cac2:	613b      	str	r3, [r7, #16]
   return(result);
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1e6      	bne.n	800ca98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2220      	movs	r2, #32
 800cace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cade:	bf00      	nop
 800cae0:	3754      	adds	r7, #84	@ 0x54
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b09c      	sub	sp, #112	@ 0x70
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 0320 	and.w	r3, r3, #32
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d171      	bne.n	800cbea <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800cb06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb16:	e853 3f00 	ldrex	r3, [r3]
 800cb1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb22:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb2e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb34:	e841 2300 	strex	r3, r2, [r1]
 800cb38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1e6      	bne.n	800cb0e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	3308      	adds	r3, #8
 800cb46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4a:	e853 3f00 	ldrex	r3, [r3]
 800cb4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb52:	f023 0301 	bic.w	r3, r3, #1
 800cb56:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cb60:	647a      	str	r2, [r7, #68]	@ 0x44
 800cb62:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb68:	e841 2300 	strex	r3, r2, [r1]
 800cb6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1e5      	bne.n	800cb40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3308      	adds	r3, #8
 800cb7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7e:	e853 3f00 	ldrex	r3, [r3]
 800cb82:	623b      	str	r3, [r7, #32]
   return(result);
 800cb84:	6a3b      	ldr	r3, [r7, #32]
 800cb86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb8a:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	3308      	adds	r3, #8
 800cb92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cb94:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb9c:	e841 2300 	strex	r3, r2, [r1]
 800cba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1e5      	bne.n	800cb74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbaa:	2220      	movs	r2, #32
 800cbac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d118      	bne.n	800cbea <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	e853 3f00 	ldrex	r3, [r3]
 800cbc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f023 0310 	bic.w	r3, r3, #16
 800cbcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cbce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbd6:	61fb      	str	r3, [r7, #28]
 800cbd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbda:	69b9      	ldr	r1, [r7, #24]
 800cbdc:	69fa      	ldr	r2, [r7, #28]
 800cbde:	e841 2300 	strex	r3, r2, [r1]
 800cbe2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1e6      	bne.n	800cbb8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbec:	2200      	movs	r2, #0
 800cbee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d107      	bne.n	800cc08 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc02:	f7f5 f95f 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc06:	e002      	b.n	800cc0e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cc08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc0a:	f7ff f94d 	bl	800bea8 <HAL_UART_RxCpltCallback>
}
 800cc0e:	bf00      	nop
 800cc10:	3770      	adds	r7, #112	@ 0x70
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b084      	sub	sp, #16
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2201      	movs	r2, #1
 800cc28:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d109      	bne.n	800cc46 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc38:	085b      	lsrs	r3, r3, #1
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f7f5 f940 	bl	8001ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc44:	e002      	b.n	800cc4c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7ff f938 	bl	800bebc <HAL_UART_RxHalfCpltCallback>
}
 800cc4c:	bf00      	nop
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc68:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc70:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc7c:	2b80      	cmp	r3, #128	@ 0x80
 800cc7e:	d109      	bne.n	800cc94 <UART_DMAError+0x40>
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	2b21      	cmp	r3, #33	@ 0x21
 800cc84:	d106      	bne.n	800cc94 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cc8e:	6978      	ldr	r0, [r7, #20]
 800cc90:	f7ff fe84 	bl	800c99c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc9e:	2b40      	cmp	r3, #64	@ 0x40
 800cca0:	d109      	bne.n	800ccb6 <UART_DMAError+0x62>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b22      	cmp	r3, #34	@ 0x22
 800cca6:	d106      	bne.n	800ccb6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ccb0:	6978      	ldr	r0, [r7, #20]
 800ccb2:	f7ff feb4 	bl	800ca1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccbc:	f043 0210 	orr.w	r2, r3, #16
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccc6:	6978      	ldr	r0, [r7, #20]
 800ccc8:	f7ff f902 	bl	800bed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cccc:	bf00      	nop
 800ccce:	3718      	adds	r7, #24
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f7ff f8f0 	bl	800bed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccf0:	bf00      	nop
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	e853 3f00 	ldrex	r3, [r3]
 800cd0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd14:	61fb      	str	r3, [r7, #28]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	61bb      	str	r3, [r7, #24]
 800cd20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd22:	6979      	ldr	r1, [r7, #20]
 800cd24:	69ba      	ldr	r2, [r7, #24]
 800cd26:	e841 2300 	strex	r3, r2, [r1]
 800cd2a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1e6      	bne.n	800cd00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2220      	movs	r2, #32
 800cd36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7ff f8a7 	bl	800be94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd46:	bf00      	nop
 800cd48:	3720      	adds	r7, #32
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd56:	bf00      	nop
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd62:	b480      	push	{r7}
 800cd64:	b083      	sub	sp, #12
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd6a:	bf00      	nop
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd76:	b480      	push	{r7}
 800cd78:	b083      	sub	sp, #12
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd7e:	bf00      	nop
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b085      	sub	sp, #20
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d101      	bne.n	800cda0 <HAL_UARTEx_DisableFifoMode+0x16>
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	e027      	b.n	800cdf0 <HAL_UARTEx_DisableFifoMode+0x66>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2224      	movs	r2, #36	@ 0x24
 800cdac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f022 0201 	bic.w	r2, r2, #1
 800cdc6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cdce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2220      	movs	r2, #32
 800cde2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d101      	bne.n	800ce14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce10:	2302      	movs	r3, #2
 800ce12:	e02d      	b.n	800ce70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2224      	movs	r2, #36	@ 0x24
 800ce20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f022 0201 	bic.w	r2, r2, #1
 800ce3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	430a      	orrs	r2, r1
 800ce4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f8a3 	bl	800cf9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2220      	movs	r2, #32
 800ce62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d101      	bne.n	800ce90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	e02d      	b.n	800ceec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2224      	movs	r2, #36	@ 0x24
 800ce9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f022 0201 	bic.w	r2, r2, #1
 800ceb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	430a      	orrs	r2, r1
 800ceca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 f865 	bl	800cf9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2220      	movs	r2, #32
 800cede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08c      	sub	sp, #48	@ 0x30
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	4613      	mov	r3, r2
 800cf00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf08:	2b20      	cmp	r3, #32
 800cf0a:	d142      	bne.n	800cf92 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d002      	beq.n	800cf18 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800cf12:	88fb      	ldrh	r3, [r7, #6]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e03b      	b.n	800cf94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800cf28:	88fb      	ldrh	r3, [r7, #6]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	68b9      	ldr	r1, [r7, #8]
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f7ff fc8e 	bl	800c850 <UART_Start_Receive_DMA>
 800cf34:	4603      	mov	r3, r0
 800cf36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800cf3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d124      	bne.n	800cf8c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d11d      	bne.n	800cf86 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2210      	movs	r2, #16
 800cf50:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	e853 3f00 	ldrex	r3, [r3]
 800cf5e:	617b      	str	r3, [r7, #20]
   return(result);
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	f043 0310 	orr.w	r3, r3, #16
 800cf66:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf70:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf72:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf74:	6a39      	ldr	r1, [r7, #32]
 800cf76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf78:	e841 2300 	strex	r3, r2, [r1]
 800cf7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1e6      	bne.n	800cf52 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800cf84:	e002      	b.n	800cf8c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800cf8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf90:	e000      	b.n	800cf94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cf92:	2302      	movs	r3, #2
  }
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3730      	adds	r7, #48	@ 0x30
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d108      	bne.n	800cfbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfbc:	e031      	b.n	800d022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfbe:	2308      	movs	r3, #8
 800cfc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfc2:	2308      	movs	r3, #8
 800cfc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	0e5b      	lsrs	r3, r3, #25
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	f003 0307 	and.w	r3, r3, #7
 800cfd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	0f5b      	lsrs	r3, r3, #29
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	f003 0307 	and.w	r3, r3, #7
 800cfe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfe6:	7bbb      	ldrb	r3, [r7, #14]
 800cfe8:	7b3a      	ldrb	r2, [r7, #12]
 800cfea:	4911      	ldr	r1, [pc, #68]	@ (800d030 <UARTEx_SetNbDataToProcess+0x94>)
 800cfec:	5c8a      	ldrb	r2, [r1, r2]
 800cfee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cff2:	7b3a      	ldrb	r2, [r7, #12]
 800cff4:	490f      	ldr	r1, [pc, #60]	@ (800d034 <UARTEx_SetNbDataToProcess+0x98>)
 800cff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cff8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	7b7a      	ldrb	r2, [r7, #13]
 800d008:	4909      	ldr	r1, [pc, #36]	@ (800d030 <UARTEx_SetNbDataToProcess+0x94>)
 800d00a:	5c8a      	ldrb	r2, [r1, r2]
 800d00c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d010:	7b7a      	ldrb	r2, [r7, #13]
 800d012:	4908      	ldr	r1, [pc, #32]	@ (800d034 <UARTEx_SetNbDataToProcess+0x98>)
 800d014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d016:	fb93 f3f2 	sdiv	r3, r3, r2
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d022:	bf00      	nop
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	0800d104 	.word	0x0800d104
 800d034:	0800d10c 	.word	0x0800d10c

0800d038 <memset>:
 800d038:	4402      	add	r2, r0
 800d03a:	4603      	mov	r3, r0
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d100      	bne.n	800d042 <memset+0xa>
 800d040:	4770      	bx	lr
 800d042:	f803 1b01 	strb.w	r1, [r3], #1
 800d046:	e7f9      	b.n	800d03c <memset+0x4>

0800d048 <__libc_init_array>:
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	4d0d      	ldr	r5, [pc, #52]	@ (800d080 <__libc_init_array+0x38>)
 800d04c:	4c0d      	ldr	r4, [pc, #52]	@ (800d084 <__libc_init_array+0x3c>)
 800d04e:	1b64      	subs	r4, r4, r5
 800d050:	10a4      	asrs	r4, r4, #2
 800d052:	2600      	movs	r6, #0
 800d054:	42a6      	cmp	r6, r4
 800d056:	d109      	bne.n	800d06c <__libc_init_array+0x24>
 800d058:	4d0b      	ldr	r5, [pc, #44]	@ (800d088 <__libc_init_array+0x40>)
 800d05a:	4c0c      	ldr	r4, [pc, #48]	@ (800d08c <__libc_init_array+0x44>)
 800d05c:	f000 f826 	bl	800d0ac <_init>
 800d060:	1b64      	subs	r4, r4, r5
 800d062:	10a4      	asrs	r4, r4, #2
 800d064:	2600      	movs	r6, #0
 800d066:	42a6      	cmp	r6, r4
 800d068:	d105      	bne.n	800d076 <__libc_init_array+0x2e>
 800d06a:	bd70      	pop	{r4, r5, r6, pc}
 800d06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d070:	4798      	blx	r3
 800d072:	3601      	adds	r6, #1
 800d074:	e7ee      	b.n	800d054 <__libc_init_array+0xc>
 800d076:	f855 3b04 	ldr.w	r3, [r5], #4
 800d07a:	4798      	blx	r3
 800d07c:	3601      	adds	r6, #1
 800d07e:	e7f2      	b.n	800d066 <__libc_init_array+0x1e>
 800d080:	0800d11c 	.word	0x0800d11c
 800d084:	0800d11c 	.word	0x0800d11c
 800d088:	0800d11c 	.word	0x0800d11c
 800d08c:	0800d120 	.word	0x0800d120

0800d090 <memcpy>:
 800d090:	440a      	add	r2, r1
 800d092:	4291      	cmp	r1, r2
 800d094:	f100 33ff 	add.w	r3, r0, #4294967295
 800d098:	d100      	bne.n	800d09c <memcpy+0xc>
 800d09a:	4770      	bx	lr
 800d09c:	b510      	push	{r4, lr}
 800d09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a6:	4291      	cmp	r1, r2
 800d0a8:	d1f9      	bne.n	800d09e <memcpy+0xe>
 800d0aa:	bd10      	pop	{r4, pc}

0800d0ac <_init>:
 800d0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ae:	bf00      	nop
 800d0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b2:	bc08      	pop	{r3}
 800d0b4:	469e      	mov	lr, r3
 800d0b6:	4770      	bx	lr

0800d0b8 <_fini>:
 800d0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ba:	bf00      	nop
 800d0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0be:	bc08      	pop	{r3}
 800d0c0:	469e      	mov	lr, r3
 800d0c2:	4770      	bx	lr
