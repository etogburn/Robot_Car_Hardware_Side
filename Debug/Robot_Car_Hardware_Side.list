
Robot_Car_Hardware_Side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b884  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ba5c  0800ba5c  0000ca5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba9c  0800ba9c  0000d33c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba9c  0800ba9c  0000ca9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa4  0800baa4  0000d33c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa4  0800baa4  0000caa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800baa8  0800baa8  0000caa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000033c  20000000  0800baac  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000033c  0800bde8  0000d33c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800bde8  0000d828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d33c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252fd  00000000  00000000  0000d36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004904  00000000  00000000  00032669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cf  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c3f1  00000000  00000000  0003a187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024a4e  00000000  00000000  00066578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011de2c  00000000  00000000  0008afc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a8df2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078ac  00000000  00000000  001a8e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b06e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000033c 	.word	0x2000033c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ba44 	.word	0x0800ba44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000340 	.word	0x20000340
 8000214:	0800ba44 	.word	0x0800ba44

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b9b5 	b.w	80005a4 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f84d 	bl	80002e8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f840 	bl	80002e8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f82f 	bl	80002e8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f821 	bl	80002e8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_uldivmod>:
 80002b8:	b953      	cbnz	r3, 80002d0 <__aeabi_uldivmod+0x18>
 80002ba:	b94a      	cbnz	r2, 80002d0 <__aeabi_uldivmod+0x18>
 80002bc:	2900      	cmp	r1, #0
 80002be:	bf08      	it	eq
 80002c0:	2800      	cmpeq	r0, #0
 80002c2:	bf1c      	itt	ne
 80002c4:	f04f 31ff 	movne.w	r1, #4294967295
 80002c8:	f04f 30ff 	movne.w	r0, #4294967295
 80002cc:	f000 b96a 	b.w	80005a4 <__aeabi_idiv0>
 80002d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d8:	f000 f806 	bl	80002e8 <__udivmoddi4>
 80002dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e4:	b004      	add	sp, #16
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9d08      	ldr	r5, [sp, #32]
 80002ee:	460c      	mov	r4, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d14e      	bne.n	8000392 <__udivmoddi4+0xaa>
 80002f4:	4694      	mov	ip, r2
 80002f6:	458c      	cmp	ip, r1
 80002f8:	4686      	mov	lr, r0
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	d962      	bls.n	80003c6 <__udivmoddi4+0xde>
 8000300:	b14a      	cbz	r2, 8000316 <__udivmoddi4+0x2e>
 8000302:	f1c2 0320 	rsb	r3, r2, #32
 8000306:	4091      	lsls	r1, r2
 8000308:	fa20 f303 	lsr.w	r3, r0, r3
 800030c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000310:	4319      	orrs	r1, r3
 8000312:	fa00 fe02 	lsl.w	lr, r0, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f f68c 	uxth.w	r6, ip
 800031e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb07 1114 	mls	r1, r7, r4, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb04 f106 	mul.w	r1, r4, r6
 8000332:	4299      	cmp	r1, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x64>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f104 30ff 	add.w	r0, r4, #4294967295
 800033e:	f080 8112 	bcs.w	8000566 <__udivmoddi4+0x27e>
 8000342:	4299      	cmp	r1, r3
 8000344:	f240 810f 	bls.w	8000566 <__udivmoddi4+0x27e>
 8000348:	3c02      	subs	r4, #2
 800034a:	4463      	add	r3, ip
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb1 f0f7 	udiv	r0, r1, r7
 8000356:	fb07 1110 	mls	r1, r7, r0, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb00 f606 	mul.w	r6, r0, r6
 8000362:	429e      	cmp	r6, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x94>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 31ff 	add.w	r1, r0, #4294967295
 800036e:	f080 80fc 	bcs.w	800056a <__udivmoddi4+0x282>
 8000372:	429e      	cmp	r6, r3
 8000374:	f240 80f9 	bls.w	800056a <__udivmoddi4+0x282>
 8000378:	4463      	add	r3, ip
 800037a:	3802      	subs	r0, #2
 800037c:	1b9b      	subs	r3, r3, r6
 800037e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000382:	2100      	movs	r1, #0
 8000384:	b11d      	cbz	r5, 800038e <__udivmoddi4+0xa6>
 8000386:	40d3      	lsrs	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	e9c5 3200 	strd	r3, r2, [r5]
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	428b      	cmp	r3, r1
 8000394:	d905      	bls.n	80003a2 <__udivmoddi4+0xba>
 8000396:	b10d      	cbz	r5, 800039c <__udivmoddi4+0xb4>
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	2100      	movs	r1, #0
 800039e:	4608      	mov	r0, r1
 80003a0:	e7f5      	b.n	800038e <__udivmoddi4+0xa6>
 80003a2:	fab3 f183 	clz	r1, r3
 80003a6:	2900      	cmp	r1, #0
 80003a8:	d146      	bne.n	8000438 <__udivmoddi4+0x150>
 80003aa:	42a3      	cmp	r3, r4
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xcc>
 80003ae:	4290      	cmp	r0, r2
 80003b0:	f0c0 80f0 	bcc.w	8000594 <__udivmoddi4+0x2ac>
 80003b4:	1a86      	subs	r6, r0, r2
 80003b6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	2d00      	cmp	r5, #0
 80003be:	d0e6      	beq.n	800038e <__udivmoddi4+0xa6>
 80003c0:	e9c5 6300 	strd	r6, r3, [r5]
 80003c4:	e7e3      	b.n	800038e <__udivmoddi4+0xa6>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	f040 8090 	bne.w	80004ec <__udivmoddi4+0x204>
 80003cc:	eba1 040c 	sub.w	r4, r1, ip
 80003d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d4:	fa1f f78c 	uxth.w	r7, ip
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb4 f6f8 	udiv	r6, r4, r8
 80003de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003e2:	fb08 4416 	mls	r4, r8, r6, r4
 80003e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ea:	fb07 f006 	mul.w	r0, r7, r6
 80003ee:	4298      	cmp	r0, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x11c>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x11a>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2b4>
 8000402:	4626      	mov	r6, r4
 8000404:	1a1c      	subs	r4, r3, r0
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb4 f0f8 	udiv	r0, r4, r8
 800040e:	fb08 4410 	mls	r4, r8, r0, r4
 8000412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000416:	fb00 f707 	mul.w	r7, r0, r7
 800041a:	429f      	cmp	r7, r3
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x148>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 34ff 	add.w	r4, r0, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x146>
 8000428:	429f      	cmp	r7, r3
 800042a:	f200 80b0 	bhi.w	800058e <__udivmoddi4+0x2a6>
 800042e:	4620      	mov	r0, r4
 8000430:	1bdb      	subs	r3, r3, r7
 8000432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0x9c>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	431f      	orrs	r7, r3
 8000444:	fa20 fc06 	lsr.w	ip, r0, r6
 8000448:	fa04 f301 	lsl.w	r3, r4, r1
 800044c:	ea43 030c 	orr.w	r3, r3, ip
 8000450:	40f4      	lsrs	r4, r6
 8000452:	fa00 f801 	lsl.w	r8, r0, r1
 8000456:	0c38      	lsrs	r0, r7, #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb4 fef0 	udiv	lr, r4, r0
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fb00 441e 	mls	r4, r0, lr, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	fa02 f201 	lsl.w	r2, r2, r1
 8000476:	d90a      	bls.n	800048e <__udivmoddi4+0x1a6>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	f080 8084 	bcs.w	800058a <__udivmoddi4+0x2a2>
 8000482:	45a1      	cmp	r9, r4
 8000484:	f240 8081 	bls.w	800058a <__udivmoddi4+0x2a2>
 8000488:	f1ae 0e02 	sub.w	lr, lr, #2
 800048c:	443c      	add	r4, r7
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f0 	udiv	r3, r4, r0
 800049a:	fb00 4413 	mls	r4, r0, r3, r4
 800049e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x1d2>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b0:	d267      	bcs.n	8000582 <__udivmoddi4+0x29a>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d965      	bls.n	8000582 <__udivmoddi4+0x29a>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	443c      	add	r4, r7
 80004ba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004be:	fba0 9302 	umull	r9, r3, r0, r2
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	429c      	cmp	r4, r3
 80004c8:	46ce      	mov	lr, r9
 80004ca:	469c      	mov	ip, r3
 80004cc:	d351      	bcc.n	8000572 <__udivmoddi4+0x28a>
 80004ce:	d04e      	beq.n	800056e <__udivmoddi4+0x286>
 80004d0:	b155      	cbz	r5, 80004e8 <__udivmoddi4+0x200>
 80004d2:	ebb8 030e 	subs.w	r3, r8, lr
 80004d6:	eb64 040c 	sbc.w	r4, r4, ip
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	40cb      	lsrs	r3, r1
 80004e0:	431e      	orrs	r6, r3
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e750      	b.n	800038e <__udivmoddi4+0xa6>
 80004ec:	f1c2 0320 	rsb	r3, r2, #32
 80004f0:	fa20 f103 	lsr.w	r1, r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa24 f303 	lsr.w	r3, r4, r3
 80004fc:	4094      	lsls	r4, r2
 80004fe:	430c      	orrs	r4, r1
 8000500:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000504:	fa00 fe02 	lsl.w	lr, r0, r2
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3110 	mls	r1, r8, r0, r3
 8000514:	0c23      	lsrs	r3, r4, #16
 8000516:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051a:	fb00 f107 	mul.w	r1, r0, r7
 800051e:	4299      	cmp	r1, r3
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x24c>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 36ff 	add.w	r6, r0, #4294967295
 800052a:	d22c      	bcs.n	8000586 <__udivmoddi4+0x29e>
 800052c:	4299      	cmp	r1, r3
 800052e:	d92a      	bls.n	8000586 <__udivmoddi4+0x29e>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb3 f1f8 	udiv	r1, r3, r8
 800053c:	fb08 3311 	mls	r3, r8, r1, r3
 8000540:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000544:	fb01 f307 	mul.w	r3, r1, r7
 8000548:	42a3      	cmp	r3, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x276>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f101 36ff 	add.w	r6, r1, #4294967295
 8000554:	d213      	bcs.n	800057e <__udivmoddi4+0x296>
 8000556:	42a3      	cmp	r3, r4
 8000558:	d911      	bls.n	800057e <__udivmoddi4+0x296>
 800055a:	3902      	subs	r1, #2
 800055c:	4464      	add	r4, ip
 800055e:	1ae4      	subs	r4, r4, r3
 8000560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000564:	e739      	b.n	80003da <__udivmoddi4+0xf2>
 8000566:	4604      	mov	r4, r0
 8000568:	e6f0      	b.n	800034c <__udivmoddi4+0x64>
 800056a:	4608      	mov	r0, r1
 800056c:	e706      	b.n	800037c <__udivmoddi4+0x94>
 800056e:	45c8      	cmp	r8, r9
 8000570:	d2ae      	bcs.n	80004d0 <__udivmoddi4+0x1e8>
 8000572:	ebb9 0e02 	subs.w	lr, r9, r2
 8000576:	eb63 0c07 	sbc.w	ip, r3, r7
 800057a:	3801      	subs	r0, #1
 800057c:	e7a8      	b.n	80004d0 <__udivmoddi4+0x1e8>
 800057e:	4631      	mov	r1, r6
 8000580:	e7ed      	b.n	800055e <__udivmoddi4+0x276>
 8000582:	4603      	mov	r3, r0
 8000584:	e799      	b.n	80004ba <__udivmoddi4+0x1d2>
 8000586:	4630      	mov	r0, r6
 8000588:	e7d4      	b.n	8000534 <__udivmoddi4+0x24c>
 800058a:	46d6      	mov	lr, sl
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1a6>
 800058e:	4463      	add	r3, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74d      	b.n	8000430 <__udivmoddi4+0x148>
 8000594:	4606      	mov	r6, r0
 8000596:	4623      	mov	r3, r4
 8000598:	4608      	mov	r0, r1
 800059a:	e70f      	b.n	80003bc <__udivmoddi4+0xd4>
 800059c:	3e02      	subs	r6, #2
 800059e:	4463      	add	r3, ip
 80005a0:	e730      	b.n	8000404 <__udivmoddi4+0x11c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Coms_IncIdx>:
#ifdef HAS_USB_COMMS
#include "usbd_cdc_if.h"
#endif
#include "usart.h"

static void Coms_IncIdx(uint8_t *idx) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	(*idx)++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
	if(*idx >= FIFO_SIZE) (*idx) = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d902      	bls.n	80005ca <Coms_IncIdx+0x22>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <ComsHandler_PacketToBuf>:

static void ComsHandler_PacketToBuf(DecodedPacket_t *packet, StringBuffer_t *buffer) {
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]

	if(packet->invalid) return;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7adb      	ldrb	r3, [r3, #11]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14c      	bne.n	8000682 <ComsHandler_PacketToBuf+0xac>
	buffer->length = 5 + packet->length;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7a9b      	ldrb	r3, [r3, #10]
 80005ec:	3305      	adds	r3, #5
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	701a      	strb	r2, [r3, #0]

	buffer->data[0] = START_BYTE;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	22aa      	movs	r2, #170	@ 0xaa
 80005f8:	705a      	strb	r2, [r3, #1]
	buffer->data[1] = packet->length;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a9a      	ldrb	r2, [r3, #10]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	709a      	strb	r2, [r3, #2]
	buffer->data[2] = (packet->command & 0xFF00) >> 8;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	70da      	strb	r2, [r3, #3]
	buffer->data[3] = packet->command & 0x00FF;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 800061a:	2304      	movs	r3, #4
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e00c      	b.n	800063a <ComsHandler_PacketToBuf+0x64>
		buffer->data[i] = packet->data[i-4];
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	1f1a      	subs	r2, r3, #4
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	440a      	add	r2, r1
 800062a:	7891      	ldrb	r1, [r2, #2]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3301      	adds	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	429a      	cmp	r2, r3
 8000644:	dbec      	blt.n	8000620 <ComsHandler_PacketToBuf+0x4a>
	}

	uint8_t checksum = buffer->data[0];
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 800064c:	2301      	movs	r3, #1
 800064e:	737b      	strb	r3, [r7, #13]
 8000650:	e009      	b.n	8000666 <ComsHandler_PacketToBuf+0x90>
		checksum ^= buffer->data[i];
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	785a      	ldrb	r2, [r3, #1]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	4053      	eors	r3, r2
 800065e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 8000660:	7b7b      	ldrb	r3, [r7, #13]
 8000662:	3301      	adds	r3, #1
 8000664:	737b      	strb	r3, [r7, #13]
 8000666:	7b7a      	ldrb	r2, [r7, #13]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	429a      	cmp	r2, r3
 8000670:	dbef      	blt.n	8000652 <ComsHandler_PacketToBuf+0x7c>
	}

	buffer->data[buffer->length - 1] = checksum;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b01      	subs	r3, #1
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	4413      	add	r3, r2
 800067c:	7bba      	ldrb	r2, [r7, #14]
 800067e:	705a      	strb	r2, [r3, #1]
 8000680:	e000      	b.n	8000684 <ComsHandler_PacketToBuf+0xae>
	if(packet->invalid) return;
 8000682:	bf00      	nop
}
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <ComsHandler_BufToPacket>:

static void ComsHandler_BufToPacket(DecodedPacket_t *packet, void *buf) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]

	StringBuffer_t *buffer = (StringBuffer_t *)buf;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	60fb      	str	r3, [r7, #12]

	uint8_t length = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]

	memset(packet->data, 0, MAX_DATA_SIZE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3302      	adds	r3, #2
 80006a4:	2208      	movs	r2, #8
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00b f991 	bl	800b9d0 <memset>

	packet->invalid = false;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	72da      	strb	r2, [r3, #11]

    if (buffer->data[0] != START_BYTE) {
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	2baa      	cmp	r3, #170	@ 0xaa
 80006ba:	d002      	beq.n	80006c2 <ComsHandler_BufToPacket+0x34>
    	packet->invalid = true; // Invalid start byte, discard packet
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2201      	movs	r2, #1
 80006c0:	72da      	strb	r2, [r3, #11]
    }

    packet->length = buffer->data[1];
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	789a      	ldrb	r2, [r3, #2]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	729a      	strb	r2, [r3, #10]
    if (buffer->data[1] > MAX_DATA_SIZE) {
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	d905      	bls.n	80006de <ComsHandler_BufToPacket+0x50>
		packet->invalid = true;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	72da      	strb	r2, [r3, #11]
		packet->length = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	729a      	strb	r2, [r3, #10]
	}

    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006de:	230c      	movs	r3, #12
 80006e0:	75bb      	strb	r3, [r7, #22]
 80006e2:	e00b      	b.n	80006fc <ComsHandler_BufToPacket+0x6e>
    	if(buffer->data[i] != 0) {
 80006e4:	7dbb      	ldrb	r3, [r7, #22]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <ComsHandler_BufToPacket+0x68>
    		length = i;
 80006f0:	7dbb      	ldrb	r3, [r7, #22]
 80006f2:	75fb      	strb	r3, [r7, #23]
    		break;
 80006f4:	e005      	b.n	8000702 <ComsHandler_BufToPacket+0x74>
    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80006f6:	7dbb      	ldrb	r3, [r7, #22]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	75bb      	strb	r3, [r7, #22]
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d8f0      	bhi.n	80006e4 <ComsHandler_BufToPacket+0x56>
    	}
    }

    uint8_t checksum = buffer->data[0];
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 8000708:	2301      	movs	r3, #1
 800070a:	753b      	strb	r3, [r7, #20]
 800070c:	e009      	b.n	8000722 <ComsHandler_BufToPacket+0x94>
		checksum ^= buffer->data[i];
 800070e:	7d3b      	ldrb	r3, [r7, #20]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	785a      	ldrb	r2, [r3, #1]
 8000716:	7d7b      	ldrb	r3, [r7, #21]
 8000718:	4053      	eors	r3, r2
 800071a:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 800071c:	7d3b      	ldrb	r3, [r7, #20]
 800071e:	3301      	adds	r3, #1
 8000720:	753b      	strb	r3, [r7, #20]
 8000722:	7d3a      	ldrb	r2, [r7, #20]
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	429a      	cmp	r2, r3
 8000728:	d3f1      	bcc.n	800070e <ComsHandler_BufToPacket+0x80>
	}

	if(checksum != buffer->data[length]) {
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	785b      	ldrb	r3, [r3, #1]
 8000732:	7d7a      	ldrb	r2, [r7, #21]
 8000734:	429a      	cmp	r2, r3
 8000736:	d002      	beq.n	800073e <ComsHandler_BufToPacket+0xb0>
		packet->invalid = true;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	72da      	strb	r2, [r3, #11]
	}

    // Populate the command structure
    packet->command = (buffer->data[2] << 8) | buffer->data[3];
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	78db      	ldrb	r3, [r3, #3]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	b21b      	sxth	r3, r3
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	801a      	strh	r2, [r3, #0]

    if(packet->length != 0) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7a9b      	ldrb	r3, [r3, #10]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d014      	beq.n	8000788 <ComsHandler_BufToPacket+0xfa>
    	for(uint8_t i = 0; i < packet->length; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	74fb      	strb	r3, [r7, #19]
 8000762:	e00c      	b.n	800077e <ComsHandler_BufToPacket+0xf0>
    		packet->data[i] = buffer->data[4+i];
 8000764:	7cfb      	ldrb	r3, [r7, #19]
 8000766:	1d1a      	adds	r2, r3, #4
 8000768:	7cfb      	ldrb	r3, [r7, #19]
 800076a:	68f9      	ldr	r1, [r7, #12]
 800076c:	440a      	add	r2, r1
 800076e:	7851      	ldrb	r1, [r2, #1]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	460a      	mov	r2, r1
 8000776:	709a      	strb	r2, [r3, #2]
    	for(uint8_t i = 0; i < packet->length; i++) {
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	3301      	adds	r3, #1
 800077c:	74fb      	strb	r3, [r7, #19]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7a9b      	ldrb	r3, [r3, #10]
 8000782:	7cfa      	ldrb	r2, [r7, #19]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ed      	bcc.n	8000764 <ComsHandler_BufToPacket+0xd6>
    	}
    }
}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <UART_Send>:

// UART Send Function
static HAL_StatusTypeDef UART_Send(void *config, DecodedPacket_t *packet)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)config;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	61fb      	str	r3, [r7, #28]

    StringBuffer_t buf;
    memset(buf.data, 0, MAX_BUF_SIZE);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	3301      	adds	r3, #1
 80007a4:	220d      	movs	r2, #13
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f00b f911 	bl	800b9d0 <memset>
    ComsHandler_PacketToBuf(packet, &buf);
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	6838      	ldr	r0, [r7, #0]
 80007b6:	f7ff ff0e 	bl	80005d6 <ComsHandler_PacketToBuf>

    return HAL_UART_Transmit(huart, buf.data, buf.length, HAL_MAX_DELAY);
 80007ba:	7b3b      	ldrb	r3, [r7, #12]
 80007bc:	461a      	mov	r2, r3
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	1c59      	adds	r1, r3, #1
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	69f8      	ldr	r0, [r7, #28]
 80007ca:	f009 fc5e 	bl	800a08a <HAL_UART_Transmit>
 80007ce:	4603      	mov	r3, r0
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <UART_SetupReceive>:

// UART Receive Function
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer

static HAL_StatusTypeDef UART_SetupReceive(void *inst)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80007ea:	60bb      	str	r3, [r7, #8]

    memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4613      	mov	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	3360      	adds	r3, #96	@ 0x60
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	3305      	adds	r3, #5
 8000802:	220d      	movs	r2, #13
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00b f8e2 	bl	800b9d0 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->rxBuf[instance->rxIdx].data, MAX_BUF_SIZE);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	3360      	adds	r3, #96	@ 0x60
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	3305      	adds	r3, #5
 8000822:	220d      	movs	r2, #13
 8000824:	4619      	mov	r1, r3
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f00b f830 	bl	800b88c <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(DMA_UART_HANDLE, DMA_IT_HT);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <UART_SetupReceive+0x70>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <UART_SetupReceive+0x70>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 0204 	bic.w	r2, r2, #4
 800083a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200007c4 	.word	0x200007c4

0800084c <UART_Receive>:

static HAL_StatusTypeDef UART_Receive(void *inst, uint8_t *data, uint16_t length)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	4613      	mov	r3, r2
 8000858:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	617b      	str	r3, [r7, #20]
    //UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;

    instance->rxBuf[instance->rxIdx].length = length;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	b2d8      	uxtb	r0, r3
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	460b      	mov	r3, r1
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	3364      	adds	r3, #100	@ 0x64
 8000876:	4602      	mov	r2, r0
 8000878:	701a      	strb	r2, [r3, #0]

    Coms_IncIdx(&instance->rxIdx);
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe93 	bl	80005a8 <Coms_IncIdx>

    UART_SetupReceive(inst);
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ffa8 	bl	80007d8 <UART_SetupReceive>
    //__HAL_DMA_DISABLE_IT(hdma_usart1_rx, DMA_IT_HT);

    return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <CAN_Send>:
}
#endif

// CAN Send Function
static HAL_StatusTypeDef CAN_Send(void *config, DecodedPacket_t *packet)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]

    // Only include data bytes 5 to N-1
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, &data[4]);
#endif

	return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <CAN_Receive>:

// CAN Receive Function
//going to be handled in an interrupt as with the all receive functions
static HAL_StatusTypeDef CAN_Receive(void *config, uint8_t *data, uint16_t length)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	4613      	mov	r3, r2
 80008b6:	80fb      	strh	r3, [r7, #6]
    data[3] = rxHeader.Identifier & 0xFF;       // Header byte 2
    for (uint8_t i = 0; i < dlc; i++) {
        data[4 + i] = canData[i];
    }
#endif
    return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <Comm_Init>:

// Initialize Communication Instance
void Comm_Init(ComsInterface_t *instance, CommType type, void *config)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	460b      	mov	r3, r1
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	72fb      	strb	r3, [r7, #11]
    instance->type = type;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	7afa      	ldrb	r2, [r7, #11]
 80008da:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    instance->config = config;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    instance->decodeIdx = 0;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2200      	movs	r2, #0
 80008ea:	705a      	strb	r2, [r3, #1]
    instance->rxIdx = 0;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
    instance->processIdx = 0;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2200      	movs	r2, #0
 80008f6:	709a      	strb	r2, [r3, #2]

    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 80008f8:	2300      	movs	r3, #0
 80008fa:	75fb      	strb	r3, [r7, #23]
 80008fc:	e00c      	b.n	8000918 <Comm_Init+0x50>
    	instance->rxPacket[i].invalid = true;
 80008fe:	7dfa      	ldrb	r2, [r7, #23]
 8000900:	68f9      	ldr	r1, [r7, #12]
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	440b      	add	r3, r1
 800090c:	330f      	adds	r3, #15
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	3301      	adds	r3, #1
 8000916:	75fb      	strb	r3, [r7, #23]
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	2b07      	cmp	r3, #7
 800091c:	d9ef      	bls.n	80008fe <Comm_Init+0x36>
    }

    if (type == COMM_UART) {
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10f      	bne.n	8000944 <Comm_Init+0x7c>
        instance->interface.Send = UART_Send;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <Comm_Init+0x9c>)
 8000928:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->interface.Receive = UART_Receive;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <Comm_Init+0xa0>)
 8000930:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <Comm_Init+0xa4>)
 8000938:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        UART_SetupReceive(instance);
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff ff4b 	bl	80007d8 <UART_SetupReceive>
#endif
    else if (type == COMM_CAN) {
        instance->interface.Send = CAN_Send;
        instance->interface.Receive = CAN_Receive;
    }
}
 8000942:	e00a      	b.n	800095a <Comm_Init+0x92>
    else if (type == COMM_CAN) {
 8000944:	7afb      	ldrb	r3, [r7, #11]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d107      	bne.n	800095a <Comm_Init+0x92>
        instance->interface.Send = CAN_Send;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <Comm_Init+0xa8>)
 800094e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->interface.Receive = CAN_Receive;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <Comm_Init+0xac>)
 8000956:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08000791 	.word	0x08000791
 8000968:	0800084d 	.word	0x0800084d
 800096c:	0800068f 	.word	0x0800068f
 8000970:	08000893 	.word	0x08000893
 8000974:	080008ab 	.word	0x080008ab

08000978 <Comm_Send>:

// Wrapper for Sending Data
HAL_StatusTypeDef Comm_Send(ComsInterface_t *instance, DecodedPacket_t *packet)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	if(packet->invalid) return HAL_ERROR;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	7adb      	ldrb	r3, [r3, #11]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <Comm_Send+0x16>
 800098a:	2301      	movs	r3, #1
 800098c:	e009      	b.n	80009a2 <Comm_Send+0x2a>

    return instance->interface.Send(instance->config, packet);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 800099a:	6839      	ldr	r1, [r7, #0]
 800099c:	4610      	mov	r0, r2
 800099e:	4798      	blx	r3
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <Comm_Receive>:

// Wrapper for Receiving Data
HAL_StatusTypeDef Comm_Receive(ComsInterface_t *instance, uint8_t *data, uint16_t length)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	4613      	mov	r3, r2
 80009b6:	80fb      	strh	r3, [r7, #6]
    return instance->interface.Receive(instance, data, length);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80009be:	88fa      	ldrh	r2, [r7, #6]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	4798      	blx	r3
 80009c6:	4603      	mov	r3, r0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <Comm_Process>:

void Comm_Process(ComsInterface_t *instance) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

	while (instance->decodeIdx != instance->rxIdx) {
 80009d8:	e01e      	b.n	8000a18 <Comm_Process+0x48>
		instance->interface.ConvertToPacket(&instance->rxPacket[instance->decodeIdx], &instance->rxBuf[instance->decodeIdx]);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	4619      	mov	r1, r3
 80009e6:	460b      	mov	r3, r1
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	440b      	add	r3, r1
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	440b      	add	r3, r1
 80009f2:	1d18      	adds	r0, r3, #4
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	4619      	mov	r1, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	1a5b      	subs	r3, r3, r1
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	3360      	adds	r3, #96	@ 0x60
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	440b      	add	r3, r1
 8000a08:	3304      	adds	r3, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4790      	blx	r2
		Coms_IncIdx(&instance->decodeIdx);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fdc8 	bl	80005a8 <Coms_IncIdx>
	while (instance->decodeIdx != instance->rxIdx) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	785a      	ldrb	r2, [r3, #1]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d1da      	bne.n	80009da <Comm_Process+0xa>
	}
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <Comm_GetPacket>:

DecodedPacket_t Comm_GetPacket(ComsInterface_t *instance) {
 8000a2e:	b590      	push	{r4, r7, lr}
 8000a30:	b087      	sub	sp, #28
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	DecodedPacket_t invalidPacket = {
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	2301      	movs	r3, #1
 8000a46:	74fb      	strb	r3, [r7, #19]
			.invalid = true
	};
	if(instance->decodeIdx == instance->processIdx) {
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	785a      	ldrb	r2, [r3, #1]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d108      	bne.n	8000a66 <Comm_GetPacket+0x38>
		return invalidPacket;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	461c      	mov	r4, r3
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a5e:	6020      	str	r0, [r4, #0]
 8000a60:	6061      	str	r1, [r4, #4]
 8000a62:	60a2      	str	r2, [r4, #8]
 8000a64:	e015      	b.n	8000a92 <Comm_GetPacket+0x64>
	}
	uint8_t idx = instance->processIdx;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	789b      	ldrb	r3, [r3, #2]
 8000a6a:	75fb      	strb	r3, [r7, #23]

	Coms_IncIdx(&instance->processIdx);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd99 	bl	80005a8 <Coms_IncIdx>

	return instance->rxPacket[idx];
 8000a76:	7dfa      	ldrb	r2, [r7, #23]
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	6839      	ldr	r1, [r7, #0]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	440b      	add	r3, r1
 8000a86:	4604      	mov	r4, r0
 8000a88:	3304      	adds	r3, #4
 8000a8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a8c:	6020      	str	r0, [r4, #0]
 8000a8e:	6061      	str	r1, [r4, #4]
 8000a90:	60a2      	str	r2, [r4, #8]
}
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}

08000a9a <IMU_WriteRegister>:

#include "IMU.h"
#include <stdio.h> // For debugging with printf

// Internal helper function: Write a register
static HAL_StatusTypeDef IMU_WriteRegister(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t value) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	70fb      	strb	r3, [r7, #3]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = { reg, value };
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	733b      	strb	r3, [r7, #12]
 8000aae:	78bb      	ldrb	r3, [r7, #2]
 8000ab0:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6858      	ldr	r0, [r3, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	891b      	ldrh	r3, [r3, #8]
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	f005 fb7b 	bl	80061b8 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_Transmit(imu->hspi, data, 2, HAL_MAX_DELAY);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	2202      	movs	r2, #2
 8000ad0:	f006 fc79 	bl	80073c6 <HAL_SPI_Transmit>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6858      	ldr	r0, [r3, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	891b      	ldrh	r3, [r3, #8]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f005 fb68 	bl	80061b8 <HAL_GPIO_WritePin>

    return status;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <IMU_BurstRead>:

// Internal helper function: Burst read
static HAL_StatusTypeDef IMU_BurstRead(IMU_HandleTypeDef *imu, uint8_t reg, uint8_t *buffer, uint8_t length) {
 8000af2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af6:	b08f      	sub	sp, #60	@ 0x3c
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	6178      	str	r0, [r7, #20]
 8000afc:	60fa      	str	r2, [r7, #12]
 8000afe:	461a      	mov	r2, r3
 8000b00:	460b      	mov	r3, r1
 8000b02:	74fb      	strb	r3, [r7, #19]
 8000b04:	4613      	mov	r3, r2
 8000b06:	74bb      	strb	r3, [r7, #18]
 8000b08:	466b      	mov	r3, sp
 8000b0a:	461e      	mov	r6, r3

    uint8_t tx_data[length+1];
 8000b0c:	7cbb      	ldrb	r3, [r7, #18]
 8000b0e:	1c59      	adds	r1, r3, #1
 8000b10:	1e4b      	subs	r3, r1, #1
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b14:	460a      	mov	r2, r1
 8000b16:	2300      	movs	r3, #0
 8000b18:	603a      	str	r2, [r7, #0]
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	00c3      	lsls	r3, r0, #3
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b2e:	6838      	ldr	r0, [r7, #0]
 8000b30:	00c2      	lsls	r2, r0, #3
 8000b32:	460a      	mov	r2, r1
 8000b34:	2300      	movs	r3, #0
 8000b36:	4692      	mov	sl, r2
 8000b38:	469b      	mov	fp, r3
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000b46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000b4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b4e:	460b      	mov	r3, r1
 8000b50:	3307      	adds	r3, #7
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	ebad 0d03 	sub.w	sp, sp, r3
 8000b5a:	ab02      	add	r3, sp, #8
 8000b5c:	3300      	adds	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_data[length+1];
 8000b60:	7cbb      	ldrb	r3, [r7, #18]
 8000b62:	1c59      	adds	r1, r3, #1
 8000b64:	1e4b      	subs	r3, r1, #1
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	460a      	mov	r2, r1
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	4699      	mov	r9, r3
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b84:	460a      	mov	r2, r1
 8000b86:	2300      	movs	r3, #0
 8000b88:	4614      	mov	r4, r2
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	00eb      	lsls	r3, r5, #3
 8000b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b9a:	00e2      	lsls	r2, r4, #3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	08db      	lsrs	r3, r3, #3
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ba8:	ab02      	add	r3, sp, #8
 8000baa:	3300      	adds	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    tx_data[0] = reg | IMU_READ_BIT;
 8000bae:	7cfb      	ldrb	r3, [r7, #19]
 8000bb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= length; i++) {
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000bc0:	e00f      	b.n	8000be2 <IMU_BurstRead+0xf0>
    	tx_data[i] = (tx_data[i-1]+1);
 8000bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bca:	5cd2      	ldrb	r2, [r2, r3]
 8000bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd0:	3201      	adds	r2, #1
 8000bd2:	b2d1      	uxtb	r1, r2
 8000bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bd6:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 1; i <= length; i++) {
 8000bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bdc:	3301      	adds	r3, #1
 8000bde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000be2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000be6:	7cbb      	ldrb	r3, [r7, #18]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d9ea      	bls.n	8000bc2 <IMU_BurstRead+0xd0>
    }

    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_RESET);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	6858      	ldr	r0, [r3, #4]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	891b      	ldrh	r3, [r3, #8]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f005 fade 	bl	80061b8 <HAL_GPIO_WritePin>
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx_data, rx_data, length + 1, HAL_MAX_DELAY);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	7cbb      	ldrb	r3, [r7, #18]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3301      	adds	r3, #1
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	9200      	str	r2, [sp, #0]
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c12:	f006 fd4e 	bl	80076b2 <HAL_SPI_TransmitReceive>
 8000c16:	4603      	mov	r3, r0
 8000c18:	76fb      	strb	r3, [r7, #27]
    HAL_GPIO_WritePin(imu->cs_port, imu->cs_pin, GPIO_PIN_SET);
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	6858      	ldr	r0, [r3, #4]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	891b      	ldrh	r3, [r3, #8]
 8000c22:	2201      	movs	r2, #1
 8000c24:	4619      	mov	r1, r3
 8000c26:	f005 fac7 	bl	80061b8 <HAL_GPIO_WritePin>

    for(uint8_t i = 1; i <= length; i++) {
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000c30:	e00e      	b.n	8000c50 <IMU_BurstRead+0x15e>
    	*(buffer+(i-1)) = rx_data[i];
 8000c32:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000c36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	68f9      	ldr	r1, [r7, #12]
 8000c3e:	440b      	add	r3, r1
 8000c40:	69f9      	ldr	r1, [r7, #28]
 8000c42:	5c8a      	ldrb	r2, [r1, r2]
 8000c44:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= length; i++) {
 8000c46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000c50:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000c54:	7cbb      	ldrb	r3, [r7, #18]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d9eb      	bls.n	8000c32 <IMU_BurstRead+0x140>
	}


    return status;
 8000c5a:	7efb      	ldrb	r3, [r7, #27]
 8000c5c:	46b5      	mov	sp, r6
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3734      	adds	r7, #52	@ 0x34
 8000c62:	46bd      	mov	sp, r7
 8000c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c68 <IMU_Init>:

// Initialize the IMU
HAL_StatusTypeDef IMU_Init(IMU_HandleTypeDef *imu) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
//
//    for(uint8_t i = 0; i < 14; i++) {
//    	data_buffer[i] = 0;
//    }

    if (IMU_WriteRegister(imu, 0x76, 0x00) != HAL_OK) { //userbank 0 select
 8000c74:	2200      	movs	r2, #0
 8000c76:	2176      	movs	r1, #118	@ 0x76
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff0e 	bl	8000a9a <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
	HAL_Delay(1);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f002 fdd2 	bl	8003828 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_DEVICE_CONFIG_REG, IMU_DEVICE_CONFIG_RESET) != HAL_OK) {
 8000c84:	2201      	movs	r2, #1
 8000c86:	2111      	movs	r1, #17
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff06 	bl	8000a9a <IMU_WriteRegister>
    	//   return HAL_ERROR;
	}

    HAL_Delay(5);
 8000c8e:	2005      	movs	r0, #5
 8000c90:	f002 fdca 	bl	8003828 <HAL_Delay>

    if (IMU_BurstRead(imu, IMU_WHO_AM_I_REG, &who_am_i, 1) != HAL_OK || who_am_i != IMU_WHO_AM_I_EXPECTED) {
 8000c94:	f107 020f 	add.w	r2, r7, #15
 8000c98:	2301      	movs	r3, #1
 8000c9a:	2175      	movs	r1, #117	@ 0x75
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff28 	bl	8000af2 <IMU_BurstRead>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f002 fdbe 	bl	8003828 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_PWR_MGMT_0, IMU_ENABLE_ACCEL_GYRO) != HAL_OK) {
 8000cac:	220f      	movs	r2, #15
 8000cae:	214e      	movs	r1, #78	@ 0x4e
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fef2 	bl	8000a9a <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f002 fdb6 	bl	8003828 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_GYRO_CONFIG_REG, IMU_GYRO_CONFIG_DATA) != HAL_OK) {
 8000cbc:	2248      	movs	r2, #72	@ 0x48
 8000cbe:	214f      	movs	r1, #79	@ 0x4f
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff feea 	bl	8000a9a <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f002 fdae 	bl	8003828 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_ACCEL_CONFIG_REG, IMU_ACCEL_CONFIG_DATA) != HAL_OK) {
 8000ccc:	2248      	movs	r2, #72	@ 0x48
 8000cce:	2150      	movs	r1, #80	@ 0x50
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fee2 	bl	8000a9a <IMU_WriteRegister>
     //   return HAL_ERROR;
    }
    HAL_Delay(1);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f002 fda6 	bl	8003828 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG0_REG, IMU_INT_CONFIG0_DATA) != HAL_OK) {
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2163      	movs	r1, #99	@ 0x63
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff feda 	bl	8000a9a <IMU_WriteRegister>
	 //   return HAL_ERROR;
	}
    HAL_Delay(1);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f002 fd9e 	bl	8003828 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_SOURCE_REG, IMU_INT_ENABLE_DATA_RDY) != HAL_OK) {
 8000cec:	2208      	movs	r2, #8
 8000cee:	2165      	movs	r1, #101	@ 0x65
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fed2 	bl	8000a9a <IMU_WriteRegister>
       // return HAL_ERROR;
    }
    HAL_Delay(1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f002 fd96 	bl	8003828 <HAL_Delay>

    if (IMU_WriteRegister(imu, IMU_INT_CONFIG_REG, IMU_INT_ACTIVE_HIGH) != HAL_OK) {
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	2114      	movs	r1, #20
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff feca 	bl	8000a9a <IMU_WriteRegister>
        //return HAL_ERROR;
    }
    HAL_Delay(1);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f002 fd8e 	bl	8003828 <HAL_Delay>


    return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <IMU_ReadAll>:

    return HAL_OK;
}

// Read all data (accelerometer, gyroscope, and temperature)
HAL_StatusTypeDef IMU_ReadAll(IMU_HandleTypeDef *imu) {
 8000d16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	466b      	mov	r3, sp
 8000d22:	461e      	mov	r6, r3
	uint8_t length = 14;
 8000d24:	230e      	movs	r3, #14
 8000d26:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[length];
 8000d28:	7df9      	ldrb	r1, [r7, #23]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	b2cb      	uxtb	r3, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	4698      	mov	r8, r3
 8000d36:	4691      	mov	r9, r2
 8000d38:	f04f 0200 	mov.w	r2, #0
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d4c:	b2cb      	uxtb	r3, r1
 8000d4e:	2200      	movs	r2, #0
 8000d50:	461c      	mov	r4, r3
 8000d52:	4615      	mov	r5, r2
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	f04f 0300 	mov.w	r3, #0
 8000d5c:	00eb      	lsls	r3, r5, #3
 8000d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d62:	00e2      	lsls	r2, r4, #3
 8000d64:	460b      	mov	r3, r1
 8000d66:	3307      	adds	r3, #7
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d70:	466b      	mov	r3, sp
 8000d72:	3300      	adds	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
    uint8_t intStatus = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	72fb      	strb	r3, [r7, #11]
    if (IMU_BurstRead(imu, IMU_TEMP_OUT_H, raw_data, length) != HAL_OK) {
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	211d      	movs	r1, #29
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff feb6 	bl	8000af2 <IMU_BurstRead>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <IMU_ReadAll+0x7a>
        return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e059      	b.n	8000e44 <IMU_ReadAll+0x12e>
    }

    imu->accel[0] = (raw_data[2] << 8) | raw_data[3];
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	789b      	ldrb	r3, [r3, #2]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	78db      	ldrb	r3, [r3, #3]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	825a      	strh	r2, [r3, #18]
    imu->accel[1] = (raw_data[4] << 8) | raw_data[5];
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	795b      	ldrb	r3, [r3, #5]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	829a      	strh	r2, [r3, #20]
    imu->accel[2] = (raw_data[6] << 8) | raw_data[7];
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	799b      	ldrb	r3, [r3, #6]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	79db      	ldrb	r3, [r3, #7]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	82da      	strh	r2, [r3, #22]

    imu->temperature = (raw_data[0] << 8) | raw_data[1];
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	83da      	strh	r2, [r3, #30]

    imu->gyro[0] = (raw_data[8] << 8) | raw_data[9];
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	7a1b      	ldrb	r3, [r3, #8]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	7a5b      	ldrb	r3, [r3, #9]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	831a      	strh	r2, [r3, #24]
    imu->gyro[1] = (raw_data[10] << 8) | raw_data[11];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	7a9b      	ldrb	r3, [r3, #10]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	7adb      	ldrb	r3, [r3, #11]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	835a      	strh	r2, [r3, #26]
    imu->gyro[2] = (raw_data[12] << 8) | raw_data[13];
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	7b1b      	ldrb	r3, [r3, #12]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	7b5b      	ldrb	r3, [r3, #13]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	839a      	strh	r2, [r3, #28]

    if (IMU_BurstRead(imu, IMU_INT_STATUS_REG, &intStatus, 1) != HAL_OK) {
 8000e2a:	f107 020b 	add.w	r2, r7, #11
 8000e2e:	2301      	movs	r3, #1
 8000e30:	212d      	movs	r1, #45	@ 0x2d
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fe5d 	bl	8000af2 <IMU_BurstRead>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <IMU_ReadAll+0x12c>
		return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <IMU_ReadAll+0x12e>
	}

    return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	46b5      	mov	sp, r6
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e50 <IMU_InterruptHandler>:

// Interrupt handler
void IMU_InterruptHandler(IMU_HandleTypeDef *imu, uint16_t GPIO_pin) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
    if (GPIO_pin != imu->int_pin) return;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	8a1b      	ldrh	r3, [r3, #16]
 8000e60:	887a      	ldrh	r2, [r7, #2]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d103      	bne.n	8000e6e <IMU_InterruptHandler+0x1e>

    if (IMU_ReadAll(imu) == HAL_OK) {
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff55 	bl	8000d16 <IMU_ReadAll>
 8000e6c:	e000      	b.n	8000e70 <IMU_InterruptHandler+0x20>
    if (GPIO_pin != imu->int_pin) return;
 8000e6e:	bf00      	nop
        // Data successfully read
    } else {
        // Handle read error
    }
}
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <Motor_Init>:
 */

#include "motor_control.h"

// Initialize a motor
void Motor_Init(Motor *motor) {
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
    // Example: Initialize GPIOs or timers for the motor
	motor->pid.hallCount = 0;
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	motor->pid.lastHallCount = 0;
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	motor->pid.set_speed = 0;
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	motor->pid.integral = 0;
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	motor->pid.previousFilter = 0;
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	motor->pid.lastUpdateTime = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	motor->pid.lastPwmVal = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	motor->pid.lastHallTime = 0;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->pid.totalHallTime = 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	675a      	str	r2, [r3, #116]	@ 0x74
	motor->pid.pwmVal = 0;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	motor->pid.filterGain = DER_FILTER_GAIN;
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	motor->pid.maxIntegral = MAX_INTEGRAL_VAL;
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90


	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall1_Channel);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	f007 fa13 	bl	8008348 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall2_Channel);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	885b      	ldrh	r3, [r3, #2]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	f007 fa0b 	bl	8008348 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(motor->HallTimer, motor->Hall3_Channel);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	889b      	ldrh	r3, [r3, #4]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f007 fa03 	bl	8008348 <HAL_TIM_IC_Start_IT>

	Motor_Stop(motor);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f96f 	bl	8001226 <Motor_Stop>
	ReadHallSensors(motor);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 feae 	bl	8001caa <ReadHallSensors>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <Motor_SetSpeed>:

// Set the speed of a motor
void Motor_SetSpeed(Motor *motor, int64_t target_speed) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	e9c7 2300 	strd	r2, r3, [r7]

	if (target_speed == motor->target_speed) return;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	bf08      	it	eq
 8000f72:	4290      	cmpeq	r0, r2
 8000f74:	d044      	beq.n	8001000 <Motor_SetSpeed+0xa8>

	if (target_speed > MAX_MOTOR_SPEED) target_speed = MAX_MOTOR_SPEED;
 8000f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f7a:	f641 7141 	movw	r1, #8001	@ 0x1f41
 8000f7e:	428a      	cmp	r2, r1
 8000f80:	f173 0300 	sbcs.w	r3, r3, #0
 8000f84:	db05      	blt.n	8000f92 <Motor_SetSpeed+0x3a>
 8000f86:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed < -MAX_MOTOR_SPEED) target_speed = -MAX_MOTOR_SPEED;
 8000f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f96:	f512 5ffa 	cmn.w	r2, #8000	@ 0x1f40
 8000f9a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8000f9e:	da04      	bge.n	8000faa <Motor_SetSpeed+0x52>
 8000fa0:	4a19      	ldr	r2, [pc, #100]	@ (8001008 <Motor_SetSpeed+0xb0>)
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	e9c7 2300 	strd	r2, r3, [r7]
	if (target_speed > -MIN_MOTOR_SPEED && target_speed < MIN_MOTOR_SPEED)
 8000faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fae:	4917      	ldr	r1, [pc, #92]	@ (800100c <Motor_SetSpeed+0xb4>)
 8000fb0:	428a      	cmp	r2, r1
 8000fb2:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8000fb6:	db0c      	blt.n	8000fd2 <Motor_SetSpeed+0x7a>
 8000fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fbc:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8000fc0:	f173 0300 	sbcs.w	r3, r3, #0
 8000fc4:	da05      	bge.n	8000fd2 <Motor_SetSpeed+0x7a>
			target_speed = 0;
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	e9c7 2300 	strd	r2, r3, [r7]

	motor->pid.integral = 0;
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	motor->pid.previousError = 0;
 8000fe0:	68f9      	ldr	r1, [r7, #12]
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

	motor->target_speed = target_speed;
 8000fee:	68f9      	ldr	r1, [r7, #12]
 8000ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ff4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	Motor_Calculate(motor);
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 f935 	bl	8001268 <Motor_Calculate>
 8000ffe:	e000      	b.n	8001002 <Motor_SetSpeed+0xaa>
	if (target_speed == motor->target_speed) return;
 8001000:	bf00      	nop
}
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	ffffe0c0 	.word	0xffffe0c0
 800100c:	fffffc19 	.word	0xfffffc19

08001010 <Motor_SetPwm>:


void Motor_SetPwm(Motor *motor, int16_t duty_cycle) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]

	if(duty_cycle > PWM_MAX_VAL) duty_cycle = PWM_MAX_VAL;
 800101c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001020:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001024:	dd03      	ble.n	800102e <Motor_SetPwm+0x1e>
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	e005      	b.n	800103a <Motor_SetPwm+0x2a>
	else if(duty_cycle < 0) duty_cycle = 0;
 800102e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001032:	2b00      	cmp	r3, #0
 8001034:	da01      	bge.n	800103a <Motor_SetPwm+0x2a>
 8001036:	2300      	movs	r3, #0
 8001038:	807b      	strh	r3, [r7, #2]

	motor->pid.pwmVal = duty_cycle;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_A_IDX], motor->pid.pwmVal);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001046:	2b00      	cmp	r3, #0
 8001048:	d107      	bne.n	800105a <Motor_SetPwm+0x4a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	635a      	str	r2, [r3, #52]	@ 0x34
 8001058:	e03b      	b.n	80010d2 <Motor_SetPwm+0xc2>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800105e:	2b04      	cmp	r3, #4
 8001060:	d108      	bne.n	8001074 <Motor_SetPwm+0x64>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	460b      	mov	r3, r1
 8001070:	6393      	str	r3, [r2, #56]	@ 0x38
 8001072:	e02e      	b.n	80010d2 <Motor_SetPwm+0xc2>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001078:	2b08      	cmp	r3, #8
 800107a:	d108      	bne.n	800108e <Motor_SetPwm+0x7e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	460b      	mov	r3, r1
 800108a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800108c:	e021      	b.n	80010d2 <Motor_SetPwm+0xc2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001092:	2b0c      	cmp	r3, #12
 8001094:	d108      	bne.n	80010a8 <Motor_SetPwm+0x98>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	460b      	mov	r3, r1
 80010a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a6:	e014      	b.n	80010d2 <Motor_SetPwm+0xc2>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d108      	bne.n	80010c2 <Motor_SetPwm+0xb2>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	460b      	mov	r3, r1
 80010be:	6493      	str	r3, [r2, #72]	@ 0x48
 80010c0:	e007      	b.n	80010d2 <Motor_SetPwm+0xc2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	460b      	mov	r3, r1
 80010d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_B_IDX], motor->pid.pwmVal);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d107      	bne.n	80010ea <Motor_SetPwm+0xda>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e8:	e03b      	b.n	8001162 <Motor_SetPwm+0x152>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d108      	bne.n	8001104 <Motor_SetPwm+0xf4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	460b      	mov	r3, r1
 8001100:	6393      	str	r3, [r2, #56]	@ 0x38
 8001102:	e02e      	b.n	8001162 <Motor_SetPwm+0x152>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001108:	2b08      	cmp	r3, #8
 800110a:	d108      	bne.n	800111e <Motor_SetPwm+0x10e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	460b      	mov	r3, r1
 800111a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800111c:	e021      	b.n	8001162 <Motor_SetPwm+0x152>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d108      	bne.n	8001138 <Motor_SetPwm+0x128>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	460b      	mov	r3, r1
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
 8001136:	e014      	b.n	8001162 <Motor_SetPwm+0x152>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800113c:	2b10      	cmp	r3, #16
 800113e:	d108      	bne.n	8001152 <Motor_SetPwm+0x142>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	460b      	mov	r3, r1
 800114e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001150:	e007      	b.n	8001162 <Motor_SetPwm+0x152>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	460b      	mov	r3, r1
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_TIM_SET_COMPARE(motor->Timer, motor->phaseChannel[PHASE_C_IDX], motor->pid.pwmVal);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <Motor_SetPwm+0x16a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	635a      	str	r2, [r3, #52]	@ 0x34
 8001178:	e03b      	b.n	80011f2 <Motor_SetPwm+0x1e2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800117e:	2b04      	cmp	r3, #4
 8001180:	d108      	bne.n	8001194 <Motor_SetPwm+0x184>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	460b      	mov	r3, r1
 8001190:	6393      	str	r3, [r2, #56]	@ 0x38
 8001192:	e02e      	b.n	80011f2 <Motor_SetPwm+0x1e2>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001198:	2b08      	cmp	r3, #8
 800119a:	d108      	bne.n	80011ae <Motor_SetPwm+0x19e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	460b      	mov	r3, r1
 80011aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011ac:	e021      	b.n	80011f2 <Motor_SetPwm+0x1e2>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80011b2:	2b0c      	cmp	r3, #12
 80011b4:	d108      	bne.n	80011c8 <Motor_SetPwm+0x1b8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	460b      	mov	r3, r1
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	e014      	b.n	80011f2 <Motor_SetPwm+0x1e2>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80011cc:	2b10      	cmp	r3, #16
 80011ce:	d108      	bne.n	80011e2 <Motor_SetPwm+0x1d2>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	460b      	mov	r3, r1
 80011de:	6493      	str	r3, [r2, #72]	@ 0x48
 80011e0:	e007      	b.n	80011f2 <Motor_SetPwm+0x1e2>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f9b3 1080 	ldrsh.w	r1, [r3, #128]	@ 0x80
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	460b      	mov	r3, r1
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if(motor->pid.lastPwmVal == 0 && motor->pid.lastPwmVal != motor->pid.pwmVal)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	@ 0x82
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10a      	bne.n	8001212 <Motor_SetPwm+0x202>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	@ 0x82
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8001208:	429a      	cmp	r2, r3
 800120a:	d002      	beq.n	8001212 <Motor_SetPwm+0x202>
		Motor_Update(motor);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fc31 	bl	8001a74 <Motor_Update>
	motor->pid.lastPwmVal = motor->pid.pwmVal;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f9b3 2080 	ldrsh.w	r2, [r3, #128]	@ 0x80
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <Motor_Stop>:

// Stop a motor
void Motor_Stop(Motor *motor) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
    // Set speed to zero to stop the motor
    Motor_SetSpeed(motor, 0);
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fe8e 	bl	8000f58 <Motor_SetSpeed>
    SetPhase(motor, PHASE_A_IDX, false, false);
 800123c:	2300      	movs	r3, #0
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fcdc 	bl	8001c00 <SetPhase>
    SetPhase(motor, PHASE_B_IDX, false, false);
 8001248:	2300      	movs	r3, #0
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fcd6 	bl	8001c00 <SetPhase>
    SetPhase(motor, PHASE_C_IDX, false, false);
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	2102      	movs	r1, #2
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fcd0 	bl	8001c00 <SetPhase>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <Motor_Calculate>:

void Motor_Calculate(Motor *motor) {
 8001268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800126c:	b0d7      	sub	sp, #348	@ 0x15c
 800126e:	af00      	add	r7, sp, #0
 8001270:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
	uint32_t currentTime = HAL_GetTick(); // Get the current time in milliseconds
 8001274:	f002 facc 	bl	8003810 <HAL_GetTick>
 8001278:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

	// Update PID every certain time cycle
	if ((currentTime - motor->pid.lastUpdateTime) >= PID_CALC_TIMING) {
 800127c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001280:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	2b13      	cmp	r3, #19
 800128c:	f240 83e7 	bls.w	8001a5e <Motor_Calculate+0x7f6>

		if(motor->pid.set_speed > motor->target_speed) {
 8001290:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001294:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8001298:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800129c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80012a0:	4282      	cmp	r2, r0
 80012a2:	418b      	sbcs	r3, r1
 80012a4:	da78      	bge.n	8001398 <Motor_Calculate+0x130>
			if(motor->pid.set_speed > 0 && motor->pid.set_speed - motor->acceleration < 0 && motor->target_speed < 0) {
 80012a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012aa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80012ae:	2a01      	cmp	r2, #1
 80012b0:	f173 0300 	sbcs.w	r3, r3, #0
 80012b4:	db35      	blt.n	8001322 <Motor_Calculate+0xba>
 80012b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012ba:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80012be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80012c6:	1a84      	subs	r4, r0, r2
 80012c8:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80012cc:	eb61 0303 	sbc.w	r3, r1, r3
 80012d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80012d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da22      	bge.n	8001322 <Motor_Calculate+0xba>
 80012dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012e0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da1c      	bge.n	8001322 <Motor_Calculate+0xba>
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 80012e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012ec:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80012f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012f4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80012f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012fc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001300:	eb10 0802 	adds.w	r8, r0, r2
 8001304:	eb41 0903 	adc.w	r9, r1, r3
 8001308:	45a0      	cmp	r8, r4
 800130a:	eb79 0305 	sbcs.w	r3, r9, r5
 800130e:	db3a      	blt.n	8001386 <Motor_Calculate+0x11e>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 8001310:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed > motor->pid.set_speed + motor->acceleration) {
 8001320:	e031      	b.n	8001386 <Motor_Calculate+0x11e>
				}
			}
			else if(motor->pid.set_speed - motor->acceleration <= motor->target_speed) {
 8001322:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001326:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800132a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800132e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001332:	ebb0 0a02 	subs.w	sl, r0, r2
 8001336:	eb61 0b03 	sbc.w	fp, r1, r3
 800133a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800133e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001342:	4552      	cmp	r2, sl
 8001344:	eb73 030b 	sbcs.w	r3, r3, fp
 8001348:	db08      	blt.n	800135c <Motor_Calculate+0xf4>
				motor->pid.set_speed = motor->target_speed;
 800134a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800134e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8001352:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001356:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 800135a:	e014      	b.n	8001386 <Motor_Calculate+0x11e>
			}
			else {
				motor->pid.set_speed -= motor->acceleration;
 800135c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001360:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8001364:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001368:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800136c:	1a84      	subs	r4, r0, r2
 800136e:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001372:	eb61 0303 	sbc.w	r3, r1, r3
 8001376:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800137a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800137e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8001382:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 8001386:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 8001396:	e08d      	b.n	80014b4 <Motor_Calculate+0x24c>
		} else if(motor->pid.set_speed < motor->target_speed) {
 8001398:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800139c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80013a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80013a8:	4290      	cmp	r0, r2
 80013aa:	eb71 0303 	sbcs.w	r3, r1, r3
 80013ae:	f280 8081 	bge.w	80014b4 <Motor_Calculate+0x24c>
			if(motor->pid.set_speed < 0 && motor->pid.set_speed + motor->acceleration > 0 && motor->target_speed > 0) {
 80013b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013b6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da3a      	bge.n	8001434 <Motor_Calculate+0x1cc>
 80013be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013c2:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80013c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013ca:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80013ce:	1884      	adds	r4, r0, r2
 80013d0:	eb41 0503 	adc.w	r5, r1, r3
 80013d4:	2c01      	cmp	r4, #1
 80013d6:	f175 0300 	sbcs.w	r3, r5, #0
 80013da:	db2b      	blt.n	8001434 <Motor_Calculate+0x1cc>
 80013dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013e0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	f173 0300 	sbcs.w	r3, r3, #0
 80013ea:	db23      	blt.n	8001434 <Motor_Calculate+0x1cc>
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 80013ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013f0:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80013f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013f8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80013fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001400:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001404:	1a86      	subs	r6, r0, r2
 8001406:	f8c7 60e0 	str.w	r6, [r7, #224]	@ 0xe0
 800140a:	eb61 0303 	sbc.w	r3, r1, r3
 800140e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001412:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8001416:	460b      	mov	r3, r1
 8001418:	429c      	cmp	r4, r3
 800141a:	4613      	mov	r3, r2
 800141c:	eb75 0303 	sbcs.w	r3, r5, r3
 8001420:	db40      	blt.n	80014a4 <Motor_Calculate+0x23c>
					//waiting for the system to slow down enough to change directions
				}
				else {
					motor->pid.set_speed = 0;
 8001422:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
				if(motor->current_speed < motor->pid.set_speed - motor->acceleration) {
 8001432:	e037      	b.n	80014a4 <Motor_Calculate+0x23c>
				}
			}
			else if(motor->pid.set_speed + motor->acceleration >= motor->target_speed) {
 8001434:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001438:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 800143c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001440:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001444:	1884      	adds	r4, r0, r2
 8001446:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 800144a:	eb41 0303 	adc.w	r3, r1, r3
 800144e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001452:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001456:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800145a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800145e:	4621      	mov	r1, r4
 8001460:	4291      	cmp	r1, r2
 8001462:	4629      	mov	r1, r5
 8001464:	4199      	sbcs	r1, r3
 8001466:	db08      	blt.n	800147a <Motor_Calculate+0x212>
				motor->pid.set_speed = motor->target_speed;
 8001468:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800146c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8001470:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001474:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
 8001478:	e014      	b.n	80014a4 <Motor_Calculate+0x23c>
			}
			else {
				motor->pid.set_speed += motor->acceleration;
 800147a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800147e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8001482:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001486:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800148a:	1884      	adds	r4, r0, r2
 800148c:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8001490:	eb41 0303 	adc.w	r3, r1, r3
 8001494:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001498:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800149c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80014a0:	e9c3 121e 	strd	r1, r2, [r3, #120]	@ 0x78
			}
			motor->pid.integral = 0;
 80014a4:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		}

		//set motor direction based the sign of the set_speed variable
		if(motor->pid.set_speed < 0) {
 80014b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014b8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da05      	bge.n	80014cc <Motor_Calculate+0x264>
			motor->direction = false;
 80014c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80014c4:	2300      	movs	r3, #0
 80014c6:	f882 3045 	strb.w	r3, [r2, #69]	@ 0x45
 80014ca:	e004      	b.n	80014d6 <Motor_Calculate+0x26e>
		}
		else
		{
			motor->direction = true;
 80014cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80014d0:	2301      	movs	r3, #1
 80014d2:	f882 3045 	strb.w	r3, [r2, #69]	@ 0x45
		}

		// Calculate current speed
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 80014d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014da:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80014de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014e2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80014e6:	1a84      	subs	r4, r0, r2
 80014e8:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 80014ec:	eb61 0303 	sbc.w	r3, r1, r3
 80014f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				* ( 1000 * 1000 * 60 / ((int64_t)motor->pid.totalHallTime))/SPEED_CALC_HALL_TO_REV; // speed in counts per minute
 80014f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fa:	2200      	movs	r2, #0
 80014fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001500:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001504:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001508:	4822      	ldr	r0, [pc, #136]	@ (8001594 <Motor_Calculate+0x32c>)
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	f7fe fe83 	bl	8000218 <__aeabi_ldivmod>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800151a:	4629      	mov	r1, r5
 800151c:	fb02 f001 	mul.w	r0, r2, r1
 8001520:	4621      	mov	r1, r4
 8001522:	fb01 f103 	mul.w	r1, r1, r3
 8001526:	4401      	add	r1, r0
 8001528:	4620      	mov	r0, r4
 800152a:	fba0 2302 	umull	r2, r3, r0, r2
 800152e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001532:	4613      	mov	r3, r2
 8001534:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001538:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800153c:	18cb      	adds	r3, r1, r3
 800153e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001542:	f04f 0207 	mov.w	r2, #7
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800154e:	f7fe fe63 	bl	8000218 <__aeabi_ldivmod>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
		motor->current_speed = (motor->pid.hallCount - motor->pid.lastHallCount)
 800155a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800155e:	e9c3 0114 	strd	r0, r1, [r3, #80]	@ 0x50

		motor->pid.totalHallTime = 0;
 8001562:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001566:	2300      	movs	r3, #0
 8001568:	6753      	str	r3, [r2, #116]	@ 0x74
		motor->pid.lastHallCount = motor->pid.hallCount;
 800156a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800156e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8001572:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001576:	e9c3 011a 	strd	r0, r1, [r3, #104]	@ 0x68

		//do no calculations if speed is set to 0
		if(motor->pid.set_speed == 0) {
 800157a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800157e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001582:	4313      	orrs	r3, r2
 8001584:	d108      	bne.n	8001598 <Motor_Calculate+0x330>
			Motor_SetPwm(motor,0);
 8001586:	2100      	movs	r1, #0
 8001588:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800158c:	f7ff fd40 	bl	8001010 <Motor_SetPwm>
			return;
 8001590:	e265      	b.n	8001a5e <Motor_Calculate+0x7f6>
 8001592:	bf00      	nop
 8001594:	03938700 	.word	0x03938700
		}

		// Calculate error
		int64_t error = (motor->pid.set_speed - motor->current_speed);
 8001598:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800159c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80015a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015a4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80015a8:	1a84      	subs	r4, r0, r2
 80015aa:	653c      	str	r4, [r7, #80]	@ 0x50
 80015ac:	eb61 0303 	sbc.w	r3, r1, r3
 80015b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80015b2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80015b6:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		// PID calculations
		motor->pid.integral += error * PID_CALC_TIMING/1000; // Integral term, scaled for 50ms
 80015ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015be:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	@ 0x88
 80015c2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80015c6:	f04f 0232 	mov.w	r2, #50	@ 0x32
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	f7fe fe23 	bl	8000218 <__aeabi_ldivmod>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	18a1      	adds	r1, r4, r2
 80015d8:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80015dc:	eb45 0303 	adc.w	r3, r5, r3
 80015e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80015e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80015ec:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//clamp integral term to avoid integral windup
		if(motor->pid.integral > motor->pid.maxIntegral) motor->pid.integral = motor->pid.maxIntegral;
 80015f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015f4:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80015f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015fc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001600:	4282      	cmp	r2, r0
 8001602:	418b      	sbcs	r3, r1
 8001604:	da07      	bge.n	8001616 <Motor_Calculate+0x3ae>
 8001606:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800160a:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 800160e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001612:	e9c3 0122 	strd	r0, r1, [r3, #136]	@ 0x88
		if(motor->pid.integral < -1*motor->pid.maxIntegral) motor->pid.integral = -1*motor->pid.maxIntegral;
 8001616:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800161a:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 800161e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001622:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001626:	2400      	movs	r4, #0
 8001628:	4255      	negs	r5, r2
 800162a:	f8c7 50b0 	str.w	r5, [r7, #176]	@ 0xb0
 800162e:	eb64 0303 	sbc.w	r3, r4, r3
 8001632:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001636:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800163a:	4623      	mov	r3, r4
 800163c:	4298      	cmp	r0, r3
 800163e:	462b      	mov	r3, r5
 8001640:	eb71 0303 	sbcs.w	r3, r1, r3
 8001644:	da11      	bge.n	800166a <Motor_Calculate+0x402>
 8001646:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800164a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800164e:	2100      	movs	r1, #0
 8001650:	4250      	negs	r0, r2
 8001652:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8001656:	eb61 0303 	sbc.w	r3, r1, r3
 800165a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800165e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001662:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001666:	e9c3 1222 	strd	r1, r2, [r3, #136]	@ 0x88

		//use derivitave filter to calculate derivative term
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 800166a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800166e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8001672:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001676:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800167a:	fb02 f501 	mul.w	r5, r2, r1
 800167e:	fb00 f403 	mul.w	r4, r0, r3
 8001682:	442c      	add	r4, r5
 8001684:	fba0 2302 	umull	r2, r3, r0, r2
 8001688:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800168c:	4613      	mov	r3, r2
 800168e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001696:	18e3      	adds	r3, r4, r3
 8001698:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800169c:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80016a8:	f7fe fdb6 	bl	8000218 <__aeabi_ldivmod>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4614      	mov	r4, r2
 80016b2:	461d      	mov	r5, r3
								+ (100-motor->pid.filterGain)*(error - motor->pid.previousError)/100;
 80016b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016b8:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80016bc:	2100      	movs	r1, #0
 80016be:	f1d2 0064 	rsbs	r0, r2, #100	@ 0x64
 80016c2:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 80016c6:	eb61 0303 	sbc.w	r3, r1, r3
 80016ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80016ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016d2:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 80016d6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80016da:	1a16      	subs	r6, r2, r0
 80016dc:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 80016e0:	eb63 0301 	sbc.w	r3, r3, r1
 80016e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80016e8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80016ec:	464b      	mov	r3, r9
 80016ee:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80016f2:	4652      	mov	r2, sl
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	465b      	mov	r3, fp
 80016fa:	4641      	mov	r1, r8
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4642      	mov	r2, r8
 8001704:	4651      	mov	r1, sl
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8001714:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800171e:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800172a:	f7fe fd75 	bl	8000218 <__aeabi_ldivmod>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
		int64_t currentFilter = motor->pid.filterGain * motor->pid.previousFilter/100
 8001732:	18a1      	adds	r1, r4, r2
 8001734:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001736:	eb45 0303 	adc.w	r3, r5, r3
 800173a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800173c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001740:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

		int64_t derivative = (currentFilter) * 1000/PID_CALC_TIMING; // Derivative term
 8001744:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	1894      	adds	r4, r2, r2
 800174e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001750:	415b      	adcs	r3, r3
 8001752:	647b      	str	r3, [r7, #68]	@ 0x44
 8001754:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001758:	1814      	adds	r4, r2, r0
 800175a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800175c:	414b      	adcs	r3, r1
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	@ 0x38
 800176c:	4634      	mov	r4, r6
 800176e:	00e3      	lsls	r3, r4, #3
 8001770:	462c      	mov	r4, r5
 8001772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001776:	462c      	mov	r4, r5
 8001778:	00e2      	lsls	r2, r4, #3
 800177a:	4614      	mov	r4, r2
 800177c:	461d      	mov	r5, r3
 800177e:	4623      	mov	r3, r4
 8001780:	181b      	adds	r3, r3, r0
 8001782:	633b      	str	r3, [r7, #48]	@ 0x30
 8001784:	462b      	mov	r3, r5
 8001786:	eb41 0303 	adc.w	r3, r1, r3
 800178a:	637b      	str	r3, [r7, #52]	@ 0x34
 800178c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001790:	460b      	mov	r3, r1
 8001792:	18db      	adds	r3, r3, r3
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001796:	4613      	mov	r3, r2
 8001798:	eb42 0303 	adc.w	r3, r2, r3
 800179c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800179e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80017a2:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		motor->pid.previousFilter = currentFilter;
 80017a6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80017aa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80017ae:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
		motor->pid.previousError = error;
 80017b2:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80017b6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80017ba:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		// Compute the new PWM value using the PID formula
		int64_t output = motor->pid.Kp * error + motor->pid.Ki * motor->pid.integral + motor->pid.Kd * derivative;
 80017be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80017c6:	17da      	asrs	r2, r3, #31
 80017c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017cc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80017d4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80017d8:	462a      	mov	r2, r5
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80017e2:	4621      	mov	r1, r4
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	441a      	add	r2, r3
 80017ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80017ee:	4621      	mov	r1, r4
 80017f0:	fba3 1301 	umull	r1, r3, r3, r1
 80017f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80017f8:	460b      	mov	r3, r1
 80017fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80017fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001802:	18d3      	adds	r3, r2, r3
 8001804:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001808:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800180c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001810:	17da      	asrs	r2, r3, #31
 8001812:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001816:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800181a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800181e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001822:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001826:	4629      	mov	r1, r5
 8001828:	fb02 f001 	mul.w	r0, r2, r1
 800182c:	4621      	mov	r1, r4
 800182e:	fb01 f103 	mul.w	r1, r1, r3
 8001832:	4401      	add	r1, r0
 8001834:	4620      	mov	r0, r4
 8001836:	fba0 2302 	umull	r2, r3, r0, r2
 800183a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800183e:	4613      	mov	r3, r2
 8001840:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001848:	18cb      	adds	r3, r1, r3
 800184a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800184e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001852:	4623      	mov	r3, r4
 8001854:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001858:	4602      	mov	r2, r0
 800185a:	189b      	adds	r3, r3, r2
 800185c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001860:	460b      	mov	r3, r1
 8001862:	462a      	mov	r2, r5
 8001864:	eb42 0303 	adc.w	r3, r2, r3
 8001868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800186c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001870:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001874:	17da      	asrs	r2, r3, #31
 8001876:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001878:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800187a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800187e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001882:	462a      	mov	r2, r5
 8001884:	fb02 f203 	mul.w	r2, r2, r3
 8001888:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800188c:	4621      	mov	r1, r4
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	441a      	add	r2, r3
 8001894:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001898:	4621      	mov	r1, r4
 800189a:	fba3 1301 	umull	r1, r3, r3, r1
 800189e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80018a2:	460b      	mov	r3, r1
 80018a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80018a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80018b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80018b6:	4623      	mov	r3, r4
 80018b8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80018bc:	4602      	mov	r2, r0
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	460b      	mov	r3, r1
 80018c4:	462a      	mov	r2, r5
 80018c6:	eb42 0303 	adc.w	r3, r2, r3
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80018cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80018d0:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150

		// Clamp the output to the valid PWM range
		if(motor->pid.set_speed > 0) {
 80018d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018d8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80018dc:	2a01      	cmp	r2, #1
 80018de:	f173 0300 	sbcs.w	r3, r3, #0
 80018e2:	db16      	blt.n	8001912 <Motor_Calculate+0x6aa>
			if (output > OUTPUT_MAX_VAL) output = OUTPUT_MAX_VAL;
 80018e4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80018e8:	495f      	ldr	r1, [pc, #380]	@ (8001a68 <Motor_Calculate+0x800>)
 80018ea:	428a      	cmp	r2, r1
 80018ec:	f173 0300 	sbcs.w	r3, r3, #0
 80018f0:	db04      	blt.n	80018fc <Motor_Calculate+0x694>
 80018f2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a6c <Motor_Calculate+0x804>)
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output < 0) output = 0;
 80018fc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001900:	2b00      	cmp	r3, #0
 8001902:	da37      	bge.n	8001974 <Motor_Calculate+0x70c>
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 8001910:	e030      	b.n	8001974 <Motor_Calculate+0x70c>
		}
		else if(motor->pid.set_speed < 0) {
 8001912:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001916:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800191a:	2b00      	cmp	r3, #0
 800191c:	da24      	bge.n	8001968 <Motor_Calculate+0x700>
			if (output < -OUTPUT_MAX_VAL) output = -OUTPUT_MAX_VAL;
 800191e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001922:	4953      	ldr	r1, [pc, #332]	@ (8001a70 <Motor_Calculate+0x808>)
 8001924:	428a      	cmp	r2, r1
 8001926:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800192a:	da04      	bge.n	8001936 <Motor_Calculate+0x6ce>
 800192c:	4a50      	ldr	r2, [pc, #320]	@ (8001a70 <Motor_Calculate+0x808>)
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			if (output > 0) output = 0;
 8001936:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800193a:	2a01      	cmp	r2, #1
 800193c:	f173 0300 	sbcs.w	r3, r3, #0
 8001940:	db05      	blt.n	800194e <Motor_Calculate+0x6e6>
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
			output*=-1;
 800194e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001952:	2100      	movs	r1, #0
 8001954:	4250      	negs	r0, r2
 8001956:	61b8      	str	r0, [r7, #24]
 8001958:	eb61 0303 	sbc.w	r3, r1, r3
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001962:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 8001966:	e005      	b.n	8001974 <Motor_Calculate+0x70c>
		}
		else {
			output = 0;
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		}

		//shift the output itself to avoid the deadband range of the motor.
		//output is also divided by a factor to allow for more granular kp, ki, and kd values
		output = output/OUTPUT_TO_PWM_MULT + PWM_MIN_VAL;
 8001974:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8001978:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	f7fe fc4a 	bl	8000218 <__aeabi_ldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	f112 01af 	adds.w	r1, r2, #175	@ 0xaf
 800198c:	6139      	str	r1, [r7, #16]
 800198e:	f143 0300 	adc.w	r3, r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001998:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(output - motor->pid.pwmVal > PWM_MAX_CHANGE) output = motor->pid.pwmVal + PWM_MAX_CHANGE;
 800199c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019a0:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	17da      	asrs	r2, r3, #31
 80019a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80019aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80019ac:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80019b0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80019b4:	4621      	mov	r1, r4
 80019b6:	1a51      	subs	r1, r2, r1
 80019b8:	66b9      	str	r1, [r7, #104]	@ 0x68
 80019ba:	4629      	mov	r1, r5
 80019bc:	eb63 0301 	sbc.w	r3, r3, r1
 80019c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019c2:	f240 3321 	movw	r3, #801	@ 0x321
 80019c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80019ca:	4602      	mov	r2, r0
 80019cc:	429a      	cmp	r2, r3
 80019ce:	460b      	mov	r3, r1
 80019d0:	f173 0300 	sbcs.w	r3, r3, #0
 80019d4:	db0c      	blt.n	80019f0 <Motor_Calculate+0x788>
 80019d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019da:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80019de:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80019e2:	17da      	asrs	r2, r3, #31
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	60fa      	str	r2, [r7, #12]
 80019e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019ec:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		if(motor->pid.pwmVal - output > PWM_MAX_CHANGE) output = motor->pid.pwmVal - PWM_MAX_CHANGE;
 80019f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019f4:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	17da      	asrs	r2, r3, #31
 80019fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80019fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8001a00:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001a04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a08:	4621      	mov	r1, r4
 8001a0a:	1a89      	subs	r1, r1, r2
 8001a0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a0e:	4629      	mov	r1, r5
 8001a10:	eb61 0303 	sbc.w	r3, r1, r3
 8001a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a16:	f240 3321 	movw	r3, #801	@ 0x321
 8001a1a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001a1e:	4602      	mov	r2, r0
 8001a20:	429a      	cmp	r2, r3
 8001a22:	460b      	mov	r3, r1
 8001a24:	f173 0300 	sbcs.w	r3, r3, #0
 8001a28:	db0c      	blt.n	8001a44 <Motor_Calculate+0x7dc>
 8001a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a2e:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	@ 0x80
 8001a32:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001a36:	17da      	asrs	r2, r3, #31
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a40:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		// Apply the PWM value
		Motor_SetPwm(motor, (int16_t)output);
 8001a44:	f9b7 3150 	ldrsh.w	r3, [r7, #336]	@ 0x150
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001a4e:	f7ff fadf 	bl	8001010 <Motor_SetPwm>

		// Update the last update time
		motor->pid.lastUpdateTime = currentTime;
 8001a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a56:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
}
 8001a5e:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8001a62:	46bd      	mov	sp, r7
 8001a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a68:	000c96a9 	.word	0x000c96a9
 8001a6c:	000c96a8 	.word	0x000c96a8
 8001a70:	fff36958 	.word	0xfff36958

08001a74 <Motor_Update>:

// Update the motor state (optional, e.g., for monitoring or control logic)
void Motor_Update(Motor *motor) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

	CalculateHallTiming(motor);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f944 	bl	8001d0a <CalculateHallTiming>

	ReadHallSensors(motor);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f911 	bl	8001caa <ReadHallSensors>

	bool direction = motor->isDirInverted ? !motor->direction : motor->direction;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00e      	beq.n	8001ab0 <Motor_Update+0x3c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e007      	b.n	8001ac0 <Motor_Update+0x4c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	73fb      	strb	r3, [r7, #15]

	if(motor->hallState == motor->commutationOrder[0]) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d106      	bne.n	8001ae0 <Motor_Update+0x6c>
		SetPhases(motor, PHASE_A_IDX, PHASE_C_IDX, direction);
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f84f 	bl	8001b7c <SetPhases>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
	}
	else if(motor->hallState == motor->commutationOrder[5]) {
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
	}
}
 8001ade:	e049      	b.n	8001b74 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[1]) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <Motor_Update+0x8a>
		SetPhases(motor, PHASE_A_IDX, PHASE_B_IDX, direction);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2201      	movs	r2, #1
 8001af4:	2100      	movs	r1, #0
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f840 	bl	8001b7c <SetPhases>
}
 8001afc:	e03a      	b.n	8001b74 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[2]) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d106      	bne.n	8001b1c <Motor_Update+0xa8>
		SetPhases(motor, PHASE_C_IDX, PHASE_B_IDX, direction);
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	2201      	movs	r2, #1
 8001b12:	2102      	movs	r1, #2
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f831 	bl	8001b7c <SetPhases>
}
 8001b1a:	e02b      	b.n	8001b74 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[3]) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d106      	bne.n	8001b3a <Motor_Update+0xc6>
		SetPhases(motor, PHASE_C_IDX, PHASE_A_IDX, direction);
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2102      	movs	r1, #2
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f822 	bl	8001b7c <SetPhases>
}
 8001b38:	e01c      	b.n	8001b74 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[4]) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d106      	bne.n	8001b58 <Motor_Update+0xe4>
		SetPhases(motor, PHASE_B_IDX, PHASE_A_IDX, direction);
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2101      	movs	r1, #1
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f813 	bl	8001b7c <SetPhases>
}
 8001b56:	e00d      	b.n	8001b74 <Motor_Update+0x100>
	else if(motor->hallState == motor->commutationOrder[5]) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d105      	bne.n	8001b74 <Motor_Update+0x100>
		SetPhases(motor, PHASE_B_IDX, PHASE_C_IDX, direction);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f804 	bl	8001b7c <SetPhases>
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <SetPhases>:

void SetPhases(Motor *motor, uint8_t highPhase, uint8_t lowPhase, bool direction) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	70fb      	strb	r3, [r7, #3]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	70bb      	strb	r3, [r7, #2]
 8001b92:	4613      	mov	r3, r2
 8001b94:	707b      	strb	r3, [r7, #1]
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d82b      	bhi.n	8001bf4 <SetPhases+0x78>
 8001b9c:	78bb      	ldrb	r3, [r7, #2]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d828      	bhi.n	8001bf4 <SetPhases+0x78>
	if(highPhase == lowPhase) return;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	78bb      	ldrb	r3, [r7, #2]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d026      	beq.n	8001bf8 <SetPhases+0x7c>

	uint8_t extraPhase = PHASE_A_IDX + PHASE_B_IDX + PHASE_C_IDX - highPhase - lowPhase;
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	78bb      	ldrb	r3, [r7, #2]
 8001bae:	4413      	add	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f1c3 0303 	rsb	r3, r3, #3
 8001bb6:	73fb      	strb	r3, [r7, #15]

	SetPhase(motor, extraPhase, false, false);
 8001bb8:	7bf9      	ldrb	r1, [r7, #15]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f81e 	bl	8001c00 <SetPhase>

	SetPhase(motor, highPhase, true, direction);
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	78f9      	ldrb	r1, [r7, #3]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f818 	bl	8001c00 <SetPhase>
	SetPhase(motor, lowPhase, true, !direction);
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	78b9      	ldrb	r1, [r7, #2]
 8001bea:	2201      	movs	r2, #1
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f807 	bl	8001c00 <SetPhase>
 8001bf2:	e002      	b.n	8001bfa <SetPhases+0x7e>
	if(highPhase > PHASE_C_IDX || lowPhase > PHASE_C_IDX) return;
 8001bf4:	bf00      	nop
 8001bf6:	e000      	b.n	8001bfa <SetPhases+0x7e>
	if(highPhase == lowPhase) return;
 8001bf8:	bf00      	nop

}
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <SetPhase>:

void SetPhase(Motor *motor, uint8_t phase,  bool OnorOff, bool HighOrLow) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	70fb      	strb	r3, [r7, #3]
 8001c12:	460b      	mov	r3, r1
 8001c14:	70bb      	strb	r3, [r7, #2]
 8001c16:	4613      	mov	r3, r2
 8001c18:	707b      	strb	r3, [r7, #1]
	if(OnorOff) {
 8001c1a:	78bb      	ldrb	r3, [r7, #2]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d02c      	beq.n	8001c7a <SetPhase+0x7a>
		if(HighOrLow) {
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d014      	beq.n	8001c50 <SetPhase+0x50>
			HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3218      	adds	r2, #24
 8001c30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f007 ffe5 	bl	8009c04 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(motor->Timer, motor->phaseChannel[phase]);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3218      	adds	r2, #24
 8001c44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f006 f96d 	bl	8007f28 <HAL_TIM_PWM_Start>
		}
	} else {
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
	}
}
 8001c4e:	e028      	b.n	8001ca2 <SetPhase+0xa2>
			HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3218      	adds	r2, #24
 8001c5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f006 fa74 	bl	800814c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(motor->Timer, motor->phaseChannel[phase]);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3218      	adds	r2, #24
 8001c6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c72:	4619      	mov	r1, r3
 8001c74:	f007 ff04 	bl	8009a80 <HAL_TIMEx_PWMN_Start>
}
 8001c78:	e013      	b.n	8001ca2 <SetPhase+0xa2>
		HAL_TIM_PWM_Stop(motor->Timer, motor->phaseChannel[phase]);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3218      	adds	r2, #24
 8001c84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f006 fa5f 	bl	800814c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(motor->Timer, motor->phaseChannel[phase]);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c92:	78fa      	ldrb	r2, [r7, #3]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3218      	adds	r2, #24
 8001c98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f007 ffb1 	bl	8009c04 <HAL_TIMEx_PWMN_Stop>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <ReadHallSensors>:

void ReadHallSensors(Motor *motor) {
 8001caa:	b590      	push	{r4, r7, lr}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8a9b      	ldrh	r3, [r3, #20]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f004 fa63 	bl	8006188 <HAL_GPIO_ReadPin>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall2_Port, motor->Hall2_Pin)) << 1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8b9b      	ldrh	r3, [r3, #28]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f004 fa59 	bl	8006188 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	4323      	orrs	r3, r4
 8001cde:	b25c      	sxtb	r4, r3
					| (HAL_GPIO_ReadPin(motor->Hall3_Port, motor->Hall3_Pin) << 2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f004 fa4c 	bl	8006188 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	b2da      	uxtb	r2, r3
	motor->hallState = (HAL_GPIO_ReadPin(motor->Hall1_Port, motor->Hall1_Pin))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}

08001d0a <CalculateHallTiming>:


void CalculateHallTiming(Motor *motor) {
 8001d0a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	uint32_t currentMicroTime = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]

	if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	7f1b      	ldrb	r3, [r3, #28]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d109      	bne.n	8001d36 <CalculateHallTiming+0x2c>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall1_Channel);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f007 f871 	bl	8008e14 <HAL_TIM_ReadCapturedValue>
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	e01c      	b.n	8001d70 <CalculateHallTiming+0x66>
	} else if(motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	7f1b      	ldrb	r3, [r3, #28]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d109      	bne.n	8001d54 <CalculateHallTiming+0x4a>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall2_Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	885b      	ldrh	r3, [r3, #2]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f007 f862 	bl	8008e14 <HAL_TIM_ReadCapturedValue>
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	e00d      	b.n	8001d70 <CalculateHallTiming+0x66>
	} else if (motor->HallTimer->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	7f1b      	ldrb	r3, [r3, #28]
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d108      	bne.n	8001d70 <CalculateHallTiming+0x66>
		currentMicroTime = HAL_TIM_ReadCapturedValue(motor->HallTimer, motor->Hall3_Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	889b      	ldrh	r3, [r3, #4]
 8001d66:	4619      	mov	r1, r3
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f007 f853 	bl	8008e14 <HAL_TIM_ReadCapturedValue>
 8001d6e:	60f8      	str	r0, [r7, #12]
	}

	motor->pid.totalHallTime += currentMicroTime - motor->pid.lastHallTime;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	1acb      	subs	r3, r1, r3
 8001d7c:	441a      	add	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	675a      	str	r2, [r3, #116]	@ 0x74

	motor->pid.lastHallTime = currentMicroTime;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	671a      	str	r2, [r3, #112]	@ 0x70

	if(motor->direction) motor->pid.hallCount++;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <CalculateHallTiming+0x9e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001d98:	f112 0801 	adds.w	r8, r2, #1
 8001d9c:	f143 0900 	adc.w	r9, r3, #0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	e9c3 8918 	strd	r8, r9, [r3, #96]	@ 0x60
	else motor->pid.hallCount--;
}
 8001da6:	e008      	b.n	8001dba <CalculateHallTiming+0xb0>
	else motor->pid.hallCount--;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001dae:	1e54      	subs	r4, r2, #1
 8001db0:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	e9c3 4518 	strd	r4, r5, [r3, #96]	@ 0x60
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001dc4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	@ 0x30
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2220      	movs	r2, #32
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f009 fdf7 	bl	800b9d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001de2:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001de4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001de8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dea:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001dec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001df0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001df2:	4b2e      	ldr	r3, [pc, #184]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001df8:	4b2c      	ldr	r3, [pc, #176]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e04:	4b29      	ldr	r3, [pc, #164]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e0a:	4b28      	ldr	r3, [pc, #160]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e10:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e16:	4b25      	ldr	r3, [pc, #148]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e22:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e4c:	4817      	ldr	r0, [pc, #92]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e4e:	f001 fee3 	bl	8003c18 <HAL_ADC_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001e58:	f000 fe19 	bl	8002a8e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4811      	ldr	r0, [pc, #68]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e68:	f002 fcf8 	bl	800485c <HAL_ADCEx_MultiModeConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001e72:	f000 fe0c 	bl	8002a8e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <MX_ADC1_Init+0xec>)
 8001e78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e82:	237f      	movs	r3, #127	@ 0x7f
 8001e84:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e86:	2304      	movs	r3, #4
 8001e88:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	@ (8001eac <MX_ADC1_Init+0xe8>)
 8001e94:	f002 f87c 	bl	8003f90 <HAL_ADC_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001e9e:	f000 fdf6 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	3730      	adds	r7, #48	@ 0x30
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000358 	.word	0x20000358
 8001eb0:	10c00010 	.word	0x10c00010

08001eb4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	@ 0x30
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2220      	movs	r2, #32
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f009 fd7f 	bl	800b9d0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001ed2:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001ed4:	4a31      	ldr	r2, [pc, #196]	@ (8001f9c <MX_ADC3_Init+0xe8>)
 8001ed6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001eda:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ede:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001eec:	4b2a      	ldr	r3, [pc, #168]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ef2:	4b29      	ldr	r3, [pc, #164]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ef8:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001efa:	2204      	movs	r2, #4
 8001efc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001efe:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001f0a:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f18:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f3a:	4817      	ldr	r0, [pc, #92]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f3c:	f001 fe6c 	bl	8003c18 <HAL_ADC_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001f46:	f000 fda2 	bl	8002a8e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4810      	ldr	r0, [pc, #64]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f56:	f002 fc81 	bl	800485c <HAL_ADCEx_MultiModeConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001f60:	f000 fd95 	bl	8002a8e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <MX_ADC3_Init+0xec>)
 8001f66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f68:	2306      	movs	r3, #6
 8001f6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f70:	237f      	movs	r3, #127	@ 0x7f
 8001f72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f74:	2304      	movs	r3, #4
 8001f76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_ADC3_Init+0xe4>)
 8001f82:	f002 f805 	bl	8003f90 <HAL_ADC_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001f8c:	f000 fd7f 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	3730      	adds	r7, #48	@ 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200003c4 	.word	0x200003c4
 8001f9c:	50000400 	.word	0x50000400
 8001fa0:	1d500080 	.word	0x1d500080

08001fa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0a2      	sub	sp, #136	@ 0x88
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	2254      	movs	r2, #84	@ 0x54
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f009 fd03 	bl	800b9d0 <memset>
  if(adcHandle->Instance==ADC1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fd2:	d14e      	bne.n	8002072 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001fd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fd8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001fda:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001fde:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe0:	f107 0320 	add.w	r3, r7, #32
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 fef5 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ff0:	f000 fd4d 	bl	8002a8e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff8:	4a49      	ldr	r2, [pc, #292]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 8001ffa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002000:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200c:	4b44      	ldr	r3, [pc, #272]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	4a43      	ldr	r2, [pc, #268]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002018:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002024:	4b3e      	ldr	r3, [pc, #248]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002028:	4a3d      	ldr	r2, [pc, #244]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002030:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BOARD_TEMP_Pin;
 800203c:	2308      	movs	r3, #8
 800203e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002040:	2303      	movs	r3, #3
 8002042:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(BOARD_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002048:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800204c:	4619      	mov	r1, r3
 800204e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002052:	f003 ff17 	bl	8005e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMC_CURRSENSE_Pin;
 8002056:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800205a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205c:	2303      	movs	r3, #3
 800205e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(RMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002068:	4619      	mov	r1, r3
 800206a:	482e      	ldr	r0, [pc, #184]	@ (8002124 <HAL_ADC_MspInit+0x180>)
 800206c:	f003 ff0a 	bl	8005e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002070:	e051      	b.n	8002116 <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2c      	ldr	r2, [pc, #176]	@ (8002128 <HAL_ADC_MspInit+0x184>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d14c      	bne.n	8002116 <HAL_ADC_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800207c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002080:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002082:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002086:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fea1 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 8002098:	f000 fcf9 	bl	8002a8e <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800209c:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 80020a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b8:	4a19      	ldr	r2, [pc, #100]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c0:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d0:	4a13      	ldr	r2, [pc, #76]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_ADC_MspInit+0x17c>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LMC_CURRSENSE_Pin;
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e8:	2303      	movs	r3, #3
 80020ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LMC_CURRSENSE_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80020f4:	4619      	mov	r1, r3
 80020f6:	480d      	ldr	r0, [pc, #52]	@ (800212c <HAL_ADC_MspInit+0x188>)
 80020f8:	f003 fec4 	bl	8005e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBAT_SW_DIAG_Pin;
 80020fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002100:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002102:	2303      	movs	r3, #3
 8002104:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VBAT_SW_DIAG_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800210e:	4619      	mov	r1, r3
 8002110:	4807      	ldr	r0, [pc, #28]	@ (8002130 <HAL_ADC_MspInit+0x18c>)
 8002112:	f003 feb7 	bl	8005e84 <HAL_GPIO_Init>
}
 8002116:	bf00      	nop
 8002118:	3788      	adds	r7, #136	@ 0x88
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	48000400 	.word	0x48000400
 8002128:	50000400 	.word	0x50000400
 800212c:	48001000 	.word	0x48001000
 8002130:	48000c00 	.word	0x48000c00

08002134 <SetResponse>:
#include "stm32g4xx_hal.h" // Replace with your STM32 series HAL header, if needed

static DecodedPacket_t response;
// Function to initialize the Command Handler

static void SetResponse(uint16_t command, uint8_t *data) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	80fb      	strh	r3, [r7, #6]
	response.invalid = false;
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <SetResponse+0x38>)
 8002142:	2200      	movs	r2, #0
 8002144:	72da      	strb	r2, [r3, #11]
	response.command = command;
 8002146:	4a09      	ldr	r2, [pc, #36]	@ (800216c <SetResponse+0x38>)
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	8013      	strh	r3, [r2, #0]
	response.length = sizeof(*data);
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <SetResponse+0x38>)
 800214e:	2201      	movs	r2, #1
 8002150:	729a      	strb	r2, [r3, #10]
	memset(response.data, 0, MAX_DATA_SIZE);
 8002152:	2208      	movs	r2, #8
 8002154:	2100      	movs	r1, #0
 8002156:	4806      	ldr	r0, [pc, #24]	@ (8002170 <SetResponse+0x3c>)
 8002158:	f009 fc3a 	bl	800b9d0 <memset>
	memcpy(response.data, data, sizeof(*data));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	4b02      	ldr	r3, [pc, #8]	@ (800216c <SetResponse+0x38>)
 8002162:	709a      	strb	r2, [r3, #2]
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000430 	.word	0x20000430
 8002170:	20000432 	.word	0x20000432

08002174 <CommandHandler_ProcessCommand>:
    // Initialize any peripherals or variables related to command handling
    // Example: GPIO, Timers, etc.
}

// Function to process a received command
void CommandHandler_ProcessCommand(ComsInterface_t *interface, DriveSystem *drive) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
    // Check for NULL pointer
	DecodedPacket_t command = Comm_GetPacket(interface);
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fc52 	bl	8000a2e <Comm_GetPacket>


    int16_t value = (command.data[0] << 8) | command.data[1];
 800218a:	7abb      	ldrb	r3, [r7, #10]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b21a      	sxth	r2, r3
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	b21b      	sxth	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	82fb      	strh	r3, [r7, #22]


    if (!command.invalid) {
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	f083 0301 	eor.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d031      	beq.n	8002208 <CommandHandler_ProcessCommand+0x94>
    	// Handle the command based on the command ID
		switch (command.command) {
 80021a4:	893b      	ldrh	r3, [r7, #8]
 80021a6:	f240 1203 	movw	r2, #259	@ 0x103
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d027      	beq.n	80021fe <CommandHandler_ProcessCommand+0x8a>
 80021ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021b2:	da28      	bge.n	8002206 <CommandHandler_ProcessCommand+0x92>
 80021b4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80021b8:	d01a      	beq.n	80021f0 <CommandHandler_ProcessCommand+0x7c>
 80021ba:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80021be:	dc22      	bgt.n	8002206 <CommandHandler_ProcessCommand+0x92>
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d004      	beq.n	80021ce <CommandHandler_ProcessCommand+0x5a>
 80021c4:	f240 1201 	movw	r2, #257	@ 0x101
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00a      	beq.n	80021e2 <CommandHandler_ProcessCommand+0x6e>
				}
				break;

			default: // Unknown command
				// Handle invalid or unrecognized commands
				break;
 80021cc:	e01b      	b.n	8002206 <CommandHandler_ProcessCommand+0x92>
					SetResponse(COMMAND_READY, 0xFFFF);
 80021ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7ff ffae 	bl	8002134 <SetResponse>
					Comm_Send(interface, &response);
 80021d8:	490d      	ldr	r1, [pc, #52]	@ (8002210 <CommandHandler_ProcessCommand+0x9c>)
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fbcc 	bl	8000978 <Comm_Send>
				break;
 80021e0:	e012      	b.n	8002208 <CommandHandler_ProcessCommand+0x94>
					DriveSystem_SetLeftSpeed(drive, value);
 80021e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021e6:	4619      	mov	r1, r3
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	f000 f8ef 	bl	80023cc <DriveSystem_SetLeftSpeed>
				break;
 80021ee:	e00b      	b.n	8002208 <CommandHandler_ProcessCommand+0x94>
					DriveSystem_SetRightSpeed(drive, value);
 80021f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021f4:	4619      	mov	r1, r3
 80021f6:	6838      	ldr	r0, [r7, #0]
 80021f8:	f000 f8fd 	bl	80023f6 <DriveSystem_SetRightSpeed>
				break;
 80021fc:	e004      	b.n	8002208 <CommandHandler_ProcessCommand+0x94>
					DriveSystem_Stop(drive);
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f000 f910 	bl	8002424 <DriveSystem_Stop>
				break;
 8002204:	e000      	b.n	8002208 <CommandHandler_ProcessCommand+0x94>
				break;
 8002206:	bf00      	nop
		}
    }
}
 8002208:	bf00      	nop
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000430 	.word	0x20000430

08002214 <MX_DAC2_Init>:

DAC_HandleTypeDef hdac2;

/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800221a:	463b      	mov	r3, r7
 800221c:	2230      	movs	r2, #48	@ 0x30
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f009 fbd5 	bl	800b9d0 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <MX_DAC2_Init+0x6c>)
 8002228:	4a16      	ldr	r2, [pc, #88]	@ (8002284 <MX_DAC2_Init+0x70>)
 800222a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800222c:	4814      	ldr	r0, [pc, #80]	@ (8002280 <MX_DAC2_Init+0x6c>)
 800222e:	f002 fd2c 	bl	8004c8a <HAL_DAC_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8002238:	f000 fc29 	bl	8002a8e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800223c:	2302      	movs	r3, #2
 800223e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002258:	2301      	movs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002260:	463b      	mov	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	4619      	mov	r1, r3
 8002266:	4806      	ldr	r0, [pc, #24]	@ (8002280 <MX_DAC2_Init+0x6c>)
 8002268:	f002 fdcc 	bl	8004e04 <HAL_DAC_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8002272:	f000 fc0c 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	3730      	adds	r7, #48	@ 0x30
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000043c 	.word	0x2000043c
 8002284:	50000c00 	.word	0x50000c00

08002288 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a15      	ldr	r2, [pc, #84]	@ (80022fc <HAL_DAC_MspInit+0x74>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d124      	bne.n	80022f4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* DAC2 clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <HAL_DAC_MspInit+0x78>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <HAL_DAC_MspInit+0x78>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_DAC_MspInit+0x78>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <HAL_DAC_MspInit+0x78>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002300 <HAL_DAC_MspInit+0x78>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <HAL_DAC_MspInit+0x78>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = WHEEL_MOTOR_CURRENT_LIMIT_Pin;
 80022da:	2340      	movs	r3, #64	@ 0x40
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022de:	2303      	movs	r3, #3
 80022e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WHEEL_MOTOR_CURRENT_LIMIT_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f0:	f003 fdc8 	bl	8005e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	@ 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	50000c00 	.word	0x50000c00
 8002300:	40021000 	.word	0x40021000

08002304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <MX_DMA_Init+0x50>)
 800230c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230e:	4a11      	ldr	r2, [pc, #68]	@ (8002354 <MX_DMA_Init+0x50>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6493      	str	r3, [r2, #72]	@ 0x48
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <MX_DMA_Init+0x50>)
 8002318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <MX_DMA_Init+0x50>)
 8002324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002326:	4a0b      	ldr	r2, [pc, #44]	@ (8002354 <MX_DMA_Init+0x50>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6493      	str	r3, [r2, #72]	@ 0x48
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <MX_DMA_Init+0x50>)
 8002330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	200b      	movs	r0, #11
 8002340:	f002 fc6f 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002344:	200b      	movs	r0, #11
 8002346:	f002 fc86 	bl	8004c56 <HAL_NVIC_EnableIRQ>

}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <DriveSystem_Init>:
 */

#include "drive_system.h"

// Initialize the drive system with configurations for the left and right motors
void DriveSystem_Init(DriveSystem *driveSystem, Motor leftMotorConfig, Motor rightMotorConfig) {
 8002358:	b082      	sub	sp, #8
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	f107 0110 	add.w	r1, r7, #16
 8002366:	e881 000c 	stmia.w	r1, {r2, r3}
    // Copy configurations into the drive system
    driveSystem->leftWheel = leftMotorConfig;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	22c0      	movs	r2, #192	@ 0xc0
 8002374:	4619      	mov	r1, r3
 8002376:	f009 fb57 	bl	800ba28 <memcpy>
    driveSystem->rightWheel = rightMotorConfig;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	33c0      	adds	r3, #192	@ 0xc0
 800237e:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8002382:	22c0      	movs	r2, #192	@ 0xc0
 8002384:	4618      	mov	r0, r3
 8002386:	f009 fb4f 	bl	800ba28 <memcpy>

    HAL_DAC_Start(driveSystem->currentLimitDAC, driveSystem->currentLimitDACChannel);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f002 fc99 	bl	8004cd0 <HAL_DAC_Start>

    DriveSystem_SetCurrentLimit(driveSystem, MAX_CURRENT_LIMIT);
 800239e:	210a      	movs	r1, #10
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f8a9 	bl	80024f8 <DriveSystem_SetCurrentLimit>

    // Initialize the left and right motors
    Motor_Init(&driveSystem->leftWheel);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fd64 	bl	8000e76 <Motor_Init>
    Motor_Init(&driveSystem->rightWheel);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	33c0      	adds	r3, #192	@ 0xc0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fd5f 	bl	8000e76 <Motor_Init>

    DriveSystem_Enable(driveSystem);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f872 	bl	80024a2 <DriveSystem_Enable>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023c8:	b002      	add	sp, #8
 80023ca:	4770      	bx	lr

080023cc <DriveSystem_SetLeftSpeed>:
void DriveSystem_SetSpeed(DriveSystem *driveSystem, int16_t leftSpeed, int16_t rightSpeed) {
    Motor_SetSpeed(&driveSystem->leftWheel, leftSpeed);
    Motor_SetSpeed(&driveSystem->rightWheel, rightSpeed);
}

void DriveSystem_SetLeftSpeed(DriveSystem *driveSystem, int16_t leftSpeed) {
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
	Motor_SetSpeed(&driveSystem->leftWheel, leftSpeed);
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023de:	17da      	asrs	r2, r3, #31
 80023e0:	461c      	mov	r4, r3
 80023e2:	4615      	mov	r5, r2
 80023e4:	4622      	mov	r2, r4
 80023e6:	462b      	mov	r3, r5
 80023e8:	4608      	mov	r0, r1
 80023ea:	f7fe fdb5 	bl	8000f58 <Motor_SetSpeed>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}

080023f6 <DriveSystem_SetRightSpeed>:

void DriveSystem_SetRightSpeed(DriveSystem *driveSystem, int16_t rightSpeed) {
 80023f6:	b5b0      	push	{r4, r5, r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	807b      	strh	r3, [r7, #2]
	Motor_SetSpeed(&driveSystem->rightWheel, rightSpeed);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8002408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800240c:	17da      	asrs	r2, r3, #31
 800240e:	461c      	mov	r4, r3
 8002410:	4615      	mov	r5, r2
 8002412:	4622      	mov	r2, r4
 8002414:	462b      	mov	r3, r5
 8002416:	4608      	mov	r0, r1
 8002418:	f7fe fd9e 	bl	8000f58 <Motor_SetSpeed>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bdb0      	pop	{r4, r5, r7, pc}

08002424 <DriveSystem_Stop>:

// Stop both motors in the drive system
void DriveSystem_Stop(DriveSystem *driveSystem) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
    Motor_Stop(&driveSystem->leftWheel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fef9 	bl	8001226 <Motor_Stop>
    Motor_Stop(&driveSystem->rightWheel);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	33c0      	adds	r3, #192	@ 0xc0
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fef4 	bl	8001226 <Motor_Stop>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <DriveSystem_Calculate>:

void DriveSystem_Calculate(DriveSystem *driveSystem) {
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
	Motor_Calculate(&driveSystem->leftWheel);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe ff09 	bl	8001268 <Motor_Calculate>
	Motor_Calculate(&driveSystem->rightWheel);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	33c0      	adds	r3, #192	@ 0xc0
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe ff04 	bl	8001268 <Motor_Calculate>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <DriveSystem_InterruptHandler>:

void DriveSystem_InterruptHandler(DriveSystem *driveSystem, TIM_HandleTypeDef *htim) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	if (htim == driveSystem->leftWheel.HallTimer) {
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d103      	bne.n	8002484 <DriveSystem_InterruptHandler+0x1c>
		Motor_Update(&driveSystem->leftWheel);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff faf8 	bl	8001a74 <Motor_Update>
	}

	if (htim == driveSystem->rightWheel.HallTimer) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d104      	bne.n	800249a <DriveSystem_InterruptHandler+0x32>
		Motor_Update(&driveSystem->rightWheel);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	33c0      	adds	r3, #192	@ 0xc0
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff faed 	bl	8001a74 <Motor_Update>
	}
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <DriveSystem_Enable>:

void DriveSystem_Enable (DriveSystem *driveSystem) {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
	DriveSystem_SetEnablePin(driveSystem, true);
 80024aa:	2101      	movs	r1, #1
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f804 	bl	80024ba <DriveSystem_SetEnablePin>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <DriveSystem_SetEnablePin>:

void DriveSystem_Disable (DriveSystem *driveSystem) {
	DriveSystem_SetEnablePin(driveSystem, false);
}

void DriveSystem_SetEnablePin(DriveSystem *driveSystem, bool onOrOff) {
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	70fb      	strb	r3, [r7, #3]
	bool setValue = true;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
	if(onOrOff) setValue = true;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <DriveSystem_SetEnablePin+0x1c>
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e001      	b.n	80024da <DriveSystem_SetEnablePin+0x20>
	else setValue = false;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(driveSystem->Enable_Port, driveSystem->Enable_Pin, setValue);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f003 fe65 	bl	80061b8 <HAL_GPIO_WritePin>
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <DriveSystem_SetCurrentLimit>:

void DriveSystem_SetCurrentLimit(DriveSystem *driveSystem, uint16_t currentLimit) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
	if(currentLimit > MAX_CURRENT_LIMIT) {
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	2b0a      	cmp	r3, #10
 8002508:	d901      	bls.n	800250e <DriveSystem_SetCurrentLimit+0x16>
		currentLimit = MAX_CURRENT_LIMIT;
 800250a:	230a      	movs	r3, #10
 800250c:	807b      	strh	r3, [r7, #2]
	}
	driveSystem->currentLimit = currentLimit;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	887a      	ldrh	r2, [r7, #2]
 8002512:	f8a3 218e 	strh.w	r2, [r3, #398]	@ 0x18e

	uint32_t voltage = currentLimit * SHUNT_RESISTOR * RESISTORS / RESISTOR2;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	f245 32fc 	movw	r2, #21500	@ 0x53fc
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <DriveSystem_SetCurrentLimit+0x70>)
 8002522:	fb82 1203 	smull	r1, r2, r2, r3
 8002526:	10d2      	asrs	r2, r2, #3
 8002528:	17db      	asrs	r3, r3, #31
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	60fb      	str	r3, [r7, #12]
	uint32_t dac_value = 4095 * voltage / 3300; // Convert voltage to digital value
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4613      	mov	r3, r2
 8002532:	031b      	lsls	r3, r3, #12
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	4a0c      	ldr	r2, [pc, #48]	@ (800256c <DriveSystem_SetCurrentLimit+0x74>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(driveSystem->currentLimitDAC, driveSystem->currentLimitDACChannel, DAC_ALIGN_12B_R, dac_value);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 0188 	ldr.w	r0, [r3, #392]	@ 0x188
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 800254e:	4619      	mov	r1, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2200      	movs	r2, #0
 8002554:	f002 fc28 	bl	8004da8 <HAL_DAC_SetValue>
	HAL_Delay(25);
 8002558:	2019      	movs	r0, #25
 800255a:	f001 f965 	bl	8003828 <HAL_Delay>
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	1b4e81b5 	.word	0x1b4e81b5
 800256c:	09ee009f 	.word	0x09ee009f

08002570 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 8002576:	4a20      	ldr	r2, [pc, #128]	@ (80025f8 <MX_FDCAN1_Init+0x88>)
 8002578:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800257a:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002580:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002586:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800258c:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 800258e:	2200      	movs	r2, #0
 8002590:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002592:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 8002594:	2200      	movs	r2, #0
 8002596:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002598:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 800259a:	2200      	movs	r2, #0
 800259c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80025a4:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025ac:	2208      	movs	r2, #8
 80025ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80025b0:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025b2:	2208      	movs	r2, #8
 80025b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80025b6:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80025bc:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025be:	2201      	movs	r2, #1
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80025d4:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025dc:	2200      	movs	r2, #0
 80025de:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80025e0:	4804      	ldr	r0, [pc, #16]	@ (80025f4 <MX_FDCAN1_Init+0x84>)
 80025e2:	f003 f8fb 	bl	80057dc <HAL_FDCAN_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80025ec:	f000 fa4f 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000450 	.word	0x20000450
 80025f8:	40006400 	.word	0x40006400

080025fc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b09e      	sub	sp, #120	@ 0x78
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	2254      	movs	r2, #84	@ 0x54
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f009 f9d7 	bl	800b9d0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a23      	ldr	r2, [pc, #140]	@ (80026b4 <HAL_FDCAN_MspInit+0xb8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d13f      	bne.n	80026ac <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800262c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002630:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002632:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002636:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	4618      	mov	r0, r3
 800263e:	f004 fbc9 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002648:	f000 fa21 	bl	8002a8e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800264c:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_FDCAN_MspInit+0xbc>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	4a19      	ldr	r2, [pc, #100]	@ (80026b8 <HAL_FDCAN_MspInit+0xbc>)
 8002652:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002656:	6593      	str	r3, [r2, #88]	@ 0x58
 8002658:	4b17      	ldr	r3, [pc, #92]	@ (80026b8 <HAL_FDCAN_MspInit+0xbc>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002664:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_FDCAN_MspInit+0xbc>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002668:	4a13      	ldr	r2, [pc, #76]	@ (80026b8 <HAL_FDCAN_MspInit+0xbc>)
 800266a:	f043 0308 	orr.w	r3, r3, #8
 800266e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HAL_FDCAN_MspInit+0xbc>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800267c:	2303      	movs	r3, #3
 800267e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800268c:	2309      	movs	r3, #9
 800268e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002690:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002694:	4619      	mov	r1, r3
 8002696:	4809      	ldr	r0, [pc, #36]	@ (80026bc <HAL_FDCAN_MspInit+0xc0>)
 8002698:	f003 fbf4 	bl	8005e84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2015      	movs	r0, #21
 80026a2:	f002 fabe 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80026a6:	2015      	movs	r0, #21
 80026a8:	f002 fad5 	bl	8004c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80026ac:	bf00      	nop
 80026ae:	3778      	adds	r7, #120	@ 0x78
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40006400 	.word	0x40006400
 80026b8:	40021000 	.word	0x40021000
 80026bc:	48000c00 	.word	0x48000c00

080026c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	@ 0x30
 80026c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d6:	4b7a      	ldr	r3, [pc, #488]	@ (80028c0 <MX_GPIO_Init+0x200>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	4a79      	ldr	r2, [pc, #484]	@ (80028c0 <MX_GPIO_Init+0x200>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e2:	4b77      	ldr	r3, [pc, #476]	@ (80028c0 <MX_GPIO_Init+0x200>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ee:	4b74      	ldr	r3, [pc, #464]	@ (80028c0 <MX_GPIO_Init+0x200>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f2:	4a73      	ldr	r2, [pc, #460]	@ (80028c0 <MX_GPIO_Init+0x200>)
 80026f4:	f043 0320 	orr.w	r3, r3, #32
 80026f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026fa:	4b71      	ldr	r3, [pc, #452]	@ (80028c0 <MX_GPIO_Init+0x200>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	4b6e      	ldr	r3, [pc, #440]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	4a6d      	ldr	r2, [pc, #436]	@ (80028c0 <MX_GPIO_Init+0x200>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002712:	4b6b      	ldr	r3, [pc, #428]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	4b68      	ldr	r3, [pc, #416]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	4a67      	ldr	r2, [pc, #412]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272a:	4b65      	ldr	r3, [pc, #404]	@ (80028c0 <MX_GPIO_Init+0x200>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002736:	4b62      	ldr	r3, [pc, #392]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	4a61      	ldr	r2, [pc, #388]	@ (80028c0 <MX_GPIO_Init+0x200>)
 800273c:	f043 0310 	orr.w	r3, r3, #16
 8002740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002742:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800274e:	4b5c      	ldr	r3, [pc, #368]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002752:	4a5b      	ldr	r2, [pc, #364]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002754:	f043 0308 	orr.w	r3, r3, #8
 8002758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800275a:	4b59      	ldr	r3, [pc, #356]	@ (80028c0 <MX_GPIO_Init+0x200>)
 800275c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002766:	4b56      	ldr	r3, [pc, #344]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	4a55      	ldr	r2, [pc, #340]	@ (80028c0 <MX_GPIO_Init+0x200>)
 800276c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002772:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <MX_GPIO_Init+0x200>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nAUX2_EN_Pin|LED_A_INT_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8002784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002788:	f003 fd16 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, nDEBUG_LED2_Pin|nDEBUG_LED1_Pin, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8002792:	484c      	ldr	r0, [pc, #304]	@ (80028c4 <MX_GPIO_Init+0x204>)
 8002794:	f003 fd10 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX2_OUTPUT_GPIO_Port, AUX2_OUTPUT_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800279e:	484a      	ldr	r0, [pc, #296]	@ (80028c8 <MX_GPIO_Init+0x208>)
 80027a0:	f003 fd0a 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCM_GYRO_SPI_GPIO_Port, nCS_MCM_GYRO_SPI_Pin, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	2102      	movs	r1, #2
 80027a8:	4848      	ldr	r0, [pc, #288]	@ (80028cc <MX_GPIO_Init+0x20c>)
 80027aa:	f003 fd05 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCM_KILL_Pin|nCAN_STBY_Pin, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80027b4:	4845      	ldr	r0, [pc, #276]	@ (80028cc <MX_GPIO_Init+0x20c>)
 80027b6:	f003 fcff 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nWHEEL_MOTOR_SHDN_GPIO_Port, nWHEEL_MOTOR_SHDN_Pin, GPIO_PIN_SET);
 80027ba:	2201      	movs	r2, #1
 80027bc:	2102      	movs	r1, #2
 80027be:	4844      	ldr	r0, [pc, #272]	@ (80028d0 <MX_GPIO_Init+0x210>)
 80027c0:	f003 fcfa 	bl	80061b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nAUX2_EN_Pin|LED_A_INT_Pin;
 80027c4:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80027c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 031c 	add.w	r3, r7, #28
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e0:	f003 fb50 	bl	8005e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = nDEBUG_LED2_Pin|nDEBUG_LED1_Pin;
 80027e4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80027e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	4619      	mov	r1, r3
 80027fc:	4831      	ldr	r0, [pc, #196]	@ (80028c4 <MX_GPIO_Init+0x204>)
 80027fe:	f003 fb41 	bl	8005e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRMC_CURRFAULT_Pin;
 8002802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nRMC_CURRFAULT_GPIO_Port, &GPIO_InitStruct);
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	4619      	mov	r1, r3
 8002816:	482f      	ldr	r0, [pc, #188]	@ (80028d4 <MX_GPIO_Init+0x214>)
 8002818:	f003 fb34 	bl	8005e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = V_3V3_DIAG_Pin|V_5V_DIAG_Pin|nLMC_CURRFAULT_Pin;
 800281c:	f44f 7341 	mov.w	r3, #772	@ 0x304
 8002820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	4825      	ldr	r0, [pc, #148]	@ (80028c8 <MX_GPIO_Init+0x208>)
 8002832:	f003 fb27 	bl	8005e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUX2_OUTPUT_Pin;
 8002836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800283a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUX2_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	4619      	mov	r1, r3
 800284e:	481e      	ldr	r0, [pc, #120]	@ (80028c8 <MX_GPIO_Init+0x208>)
 8002850:	f003 fb18 	bl	8005e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8002854:	2301      	movs	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002858:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800285c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4818      	ldr	r0, [pc, #96]	@ (80028cc <MX_GPIO_Init+0x20c>)
 800286a:	f003 fb0b 	bl	8005e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_MCM_GYRO_SPI_Pin|MCM_KILL_Pin|nCAN_STBY_Pin;
 800286e:	f240 2382 	movw	r3, #642	@ 0x282
 8002872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002874:	2301      	movs	r3, #1
 8002876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	4619      	mov	r1, r3
 8002886:	4811      	ldr	r0, [pc, #68]	@ (80028cc <MX_GPIO_Init+0x20c>)
 8002888:	f003 fafc 	bl	8005e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nWHEEL_MOTOR_SHDN_Pin;
 800288c:	2302      	movs	r3, #2
 800288e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002890:	2301      	movs	r3, #1
 8002892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nWHEEL_MOTOR_SHDN_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	480b      	ldr	r0, [pc, #44]	@ (80028d0 <MX_GPIO_Init+0x210>)
 80028a4:	f003 faee 	bl	8005e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2101      	movs	r1, #1
 80028ac:	2006      	movs	r0, #6
 80028ae:	f002 f9b8 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80028b2:	2006      	movs	r0, #6
 80028b4:	f002 f9cf 	bl	8004c56 <HAL_NVIC_EnableIRQ>

}
 80028b8:	bf00      	nop
 80028ba:	3730      	adds	r7, #48	@ 0x30
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	48001400 	.word	0x48001400
 80028c8:	48000c00 	.word	0x48000c00
 80028cc:	48001800 	.word	0x48001800
 80028d0:	48001000 	.word	0x48001000
 80028d4:	48000400 	.word	0x48000400

080028d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b0df      	sub	sp, #380	@ 0x17c
 80028dc:	af5e      	add	r7, sp, #376	@ 0x178
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028de:	f000 ff32 	bl	8003746 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e2:	f000 f84d 	bl	8002980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e6:	f7ff feeb 	bl	80026c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80028ea:	f7ff fd0b 	bl	8002304 <MX_DMA_Init>
  MX_ADC3_Init();
 80028ee:	f7ff fae1 	bl	8001eb4 <MX_ADC3_Init>
  MX_DAC2_Init();
 80028f2:	f7ff fc8f 	bl	8002214 <MX_DAC2_Init>
  MX_USART2_UART_Init();
 80028f6:	f000 fe21 	bl	800353c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80028fa:	f000 f8cf 	bl	8002a9c <MX_SPI1_Init>
  MX_ADC1_Init();
 80028fe:	f7ff fa61 	bl	8001dc4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002902:	f000 f9eb 	bl	8002cdc <MX_TIM1_Init>
  MX_TIM8_Init();
 8002906:	f000 fbbf 	bl	8003088 <MX_TIM8_Init>
  MX_TIM2_Init();
 800290a:	f000 faaf 	bl	8002e6c <MX_TIM2_Init>
  MX_TIM5_Init();
 800290e:	f000 fb33 	bl	8002f78 <MX_TIM5_Init>
  MX_FDCAN1_Init();
 8002912:	f7ff fe2d 	bl	8002570 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  IMU_Init(&imu);
 8002916:	4814      	ldr	r0, [pc, #80]	@ (8002968 <main+0x90>)
 8002918:	f7fe f9a6 	bl	8000c68 <IMU_Init>
  DriveSystem_Init(&drive, leftWheel, rightWheel);
 800291c:	4c13      	ldr	r4, [pc, #76]	@ (800296c <main+0x94>)
 800291e:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <main+0x98>)
 8002920:	ab2e      	add	r3, sp, #184	@ 0xb8
 8002922:	4611      	mov	r1, r2
 8002924:	22c0      	movs	r2, #192	@ 0xc0
 8002926:	4618      	mov	r0, r3
 8002928:	f009 f87e 	bl	800ba28 <memcpy>
 800292c:	4668      	mov	r0, sp
 800292e:	f104 0308 	add.w	r3, r4, #8
 8002932:	22b8      	movs	r2, #184	@ 0xb8
 8002934:	4619      	mov	r1, r3
 8002936:	f009 f877 	bl	800ba28 <memcpy>
 800293a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800293e:	480d      	ldr	r0, [pc, #52]	@ (8002974 <main+0x9c>)
 8002940:	f7ff fd0a 	bl	8002358 <DriveSystem_Init>
  Comm_Init(&serial, COMM_UART, &huart2);
 8002944:	4a0c      	ldr	r2, [pc, #48]	@ (8002978 <main+0xa0>)
 8002946:	2100      	movs	r1, #0
 8002948:	480c      	ldr	r0, [pc, #48]	@ (800297c <main+0xa4>)
 800294a:	f7fd ffbd 	bl	80008c8 <Comm_Init>


  while (1)
  {

	  Comm_Process(&serial);
 800294e:	480b      	ldr	r0, [pc, #44]	@ (800297c <main+0xa4>)
 8002950:	f7fe f83e 	bl	80009d0 <Comm_Process>
	  DriveSystem_Calculate(&drive);
 8002954:	4807      	ldr	r0, [pc, #28]	@ (8002974 <main+0x9c>)
 8002956:	f7ff fd76 	bl	8002446 <DriveSystem_Calculate>

	  CommandHandler_ProcessCommand(&serial, &drive);
 800295a:	4906      	ldr	r1, [pc, #24]	@ (8002974 <main+0x9c>)
 800295c:	4807      	ldr	r0, [pc, #28]	@ (800297c <main+0xa4>)
 800295e:	f7ff fc09 	bl	8002174 <CommandHandler_ProcessCommand>
	  Comm_Process(&serial);
 8002962:	bf00      	nop
 8002964:	e7f3      	b.n	800294e <main+0x76>
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000
 800296c:	200001b0 	.word	0x200001b0
 8002970:	20000270 	.word	0x20000270
 8002974:	20000020 	.word	0x20000020
 8002978:	20000730 	.word	0x20000730
 800297c:	200004b4 	.word	0x200004b4

08002980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b094      	sub	sp, #80	@ 0x50
 8002984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002986:	f107 0318 	add.w	r3, r7, #24
 800298a:	2238      	movs	r2, #56	@ 0x38
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f009 f81e 	bl	800b9d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f003 fc38 	bl	8006218 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b2:	2340      	movs	r3, #64	@ 0x40
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b6:	2302      	movs	r3, #2
 80029b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029ba:	2302      	movs	r3, #2
 80029bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80029be:	2304      	movs	r3, #4
 80029c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80029c2:	2355      	movs	r3, #85	@ 0x55
 80029c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029c6:	2302      	movs	r3, #2
 80029c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029ca:	2302      	movs	r3, #2
 80029cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029ce:	2302      	movs	r3, #2
 80029d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d2:	f107 0318 	add.w	r3, r7, #24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fcd2 	bl	8006380 <HAL_RCC_OscConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029e2:	f000 f854 	bl	8002a8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e6:	230f      	movs	r3, #15
 80029e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ea:	2303      	movs	r3, #3
 80029ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	2104      	movs	r1, #4
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 ffd0 	bl	80069a4 <HAL_RCC_ClockConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002a0a:	f000 f840 	bl	8002a8e <Error_Handler>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3750      	adds	r7, #80	@ 0x50
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	DriveSystem_InterruptHandler(&drive, htim);
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4803      	ldr	r0, [pc, #12]	@ (8002a30 <HAL_TIM_IC_CaptureCallback+0x18>)
 8002a24:	f7ff fd20 	bl	8002468 <DriveSystem_InterruptHandler>
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000020 	.word	0x20000020

08002a34 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
	IMU_InterruptHandler(&imu, GPIO_Pin);
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	4619      	mov	r1, r3
 8002a42:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002a44:	f7fe fa04 	bl	8000e50 <IMU_InterruptHandler>

}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
	Comm_Receive(&serial, 0, size);
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	461a      	mov	r2, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	4803      	ldr	r0, [pc, #12]	@ (8002a74 <HAL_UARTEx_RxEventCallback+0x20>)
 8002a68:	f7fd ff9f 	bl	80009aa <Comm_Receive>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	200004b4 	.word	0x200004b4

08002a78 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
//    {
//      /* Notification Error */
//      Error_Handler();
//    }
//  }
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a92:	b672      	cpsid	i
}
 8002a94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a96:	bf00      	nop
 8002a98:	e7fd      	b.n	8002a96 <Error_Handler+0x8>
	...

08002a9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <MX_SPI1_Init+0x78>)
 8002aa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aae:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002ab6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002aba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ace:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002ad2:	2218      	movs	r2, #24
 8002ad4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002aea:	2207      	movs	r2, #7
 8002aec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aee:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002af6:	2208      	movs	r2, #8
 8002af8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002afa:	4805      	ldr	r0, [pc, #20]	@ (8002b10 <MX_SPI1_Init+0x74>)
 8002afc:	f004 fbb8 	bl	8007270 <HAL_SPI_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b06:	f7ff ffc2 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000059c 	.word	0x2000059c
 8002b14:	40013000 	.word	0x40013000

08002b18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	@ 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <HAL_SPI_MspInit+0x7c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d127      	bne.n	8002b8a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b3a:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <HAL_SPI_MspInit+0x80>)
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3e:	4a16      	ldr	r2, [pc, #88]	@ (8002b98 <HAL_SPI_MspInit+0x80>)
 8002b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b46:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <HAL_SPI_MspInit+0x80>)
 8002b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b52:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_SPI_MspInit+0x80>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b56:	4a10      	ldr	r2, [pc, #64]	@ (8002b98 <HAL_SPI_MspInit+0x80>)
 8002b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <HAL_SPI_MspInit+0x80>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002b6a:	231c      	movs	r3, #28
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	@ (8002b9c <HAL_SPI_MspInit+0x84>)
 8002b86:	f003 f97d 	bl	8005e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	@ 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40013000 	.word	0x40013000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	48001800 	.word	0x48001800

08002ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <HAL_MspInit+0x44>)
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002baa:	4a0e      	ldr	r2, [pc, #56]	@ (8002be4 <HAL_MspInit+0x44>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <HAL_MspInit+0x44>)
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_MspInit+0x44>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <HAL_MspInit+0x44>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_MspInit+0x44>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002bd6:	f003 fbc3 	bl	8006360 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000

08002be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <NMI_Handler+0x4>

08002bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <MemManage_Handler+0x4>

08002c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <BusFault_Handler+0x4>

08002c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <UsageFault_Handler+0x4>

08002c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c3e:	f000 fdd5 	bl	80037ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f003 facc 	bl	80061e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c58:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <DMA1_Channel1_IRQHandler+0x10>)
 8002c5a:	f002 fc70 	bl	800553e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200007c4 	.word	0x200007c4

08002c68 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c6c:	4802      	ldr	r0, [pc, #8]	@ (8002c78 <FDCAN1_IT0_IRQHandler+0x10>)
 8002c6e:	f002 ff0f 	bl	8005a90 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000450 	.word	0x20000450

08002c7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <TIM2_IRQHandler+0x10>)
 8002c82:	f005 fcb1 	bl	80085e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000064c 	.word	0x2000064c

08002c90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c94:	4802      	ldr	r0, [pc, #8]	@ (8002ca0 <USART2_IRQHandler+0x10>)
 8002c96:	f007 fa87 	bl	800a1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000730 	.word	0x20000730

08002ca4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ca8:	4802      	ldr	r0, [pc, #8]	@ (8002cb4 <TIM5_IRQHandler+0x10>)
 8002caa:	f005 fc9d 	bl	80085e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000698 	.word	0x20000698

08002cb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <SystemInit+0x20>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	4a05      	ldr	r2, [pc, #20]	@ (8002cd8 <SystemInit+0x20>)
 8002cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b09c      	sub	sp, #112	@ 0x70
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	2234      	movs	r2, #52	@ 0x34
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f008 fe5a 	bl	800b9d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d1c:	4b51      	ldr	r3, [pc, #324]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d1e:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <MX_TIM1_Init+0x18c>)
 8002d20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8002d22:	4b50      	ldr	r3, [pc, #320]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d24:	2210      	movs	r2, #16
 8002d26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d28:	4b4e      	ldr	r3, [pc, #312]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8002d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d30:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002d34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d36:	4b4b      	ldr	r3, [pc, #300]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d3c:	4b49      	ldr	r3, [pc, #292]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d42:	4b48      	ldr	r3, [pc, #288]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d48:	4846      	ldr	r0, [pc, #280]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d4a:	f005 f835 	bl	8007db8 <HAL_TIM_Base_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002d54:	f7ff fe9b 	bl	8002a8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d62:	4619      	mov	r1, r3
 8002d64:	483f      	ldr	r0, [pc, #252]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d66:	f005 ff3f 	bl	8008be8 <HAL_TIM_ConfigClockSource>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d70:	f7ff fe8d 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d74:	483b      	ldr	r0, [pc, #236]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d76:	f005 f876 	bl	8007e66 <HAL_TIM_PWM_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d80:	f7ff fe85 	bl	8002a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d94:	4619      	mov	r1, r3
 8002d96:	4833      	ldr	r0, [pc, #204]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002d98:	f006 ff92 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002da2:	f7ff fe74 	bl	8002a8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da6:	2360      	movs	r3, #96	@ 0x60
 8002da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dae:	2300      	movs	r3, #0
 8002db0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4826      	ldr	r0, [pc, #152]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002dcc:	f005 fdf8 	bl	80089c0 <HAL_TIM_PWM_ConfigChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002dd6:	f7ff fe5a 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002dde:	2204      	movs	r2, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4820      	ldr	r0, [pc, #128]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002de4:	f005 fdec 	bl	80089c0 <HAL_TIM_PWM_ConfigChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002dee:	f7ff fe4e 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002df2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002df6:	2208      	movs	r2, #8
 8002df8:	4619      	mov	r1, r3
 8002dfa:	481a      	ldr	r0, [pc, #104]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002dfc:	f005 fde0 	bl	80089c0 <HAL_TIM_PWM_ConfigChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002e06:	f7ff fe42 	bl	8002a8e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4807      	ldr	r0, [pc, #28]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002e48:	f006 ffd0 	bl	8009dec <HAL_TIMEx_ConfigBreakDeadTime>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8002e52:	f7ff fe1c 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e56:	4803      	ldr	r0, [pc, #12]	@ (8002e64 <MX_TIM1_Init+0x188>)
 8002e58:	f000 fa8a 	bl	8003370 <HAL_TIM_MspPostInit>

}
 8002e5c:	bf00      	nop
 8002e5e:	3770      	adds	r7, #112	@ 0x70
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000600 	.word	0x20000600
 8002e68:	40012c00 	.word	0x40012c00

08002e6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	@ 0x30
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e72:	f107 0320 	add.w	r3, r7, #32
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e98:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002e9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8002ea0:	4b34      	ldr	r3, [pc, #208]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002ea2:	22a9      	movs	r2, #169	@ 0xa9
 8002ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea6:	4b33      	ldr	r3, [pc, #204]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002eac:	4b31      	ldr	r3, [pc, #196]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002eae:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eba:	4b2e      	ldr	r3, [pc, #184]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ec0:	482c      	ldr	r0, [pc, #176]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002ec2:	f004 ff79 	bl	8007db8 <HAL_TIM_Base_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002ecc:	f7ff fddf 	bl	8002a8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ed4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ed6:	f107 0320 	add.w	r3, r7, #32
 8002eda:	4619      	mov	r1, r3
 8002edc:	4825      	ldr	r0, [pc, #148]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002ede:	f005 fe83 	bl	8008be8 <HAL_TIM_ConfigClockSource>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002ee8:	f7ff fdd1 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002eec:	4821      	ldr	r0, [pc, #132]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002eee:	f005 f9c9 	bl	8008284 <HAL_TIM_IC_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002ef8:	f7ff fdc9 	bl	8002a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	4619      	mov	r1, r3
 8002f0a:	481a      	ldr	r0, [pc, #104]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002f0c:	f006 fed8 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8002f16:	f7ff fdba 	bl	8002a8e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4810      	ldr	r0, [pc, #64]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002f32:	f005 fca8 	bl	8008886 <HAL_TIM_IC_ConfigChannel>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002f3c:	f7ff fda7 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2204      	movs	r2, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	480b      	ldr	r0, [pc, #44]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002f48:	f005 fc9d 	bl	8008886 <HAL_TIM_IC_ConfigChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8002f52:	f7ff fd9c 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	2208      	movs	r2, #8
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4805      	ldr	r0, [pc, #20]	@ (8002f74 <MX_TIM2_Init+0x108>)
 8002f5e:	f005 fc92 	bl	8008886 <HAL_TIM_IC_ConfigChannel>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8002f68:	f7ff fd91 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f6c:	bf00      	nop
 8002f6e:	3730      	adds	r7, #48	@ 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	2000064c 	.word	0x2000064c

08002f78 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08c      	sub	sp, #48	@ 0x30
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f7e:	f107 0320 	add.w	r3, r7, #32
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fa4:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002fa6:	4a37      	ldr	r2, [pc, #220]	@ (8003084 <MX_TIM5_Init+0x10c>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002fac:	22a9      	movs	r2, #169	@ 0xa9
 8002fae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	4b33      	ldr	r3, [pc, #204]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002fb6:	4b32      	ldr	r3, [pc, #200]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbe:	4b30      	ldr	r3, [pc, #192]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002fca:	482d      	ldr	r0, [pc, #180]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002fcc:	f004 fef4 	bl	8007db8 <HAL_TIM_Base_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8002fd6:	f7ff fd5a 	bl	8002a8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fde:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002fe0:	f107 0320 	add.w	r3, r7, #32
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4826      	ldr	r0, [pc, #152]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002fe8:	f005 fdfe 	bl	8008be8 <HAL_TIM_ConfigClockSource>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002ff2:	f7ff fd4c 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002ff6:	4822      	ldr	r0, [pc, #136]	@ (8003080 <MX_TIM5_Init+0x108>)
 8002ff8:	f005 f944 	bl	8008284 <HAL_TIM_IC_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003002:	f7ff fd44 	bl	8002a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	4619      	mov	r1, r3
 8003014:	481a      	ldr	r0, [pc, #104]	@ (8003080 <MX_TIM5_Init+0x108>)
 8003016:	f006 fe53 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8003020:	f7ff fd35 	bl	8002a8e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003024:	230a      	movs	r3, #10
 8003026:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003028:	2301      	movs	r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	2200      	movs	r2, #0
 8003038:	4619      	mov	r1, r3
 800303a:	4811      	ldr	r0, [pc, #68]	@ (8003080 <MX_TIM5_Init+0x108>)
 800303c:	f005 fc23 	bl	8008886 <HAL_TIM_IC_ConfigChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8003046:	f7ff fd22 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	2204      	movs	r2, #4
 800304e:	4619      	mov	r1, r3
 8003050:	480b      	ldr	r0, [pc, #44]	@ (8003080 <MX_TIM5_Init+0x108>)
 8003052:	f005 fc18 	bl	8008886 <HAL_TIM_IC_ConfigChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 800305c:	f7ff fd17 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	2208      	movs	r2, #8
 8003064:	4619      	mov	r1, r3
 8003066:	4806      	ldr	r0, [pc, #24]	@ (8003080 <MX_TIM5_Init+0x108>)
 8003068:	f005 fc0d 	bl	8008886 <HAL_TIM_IC_ConfigChannel>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM5_Init+0xfe>
  {
    Error_Handler();
 8003072:	f7ff fd0c 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	3730      	adds	r7, #48	@ 0x30
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000698 	.word	0x20000698
 8003084:	40000c00 	.word	0x40000c00

08003088 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b09c      	sub	sp, #112	@ 0x70
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	615a      	str	r2, [r3, #20]
 80030ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	2234      	movs	r2, #52	@ 0x34
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f008 fc84 	bl	800b9d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030c8:	4b51      	ldr	r3, [pc, #324]	@ (8003210 <MX_TIM8_Init+0x188>)
 80030ca:	4a52      	ldr	r2, [pc, #328]	@ (8003214 <MX_TIM8_Init+0x18c>)
 80030cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 80030ce:	4b50      	ldr	r3, [pc, #320]	@ (8003210 <MX_TIM8_Init+0x188>)
 80030d0:	2210      	movs	r2, #16
 80030d2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003210 <MX_TIM8_Init+0x188>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 80030da:	4b4d      	ldr	r3, [pc, #308]	@ (8003210 <MX_TIM8_Init+0x188>)
 80030dc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80030e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003210 <MX_TIM8_Init+0x188>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030e8:	4b49      	ldr	r3, [pc, #292]	@ (8003210 <MX_TIM8_Init+0x188>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ee:	4b48      	ldr	r3, [pc, #288]	@ (8003210 <MX_TIM8_Init+0x188>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030f4:	4846      	ldr	r0, [pc, #280]	@ (8003210 <MX_TIM8_Init+0x188>)
 80030f6:	f004 fe5f 	bl	8007db8 <HAL_TIM_Base_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003100:	f7ff fcc5 	bl	8002a8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003108:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800310a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800310e:	4619      	mov	r1, r3
 8003110:	483f      	ldr	r0, [pc, #252]	@ (8003210 <MX_TIM8_Init+0x188>)
 8003112:	f005 fd69 	bl	8008be8 <HAL_TIM_ConfigClockSource>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800311c:	f7ff fcb7 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003120:	483b      	ldr	r0, [pc, #236]	@ (8003210 <MX_TIM8_Init+0x188>)
 8003122:	f004 fea0 	bl	8007e66 <HAL_TIM_PWM_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800312c:	f7ff fcaf 	bl	8002a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800313c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003140:	4619      	mov	r1, r3
 8003142:	4833      	ldr	r0, [pc, #204]	@ (8003210 <MX_TIM8_Init+0x188>)
 8003144:	f006 fdbc 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800314e:	f7ff fc9e 	bl	8002a8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003152:	2360      	movs	r3, #96	@ 0x60
 8003154:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800315a:	2300      	movs	r3, #0
 800315c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800315e:	2300      	movs	r3, #0
 8003160:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800316e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003172:	2200      	movs	r2, #0
 8003174:	4619      	mov	r1, r3
 8003176:	4826      	ldr	r0, [pc, #152]	@ (8003210 <MX_TIM8_Init+0x188>)
 8003178:	f005 fc22 	bl	80089c0 <HAL_TIM_PWM_ConfigChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003182:	f7ff fc84 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003186:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800318a:	2204      	movs	r2, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4820      	ldr	r0, [pc, #128]	@ (8003210 <MX_TIM8_Init+0x188>)
 8003190:	f005 fc16 	bl	80089c0 <HAL_TIM_PWM_ConfigChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800319a:	f7ff fc78 	bl	8002a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800319e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031a2:	2208      	movs	r2, #8
 80031a4:	4619      	mov	r1, r3
 80031a6:	481a      	ldr	r0, [pc, #104]	@ (8003210 <MX_TIM8_Init+0x188>)
 80031a8:	f005 fc0a 	bl	80089c0 <HAL_TIM_PWM_ConfigChannel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80031b2:	f7ff fc6c 	bl	8002a8e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80031e6:	2300      	movs	r3, #0
 80031e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4807      	ldr	r0, [pc, #28]	@ (8003210 <MX_TIM8_Init+0x188>)
 80031f4:	f006 fdfa 	bl	8009dec <HAL_TIMEx_ConfigBreakDeadTime>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 80031fe:	f7ff fc46 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003202:	4803      	ldr	r0, [pc, #12]	@ (8003210 <MX_TIM8_Init+0x188>)
 8003204:	f000 f8b4 	bl	8003370 <HAL_TIM_MspPostInit>

}
 8003208:	bf00      	nop
 800320a:	3770      	adds	r7, #112	@ 0x70
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200006e4 	.word	0x200006e4
 8003214:	40013400 	.word	0x40013400

08003218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08e      	sub	sp, #56	@ 0x38
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a48      	ldr	r2, [pc, #288]	@ (8003358 <HAL_TIM_Base_MspInit+0x140>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10c      	bne.n	8003254 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800323a:	4b48      	ldr	r3, [pc, #288]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323e:	4a47      	ldr	r2, [pc, #284]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 8003240:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003244:	6613      	str	r3, [r2, #96]	@ 0x60
 8003246:	4b45      	ldr	r3, [pc, #276]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003252:	e07d      	b.n	8003350 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325c:	d130      	bne.n	80032c0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800325e:	4b3f      	ldr	r3, [pc, #252]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	4a3e      	ldr	r2, [pc, #248]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6593      	str	r3, [r2, #88]	@ 0x58
 800326a:	4b3c      	ldr	r3, [pc, #240]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003276:	4b39      	ldr	r3, [pc, #228]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327a:	4a38      	ldr	r2, [pc, #224]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003282:	4b36      	ldr	r3, [pc, #216]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = LMC_HALL1_Pin|LMC_HALL2_Pin|LMC_HALL3_Pin;
 800328e:	2398      	movs	r3, #152	@ 0x98
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329a:	2300      	movs	r3, #0
 800329c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800329e:	2302      	movs	r3, #2
 80032a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a6:	4619      	mov	r1, r3
 80032a8:	482d      	ldr	r0, [pc, #180]	@ (8003360 <HAL_TIM_Base_MspInit+0x148>)
 80032aa:	f002 fdeb 	bl	8005e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2102      	movs	r1, #2
 80032b2:	201c      	movs	r0, #28
 80032b4:	f001 fcb5 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032b8:	201c      	movs	r0, #28
 80032ba:	f001 fccc 	bl	8004c56 <HAL_NVIC_EnableIRQ>
}
 80032be:	e047      	b.n	8003350 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM5)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_TIM_Base_MspInit+0x14c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d131      	bne.n	800332e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032ca:	4b24      	ldr	r3, [pc, #144]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	4a23      	ldr	r2, [pc, #140]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d6:	4b21      	ldr	r3, [pc, #132]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032e2:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 80032e8:	f043 0320 	orr.w	r3, r3, #32
 80032ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ee:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RMC_HALL2_Pin|RMC_HALL3_Pin|RMC_HALL1_Pin;
 80032fa:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 800330c:	2306      	movs	r3, #6
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003314:	4619      	mov	r1, r3
 8003316:	4814      	ldr	r0, [pc, #80]	@ (8003368 <HAL_TIM_Base_MspInit+0x150>)
 8003318:	f002 fdb4 	bl	8005e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2102      	movs	r1, #2
 8003320:	2032      	movs	r0, #50	@ 0x32
 8003322:	f001 fc7e 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003326:	2032      	movs	r0, #50	@ 0x32
 8003328:	f001 fc95 	bl	8004c56 <HAL_NVIC_EnableIRQ>
}
 800332c:	e010      	b.n	8003350 <HAL_TIM_Base_MspInit+0x138>
  else if(tim_baseHandle->Instance==TIM8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a0e      	ldr	r2, [pc, #56]	@ (800336c <HAL_TIM_Base_MspInit+0x154>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d10b      	bne.n	8003350 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003338:	4b08      	ldr	r3, [pc, #32]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 800333a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333c:	4a07      	ldr	r2, [pc, #28]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 800333e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003342:	6613      	str	r3, [r2, #96]	@ 0x60
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_TIM_Base_MspInit+0x144>)
 8003346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	bf00      	nop
 8003352:	3738      	adds	r7, #56	@ 0x38
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40021000 	.word	0x40021000
 8003360:	48000c00 	.word	0x48000c00
 8003364:	40000c00 	.word	0x40000c00
 8003368:	48001400 	.word	0x48001400
 800336c:	40013400 	.word	0x40013400

08003370 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08c      	sub	sp, #48	@ 0x30
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	f107 031c 	add.w	r3, r7, #28
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a64      	ldr	r2, [pc, #400]	@ (8003520 <HAL_TIM_MspPostInit+0x1b0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d166      	bne.n	8003460 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003392:	4b64      	ldr	r3, [pc, #400]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	4a63      	ldr	r2, [pc, #396]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800339e:	4b61      	ldr	r3, [pc, #388]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033aa:	4b5e      	ldr	r3, [pc, #376]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033c2:	4b58      	ldr	r3, [pc, #352]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	4a57      	ldr	r2, [pc, #348]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 80033c8:	f043 0310 	orr.w	r3, r3, #16
 80033cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ce:	4b55      	ldr	r3, [pc, #340]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = PWM_AL_RMC_Pin;
 80033da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80033ec:	2304      	movs	r3, #4
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AL_RMC_GPIO_Port, &GPIO_InitStruct);
 80033f0:	f107 031c 	add.w	r3, r7, #28
 80033f4:	4619      	mov	r1, r3
 80033f6:	484c      	ldr	r0, [pc, #304]	@ (8003528 <HAL_TIM_MspPostInit+0x1b8>)
 80033f8:	f002 fd44 	bl	8005e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_AH_RMC_Pin|PWM_BH_RMC_Pin|PWM_CH_RMC_Pin;
 80033fc:	2307      	movs	r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800340c:	2302      	movs	r3, #2
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	4619      	mov	r1, r3
 8003416:	4844      	ldr	r0, [pc, #272]	@ (8003528 <HAL_TIM_MspPostInit+0x1b8>)
 8003418:	f002 fd34 	bl	8005e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_BL_RMC_Pin;
 800341c:	2301      	movs	r3, #1
 800341e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800342c:	2306      	movs	r3, #6
 800342e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_BL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	4619      	mov	r1, r3
 8003436:	483d      	ldr	r0, [pc, #244]	@ (800352c <HAL_TIM_MspPostInit+0x1bc>)
 8003438:	f002 fd24 	bl	8005e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_CL_RMC_Pin;
 800343c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800344e:	2302      	movs	r3, #2
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CL_RMC_GPIO_Port, &GPIO_InitStruct);
 8003452:	f107 031c 	add.w	r3, r7, #28
 8003456:	4619      	mov	r1, r3
 8003458:	4835      	ldr	r0, [pc, #212]	@ (8003530 <HAL_TIM_MspPostInit+0x1c0>)
 800345a:	f002 fd13 	bl	8005e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800345e:	e05a      	b.n	8003516 <HAL_TIM_MspPostInit+0x1a6>
  else if(timHandle->Instance==TIM8)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a33      	ldr	r2, [pc, #204]	@ (8003534 <HAL_TIM_MspPostInit+0x1c4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d155      	bne.n	8003516 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346a:	4b2e      	ldr	r3, [pc, #184]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346e:	4a2d      	ldr	r2, [pc, #180]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003476:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003482:	4b28      	ldr	r3, [pc, #160]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003486:	4a27      	ldr	r2, [pc, #156]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800348e:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_TIM_MspPostInit+0x1b4>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_BH_LMC_Pin|PWM_AL_LMC_Pin|PWM_BL_LMC_Pin|PWM_CL_LMC_Pin;
 800349a:	f44f 53e4 	mov.w	r3, #7296	@ 0x1c80
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80034ac:	2304      	movs	r3, #4
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	4619      	mov	r1, r3
 80034b6:	481c      	ldr	r0, [pc, #112]	@ (8003528 <HAL_TIM_MspPostInit+0x1b8>)
 80034b8:	f002 fce4 	bl	8005e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_AH_LMC_Pin;
 80034bc:	2340      	movs	r3, #64	@ 0x40
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80034cc:	2305      	movs	r3, #5
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_AH_LMC_GPIO_Port, &GPIO_InitStruct);
 80034d0:	f107 031c 	add.w	r3, r7, #28
 80034d4:	4619      	mov	r1, r3
 80034d6:	4815      	ldr	r0, [pc, #84]	@ (800352c <HAL_TIM_MspPostInit+0x1bc>)
 80034d8:	f002 fcd4 	bl	8005e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_CH_LMC_Pin;
 80034dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80034ee:	230a      	movs	r3, #10
 80034f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM_CH_LMC_GPIO_Port, &GPIO_InitStruct);
 80034f2:	f107 031c 	add.w	r3, r7, #28
 80034f6:	4619      	mov	r1, r3
 80034f8:	480c      	ldr	r0, [pc, #48]	@ (800352c <HAL_TIM_MspPostInit+0x1bc>)
 80034fa:	f002 fcc3 	bl	8005e84 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80034fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <HAL_TIM_MspPostInit+0x1c8>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a0d      	ldr	r2, [pc, #52]	@ (8003538 <HAL_TIM_MspPostInit+0x1c8>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003508:	6053      	str	r3, [r2, #4]
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800350a:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_TIM_MspPostInit+0x1c8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a0a      	ldr	r2, [pc, #40]	@ (8003538 <HAL_TIM_MspPostInit+0x1c8>)
 8003510:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003514:	6053      	str	r3, [r2, #4]
}
 8003516:	bf00      	nop
 8003518:	3730      	adds	r7, #48	@ 0x30
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40021000 	.word	0x40021000
 8003528:	48000800 	.word	0x48000800
 800352c:	48000400 	.word	0x48000400
 8003530:	48001000 	.word	0x48001000
 8003534:	40013400 	.word	0x40013400
 8003538:	40010000 	.word	0x40010000

0800353c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003540:	4b22      	ldr	r3, [pc, #136]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003542:	4a23      	ldr	r2, [pc, #140]	@ (80035d0 <MX_USART2_UART_Init+0x94>)
 8003544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8003546:	4b21      	ldr	r3, [pc, #132]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003548:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800354c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800354e:	4b1f      	ldr	r3, [pc, #124]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003554:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800355a:	4b1c      	ldr	r3, [pc, #112]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 800355c:	2200      	movs	r2, #0
 800355e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003560:	4b1a      	ldr	r3, [pc, #104]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003562:	220c      	movs	r2, #12
 8003564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003566:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800356c:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003572:	4b16      	ldr	r3, [pc, #88]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003574:	2200      	movs	r2, #0
 8003576:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003578:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 800357a:	2200      	movs	r2, #0
 800357c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800357e:	4b13      	ldr	r3, [pc, #76]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003580:	2200      	movs	r2, #0
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003584:	4811      	ldr	r0, [pc, #68]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003586:	f006 fd30 	bl	8009fea <HAL_UART_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003590:	f7ff fa7d 	bl	8002a8e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003594:	2100      	movs	r1, #0
 8003596:	480d      	ldr	r0, [pc, #52]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 8003598:	f008 f8fc 	bl	800b794 <HAL_UARTEx_SetTxFifoThreshold>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80035a2:	f7ff fa74 	bl	8002a8e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035a6:	2100      	movs	r1, #0
 80035a8:	4808      	ldr	r0, [pc, #32]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 80035aa:	f008 f931 	bl	800b810 <HAL_UARTEx_SetRxFifoThreshold>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80035b4:	f7ff fa6b 	bl	8002a8e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80035b8:	4804      	ldr	r0, [pc, #16]	@ (80035cc <MX_USART2_UART_Init+0x90>)
 80035ba:	f008 f8b2 	bl	800b722 <HAL_UARTEx_DisableFifoMode>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80035c4:	f7ff fa63 	bl	8002a8e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000730 	.word	0x20000730
 80035d0:	40004400 	.word	0x40004400

080035d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b09e      	sub	sp, #120	@ 0x78
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035ec:	f107 0310 	add.w	r3, r7, #16
 80035f0:	2254      	movs	r2, #84	@ 0x54
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f008 f9eb 	bl	800b9d0 <memset>
  if(uartHandle->Instance==USART2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a38      	ldr	r2, [pc, #224]	@ (80036e0 <HAL_UART_MspInit+0x10c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d168      	bne.n	80036d6 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003604:	2302      	movs	r3, #2
 8003606:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	4618      	mov	r0, r3
 8003612:	f003 fbdf 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800361c:	f7ff fa37 	bl	8002a8e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003620:	4b30      	ldr	r3, [pc, #192]	@ (80036e4 <HAL_UART_MspInit+0x110>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <HAL_UART_MspInit+0x110>)
 8003626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362a:	6593      	str	r3, [r2, #88]	@ 0x58
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <HAL_UART_MspInit+0x110>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003638:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <HAL_UART_MspInit+0x110>)
 800363a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363c:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <HAL_UART_MspInit+0x110>)
 800363e:	f043 0308 	orr.w	r3, r3, #8
 8003642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003644:	4b27      	ldr	r3, [pc, #156]	@ (80036e4 <HAL_UART_MspInit+0x110>)
 8003646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = AUX2_TX_Pin|AUX2_RX_Pin;
 8003650:	2360      	movs	r3, #96	@ 0x60
 8003652:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	2300      	movs	r3, #0
 800365e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003660:	2307      	movs	r3, #7
 8003662:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003664:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003668:	4619      	mov	r1, r3
 800366a:	481f      	ldr	r0, [pc, #124]	@ (80036e8 <HAL_UART_MspInit+0x114>)
 800366c:	f002 fc0a 	bl	8005e84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003670:	4b1e      	ldr	r3, [pc, #120]	@ (80036ec <HAL_UART_MspInit+0x118>)
 8003672:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <HAL_UART_MspInit+0x11c>)
 8003674:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003676:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_UART_MspInit+0x118>)
 8003678:	221a      	movs	r2, #26
 800367a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800367c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <HAL_UART_MspInit+0x118>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003682:	4b1a      	ldr	r3, [pc, #104]	@ (80036ec <HAL_UART_MspInit+0x118>)
 8003684:	2200      	movs	r2, #0
 8003686:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003688:	4b18      	ldr	r3, [pc, #96]	@ (80036ec <HAL_UART_MspInit+0x118>)
 800368a:	2280      	movs	r2, #128	@ 0x80
 800368c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800368e:	4b17      	ldr	r3, [pc, #92]	@ (80036ec <HAL_UART_MspInit+0x118>)
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003694:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_UART_MspInit+0x118>)
 8003696:	2200      	movs	r2, #0
 8003698:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800369a:	4b14      	ldr	r3, [pc, #80]	@ (80036ec <HAL_UART_MspInit+0x118>)
 800369c:	2200      	movs	r2, #0
 800369e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036a0:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <HAL_UART_MspInit+0x118>)
 80036a2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80036a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036a8:	4810      	ldr	r0, [pc, #64]	@ (80036ec <HAL_UART_MspInit+0x118>)
 80036aa:	f001 fd65 	bl	8005178 <HAL_DMA_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80036b4:	f7ff f9eb 	bl	8002a8e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0c      	ldr	r2, [pc, #48]	@ (80036ec <HAL_UART_MspInit+0x118>)
 80036bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80036c0:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <HAL_UART_MspInit+0x118>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2100      	movs	r1, #0
 80036ca:	2026      	movs	r0, #38	@ 0x26
 80036cc:	f001 faa9 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036d0:	2026      	movs	r0, #38	@ 0x26
 80036d2:	f001 fac0 	bl	8004c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036d6:	bf00      	nop
 80036d8:	3778      	adds	r7, #120	@ 0x78
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40004400 	.word	0x40004400
 80036e4:	40021000 	.word	0x40021000
 80036e8:	48000c00 	.word	0x48000c00
 80036ec:	200007c4 	.word	0x200007c4
 80036f0:	40020008 	.word	0x40020008

080036f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036f4:	480d      	ldr	r0, [pc, #52]	@ (800372c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036f8:	f7ff fade 	bl	8002cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036fc:	480c      	ldr	r0, [pc, #48]	@ (8003730 <LoopForever+0x6>)
  ldr r1, =_edata
 80036fe:	490d      	ldr	r1, [pc, #52]	@ (8003734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <LoopForever+0xe>)
  movs r3, #0
 8003702:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003704:	e002      	b.n	800370c <LoopCopyDataInit>

08003706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370a:	3304      	adds	r3, #4

0800370c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800370c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800370e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003710:	d3f9      	bcc.n	8003706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003712:	4a0a      	ldr	r2, [pc, #40]	@ (800373c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003714:	4c0a      	ldr	r4, [pc, #40]	@ (8003740 <LoopForever+0x16>)
  movs r3, #0
 8003716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003718:	e001      	b.n	800371e <LoopFillZerobss>

0800371a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800371c:	3204      	adds	r2, #4

0800371e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800371e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003720:	d3fb      	bcc.n	800371a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003722:	f008 f95d 	bl	800b9e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003726:	f7ff f8d7 	bl	80028d8 <main>

0800372a <LoopForever>:

LoopForever:
    b LoopForever
 800372a:	e7fe      	b.n	800372a <LoopForever>
  ldr   r0, =_estack
 800372c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003734:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8003738:	0800baac 	.word	0x0800baac
  ldr r2, =_sbss
 800373c:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8003740:	20000828 	.word	0x20000828

08003744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003744:	e7fe      	b.n	8003744 <ADC1_2_IRQHandler>

08003746 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003750:	2003      	movs	r0, #3
 8003752:	f001 fa5b 	bl	8004c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003756:	200f      	movs	r0, #15
 8003758:	f000 f80e 	bl	8003778 <HAL_InitTick>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	71fb      	strb	r3, [r7, #7]
 8003766:	e001      	b.n	800376c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003768:	f7ff fa1a 	bl	8002ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800376c:	79fb      	ldrb	r3, [r7, #7]

}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003784:	4b16      	ldr	r3, [pc, #88]	@ (80037e0 <HAL_InitTick+0x68>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d022      	beq.n	80037d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800378c:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <HAL_InitTick+0x6c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <HAL_InitTick+0x68>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003798:	fbb1 f3f3 	udiv	r3, r1, r3
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fa66 	bl	8004c72 <HAL_SYSTICK_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10f      	bne.n	80037cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b0f      	cmp	r3, #15
 80037b0:	d809      	bhi.n	80037c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037b2:	2200      	movs	r2, #0
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ba:	f001 fa32 	bl	8004c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037be:	4a0a      	ldr	r2, [pc, #40]	@ (80037e8 <HAL_InitTick+0x70>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e007      	b.n	80037d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	e004      	b.n	80037d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e001      	b.n	80037d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000338 	.word	0x20000338
 80037e4:	20000330 	.word	0x20000330
 80037e8:	20000334 	.word	0x20000334

080037ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <HAL_IncTick+0x1c>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_IncTick+0x20>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4413      	add	r3, r2
 80037fa:	4a03      	ldr	r2, [pc, #12]	@ (8003808 <HAL_IncTick+0x1c>)
 80037fc:	6013      	str	r3, [r2, #0]
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	20000824 	.word	0x20000824
 800380c:	20000338 	.word	0x20000338

08003810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return uwTick;
 8003814:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <HAL_GetTick+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000824 	.word	0x20000824

08003828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003830:	f7ff ffee 	bl	8003810 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d004      	beq.n	800384c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003842:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_Delay+0x40>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800384c:	bf00      	nop
 800384e:	f7ff ffdf 	bl	8003810 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	429a      	cmp	r2, r3
 800385c:	d8f7      	bhi.n	800384e <HAL_Delay+0x26>
  {
  }
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000338 	.word	0x20000338

0800386c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	609a      	str	r2, [r3, #8]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3360      	adds	r3, #96	@ 0x60
 80038e6:	461a      	mov	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <LL_ADC_SetOffset+0x44>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800390c:	bf00      	nop
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	03fff000 	.word	0x03fff000

0800391c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3360      	adds	r3, #96	@ 0x60
 800392a:	461a      	mov	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3360      	adds	r3, #96	@ 0x60
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	431a      	orrs	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3360      	adds	r3, #96	@ 0x60
 800398e:	461a      	mov	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3360      	adds	r3, #96	@ 0x60
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	431a      	orrs	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	615a      	str	r2, [r3, #20]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3330      	adds	r3, #48	@ 0x30
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	4413      	add	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	211f      	movs	r1, #31
 8003a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	0e9b      	lsrs	r3, r3, #26
 8003a48:	f003 011f 	and.w	r1, r3, #31
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	431a      	orrs	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3314      	adds	r3, #20
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	0e5b      	lsrs	r3, r3, #25
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	4413      	add	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	0d1b      	lsrs	r3, r3, #20
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2107      	movs	r1, #7
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	0d1b      	lsrs	r3, r3, #20
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	431a      	orrs	r2, r3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	401a      	ands	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0318 	and.w	r3, r3, #24
 8003ae2:	4908      	ldr	r1, [pc, #32]	@ (8003b04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ae4:	40d9      	lsrs	r1, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	400b      	ands	r3, r1
 8003aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aee:	431a      	orrs	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	0007ffff 	.word	0x0007ffff

08003b08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6093      	str	r3, [r2, #8]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b40:	d101      	bne.n	8003b46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b90:	d101      	bne.n	8003b96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <LL_ADC_IsEnabled+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_ADC_IsEnabled+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d101      	bne.n	8003be2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d101      	bne.n	8003c08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b089      	sub	sp, #36	@ 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e1a9      	b.n	8003f86 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fe f9af 	bl	8001fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ff67 	bl	8003b2c <LL_ADC_IsDeepPowerDownEnabled>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff4d 	bl	8003b08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff ff82 	bl	8003b7c <LL_ADC_IsInternalRegulatorEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d115      	bne.n	8003caa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff66 	bl	8003b54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c88:	4b9c      	ldr	r3, [pc, #624]	@ (8003efc <HAL_ADC_Init+0x2e4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	4a9c      	ldr	r2, [pc, #624]	@ (8003f00 <HAL_ADC_Init+0x2e8>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	3301      	adds	r3, #1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c9c:	e002      	b.n	8003ca4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f9      	bne.n	8003c9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ff64 	bl	8003b7c <LL_ADC_IsInternalRegulatorEnabled>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10d      	bne.n	8003cd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff ff75 	bl	8003bca <LL_ADC_REG_IsConversionOngoing>
 8003ce0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f040 8142 	bne.w	8003f74 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 813e 	bne.w	8003f74 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d00:	f043 0202 	orr.w	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff49 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d141      	bne.n	8003d9c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d20:	d004      	beq.n	8003d2c <HAL_ADC_Init+0x114>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a77      	ldr	r2, [pc, #476]	@ (8003f04 <HAL_ADC_Init+0x2ec>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10f      	bne.n	8003d4c <HAL_ADC_Init+0x134>
 8003d2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d30:	f7ff ff38 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d34:	4604      	mov	r4, r0
 8003d36:	4873      	ldr	r0, [pc, #460]	@ (8003f04 <HAL_ADC_Init+0x2ec>)
 8003d38:	f7ff ff34 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4323      	orrs	r3, r4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e012      	b.n	8003d72 <HAL_ADC_Init+0x15a>
 8003d4c:	486e      	ldr	r0, [pc, #440]	@ (8003f08 <HAL_ADC_Init+0x2f0>)
 8003d4e:	f7ff ff29 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d52:	4604      	mov	r4, r0
 8003d54:	486d      	ldr	r0, [pc, #436]	@ (8003f0c <HAL_ADC_Init+0x2f4>)
 8003d56:	f7ff ff25 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	431c      	orrs	r4, r3
 8003d5e:	486c      	ldr	r0, [pc, #432]	@ (8003f10 <HAL_ADC_Init+0x2f8>)
 8003d60:	f7ff ff20 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4323      	orrs	r3, r4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d012      	beq.n	8003d9c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d7e:	d004      	beq.n	8003d8a <HAL_ADC_Init+0x172>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5f      	ldr	r2, [pc, #380]	@ (8003f04 <HAL_ADC_Init+0x2ec>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_Init+0x176>
 8003d8a:	4a62      	ldr	r2, [pc, #392]	@ (8003f14 <HAL_ADC_Init+0x2fc>)
 8003d8c:	e000      	b.n	8003d90 <HAL_ADC_Init+0x178>
 8003d8e:	4a62      	ldr	r2, [pc, #392]	@ (8003f18 <HAL_ADC_Init+0x300>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4619      	mov	r1, r3
 8003d96:	4610      	mov	r0, r2
 8003d98:	f7ff fd68 	bl	800386c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7f5b      	ldrb	r3, [r3, #29]
 8003da0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003da6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003dac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003db2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d106      	bne.n	8003dd8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	045b      	lsls	r3, r3, #17
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	4b48      	ldr	r3, [pc, #288]	@ (8003f1c <HAL_ADC_Init+0x304>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	69b9      	ldr	r1, [r7, #24]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fee4 	bl	8003bf0 <LL_ADC_INJ_IsConversionOngoing>
 8003e28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d17f      	bne.n	8003f30 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d17c      	bne.n	8003f30 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e52:	f023 0302 	bic.w	r3, r3, #2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003e80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6911      	ldr	r1, [r2, #16]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	430b      	orrs	r3, r1
 8003e92:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003e96:	e013      	b.n	8003ec0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ea6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003eb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ebc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d12a      	bne.n	8003f20 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ee6:	4311      	orrs	r1, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eec:	430a      	orrs	r2, r1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	611a      	str	r2, [r3, #16]
 8003efa:	e019      	b.n	8003f30 <HAL_ADC_Init+0x318>
 8003efc:	20000330 	.word	0x20000330
 8003f00:	053e2d63 	.word	0x053e2d63
 8003f04:	50000100 	.word	0x50000100
 8003f08:	50000400 	.word	0x50000400
 8003f0c:	50000500 	.word	0x50000500
 8003f10:	50000600 	.word	0x50000600
 8003f14:	50000300 	.word	0x50000300
 8003f18:	50000700 	.word	0x50000700
 8003f1c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10c      	bne.n	8003f52 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	f023 010f 	bic.w	r1, r3, #15
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	1e5a      	subs	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f50:	e007      	b.n	8003f62 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 020f 	bic.w	r2, r2, #15
 8003f60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f72:	e007      	b.n	8003f84 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	f043 0210 	orr.w	r2, r3, #16
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3724      	adds	r7, #36	@ 0x24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}
 8003f8e:	bf00      	nop

08003f90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b0b6      	sub	sp, #216	@ 0xd8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d102      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x24>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	f000 bc13 	b.w	80047da <HAL_ADC_ConfigChannel+0x84a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fe02 	bl	8003bca <LL_ADC_REG_IsConversionOngoing>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 83f3 	bne.w	80047b4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7ff fd18 	bl	8003a10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fdf0 	bl	8003bca <LL_ADC_REG_IsConversionOngoing>
 8003fea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fdfc 	bl	8003bf0 <LL_ADC_INJ_IsConversionOngoing>
 8003ff8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ffc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 81d9 	bne.w	80043b8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 81d4 	bne.w	80043b8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004018:	d10f      	bne.n	800403a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	4619      	mov	r1, r3
 8004026:	f7ff fd1f 	bl	8003a68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fcd9 	bl	80039ea <LL_ADC_SetSamplingTimeCommonConfig>
 8004038:	e00e      	b.n	8004058 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	461a      	mov	r2, r3
 8004048:	f7ff fd0e 	bl	8003a68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fcc9 	bl	80039ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	08db      	lsrs	r3, r3, #3
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b04      	cmp	r3, #4
 8004078:	d022      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6919      	ldr	r1, [r3, #16]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800408a:	f7ff fc23 	bl	80038d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6919      	ldr	r1, [r3, #16]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	461a      	mov	r2, r3
 800409c:	f7ff fc6f 	bl	800397e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d102      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x126>
 80040b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040b4:	e000      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x128>
 80040b6:	2300      	movs	r3, #0
 80040b8:	461a      	mov	r2, r3
 80040ba:	f7ff fc7b 	bl	80039b4 <LL_ADC_SetOffsetSaturation>
 80040be:	e17b      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fc28 	bl	800391c <LL_ADC_GetOffsetChannel>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x15c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fc1d 	bl	800391c <LL_ADC_GetOffsetChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	0e9b      	lsrs	r3, r3, #26
 80040e6:	f003 021f 	and.w	r2, r3, #31
 80040ea:	e01e      	b.n	800412a <HAL_ADC_ConfigChannel+0x19a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fc12 	bl	800391c <LL_ADC_GetOffsetChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800410a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800410e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800411a:	2320      	movs	r3, #32
 800411c:	e004      	b.n	8004128 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800411e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004132:	2b00      	cmp	r3, #0
 8004134:	d105      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x1b2>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	0e9b      	lsrs	r3, r3, #26
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	e018      	b.n	8004174 <HAL_ADC_ConfigChannel+0x1e4>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800415a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800415e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004166:	2320      	movs	r3, #32
 8004168:	e004      	b.n	8004174 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800416a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004174:	429a      	cmp	r2, r3
 8004176:	d106      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fbe1 	bl	8003948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2101      	movs	r1, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fbc5 	bl	800391c <LL_ADC_GetOffsetChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x222>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fbba 	bl	800391c <LL_ADC_GetOffsetChannel>
 80041a8:	4603      	mov	r3, r0
 80041aa:	0e9b      	lsrs	r3, r3, #26
 80041ac:	f003 021f 	and.w	r2, r3, #31
 80041b0:	e01e      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x260>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fbaf 	bl	800391c <LL_ADC_GetOffsetChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80041d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80041d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e004      	b.n	80041ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80041e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x278>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0e9b      	lsrs	r3, r3, #26
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	e018      	b.n	800423a <HAL_ADC_ConfigChannel+0x2aa>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800421c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	e004      	b.n	800423a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004234:	fab3 f383 	clz	r3, r3
 8004238:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800423a:	429a      	cmp	r2, r3
 800423c:	d106      	bne.n	800424c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	2101      	movs	r1, #1
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fb7e 	bl	8003948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fb62 	bl	800391c <LL_ADC_GetOffsetChannel>
 8004258:	4603      	mov	r3, r0
 800425a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x2e8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2102      	movs	r1, #2
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fb57 	bl	800391c <LL_ADC_GetOffsetChannel>
 800426e:	4603      	mov	r3, r0
 8004270:	0e9b      	lsrs	r3, r3, #26
 8004272:	f003 021f 	and.w	r2, r3, #31
 8004276:	e01e      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x326>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fb4c 	bl	800391c <LL_ADC_GetOffsetChannel>
 8004284:	4603      	mov	r3, r0
 8004286:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004296:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800429a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800429e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80042a6:	2320      	movs	r3, #32
 80042a8:	e004      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80042aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x33e>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	0e9b      	lsrs	r3, r3, #26
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	e016      	b.n	80042fc <HAL_ADC_ConfigChannel+0x36c>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80042e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80042e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80042ee:	2320      	movs	r3, #32
 80042f0:	e004      	b.n	80042fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80042f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d106      	bne.n	800430e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2200      	movs	r2, #0
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fb1d 	bl	8003948 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2103      	movs	r1, #3
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fb01 	bl	800391c <LL_ADC_GetOffsetChannel>
 800431a:	4603      	mov	r3, r0
 800431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <HAL_ADC_ConfigChannel+0x3aa>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2103      	movs	r1, #3
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff faf6 	bl	800391c <LL_ADC_GetOffsetChannel>
 8004330:	4603      	mov	r3, r0
 8004332:	0e9b      	lsrs	r3, r3, #26
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	e017      	b.n	800436a <HAL_ADC_ConfigChannel+0x3da>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2103      	movs	r1, #3
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff faeb 	bl	800391c <LL_ADC_GetOffsetChannel>
 8004346:	4603      	mov	r3, r0
 8004348:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004352:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004354:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004356:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800435c:	2320      	movs	r3, #32
 800435e:	e003      	b.n	8004368 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004362:	fab3 f383 	clz	r3, r3
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x3f2>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	0e9b      	lsrs	r3, r3, #26
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	e011      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x416>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004392:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800439a:	2320      	movs	r3, #32
 800439c:	e003      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800439e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d106      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2103      	movs	r1, #3
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fac8 	bl	8003948 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fbf1 	bl	8003ba4 <LL_ADC_IsEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f040 813d 	bne.w	8004644 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f7ff fb72 	bl	8003ac0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4aa2      	ldr	r2, [pc, #648]	@ (800466c <HAL_ADC_ConfigChannel+0x6dc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	f040 812e 	bne.w	8004644 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x480>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0e9b      	lsrs	r3, r3, #26
 80043fe:	3301      	adds	r3, #1
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	2b09      	cmp	r3, #9
 8004406:	bf94      	ite	ls
 8004408:	2301      	movls	r3, #1
 800440a:	2300      	movhi	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e019      	b.n	8004444 <HAL_ADC_ConfigChannel+0x4b4>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800441e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004420:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004428:	2320      	movs	r3, #32
 800442a:	e003      	b.n	8004434 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800442c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	3301      	adds	r3, #1
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2b09      	cmp	r3, #9
 800443c:	bf94      	ite	ls
 800443e:	2301      	movls	r3, #1
 8004440:	2300      	movhi	r3, #0
 8004442:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004444:	2b00      	cmp	r3, #0
 8004446:	d079      	beq.n	800453c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004450:	2b00      	cmp	r3, #0
 8004452:	d107      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x4d4>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	0e9b      	lsrs	r3, r3, #26
 800445a:	3301      	adds	r3, #1
 800445c:	069b      	lsls	r3, r3, #26
 800445e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004462:	e015      	b.n	8004490 <HAL_ADC_ConfigChannel+0x500>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004474:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800447c:	2320      	movs	r3, #32
 800447e:	e003      	b.n	8004488 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3301      	adds	r3, #1
 800448a:	069b      	lsls	r3, r3, #26
 800448c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x520>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0e9b      	lsrs	r3, r3, #26
 80044a2:	3301      	adds	r3, #1
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2101      	movs	r1, #1
 80044aa:	fa01 f303 	lsl.w	r3, r1, r3
 80044ae:	e017      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x550>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80044be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80044c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80044c8:	2320      	movs	r3, #32
 80044ca:	e003      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80044cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	3301      	adds	r3, #1
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	ea42 0103 	orr.w	r1, r2, r3
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x576>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0e9b      	lsrs	r3, r3, #26
 80044f6:	3301      	adds	r3, #1
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	051b      	lsls	r3, r3, #20
 8004504:	e018      	b.n	8004538 <HAL_ADC_ConfigChannel+0x5a8>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450e:	fa93 f3a3 	rbit	r3, r3
 8004512:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800451e:	2320      	movs	r3, #32
 8004520:	e003      	b.n	800452a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	3301      	adds	r3, #1
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004538:	430b      	orrs	r3, r1
 800453a:	e07e      	b.n	800463a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d107      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x5c8>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	3301      	adds	r3, #1
 8004550:	069b      	lsls	r3, r3, #26
 8004552:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004556:	e015      	b.n	8004584 <HAL_ADC_ConfigChannel+0x5f4>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004570:	2320      	movs	r3, #32
 8004572:	e003      	b.n	800457c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	3301      	adds	r3, #1
 800457e:	069b      	lsls	r3, r3, #26
 8004580:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x614>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	0e9b      	lsrs	r3, r3, #26
 8004596:	3301      	adds	r3, #1
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	e017      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x644>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	61fb      	str	r3, [r7, #28]
  return result;
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80045bc:	2320      	movs	r3, #32
 80045be:	e003      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	3301      	adds	r3, #1
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	ea42 0103 	orr.w	r1, r2, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10d      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x670>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	0e9b      	lsrs	r3, r3, #26
 80045ea:	3301      	adds	r3, #1
 80045ec:	f003 021f 	and.w	r2, r3, #31
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	3b1e      	subs	r3, #30
 80045f8:	051b      	lsls	r3, r3, #20
 80045fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045fe:	e01b      	b.n	8004638 <HAL_ADC_ConfigChannel+0x6a8>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	613b      	str	r3, [r7, #16]
  return result;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f003 021f 	and.w	r2, r3, #31
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	3b1e      	subs	r3, #30
 8004632:	051b      	lsls	r3, r3, #20
 8004634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004638:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800463e:	4619      	mov	r1, r3
 8004640:	f7ff fa12 	bl	8003a68 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b09      	ldr	r3, [pc, #36]	@ (8004670 <HAL_ADC_ConfigChannel+0x6e0>)
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80be 	beq.w	80047ce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465a:	d004      	beq.n	8004666 <HAL_ADC_ConfigChannel+0x6d6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <HAL_ADC_ConfigChannel+0x6e4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10a      	bne.n	800467c <HAL_ADC_ConfigChannel+0x6ec>
 8004666:	4b04      	ldr	r3, [pc, #16]	@ (8004678 <HAL_ADC_ConfigChannel+0x6e8>)
 8004668:	e009      	b.n	800467e <HAL_ADC_ConfigChannel+0x6ee>
 800466a:	bf00      	nop
 800466c:	407f0000 	.word	0x407f0000
 8004670:	80080000 	.word	0x80080000
 8004674:	50000100 	.word	0x50000100
 8004678:	50000300 	.word	0x50000300
 800467c:	4b59      	ldr	r3, [pc, #356]	@ (80047e4 <HAL_ADC_ConfigChannel+0x854>)
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff f91a 	bl	80038b8 <LL_ADC_GetCommonPathInternalCh>
 8004684:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a56      	ldr	r2, [pc, #344]	@ (80047e8 <HAL_ADC_ConfigChannel+0x858>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_ADC_ConfigChannel+0x70c>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a55      	ldr	r2, [pc, #340]	@ (80047ec <HAL_ADC_ConfigChannel+0x85c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d13a      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800469c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d134      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046b0:	d005      	beq.n	80046be <HAL_ADC_ConfigChannel+0x72e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a4e      	ldr	r2, [pc, #312]	@ (80047f0 <HAL_ADC_ConfigChannel+0x860>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	f040 8085 	bne.w	80047c8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046c6:	d004      	beq.n	80046d2 <HAL_ADC_ConfigChannel+0x742>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a49      	ldr	r2, [pc, #292]	@ (80047f4 <HAL_ADC_ConfigChannel+0x864>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x746>
 80046d2:	4a49      	ldr	r2, [pc, #292]	@ (80047f8 <HAL_ADC_ConfigChannel+0x868>)
 80046d4:	e000      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x748>
 80046d6:	4a43      	ldr	r2, [pc, #268]	@ (80047e4 <HAL_ADC_ConfigChannel+0x854>)
 80046d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f7ff f8d5 	bl	8003892 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046e8:	4b44      	ldr	r3, [pc, #272]	@ (80047fc <HAL_ADC_ConfigChannel+0x86c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	4a44      	ldr	r2, [pc, #272]	@ (8004800 <HAL_ADC_ConfigChannel+0x870>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	4613      	mov	r3, r2
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004702:	e002      	b.n	800470a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3b01      	subs	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f9      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004710:	e05a      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3b      	ldr	r2, [pc, #236]	@ (8004804 <HAL_ADC_ConfigChannel+0x874>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d125      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800471c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11f      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a31      	ldr	r2, [pc, #196]	@ (80047f4 <HAL_ADC_ConfigChannel+0x864>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d104      	bne.n	800473c <HAL_ADC_ConfigChannel+0x7ac>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a34      	ldr	r2, [pc, #208]	@ (8004808 <HAL_ADC_ConfigChannel+0x878>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d047      	beq.n	80047cc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004744:	d004      	beq.n	8004750 <HAL_ADC_ConfigChannel+0x7c0>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2a      	ldr	r2, [pc, #168]	@ (80047f4 <HAL_ADC_ConfigChannel+0x864>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d101      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x7c4>
 8004750:	4a29      	ldr	r2, [pc, #164]	@ (80047f8 <HAL_ADC_ConfigChannel+0x868>)
 8004752:	e000      	b.n	8004756 <HAL_ADC_ConfigChannel+0x7c6>
 8004754:	4a23      	ldr	r2, [pc, #140]	@ (80047e4 <HAL_ADC_ConfigChannel+0x854>)
 8004756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800475a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f7ff f896 	bl	8003892 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004766:	e031      	b.n	80047cc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a27      	ldr	r2, [pc, #156]	@ (800480c <HAL_ADC_ConfigChannel+0x87c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d12d      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d127      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <HAL_ADC_ConfigChannel+0x864>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d022      	beq.n	80047ce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004790:	d004      	beq.n	800479c <HAL_ADC_ConfigChannel+0x80c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <HAL_ADC_ConfigChannel+0x864>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x810>
 800479c:	4a16      	ldr	r2, [pc, #88]	@ (80047f8 <HAL_ADC_ConfigChannel+0x868>)
 800479e:	e000      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x812>
 80047a0:	4a10      	ldr	r2, [pc, #64]	@ (80047e4 <HAL_ADC_ConfigChannel+0x854>)
 80047a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7ff f870 	bl	8003892 <LL_ADC_SetCommonPathInternalCh>
 80047b2:	e00c      	b.n	80047ce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80047c6:	e002      	b.n	80047ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047c8:	bf00      	nop
 80047ca:	e000      	b.n	80047ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047da:	4618      	mov	r0, r3
 80047dc:	37d8      	adds	r7, #216	@ 0xd8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	50000700 	.word	0x50000700
 80047e8:	c3210000 	.word	0xc3210000
 80047ec:	90c00010 	.word	0x90c00010
 80047f0:	50000600 	.word	0x50000600
 80047f4:	50000100 	.word	0x50000100
 80047f8:	50000300 	.word	0x50000300
 80047fc:	20000330 	.word	0x20000330
 8004800:	053e2d63 	.word	0x053e2d63
 8004804:	c7520000 	.word	0xc7520000
 8004808:	50000500 	.word	0x50000500
 800480c:	cb840000 	.word	0xcb840000

08004810 <LL_ADC_IsEnabled>:
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <LL_ADC_IsEnabled+0x18>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <LL_ADC_IsEnabled+0x1a>
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <LL_ADC_REG_IsConversionOngoing>:
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d101      	bne.n	800484e <LL_ADC_REG_IsConversionOngoing+0x18>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b0a1      	sub	sp, #132	@ 0x84
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004876:	2302      	movs	r3, #2
 8004878:	e0e7      	b.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004882:	2300      	movs	r3, #0
 8004884:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004886:	2300      	movs	r3, #0
 8004888:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004892:	d102      	bne.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004894:	4b6f      	ldr	r3, [pc, #444]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	e009      	b.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a6e      	ldr	r2, [pc, #440]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d102      	bne.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80048a4:	4b6d      	ldr	r3, [pc, #436]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	e001      	b.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80048aa:	2300      	movs	r3, #0
 80048ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0be      	b.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ffb1 	bl	8004836 <LL_ADC_REG_IsConversionOngoing>
 80048d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ffab 	bl	8004836 <LL_ADC_REG_IsConversionOngoing>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 80a0 	bne.w	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80048e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 809c 	bne.w	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048f8:	d004      	beq.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a55      	ldr	r2, [pc, #340]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004904:	4b56      	ldr	r3, [pc, #344]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004906:	e000      	b.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004908:	4b56      	ldr	r3, [pc, #344]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800490a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d04b      	beq.n	80049ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004914:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004926:	035b      	lsls	r3, r3, #13
 8004928:	430b      	orrs	r3, r1
 800492a:	431a      	orrs	r2, r3
 800492c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800492e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004938:	d004      	beq.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a45      	ldr	r2, [pc, #276]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10f      	bne.n	8004964 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004944:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004948:	f7ff ff62 	bl	8004810 <LL_ADC_IsEnabled>
 800494c:	4604      	mov	r4, r0
 800494e:	4841      	ldr	r0, [pc, #260]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004950:	f7ff ff5e 	bl	8004810 <LL_ADC_IsEnabled>
 8004954:	4603      	mov	r3, r0
 8004956:	4323      	orrs	r3, r4
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e012      	b.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004964:	483c      	ldr	r0, [pc, #240]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004966:	f7ff ff53 	bl	8004810 <LL_ADC_IsEnabled>
 800496a:	4604      	mov	r4, r0
 800496c:	483b      	ldr	r0, [pc, #236]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800496e:	f7ff ff4f 	bl	8004810 <LL_ADC_IsEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	431c      	orrs	r4, r3
 8004976:	483c      	ldr	r0, [pc, #240]	@ (8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004978:	f7ff ff4a 	bl	8004810 <LL_ADC_IsEnabled>
 800497c:	4603      	mov	r3, r0
 800497e:	4323      	orrs	r3, r4
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d056      	beq.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800498e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004996:	f023 030f 	bic.w	r3, r3, #15
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	6811      	ldr	r1, [r2, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	6892      	ldr	r2, [r2, #8]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	431a      	orrs	r2, r3
 80049a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049aa:	e047      	b.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049c0:	d004      	beq.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10f      	bne.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80049cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80049d0:	f7ff ff1e 	bl	8004810 <LL_ADC_IsEnabled>
 80049d4:	4604      	mov	r4, r0
 80049d6:	481f      	ldr	r0, [pc, #124]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049d8:	f7ff ff1a 	bl	8004810 <LL_ADC_IsEnabled>
 80049dc:	4603      	mov	r3, r0
 80049de:	4323      	orrs	r3, r4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e012      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80049ec:	481a      	ldr	r0, [pc, #104]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049ee:	f7ff ff0f 	bl	8004810 <LL_ADC_IsEnabled>
 80049f2:	4604      	mov	r4, r0
 80049f4:	4819      	ldr	r0, [pc, #100]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049f6:	f7ff ff0b 	bl	8004810 <LL_ADC_IsEnabled>
 80049fa:	4603      	mov	r3, r0
 80049fc:	431c      	orrs	r4, r3
 80049fe:	481a      	ldr	r0, [pc, #104]	@ (8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a00:	f7ff ff06 	bl	8004810 <LL_ADC_IsEnabled>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4323      	orrs	r3, r4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d012      	beq.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a1e:	f023 030f 	bic.w	r3, r3, #15
 8004a22:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a26:	e009      	b.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a3a:	e000      	b.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a46:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3784      	adds	r7, #132	@ 0x84
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd90      	pop	{r4, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	50000100 	.word	0x50000100
 8004a58:	50000400 	.word	0x50000400
 8004a5c:	50000500 	.word	0x50000500
 8004a60:	50000300 	.word	0x50000300
 8004a64:	50000700 	.word	0x50000700
 8004a68:	50000600 	.word	0x50000600

08004a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a9e:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	60d3      	str	r3, [r2, #12]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab8:	4b04      	ldr	r3, [pc, #16]	@ (8004acc <__NVIC_GetPriorityGrouping+0x18>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f003 0307 	and.w	r3, r3, #7
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000ed00 	.word	0xe000ed00

08004ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	db0b      	blt.n	8004afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	4907      	ldr	r1, [pc, #28]	@ (8004b08 <__NVIC_EnableIRQ+0x38>)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	2001      	movs	r0, #1
 8004af2:	fa00 f202 	lsl.w	r2, r0, r2
 8004af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000e100 	.word	0xe000e100

08004b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	6039      	str	r1, [r7, #0]
 8004b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	db0a      	blt.n	8004b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	490c      	ldr	r1, [pc, #48]	@ (8004b58 <__NVIC_SetPriority+0x4c>)
 8004b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2a:	0112      	lsls	r2, r2, #4
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	440b      	add	r3, r1
 8004b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b34:	e00a      	b.n	8004b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4908      	ldr	r1, [pc, #32]	@ (8004b5c <__NVIC_SetPriority+0x50>)
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	3b04      	subs	r3, #4
 8004b44:	0112      	lsls	r2, r2, #4
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	440b      	add	r3, r1
 8004b4a:	761a      	strb	r2, [r3, #24]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000e100 	.word	0xe000e100
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f1c3 0307 	rsb	r3, r3, #7
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	bf28      	it	cs
 8004b7e:	2304      	movcs	r3, #4
 8004b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3304      	adds	r3, #4
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d902      	bls.n	8004b90 <NVIC_EncodePriority+0x30>
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3b03      	subs	r3, #3
 8004b8e:	e000      	b.n	8004b92 <NVIC_EncodePriority+0x32>
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	43d9      	mvns	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	4313      	orrs	r3, r2
         );
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3724      	adds	r7, #36	@ 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd8:	d301      	bcc.n	8004bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e00f      	b.n	8004bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bde:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <SysTick_Config+0x40>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004be6:	210f      	movs	r1, #15
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bec:	f7ff ff8e 	bl	8004b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <SysTick_Config+0x40>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bf6:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <SysTick_Config+0x40>)
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	e000e010 	.word	0xe000e010

08004c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff29 	bl	8004a6c <__NVIC_SetPriorityGrouping>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	4603      	mov	r3, r0
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c30:	f7ff ff40 	bl	8004ab4 <__NVIC_GetPriorityGrouping>
 8004c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f7ff ff90 	bl	8004b60 <NVIC_EncodePriority>
 8004c40:	4602      	mov	r2, r0
 8004c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff5f 	bl	8004b0c <__NVIC_SetPriority>
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ff33 	bl	8004ad0 <__NVIC_EnableIRQ>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ffa4 	bl	8004bc8 <SysTick_Config>
 8004c80:	4603      	mov	r3, r0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e014      	b.n	8004cc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	791b      	ldrb	r3, [r3, #4]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d105      	bne.n	8004cb2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fd faeb 	bl	8002288 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e056      	b.n	8004d92 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	795b      	ldrb	r3, [r3, #5]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_DAC_Start+0x20>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e050      	b.n	8004d92 <HAL_DAC_Start+0xc2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2201      	movs	r2, #1
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d14:	4b22      	ldr	r3, [pc, #136]	@ (8004da0 <HAL_DAC_Start+0xd0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	4a22      	ldr	r2, [pc, #136]	@ (8004da4 <HAL_DAC_Start+0xd4>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	099b      	lsrs	r3, r3, #6
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004d26:	e002      	b.n	8004d2e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f9      	bne.n	8004d28 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d11d      	bne.n	8004d84 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	e014      	b.n	8004d84 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d107      	bne.n	8004d84 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0202 	orr.w	r2, r2, #2
 8004d82:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000330 	.word	0x20000330
 8004da4:	053e2d63 	.word	0x053e2d63

08004da8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e018      	b.n	8004df6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	3308      	adds	r3, #8
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e004      	b.n	8004dec <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4413      	add	r3, r2
 8004de8:	3314      	adds	r3, #20
 8004dea:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	461a      	mov	r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	@ 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_DAC_ConfigChannel+0x1c>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e1a1      	b.n	8005168 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	795b      	ldrb	r3, [r3, #5]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_DAC_ConfigChannel+0x32>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e198      	b.n	8005168 <HAL_DAC_ConfigChannel+0x364>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d17a      	bne.n	8004f40 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e4a:	f7fe fce1 	bl	8003810 <HAL_GetTick>
 8004e4e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d13d      	bne.n	8004ed2 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e56:	e018      	b.n	8004e8a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e58:	f7fe fcda 	bl	8003810 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d911      	bls.n	8004e8a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f043 0208 	orr.w	r2, r3, #8
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2203      	movs	r2, #3
 8004e84:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e16e      	b.n	8005168 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1df      	bne.n	8004e58 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ea0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ea2:	e020      	b.n	8004ee6 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ea4:	f7fe fcb4 	bl	8003810 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d90f      	bls.n	8004ed2 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	da0a      	bge.n	8004ed2 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f043 0208 	orr.w	r2, r3, #8
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e14a      	b.n	8005168 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	dbe3      	blt.n	8004ea4 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	ea02 0103 	and.w	r1, r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	21ff      	movs	r1, #255	@ 0xff
 8004f22:	fa01 f303 	lsl.w	r3, r1, r3
 8004f26:	43db      	mvns	r3, r3
 8004f28:	ea02 0103 	and.w	r1, r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d11d      	bne.n	8004f84 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	221f      	movs	r2, #31
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f60:	4013      	ands	r3, r2
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2207      	movs	r2, #7
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d102      	bne.n	8004fae <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	e00f      	b.n	8004fce <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d102      	bne.n	8004fbc <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	e008      	b.n	8004fce <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	e001      	b.n	8004fce <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	791b      	ldrb	r3, [r3, #4]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d102      	bne.n	8005002 <HAL_DAC_ConfigChannel+0x1fe>
 8004ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005000:	e000      	b.n	8005004 <HAL_DAC_ConfigChannel+0x200>
 8005002:	2300      	movs	r3, #0
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	4013      	ands	r3, r2
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	795b      	ldrb	r3, [r3, #5]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d102      	bne.n	800502e <HAL_DAC_ConfigChannel+0x22a>
 8005028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800502c:	e000      	b.n	8005030 <HAL_DAC_ConfigChannel+0x22c>
 800502e:	2300      	movs	r3, #0
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d114      	bne.n	8005070 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005046:	f001 fe49 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 800504a:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4a48      	ldr	r2, [pc, #288]	@ (8005170 <HAL_DAC_ConfigChannel+0x36c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d904      	bls.n	800505e <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
 800505c:	e00f      	b.n	800507e <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4a44      	ldr	r2, [pc, #272]	@ (8005174 <HAL_DAC_ConfigChannel+0x370>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d90a      	bls.n	800507c <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
 800506e:	e006      	b.n	800507e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005076:	4313      	orrs	r3, r2
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
 800507a:	e000      	b.n	800507e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800507c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508c:	4313      	orrs	r3, r2
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005096:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43da      	mvns	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	400a      	ands	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d0:	4013      	ands	r3, r2
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e8:	4313      	orrs	r3, r2
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	22c0      	movs	r2, #192	@ 0xc0
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43da      	mvns	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	400a      	ands	r2, r1
 800510e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	089b      	lsrs	r3, r3, #2
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800513e:	fa01 f303 	lsl.w	r3, r1, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	ea02 0103 	and.w	r1, r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	409a      	lsls	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005166:	7ffb      	ldrb	r3, [r7, #31]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	@ 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	09896800 	.word	0x09896800
 8005174:	04c4b400 	.word	0x04c4b400

08005178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e08d      	b.n	80052a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	4b47      	ldr	r3, [pc, #284]	@ (80052b0 <HAL_DMA_Init+0x138>)
 8005192:	429a      	cmp	r2, r3
 8005194:	d80f      	bhi.n	80051b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	4b45      	ldr	r3, [pc, #276]	@ (80052b4 <HAL_DMA_Init+0x13c>)
 800519e:	4413      	add	r3, r2
 80051a0:	4a45      	ldr	r2, [pc, #276]	@ (80052b8 <HAL_DMA_Init+0x140>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	009a      	lsls	r2, r3, #2
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a42      	ldr	r2, [pc, #264]	@ (80052bc <HAL_DMA_Init+0x144>)
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80051b4:	e00e      	b.n	80051d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b40      	ldr	r3, [pc, #256]	@ (80052c0 <HAL_DMA_Init+0x148>)
 80051be:	4413      	add	r3, r2
 80051c0:	4a3d      	ldr	r2, [pc, #244]	@ (80052b8 <HAL_DMA_Init+0x140>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	009a      	lsls	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a3c      	ldr	r2, [pc, #240]	@ (80052c4 <HAL_DMA_Init+0x14c>)
 80051d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa76 	bl	8005718 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005234:	d102      	bne.n	800523c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005250:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d010      	beq.n	800527c <HAL_DMA_Init+0x104>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b04      	cmp	r3, #4
 8005260:	d80c      	bhi.n	800527c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa96 	bl	8005794 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	e008      	b.n	800528e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40020407 	.word	0x40020407
 80052b4:	bffdfff8 	.word	0xbffdfff8
 80052b8:	cccccccd 	.word	0xcccccccd
 80052bc:	40020000 	.word	0x40020000
 80052c0:	bffdfbf8 	.word	0xbffdfbf8
 80052c4:	40020400 	.word	0x40020400

080052c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_DMA_Start_IT+0x20>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e066      	b.n	80053b6 <HAL_DMA_Start_IT+0xee>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d155      	bne.n	80053a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f9bb 	bl	800569c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 020e 	orr.w	r2, r2, #14
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e00f      	b.n	8005360 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0204 	bic.w	r2, r2, #4
 800534e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 020a 	orr.w	r2, r2, #10
 800535e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800537c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005394:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e005      	b.n	80053b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
 80053b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d005      	beq.n	80053e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2204      	movs	r2, #4
 80053da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
 80053e0:	e037      	b.n	8005452 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 020e 	bic.w	r2, r2, #14
 80053f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005400:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	f003 021f 	and.w	r2, r3, #31
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541e:	2101      	movs	r1, #1
 8005420:	fa01 f202 	lsl.w	r2, r1, r2
 8005424:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800542e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00c      	beq.n	8005452 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005442:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005446:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005450:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d00d      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2204      	movs	r2, #4
 800548c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	73fb      	strb	r3, [r7, #15]
 80054a2:	e047      	b.n	8005534 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 020e 	bic.w	r2, r2, #14
 80054b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d8:	f003 021f 	and.w	r2, r3, #31
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f202 	lsl.w	r2, r1, r2
 80054e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005508:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005512:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4798      	blx	r3
    }
  }
  return status;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2204      	movs	r2, #4
 8005560:	409a      	lsls	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d026      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x7a>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d021      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0204 	bic.w	r2, r2, #4
 8005590:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	f003 021f 	and.w	r2, r3, #31
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2104      	movs	r1, #4
 80055a0:	fa01 f202 	lsl.w	r2, r1, r2
 80055a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d071      	beq.n	8005692 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055b6:	e06c      	b.n	8005692 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2202      	movs	r2, #2
 80055c2:	409a      	lsls	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02e      	beq.n	800562a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d029      	beq.n	800562a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 020a 	bic.w	r2, r2, #10
 80055f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005600:	f003 021f 	and.w	r2, r3, #31
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	2102      	movs	r1, #2
 800560a:	fa01 f202 	lsl.w	r2, r1, r2
 800560e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d038      	beq.n	8005692 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005628:	e033      	b.n	8005692 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2208      	movs	r2, #8
 8005634:	409a      	lsls	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d02a      	beq.n	8005694 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d025      	beq.n	8005694 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 020e 	bic.w	r2, r2, #14
 8005656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565c:	f003 021f 	and.w	r2, r3, #31
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005664:	2101      	movs	r1, #1
 8005666:	fa01 f202 	lsl.w	r2, r1, r2
 800566a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005692:	bf00      	nop
 8005694:	bf00      	nop
}
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	f003 021f 	and.w	r2, r3, #31
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	2101      	movs	r1, #1
 80056d4:	fa01 f202 	lsl.w	r2, r1, r2
 80056d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d108      	bne.n	80056fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056fa:	e007      	b.n	800570c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	60da      	str	r2, [r3, #12]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	4b16      	ldr	r3, [pc, #88]	@ (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005728:	429a      	cmp	r2, r3
 800572a:	d802      	bhi.n	8005732 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800572c:	4b15      	ldr	r3, [pc, #84]	@ (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e001      	b.n	8005736 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005732:	4b15      	ldr	r3, [pc, #84]	@ (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005734:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	3b08      	subs	r3, #8
 8005742:	4a12      	ldr	r2, [pc, #72]	@ (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005744:	fba2 2303 	umull	r2, r3, r2, r3
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005750:	089b      	lsrs	r3, r3, #2
 8005752:	009a      	lsls	r2, r3, #2
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a0b      	ldr	r2, [pc, #44]	@ (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005762:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2201      	movs	r2, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40020407 	.word	0x40020407
 8005784:	40020800 	.word	0x40020800
 8005788:	40020820 	.word	0x40020820
 800578c:	cccccccd 	.word	0xcccccccd
 8005790:	40020880 	.word	0x40020880

08005794 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a08      	ldr	r2, [pc, #32]	@ (80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057b6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2201      	movs	r2, #1
 80057c2:	409a      	lsls	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	1000823f 	.word	0x1000823f
 80057d8:	40020940 	.word	0x40020940

080057dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e147      	b.n	8005a7e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc fefa 	bl	80025fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0210 	bic.w	r2, r2, #16
 8005816:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005818:	f7fd fffa 	bl	8003810 <HAL_GetTick>
 800581c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800581e:	e012      	b.n	8005846 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005820:	f7fd fff6 	bl	8003810 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b0a      	cmp	r3, #10
 800582c:	d90b      	bls.n	8005846 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2203      	movs	r2, #3
 800583e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e11b      	b.n	8005a7e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b08      	cmp	r3, #8
 8005852:	d0e5      	beq.n	8005820 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005864:	f7fd ffd4 	bl	8003810 <HAL_GetTick>
 8005868:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800586a:	e012      	b.n	8005892 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800586c:	f7fd ffd0 	bl	8003810 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b0a      	cmp	r3, #10
 8005878:	d90b      	bls.n	8005892 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800587e:	f043 0201 	orr.w	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2203      	movs	r2, #3
 800588a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e0f5      	b.n	8005a7e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0e5      	beq.n	800586c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0202 	orr.w	r2, r2, #2
 80058ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a74      	ldr	r2, [pc, #464]	@ (8005a88 <HAL_FDCAN_Init+0x2ac>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d103      	bne.n	80058c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80058ba:	4a74      	ldr	r2, [pc, #464]	@ (8005a8c <HAL_FDCAN_Init+0x2b0>)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	7c1b      	ldrb	r3, [r3, #16]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d108      	bne.n	80058dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d8:	619a      	str	r2, [r3, #24]
 80058da:	e007      	b.n	80058ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	7c5b      	ldrb	r3, [r3, #17]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d108      	bne.n	8005906 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005902:	619a      	str	r2, [r3, #24]
 8005904:	e007      	b.n	8005916 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005914:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7c9b      	ldrb	r3, [r3, #18]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d108      	bne.n	8005930 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800592c:	619a      	str	r2, [r3, #24]
 800592e:	e007      	b.n	8005940 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800593e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005964:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0210 	bic.w	r2, r2, #16
 8005974:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d108      	bne.n	8005990 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0204 	orr.w	r2, r2, #4
 800598c:	619a      	str	r2, [r3, #24]
 800598e:	e02c      	b.n	80059ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d028      	beq.n	80059ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d01c      	beq.n	80059da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0210 	orr.w	r2, r2, #16
 80059be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d110      	bne.n	80059ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0220 	orr.w	r2, r2, #32
 80059d6:	619a      	str	r2, [r3, #24]
 80059d8:	e007      	b.n	80059ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699a      	ldr	r2, [r3, #24]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0220 	orr.w	r2, r2, #32
 80059e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a12:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a14:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a1e:	d115      	bne.n	8005a4c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a2e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	3b01      	subs	r3, #1
 8005a36:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a38:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	3b01      	subs	r3, #1
 8005a42:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a48:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a4a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9a2 	bl	8005dac <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40006400 	.word	0x40006400
 8005a8c:	40006500 	.word	0x40006500

08005a90 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08c      	sub	sp, #48	@ 0x30
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aac:	4013      	ands	r3, r2
 8005aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ace:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	4013      	ands	r3, r2
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005aea:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	4013      	ands	r3, r2
 8005af6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005b02:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b16:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d006      	beq.n	8005b42 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2240      	movs	r2, #64	@ 0x40
 8005b3a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f916 	bl	8005d6e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d019      	beq.n	8005b80 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d014      	beq.n	8005b80 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b5e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b76:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005b78:	6939      	ldr	r1, [r7, #16]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8d8 	bl	8005d30 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f8a2 	bl	8005cda <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ba2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc ff66 	bl	8002a78 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005bba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f897 	bl	8005cf0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bde:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f890 	bl	8005d06 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d018      	beq.n	8005c22 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d013      	beq.n	8005c22 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005c02:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2280      	movs	r2, #128	@ 0x80
 8005c18:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f87c 	bl	8005d1a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f880 	bl	8005d46 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005c62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f878 	bl	8005d5a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00f      	beq.n	8005c94 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005c86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005ca2:	69f9      	ldr	r1, [r7, #28]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f876 	bl	8005d96 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a3a      	ldr	r2, [r7, #32]
 8005cb6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f858 	bl	8005d82 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	3730      	adds	r7, #48	@ 0x30
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005db4:	4b30      	ldr	r3, [pc, #192]	@ (8005e78 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005db6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8005e7c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d103      	bne.n	8005dca <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005dc8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2c      	ldr	r2, [pc, #176]	@ (8005e80 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d103      	bne.n	8005ddc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005dda:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dea:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df2:	041a      	lsls	r2, r3, #16
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e10:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e18:	061a      	lsls	r2, r3, #24
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e005      	b.n	8005e5e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3f3      	bcc.n	8005e52 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	4000a400 	.word	0x4000a400
 8005e7c:	40006800 	.word	0x40006800
 8005e80:	40006c00 	.word	0x40006c00

08005e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e92:	e15a      	b.n	800614a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2101      	movs	r1, #1
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 814c 	beq.w	8006144 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d005      	beq.n	8005ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d130      	bne.n	8005f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	2203      	movs	r2, #3
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005efa:	2201      	movs	r2, #1
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	f003 0201 	and.w	r2, r3, #1
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d017      	beq.n	8005f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4013      	ands	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d123      	bne.n	8005fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	08da      	lsrs	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3208      	adds	r2, #8
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	220f      	movs	r2, #15
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	08da      	lsrs	r2, r3, #3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3208      	adds	r2, #8
 8005fb0:	6939      	ldr	r1, [r7, #16]
 8005fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0203 	and.w	r2, r3, #3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80a6 	beq.w	8006144 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8006168 <HAL_GPIO_Init+0x2e4>)
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8006168 <HAL_GPIO_Init+0x2e4>)
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	6613      	str	r3, [r2, #96]	@ 0x60
 8006004:	4b58      	ldr	r3, [pc, #352]	@ (8006168 <HAL_GPIO_Init+0x2e4>)
 8006006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006010:	4a56      	ldr	r2, [pc, #344]	@ (800616c <HAL_GPIO_Init+0x2e8>)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	089b      	lsrs	r3, r3, #2
 8006016:	3302      	adds	r3, #2
 8006018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	220f      	movs	r2, #15
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4013      	ands	r3, r2
 8006032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800603a:	d01f      	beq.n	800607c <HAL_GPIO_Init+0x1f8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a4c      	ldr	r2, [pc, #304]	@ (8006170 <HAL_GPIO_Init+0x2ec>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d019      	beq.n	8006078 <HAL_GPIO_Init+0x1f4>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a4b      	ldr	r2, [pc, #300]	@ (8006174 <HAL_GPIO_Init+0x2f0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d013      	beq.n	8006074 <HAL_GPIO_Init+0x1f0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a4a      	ldr	r2, [pc, #296]	@ (8006178 <HAL_GPIO_Init+0x2f4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00d      	beq.n	8006070 <HAL_GPIO_Init+0x1ec>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a49      	ldr	r2, [pc, #292]	@ (800617c <HAL_GPIO_Init+0x2f8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <HAL_GPIO_Init+0x1e8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a48      	ldr	r2, [pc, #288]	@ (8006180 <HAL_GPIO_Init+0x2fc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d101      	bne.n	8006068 <HAL_GPIO_Init+0x1e4>
 8006064:	2305      	movs	r3, #5
 8006066:	e00a      	b.n	800607e <HAL_GPIO_Init+0x1fa>
 8006068:	2306      	movs	r3, #6
 800606a:	e008      	b.n	800607e <HAL_GPIO_Init+0x1fa>
 800606c:	2304      	movs	r3, #4
 800606e:	e006      	b.n	800607e <HAL_GPIO_Init+0x1fa>
 8006070:	2303      	movs	r3, #3
 8006072:	e004      	b.n	800607e <HAL_GPIO_Init+0x1fa>
 8006074:	2302      	movs	r3, #2
 8006076:	e002      	b.n	800607e <HAL_GPIO_Init+0x1fa>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <HAL_GPIO_Init+0x1fa>
 800607c:	2300      	movs	r3, #0
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	f002 0203 	and.w	r2, r2, #3
 8006084:	0092      	lsls	r2, r2, #2
 8006086:	4093      	lsls	r3, r2
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800608e:	4937      	ldr	r1, [pc, #220]	@ (800616c <HAL_GPIO_Init+0x2e8>)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	089b      	lsrs	r3, r3, #2
 8006094:	3302      	adds	r3, #2
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800609c:	4b39      	ldr	r3, [pc, #228]	@ (8006184 <HAL_GPIO_Init+0x300>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	43db      	mvns	r3, r3
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4013      	ands	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80060c0:	4a30      	ldr	r2, [pc, #192]	@ (8006184 <HAL_GPIO_Init+0x300>)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80060c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006184 <HAL_GPIO_Init+0x300>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4013      	ands	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060ea:	4a26      	ldr	r2, [pc, #152]	@ (8006184 <HAL_GPIO_Init+0x300>)
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80060f0:	4b24      	ldr	r3, [pc, #144]	@ (8006184 <HAL_GPIO_Init+0x300>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	43db      	mvns	r3, r3
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4013      	ands	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006114:	4a1b      	ldr	r2, [pc, #108]	@ (8006184 <HAL_GPIO_Init+0x300>)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800611a:	4b1a      	ldr	r3, [pc, #104]	@ (8006184 <HAL_GPIO_Init+0x300>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	43db      	mvns	r3, r3
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800613e:	4a11      	ldr	r2, [pc, #68]	@ (8006184 <HAL_GPIO_Init+0x300>)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	3301      	adds	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	f47f ae9d 	bne.w	8005e94 <HAL_GPIO_Init+0x10>
  }
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	40021000 	.word	0x40021000
 800616c:	40010000 	.word	0x40010000
 8006170:	48000400 	.word	0x48000400
 8006174:	48000800 	.word	0x48000800
 8006178:	48000c00 	.word	0x48000c00
 800617c:	48001000 	.word	0x48001000
 8006180:	48001400 	.word	0x48001400
 8006184:	40010400 	.word	0x40010400

08006188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	887b      	ldrh	r3, [r7, #2]
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061a0:	2301      	movs	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
 80061a4:	e001      	b.n	80061aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	807b      	strh	r3, [r7, #2]
 80061c4:	4613      	mov	r3, r2
 80061c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061c8:	787b      	ldrb	r3, [r7, #1]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061ce:	887a      	ldrh	r2, [r7, #2]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061d4:	e002      	b.n	80061dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80061f2:	4b08      	ldr	r3, [pc, #32]	@ (8006214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d006      	beq.n	800620c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061fe:	4a05      	ldr	r2, [pc, #20]	@ (8006214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	4618      	mov	r0, r3
 8006208:	f7fc fc14 	bl	8002a34 <HAL_GPIO_EXTI_Callback>
  }
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40010400 	.word	0x40010400

08006218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d141      	bne.n	80062aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006226:	4b4b      	ldr	r3, [pc, #300]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800622e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006232:	d131      	bne.n	8006298 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006234:	4b47      	ldr	r3, [pc, #284]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800623a:	4a46      	ldr	r2, [pc, #280]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006244:	4b43      	ldr	r3, [pc, #268]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800624c:	4a41      	ldr	r2, [pc, #260]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800624e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006254:	4b40      	ldr	r3, [pc, #256]	@ (8006358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2232      	movs	r2, #50	@ 0x32
 800625a:	fb02 f303 	mul.w	r3, r2, r3
 800625e:	4a3f      	ldr	r2, [pc, #252]	@ (800635c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	0c9b      	lsrs	r3, r3, #18
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800626a:	e002      	b.n	8006272 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006272:	4b38      	ldr	r3, [pc, #224]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627e:	d102      	bne.n	8006286 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f2      	bne.n	800626c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006286:	4b33      	ldr	r3, [pc, #204]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006292:	d158      	bne.n	8006346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e057      	b.n	8006348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006298:	4b2e      	ldr	r3, [pc, #184]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800629a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800629e:	4a2d      	ldr	r2, [pc, #180]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80062a8:	e04d      	b.n	8006346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b0:	d141      	bne.n	8006336 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062b2:	4b28      	ldr	r3, [pc, #160]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062be:	d131      	bne.n	8006324 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062c0:	4b24      	ldr	r3, [pc, #144]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062c6:	4a23      	ldr	r2, [pc, #140]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062d0:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2232      	movs	r2, #50	@ 0x32
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	4a1c      	ldr	r2, [pc, #112]	@ (800635c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	0c9b      	lsrs	r3, r3, #18
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062f6:	e002      	b.n	80062fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062fe:	4b15      	ldr	r3, [pc, #84]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800630a:	d102      	bne.n	8006312 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f2      	bne.n	80062f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006312:	4b10      	ldr	r3, [pc, #64]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800631a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800631e:	d112      	bne.n	8006346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e011      	b.n	8006348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006324:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800632a:	4a0a      	ldr	r2, [pc, #40]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800632c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006334:	e007      	b.n	8006346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006336:	4b07      	ldr	r3, [pc, #28]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800633e:	4a05      	ldr	r2, [pc, #20]	@ (8006354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006340:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006344:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40007000 	.word	0x40007000
 8006358:	20000330 	.word	0x20000330
 800635c:	431bde83 	.word	0x431bde83

08006360 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006364:	4b05      	ldr	r3, [pc, #20]	@ (800637c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	4a04      	ldr	r2, [pc, #16]	@ (800637c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800636a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800636e:	6093      	str	r3, [r2, #8]
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40007000 	.word	0x40007000

08006380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e2fe      	b.n	8006990 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d075      	beq.n	800648a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800639e:	4b97      	ldr	r3, [pc, #604]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 030c 	and.w	r3, r3, #12
 80063a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063a8:	4b94      	ldr	r3, [pc, #592]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b0c      	cmp	r3, #12
 80063b6:	d102      	bne.n	80063be <HAL_RCC_OscConfig+0x3e>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d002      	beq.n	80063c4 <HAL_RCC_OscConfig+0x44>
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d10b      	bne.n	80063dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c4:	4b8d      	ldr	r3, [pc, #564]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d05b      	beq.n	8006488 <HAL_RCC_OscConfig+0x108>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d157      	bne.n	8006488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e2d9      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e4:	d106      	bne.n	80063f4 <HAL_RCC_OscConfig+0x74>
 80063e6:	4b85      	ldr	r3, [pc, #532]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a84      	ldr	r2, [pc, #528]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e01d      	b.n	8006430 <HAL_RCC_OscConfig+0xb0>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063fc:	d10c      	bne.n	8006418 <HAL_RCC_OscConfig+0x98>
 80063fe:	4b7f      	ldr	r3, [pc, #508]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a7e      	ldr	r2, [pc, #504]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4b7c      	ldr	r3, [pc, #496]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a7b      	ldr	r2, [pc, #492]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e00b      	b.n	8006430 <HAL_RCC_OscConfig+0xb0>
 8006418:	4b78      	ldr	r3, [pc, #480]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a77      	ldr	r2, [pc, #476]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800641e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	4b75      	ldr	r3, [pc, #468]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a74      	ldr	r2, [pc, #464]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800642a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800642e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d013      	beq.n	8006460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fd f9ea 	bl	8003810 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006440:	f7fd f9e6 	bl	8003810 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	@ 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e29e      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006452:	4b6a      	ldr	r3, [pc, #424]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0f0      	beq.n	8006440 <HAL_RCC_OscConfig+0xc0>
 800645e:	e014      	b.n	800648a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006460:	f7fd f9d6 	bl	8003810 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006468:	f7fd f9d2 	bl	8003810 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b64      	cmp	r3, #100	@ 0x64
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e28a      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800647a:	4b60      	ldr	r3, [pc, #384]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1f0      	bne.n	8006468 <HAL_RCC_OscConfig+0xe8>
 8006486:	e000      	b.n	800648a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d075      	beq.n	8006582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006496:	4b59      	ldr	r3, [pc, #356]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064a0:	4b56      	ldr	r3, [pc, #344]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b0c      	cmp	r3, #12
 80064ae:	d102      	bne.n	80064b6 <HAL_RCC_OscConfig+0x136>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d002      	beq.n	80064bc <HAL_RCC_OscConfig+0x13c>
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d11f      	bne.n	80064fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064bc:	4b4f      	ldr	r3, [pc, #316]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_RCC_OscConfig+0x154>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e25d      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d4:	4b49      	ldr	r3, [pc, #292]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	061b      	lsls	r3, r3, #24
 80064e2:	4946      	ldr	r1, [pc, #280]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80064e8:	4b45      	ldr	r3, [pc, #276]	@ (8006600 <HAL_RCC_OscConfig+0x280>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fd f943 	bl	8003778 <HAL_InitTick>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d043      	beq.n	8006580 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e249      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d023      	beq.n	800654c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006504:	4b3d      	ldr	r3, [pc, #244]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3c      	ldr	r2, [pc, #240]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800650a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800650e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fd f97e 	bl	8003810 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006518:	f7fd f97a 	bl	8003810 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e232      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800652a:	4b34      	ldr	r3, [pc, #208]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006536:	4b31      	ldr	r3, [pc, #196]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	061b      	lsls	r3, r3, #24
 8006544:	492d      	ldr	r1, [pc, #180]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006546:	4313      	orrs	r3, r2
 8006548:	604b      	str	r3, [r1, #4]
 800654a:	e01a      	b.n	8006582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800654c:	4b2b      	ldr	r3, [pc, #172]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a2a      	ldr	r2, [pc, #168]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006558:	f7fd f95a 	bl	8003810 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006560:	f7fd f956 	bl	8003810 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e20e      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006572:	4b22      	ldr	r3, [pc, #136]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x1e0>
 800657e:	e000      	b.n	8006582 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d041      	beq.n	8006612 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01c      	beq.n	80065d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006596:	4b19      	ldr	r3, [pc, #100]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 8006598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800659c:	4a17      	ldr	r2, [pc, #92]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a6:	f7fd f933 	bl	8003810 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065ae:	f7fd f92f 	bl	8003810 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e1e7      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065c0:	4b0e      	ldr	r3, [pc, #56]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80065c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0ef      	beq.n	80065ae <HAL_RCC_OscConfig+0x22e>
 80065ce:	e020      	b.n	8006612 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d0:	4b0a      	ldr	r3, [pc, #40]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80065d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065d6:	4a09      	ldr	r2, [pc, #36]	@ (80065fc <HAL_RCC_OscConfig+0x27c>)
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e0:	f7fd f916 	bl	8003810 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065e6:	e00d      	b.n	8006604 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065e8:	f7fd f912 	bl	8003810 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d906      	bls.n	8006604 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e1ca      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	20000334 	.word	0x20000334
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006604:	4b8c      	ldr	r3, [pc, #560]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1ea      	bne.n	80065e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80a6 	beq.w	800676c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006620:	2300      	movs	r3, #0
 8006622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006624:	4b84      	ldr	r3, [pc, #528]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_RCC_OscConfig+0x2b4>
 8006630:	2301      	movs	r3, #1
 8006632:	e000      	b.n	8006636 <HAL_RCC_OscConfig+0x2b6>
 8006634:	2300      	movs	r3, #0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800663a:	4b7f      	ldr	r3, [pc, #508]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 800663c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663e:	4a7e      	ldr	r2, [pc, #504]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006644:	6593      	str	r3, [r2, #88]	@ 0x58
 8006646:	4b7c      	ldr	r3, [pc, #496]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006652:	2301      	movs	r3, #1
 8006654:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006656:	4b79      	ldr	r3, [pc, #484]	@ (800683c <HAL_RCC_OscConfig+0x4bc>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665e:	2b00      	cmp	r3, #0
 8006660:	d118      	bne.n	8006694 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006662:	4b76      	ldr	r3, [pc, #472]	@ (800683c <HAL_RCC_OscConfig+0x4bc>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a75      	ldr	r2, [pc, #468]	@ (800683c <HAL_RCC_OscConfig+0x4bc>)
 8006668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800666c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800666e:	f7fd f8cf 	bl	8003810 <HAL_GetTick>
 8006672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006674:	e008      	b.n	8006688 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006676:	f7fd f8cb 	bl	8003810 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e183      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006688:	4b6c      	ldr	r3, [pc, #432]	@ (800683c <HAL_RCC_OscConfig+0x4bc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d108      	bne.n	80066ae <HAL_RCC_OscConfig+0x32e>
 800669c:	4b66      	ldr	r3, [pc, #408]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a2:	4a65      	ldr	r2, [pc, #404]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066ac:	e024      	b.n	80066f8 <HAL_RCC_OscConfig+0x378>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d110      	bne.n	80066d8 <HAL_RCC_OscConfig+0x358>
 80066b6:	4b60      	ldr	r3, [pc, #384]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066bc:	4a5e      	ldr	r2, [pc, #376]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066be:	f043 0304 	orr.w	r3, r3, #4
 80066c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066d6:	e00f      	b.n	80066f8 <HAL_RCC_OscConfig+0x378>
 80066d8:	4b57      	ldr	r3, [pc, #348]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066de:	4a56      	ldr	r2, [pc, #344]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066e0:	f023 0301 	bic.w	r3, r3, #1
 80066e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066e8:	4b53      	ldr	r3, [pc, #332]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ee:	4a52      	ldr	r2, [pc, #328]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80066f0:	f023 0304 	bic.w	r3, r3, #4
 80066f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d016      	beq.n	800672e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006700:	f7fd f886 	bl	8003810 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006706:	e00a      	b.n	800671e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006708:	f7fd f882 	bl	8003810 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e138      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800671e:	4b46      	ldr	r3, [pc, #280]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0ed      	beq.n	8006708 <HAL_RCC_OscConfig+0x388>
 800672c:	e015      	b.n	800675a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672e:	f7fd f86f 	bl	8003810 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006734:	e00a      	b.n	800674c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f7fd f86b 	bl	8003810 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006744:	4293      	cmp	r3, r2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e121      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800674c:	4b3a      	ldr	r3, [pc, #232]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1ed      	bne.n	8006736 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800675a:	7ffb      	ldrb	r3, [r7, #31]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d105      	bne.n	800676c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006760:	4b35      	ldr	r3, [pc, #212]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006764:	4a34      	ldr	r2, [pc, #208]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800676a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d03c      	beq.n	80067f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01c      	beq.n	80067ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006780:	4b2d      	ldr	r3, [pc, #180]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006786:	4a2c      	ldr	r2, [pc, #176]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006788:	f043 0301 	orr.w	r3, r3, #1
 800678c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006790:	f7fd f83e 	bl	8003810 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006798:	f7fd f83a 	bl	8003810 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e0f2      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067aa:	4b23      	ldr	r3, [pc, #140]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80067ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0ef      	beq.n	8006798 <HAL_RCC_OscConfig+0x418>
 80067b8:	e01b      	b.n	80067f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80067bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ca:	f7fd f821 	bl	8003810 <HAL_GetTick>
 80067ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067d0:	e008      	b.n	80067e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067d2:	f7fd f81d 	bl	8003810 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e0d5      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067e4:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80067e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1ef      	bne.n	80067d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 80c9 	beq.w	800698e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 030c 	and.w	r3, r3, #12
 8006804:	2b0c      	cmp	r3, #12
 8006806:	f000 8083 	beq.w	8006910 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d15e      	bne.n	80068d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a08      	ldr	r2, [pc, #32]	@ (8006838 <HAL_RCC_OscConfig+0x4b8>)
 8006818:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800681c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681e:	f7fc fff7 	bl	8003810 <HAL_GetTick>
 8006822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006824:	e00c      	b.n	8006840 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006826:	f7fc fff3 	bl	8003810 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d905      	bls.n	8006840 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e0ab      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
 8006838:	40021000 	.word	0x40021000
 800683c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006840:	4b55      	ldr	r3, [pc, #340]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1ec      	bne.n	8006826 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800684c:	4b52      	ldr	r3, [pc, #328]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	4b52      	ldr	r3, [pc, #328]	@ (800699c <HAL_RCC_OscConfig+0x61c>)
 8006852:	4013      	ands	r3, r2
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6a11      	ldr	r1, [r2, #32]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800685c:	3a01      	subs	r2, #1
 800685e:	0112      	lsls	r2, r2, #4
 8006860:	4311      	orrs	r1, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006866:	0212      	lsls	r2, r2, #8
 8006868:	4311      	orrs	r1, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800686e:	0852      	lsrs	r2, r2, #1
 8006870:	3a01      	subs	r2, #1
 8006872:	0552      	lsls	r2, r2, #21
 8006874:	4311      	orrs	r1, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800687a:	0852      	lsrs	r2, r2, #1
 800687c:	3a01      	subs	r2, #1
 800687e:	0652      	lsls	r2, r2, #25
 8006880:	4311      	orrs	r1, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006886:	06d2      	lsls	r2, r2, #27
 8006888:	430a      	orrs	r2, r1
 800688a:	4943      	ldr	r1, [pc, #268]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 800688c:	4313      	orrs	r3, r2
 800688e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006890:	4b41      	ldr	r3, [pc, #260]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a40      	ldr	r2, [pc, #256]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 8006896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800689a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800689c:	4b3e      	ldr	r3, [pc, #248]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	4a3d      	ldr	r2, [pc, #244]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 80068a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a8:	f7fc ffb2 	bl	8003810 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b0:	f7fc ffae 	bl	8003810 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e066      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068c2:	4b35      	ldr	r3, [pc, #212]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0f0      	beq.n	80068b0 <HAL_RCC_OscConfig+0x530>
 80068ce:	e05e      	b.n	800698e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d0:	4b31      	ldr	r3, [pc, #196]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a30      	ldr	r2, [pc, #192]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 80068d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fc ff98 	bl	8003810 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e4:	f7fc ff94 	bl	8003810 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e04c      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068f6:	4b28      	ldr	r3, [pc, #160]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f0      	bne.n	80068e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006902:	4b25      	ldr	r3, [pc, #148]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	4924      	ldr	r1, [pc, #144]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 8006908:	4b25      	ldr	r3, [pc, #148]	@ (80069a0 <HAL_RCC_OscConfig+0x620>)
 800690a:	4013      	ands	r3, r2
 800690c:	60cb      	str	r3, [r1, #12]
 800690e:	e03e      	b.n	800698e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e039      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800691c:	4b1e      	ldr	r3, [pc, #120]	@ (8006998 <HAL_RCC_OscConfig+0x618>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f003 0203 	and.w	r2, r3, #3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	429a      	cmp	r2, r3
 800692e:	d12c      	bne.n	800698a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	3b01      	subs	r3, #1
 800693c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800693e:	429a      	cmp	r2, r3
 8006940:	d123      	bne.n	800698a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800694e:	429a      	cmp	r2, r3
 8006950:	d11b      	bne.n	800698a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800695e:	429a      	cmp	r2, r3
 8006960:	d113      	bne.n	800698a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	3b01      	subs	r3, #1
 8006970:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006972:	429a      	cmp	r2, r3
 8006974:	d109      	bne.n	800698a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006980:	085b      	lsrs	r3, r3, #1
 8006982:	3b01      	subs	r3, #1
 8006984:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006986:	429a      	cmp	r2, r3
 8006988:	d001      	beq.n	800698e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40021000 	.word	0x40021000
 800699c:	019f800c 	.word	0x019f800c
 80069a0:	feeefffc 	.word	0xfeeefffc

080069a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e11e      	b.n	8006bfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069bc:	4b91      	ldr	r3, [pc, #580]	@ (8006c04 <HAL_RCC_ClockConfig+0x260>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d910      	bls.n	80069ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ca:	4b8e      	ldr	r3, [pc, #568]	@ (8006c04 <HAL_RCC_ClockConfig+0x260>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f023 020f 	bic.w	r2, r3, #15
 80069d2:	498c      	ldr	r1, [pc, #560]	@ (8006c04 <HAL_RCC_ClockConfig+0x260>)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069da:	4b8a      	ldr	r3, [pc, #552]	@ (8006c04 <HAL_RCC_ClockConfig+0x260>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d001      	beq.n	80069ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e106      	b.n	8006bfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d073      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d129      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a00:	4b81      	ldr	r3, [pc, #516]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0f4      	b.n	8006bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006a10:	f000 f99c 	bl	8006d4c <RCC_GetSysClockFreqFromPLLSource>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4a7c      	ldr	r2, [pc, #496]	@ (8006c0c <HAL_RCC_ClockConfig+0x268>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d93f      	bls.n	8006a9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d033      	beq.n	8006a9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d12f      	bne.n	8006a9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a3e:	4b72      	ldr	r3, [pc, #456]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a46:	4a70      	ldr	r2, [pc, #448]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a4e:	2380      	movs	r3, #128	@ 0x80
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	e024      	b.n	8006a9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d107      	bne.n	8006a6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d109      	bne.n	8006a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0c6      	b.n	8006bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a6c:	4b66      	ldr	r3, [pc, #408]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e0be      	b.n	8006bfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a7c:	f000 f8ce 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 8006a80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4a61      	ldr	r2, [pc, #388]	@ (8006c0c <HAL_RCC_ClockConfig+0x268>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d909      	bls.n	8006a9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a92:	4a5d      	ldr	r2, [pc, #372]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a9a:	2380      	movs	r3, #128	@ 0x80
 8006a9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f023 0203 	bic.w	r2, r3, #3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	4957      	ldr	r1, [pc, #348]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab0:	f7fc feae 	bl	8003810 <HAL_GetTick>
 8006ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ab6:	e00a      	b.n	8006ace <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ab8:	f7fc feaa 	bl	8003810 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e095      	b.n	8006bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ace:	4b4e      	ldr	r3, [pc, #312]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 020c 	and.w	r2, r3, #12
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d1eb      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d023      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af8:	4b43      	ldr	r3, [pc, #268]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4a42      	ldr	r2, [pc, #264]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006afe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006b10:	4b3d      	ldr	r3, [pc, #244]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b18:	4a3b      	ldr	r2, [pc, #236]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006b1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b20:	4b39      	ldr	r3, [pc, #228]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4936      	ldr	r1, [pc, #216]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b80      	cmp	r3, #128	@ 0x80
 8006b38:	d105      	bne.n	8006b46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b3a:	4b33      	ldr	r3, [pc, #204]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4a32      	ldr	r2, [pc, #200]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006b40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b46:	4b2f      	ldr	r3, [pc, #188]	@ (8006c04 <HAL_RCC_ClockConfig+0x260>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d21d      	bcs.n	8006b90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b54:	4b2b      	ldr	r3, [pc, #172]	@ (8006c04 <HAL_RCC_ClockConfig+0x260>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f023 020f 	bic.w	r2, r3, #15
 8006b5c:	4929      	ldr	r1, [pc, #164]	@ (8006c04 <HAL_RCC_ClockConfig+0x260>)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b64:	f7fc fe54 	bl	8003810 <HAL_GetTick>
 8006b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6a:	e00a      	b.n	8006b82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b6c:	f7fc fe50 	bl	8003810 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e03b      	b.n	8006bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b82:	4b20      	ldr	r3, [pc, #128]	@ (8006c04 <HAL_RCC_ClockConfig+0x260>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d1ed      	bne.n	8006b6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4917      	ldr	r1, [pc, #92]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bba:	4b13      	ldr	r3, [pc, #76]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	490f      	ldr	r1, [pc, #60]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bce:	f000 f825 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c08 <HAL_RCC_ClockConfig+0x264>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	490c      	ldr	r1, [pc, #48]	@ (8006c10 <HAL_RCC_ClockConfig+0x26c>)
 8006be0:	5ccb      	ldrb	r3, [r1, r3]
 8006be2:	f003 031f 	and.w	r3, r3, #31
 8006be6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bea:	4a0a      	ldr	r2, [pc, #40]	@ (8006c14 <HAL_RCC_ClockConfig+0x270>)
 8006bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006bee:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <HAL_RCC_ClockConfig+0x274>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fc fdc0 	bl	8003778 <HAL_InitTick>
 8006bf8:	4603      	mov	r3, r0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40022000 	.word	0x40022000
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	04c4b400 	.word	0x04c4b400
 8006c10:	0800ba5c 	.word	0x0800ba5c
 8006c14:	20000330 	.word	0x20000330
 8006c18:	20000334 	.word	0x20000334

08006c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006c22:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e047      	b.n	8006cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006c34:	4b27      	ldr	r3, [pc, #156]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d102      	bne.n	8006c46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c40:	4b25      	ldr	r3, [pc, #148]	@ (8006cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	e03e      	b.n	8006cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006c46:	4b23      	ldr	r3, [pc, #140]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 030c 	and.w	r3, r3, #12
 8006c4e:	2b0c      	cmp	r3, #12
 8006c50:	d136      	bne.n	8006cc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c52:	4b20      	ldr	r3, [pc, #128]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	091b      	lsrs	r3, r3, #4
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	3301      	adds	r3, #1
 8006c68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d10c      	bne.n	8006c8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c70:	4a19      	ldr	r2, [pc, #100]	@ (8006cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	4a16      	ldr	r2, [pc, #88]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c7a:	68d2      	ldr	r2, [r2, #12]
 8006c7c:	0a12      	lsrs	r2, r2, #8
 8006c7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c82:	fb02 f303 	mul.w	r3, r2, r3
 8006c86:	617b      	str	r3, [r7, #20]
      break;
 8006c88:	e00c      	b.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c8a:	4a13      	ldr	r2, [pc, #76]	@ (8006cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c92:	4a10      	ldr	r2, [pc, #64]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c94:	68d2      	ldr	r2, [r2, #12]
 8006c96:	0a12      	lsrs	r2, r2, #8
 8006c98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]
      break;
 8006ca2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	0e5b      	lsrs	r3, r3, #25
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	3301      	adds	r3, #1
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	e001      	b.n	8006cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006cc4:	693b      	ldr	r3, [r7, #16]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	00f42400 	.word	0x00f42400

08006cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ce0:	4b03      	ldr	r3, [pc, #12]	@ (8006cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000330 	.word	0x20000330

08006cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006cf8:	f7ff fff0 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	4b06      	ldr	r3, [pc, #24]	@ (8006d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	4904      	ldr	r1, [pc, #16]	@ (8006d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d0a:	5ccb      	ldrb	r3, [r1, r3]
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	0800ba6c 	.word	0x0800ba6c

08006d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d24:	f7ff ffda 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	4b06      	ldr	r3, [pc, #24]	@ (8006d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	0adb      	lsrs	r3, r3, #11
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	4904      	ldr	r1, [pc, #16]	@ (8006d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d36:	5ccb      	ldrb	r3, [r1, r3]
 8006d38:	f003 031f 	and.w	r3, r3, #31
 8006d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40021000 	.word	0x40021000
 8006d48:	0800ba6c 	.word	0x0800ba6c

08006d4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d52:	4b1e      	ldr	r3, [pc, #120]	@ (8006dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d10c      	bne.n	8006d8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d70:	4a17      	ldr	r2, [pc, #92]	@ (8006dd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d78:	4a14      	ldr	r2, [pc, #80]	@ (8006dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d7a:	68d2      	ldr	r2, [r2, #12]
 8006d7c:	0a12      	lsrs	r2, r2, #8
 8006d7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d82:	fb02 f303 	mul.w	r3, r2, r3
 8006d86:	617b      	str	r3, [r7, #20]
    break;
 8006d88:	e00c      	b.n	8006da4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d8a:	4a11      	ldr	r2, [pc, #68]	@ (8006dd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d92:	4a0e      	ldr	r2, [pc, #56]	@ (8006dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d94:	68d2      	ldr	r2, [r2, #12]
 8006d96:	0a12      	lsrs	r2, r2, #8
 8006d98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d9c:	fb02 f303 	mul.w	r3, r2, r3
 8006da0:	617b      	str	r3, [r7, #20]
    break;
 8006da2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006da4:	4b09      	ldr	r3, [pc, #36]	@ (8006dcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	0e5b      	lsrs	r3, r3, #25
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	3301      	adds	r3, #1
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006dbe:	687b      	ldr	r3, [r7, #4]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	00f42400 	.word	0x00f42400

08006dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ddc:	2300      	movs	r3, #0
 8006dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006de0:	2300      	movs	r3, #0
 8006de2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8098 	beq.w	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006df2:	2300      	movs	r3, #0
 8006df4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006df6:	4b43      	ldr	r3, [pc, #268]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10d      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e02:	4b40      	ldr	r3, [pc, #256]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e06:	4a3f      	ldr	r2, [pc, #252]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a39      	ldr	r2, [pc, #228]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e2a:	f7fc fcf1 	bl	8003810 <HAL_GetTick>
 8006e2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e30:	e009      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e32:	f7fc fced 	bl	8003810 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d902      	bls.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	74fb      	strb	r3, [r7, #19]
        break;
 8006e44:	e005      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e46:	4b30      	ldr	r3, [pc, #192]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0ef      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006e52:	7cfb      	ldrb	r3, [r7, #19]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d159      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e58:	4b2a      	ldr	r3, [pc, #168]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01e      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d019      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e74:	4b23      	ldr	r3, [pc, #140]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e80:	4b20      	ldr	r3, [pc, #128]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e86:	4a1f      	ldr	r2, [pc, #124]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e90:	4b1c      	ldr	r3, [pc, #112]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e96:	4a1b      	ldr	r2, [pc, #108]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ea0:	4a18      	ldr	r2, [pc, #96]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d016      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7fc fcad 	bl	8003810 <HAL_GetTick>
 8006eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eb8:	e00b      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eba:	f7fc fca9 	bl	8003810 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d902      	bls.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	74fb      	strb	r3, [r7, #19]
            break;
 8006ed0:	e006      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0ec      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ee0:	7cfb      	ldrb	r3, [r7, #19]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10b      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ee6:	4b07      	ldr	r3, [pc, #28]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	4903      	ldr	r1, [pc, #12]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006efc:	e008      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006efe:	7cfb      	ldrb	r3, [r7, #19]
 8006f00:	74bb      	strb	r3, [r7, #18]
 8006f02:	e005      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006f04:	40021000 	.word	0x40021000
 8006f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0c:	7cfb      	ldrb	r3, [r7, #19]
 8006f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f10:	7c7b      	ldrb	r3, [r7, #17]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d105      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f16:	4ba7      	ldr	r3, [pc, #668]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1a:	4aa6      	ldr	r2, [pc, #664]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f2e:	4ba1      	ldr	r3, [pc, #644]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f34:	f023 0203 	bic.w	r2, r3, #3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	499d      	ldr	r1, [pc, #628]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f50:	4b98      	ldr	r3, [pc, #608]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f56:	f023 020c 	bic.w	r2, r3, #12
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	4995      	ldr	r1, [pc, #596]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f72:	4b90      	ldr	r3, [pc, #576]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	498c      	ldr	r1, [pc, #560]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f94:	4b87      	ldr	r3, [pc, #540]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	4984      	ldr	r1, [pc, #528]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	497b      	ldr	r1, [pc, #492]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0320 	and.w	r3, r3, #32
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fd8:	4b76      	ldr	r3, [pc, #472]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	4973      	ldr	r1, [pc, #460]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ffa:	4b6e      	ldr	r3, [pc, #440]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007000:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	496a      	ldr	r1, [pc, #424]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800701c:	4b65      	ldr	r3, [pc, #404]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007022:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	4962      	ldr	r1, [pc, #392]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800703e:	4b5d      	ldr	r3, [pc, #372]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007044:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704c:	4959      	ldr	r1, [pc, #356]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007060:	4b54      	ldr	r3, [pc, #336]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007066:	f023 0203 	bic.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	4951      	ldr	r1, [pc, #324]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007082:	4b4c      	ldr	r3, [pc, #304]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007088:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007090:	4948      	ldr	r1, [pc, #288]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d015      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070a4:	4b43      	ldr	r3, [pc, #268]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b2:	4940      	ldr	r1, [pc, #256]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070c2:	d105      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070c4:	4b3b      	ldr	r3, [pc, #236]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	4a3a      	ldr	r2, [pc, #232]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d015      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070dc:	4b35      	ldr	r3, [pc, #212]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ea:	4932      	ldr	r1, [pc, #200]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070fa:	d105      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070fc:	4b2d      	ldr	r3, [pc, #180]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4a2c      	ldr	r2, [pc, #176]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007106:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d015      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007114:	4b27      	ldr	r3, [pc, #156]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007122:	4924      	ldr	r1, [pc, #144]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007124:	4313      	orrs	r3, r2
 8007126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007132:	d105      	bne.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007134:	4b1f      	ldr	r3, [pc, #124]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4a1e      	ldr	r2, [pc, #120]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800713a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800713e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d015      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800714c:	4b19      	ldr	r3, [pc, #100]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800714e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007152:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715a:	4916      	ldr	r1, [pc, #88]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800716a:	d105      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800716c:	4b11      	ldr	r3, [pc, #68]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4a10      	ldr	r2, [pc, #64]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007176:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d019      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007184:	4b0b      	ldr	r3, [pc, #44]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007192:	4908      	ldr	r1, [pc, #32]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071a2:	d109      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071a4:	4b03      	ldr	r3, [pc, #12]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	4a02      	ldr	r2, [pc, #8]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ae:	60d3      	str	r3, [r2, #12]
 80071b0:	e002      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80071b2:	bf00      	nop
 80071b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d015      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80071c4:	4b29      	ldr	r3, [pc, #164]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d2:	4926      	ldr	r1, [pc, #152]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071e2:	d105      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80071e4:	4b21      	ldr	r3, [pc, #132]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	4a20      	ldr	r2, [pc, #128]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d015      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80071fc:	4b1b      	ldr	r3, [pc, #108]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007202:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800720a:	4918      	ldr	r1, [pc, #96]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800720c:	4313      	orrs	r3, r2
 800720e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800721a:	d105      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800721c:	4b13      	ldr	r3, [pc, #76]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	4a12      	ldr	r2, [pc, #72]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007226:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d015      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007234:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800723a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007242:	490a      	ldr	r1, [pc, #40]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800724e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007252:	d105      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007254:	4b05      	ldr	r3, [pc, #20]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	4a04      	ldr	r2, [pc, #16]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800725a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800725e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007260:	7cbb      	ldrb	r3, [r7, #18]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40021000 	.word	0x40021000

08007270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e09d      	b.n	80073be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d108      	bne.n	800729c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007292:	d009      	beq.n	80072a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	61da      	str	r2, [r3, #28]
 800729a:	e005      	b.n	80072a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d106      	bne.n	80072c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fb fc28 	bl	8002b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072e8:	d902      	bls.n	80072f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e002      	b.n	80072f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80072fe:	d007      	beq.n	8007310 <HAL_SPI_Init+0xa0>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007308:	d002      	beq.n	8007310 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007352:	ea42 0103 	orr.w	r1, r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	f003 0204 	and.w	r2, r3, #4
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800738c:	ea42 0103 	orr.w	r1, r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69da      	ldr	r2, [r3, #28]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b088      	sub	sp, #32
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073d6:	f7fc fa1b 	bl	8003810 <HAL_GetTick>
 80073da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d001      	beq.n	80073f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
 80073ee:	e15c      	b.n	80076aa <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_SPI_Transmit+0x36>
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e154      	b.n	80076aa <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_SPI_Transmit+0x48>
 800740a:	2302      	movs	r3, #2
 800740c:	e14d      	b.n	80076aa <HAL_SPI_Transmit+0x2e4>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2203      	movs	r2, #3
 800741a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007460:	d10f      	bne.n	8007482 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007480:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800748c:	2b40      	cmp	r3, #64	@ 0x40
 800748e:	d007      	beq.n	80074a0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800749e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074a8:	d952      	bls.n	8007550 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_SPI_Transmit+0xf2>
 80074b2:	8b7b      	ldrh	r3, [r7, #26]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d145      	bne.n	8007544 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074bc:	881a      	ldrh	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c8:	1c9a      	adds	r2, r3, #2
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074dc:	e032      	b.n	8007544 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d112      	bne.n	8007512 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f0:	881a      	ldrh	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007510:	e018      	b.n	8007544 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007512:	f7fc f97d 	bl	8003810 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d803      	bhi.n	800752a <HAL_SPI_Transmit+0x164>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d102      	bne.n	8007530 <HAL_SPI_Transmit+0x16a>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e0b2      	b.n	80076aa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1c7      	bne.n	80074de <HAL_SPI_Transmit+0x118>
 800754e:	e083      	b.n	8007658 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <HAL_SPI_Transmit+0x198>
 8007558:	8b7b      	ldrh	r3, [r7, #26]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d177      	bne.n	800764e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d912      	bls.n	800758e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	881a      	ldrh	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007578:	1c9a      	adds	r2, r3, #2
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b02      	subs	r3, #2
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800758c:	e05f      	b.n	800764e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	7812      	ldrb	r2, [r2, #0]
 800759a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80075b4:	e04b      	b.n	800764e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d12b      	bne.n	800761c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d912      	bls.n	80075f4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d2:	881a      	ldrh	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075de:	1c9a      	adds	r2, r3, #2
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b02      	subs	r3, #2
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075f2:	e02c      	b.n	800764e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	330c      	adds	r3, #12
 80075fe:	7812      	ldrb	r2, [r2, #0]
 8007600:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800761a:	e018      	b.n	800764e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800761c:	f7fc f8f8 	bl	8003810 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d803      	bhi.n	8007634 <HAL_SPI_Transmit+0x26e>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d102      	bne.n	800763a <HAL_SPI_Transmit+0x274>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e02d      	b.n	80076aa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1ae      	bne.n	80075b6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fb65 	bl	8007d2c <SPI_EndRxTxTransaction>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10a      	bne.n	800768c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b08a      	sub	sp, #40	@ 0x28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076c0:	2301      	movs	r3, #1
 80076c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076c4:	f7fc f8a4 	bl	8003810 <HAL_GetTick>
 80076c8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80076d0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80076d8:	887b      	ldrh	r3, [r7, #2]
 80076da:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80076dc:	887b      	ldrh	r3, [r7, #2]
 80076de:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076e0:	7ffb      	ldrb	r3, [r7, #31]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d00c      	beq.n	8007700 <HAL_SPI_TransmitReceive+0x4e>
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076ec:	d106      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x4a>
 80076f6:	7ffb      	ldrb	r3, [r7, #31]
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d001      	beq.n	8007700 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80076fc:	2302      	movs	r3, #2
 80076fe:	e1f3      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <HAL_SPI_TransmitReceive+0x60>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <HAL_SPI_TransmitReceive+0x60>
 800770c:	887b      	ldrh	r3, [r7, #2]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e1e8      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x72>
 8007720:	2302      	movs	r3, #2
 8007722:	e1e1      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x436>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b04      	cmp	r3, #4
 8007736:	d003      	beq.n	8007740 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2205      	movs	r2, #5
 800773c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	887a      	ldrh	r2, [r7, #2]
 8007750:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	887a      	ldrh	r2, [r7, #2]
 8007758:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	887a      	ldrh	r2, [r7, #2]
 8007766:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	887a      	ldrh	r2, [r7, #2]
 800776c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007782:	d802      	bhi.n	800778a <HAL_SPI_TransmitReceive+0xd8>
 8007784:	8abb      	ldrh	r3, [r7, #20]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d908      	bls.n	800779c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	e007      	b.n	80077ac <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b6:	2b40      	cmp	r3, #64	@ 0x40
 80077b8:	d007      	beq.n	80077ca <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077d2:	f240 8083 	bls.w	80078dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_SPI_TransmitReceive+0x132>
 80077de:	8afb      	ldrh	r3, [r7, #22]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d16f      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e8:	881a      	ldrh	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f4:	1c9a      	adds	r2, r3, #2
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007808:	e05c      	b.n	80078c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b02      	cmp	r3, #2
 8007816:	d11b      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x19e>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d016      	beq.n	8007850 <HAL_SPI_TransmitReceive+0x19e>
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	2b01      	cmp	r3, #1
 8007826:	d113      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782c:	881a      	ldrh	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007838:	1c9a      	adds	r2, r3, #2
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b01      	cmp	r3, #1
 800785c:	d11c      	bne.n	8007898 <HAL_SPI_TransmitReceive+0x1e6>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d016      	beq.n	8007898 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007874:	b292      	uxth	r2, r2
 8007876:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787c:	1c9a      	adds	r2, r3, #2
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007894:	2301      	movs	r3, #1
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007898:	f7fb ffba 	bl	8003810 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d80d      	bhi.n	80078c4 <HAL_SPI_TransmitReceive+0x212>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ae:	d009      	beq.n	80078c4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e111      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d19d      	bne.n	800780a <HAL_SPI_TransmitReceive+0x158>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d197      	bne.n	800780a <HAL_SPI_TransmitReceive+0x158>
 80078da:	e0e5      	b.n	8007aa8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x23a>
 80078e4:	8afb      	ldrh	r3, [r7, #22]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	f040 80d1 	bne.w	8007a8e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d912      	bls.n	800791c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fa:	881a      	ldrh	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007906:	1c9a      	adds	r2, r3, #2
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007910:	b29b      	uxth	r3, r3
 8007912:	3b02      	subs	r3, #2
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800791a:	e0b8      	b.n	8007a8e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	7812      	ldrb	r2, [r2, #0]
 8007928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007942:	e0a4      	b.n	8007a8e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b02      	cmp	r3, #2
 8007950:	d134      	bne.n	80079bc <HAL_SPI_TransmitReceive+0x30a>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007956:	b29b      	uxth	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02f      	beq.n	80079bc <HAL_SPI_TransmitReceive+0x30a>
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	2b01      	cmp	r3, #1
 8007960:	d12c      	bne.n	80079bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d912      	bls.n	8007992 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007970:	881a      	ldrh	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797c:	1c9a      	adds	r2, r3, #2
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b02      	subs	r3, #2
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007990:	e012      	b.n	80079b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	330c      	adds	r3, #12
 800799c:	7812      	ldrb	r2, [r2, #0]
 800799e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d148      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x3aa>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d042      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d923      	bls.n	8007a2a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	b292      	uxth	r2, r2
 80079ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f4:	1c9a      	adds	r2, r3, #2
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b02      	subs	r3, #2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d81f      	bhi.n	8007a58 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a26:	605a      	str	r2, [r3, #4]
 8007a28:	e016      	b.n	8007a58 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f103 020c 	add.w	r2, r3, #12
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a36:	7812      	ldrb	r2, [r2, #0]
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a5c:	f7fb fed8 	bl	8003810 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d803      	bhi.n	8007a74 <HAL_SPI_TransmitReceive+0x3c2>
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d102      	bne.n	8007a7a <HAL_SPI_TransmitReceive+0x3c8>
 8007a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e02c      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f47f af55 	bne.w	8007944 <HAL_SPI_TransmitReceive+0x292>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f47f af4e 	bne.w	8007944 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aa8:	6a3a      	ldr	r2, [r7, #32]
 8007aaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f93d 	bl	8007d2c <SPI_EndRxTxTransaction>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d008      	beq.n	8007aca <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2220      	movs	r2, #32
 8007abc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e00e      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e000      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3728      	adds	r7, #40	@ 0x28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b00:	f7fb fe86 	bl	8003810 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b10:	f7fb fe7e 	bl	8003810 <HAL_GetTick>
 8007b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b16:	4b39      	ldr	r3, [pc, #228]	@ (8007bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	015b      	lsls	r3, r3, #5
 8007b1c:	0d1b      	lsrs	r3, r3, #20
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	fb02 f303 	mul.w	r3, r2, r3
 8007b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b26:	e054      	b.n	8007bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d050      	beq.n	8007bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b30:	f7fb fe6e 	bl	8003810 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d902      	bls.n	8007b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d13d      	bne.n	8007bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b5e:	d111      	bne.n	8007b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b68:	d004      	beq.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b72:	d107      	bne.n	8007b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b8c:	d10f      	bne.n	8007bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e017      	b.n	8007bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	bf0c      	ite	eq
 8007be2:	2301      	moveq	r3, #1
 8007be4:	2300      	movne	r3, #0
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	461a      	mov	r2, r3
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d19b      	bne.n	8007b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000330 	.word	0x20000330

08007c00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	@ 0x28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c12:	f7fb fdfd 	bl	8003810 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	1a9b      	subs	r3, r3, r2
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	4413      	add	r3, r2
 8007c20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007c22:	f7fb fdf5 	bl	8003810 <HAL_GetTick>
 8007c26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c30:	4b3d      	ldr	r3, [pc, #244]	@ (8007d28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	00da      	lsls	r2, r3, #3
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	0d1b      	lsrs	r3, r3, #20
 8007c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c42:	fb02 f303 	mul.w	r3, r2, r3
 8007c46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c48:	e060      	b.n	8007d0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c50:	d107      	bne.n	8007c62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d050      	beq.n	8007d0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c6a:	f7fb fdd1 	bl	8003810 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d902      	bls.n	8007c80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d13d      	bne.n	8007cfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c98:	d111      	bne.n	8007cbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca2:	d004      	beq.n	8007cae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cac:	d107      	bne.n	8007cbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc6:	d10f      	bne.n	8007ce8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ce6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e010      	b.n	8007d1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	4013      	ands	r3, r2
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d196      	bne.n	8007c4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3728      	adds	r7, #40	@ 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000330 	.word	0x20000330

08007d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff ff5b 	bl	8007c00 <SPI_WaitFifoStateUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d54:	f043 0220 	orr.w	r2, r3, #32
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e027      	b.n	8007db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2200      	movs	r2, #0
 8007d68:	2180      	movs	r1, #128	@ 0x80
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fec0 	bl	8007af0 <SPI_WaitFlagStateUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d7a:	f043 0220 	orr.w	r2, r3, #32
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e014      	b.n	8007db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff ff34 	bl	8007c00 <SPI_WaitFifoStateUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d007      	beq.n	8007dae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007da2:	f043 0220 	orr.w	r2, r3, #32
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e000      	b.n	8007db0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e049      	b.n	8007e5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7fb fa1a 	bl	8003218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f001 f878 	bl	8008eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e049      	b.n	8007f0c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d106      	bne.n	8007e92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f841 	bl	8007f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f001 f821 	bl	8008eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d109      	bne.n	8007f4c <HAL_TIM_PWM_Start+0x24>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	bf14      	ite	ne
 8007f44:	2301      	movne	r3, #1
 8007f46:	2300      	moveq	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	e03c      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x9e>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d109      	bne.n	8007f66 <HAL_TIM_PWM_Start+0x3e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	bf14      	ite	ne
 8007f5e:	2301      	movne	r3, #1
 8007f60:	2300      	moveq	r3, #0
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	e02f      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x9e>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d109      	bne.n	8007f80 <HAL_TIM_PWM_Start+0x58>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	bf14      	ite	ne
 8007f78:	2301      	movne	r3, #1
 8007f7a:	2300      	moveq	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	e022      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x9e>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b0c      	cmp	r3, #12
 8007f84:	d109      	bne.n	8007f9a <HAL_TIM_PWM_Start+0x72>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	bf14      	ite	ne
 8007f92:	2301      	movne	r3, #1
 8007f94:	2300      	moveq	r3, #0
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	e015      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x9e>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b10      	cmp	r3, #16
 8007f9e:	d109      	bne.n	8007fb4 <HAL_TIM_PWM_Start+0x8c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	bf14      	ite	ne
 8007fac:	2301      	movne	r3, #1
 8007fae:	2300      	moveq	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	e008      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x9e>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	bf14      	ite	ne
 8007fc0:	2301      	movne	r3, #1
 8007fc2:	2300      	moveq	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e0a6      	b.n	800811c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d104      	bne.n	8007fde <HAL_TIM_PWM_Start+0xb6>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fdc:	e023      	b.n	8008026 <HAL_TIM_PWM_Start+0xfe>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_PWM_Start+0xc6>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fec:	e01b      	b.n	8008026 <HAL_TIM_PWM_Start+0xfe>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_PWM_Start+0xd6>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ffc:	e013      	b.n	8008026 <HAL_TIM_PWM_Start+0xfe>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b0c      	cmp	r3, #12
 8008002:	d104      	bne.n	800800e <HAL_TIM_PWM_Start+0xe6>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800800c:	e00b      	b.n	8008026 <HAL_TIM_PWM_Start+0xfe>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b10      	cmp	r3, #16
 8008012:	d104      	bne.n	800801e <HAL_TIM_PWM_Start+0xf6>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800801c:	e003      	b.n	8008026 <HAL_TIM_PWM_Start+0xfe>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2201      	movs	r2, #1
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f001 fd00 	bl	8009a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a3a      	ldr	r2, [pc, #232]	@ (8008124 <HAL_TIM_PWM_Start+0x1fc>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d018      	beq.n	8008070 <HAL_TIM_PWM_Start+0x148>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a39      	ldr	r2, [pc, #228]	@ (8008128 <HAL_TIM_PWM_Start+0x200>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d013      	beq.n	8008070 <HAL_TIM_PWM_Start+0x148>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a37      	ldr	r2, [pc, #220]	@ (800812c <HAL_TIM_PWM_Start+0x204>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00e      	beq.n	8008070 <HAL_TIM_PWM_Start+0x148>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a36      	ldr	r2, [pc, #216]	@ (8008130 <HAL_TIM_PWM_Start+0x208>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d009      	beq.n	8008070 <HAL_TIM_PWM_Start+0x148>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a34      	ldr	r2, [pc, #208]	@ (8008134 <HAL_TIM_PWM_Start+0x20c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_TIM_PWM_Start+0x148>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a33      	ldr	r2, [pc, #204]	@ (8008138 <HAL_TIM_PWM_Start+0x210>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d101      	bne.n	8008074 <HAL_TIM_PWM_Start+0x14c>
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <HAL_TIM_PWM_Start+0x14e>
 8008074:	2300      	movs	r3, #0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d007      	beq.n	800808a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008088:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a25      	ldr	r2, [pc, #148]	@ (8008124 <HAL_TIM_PWM_Start+0x1fc>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d022      	beq.n	80080da <HAL_TIM_PWM_Start+0x1b2>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800809c:	d01d      	beq.n	80080da <HAL_TIM_PWM_Start+0x1b2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a26      	ldr	r2, [pc, #152]	@ (800813c <HAL_TIM_PWM_Start+0x214>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d018      	beq.n	80080da <HAL_TIM_PWM_Start+0x1b2>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a24      	ldr	r2, [pc, #144]	@ (8008140 <HAL_TIM_PWM_Start+0x218>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d013      	beq.n	80080da <HAL_TIM_PWM_Start+0x1b2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a23      	ldr	r2, [pc, #140]	@ (8008144 <HAL_TIM_PWM_Start+0x21c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00e      	beq.n	80080da <HAL_TIM_PWM_Start+0x1b2>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a19      	ldr	r2, [pc, #100]	@ (8008128 <HAL_TIM_PWM_Start+0x200>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d009      	beq.n	80080da <HAL_TIM_PWM_Start+0x1b2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a18      	ldr	r2, [pc, #96]	@ (800812c <HAL_TIM_PWM_Start+0x204>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d004      	beq.n	80080da <HAL_TIM_PWM_Start+0x1b2>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a18      	ldr	r2, [pc, #96]	@ (8008138 <HAL_TIM_PWM_Start+0x210>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d115      	bne.n	8008106 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	4b19      	ldr	r3, [pc, #100]	@ (8008148 <HAL_TIM_PWM_Start+0x220>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b06      	cmp	r3, #6
 80080ea:	d015      	beq.n	8008118 <HAL_TIM_PWM_Start+0x1f0>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080f2:	d011      	beq.n	8008118 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008104:	e008      	b.n	8008118 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f042 0201 	orr.w	r2, r2, #1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e000      	b.n	800811a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008118:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40012c00 	.word	0x40012c00
 8008128:	40013400 	.word	0x40013400
 800812c:	40014000 	.word	0x40014000
 8008130:	40014400 	.word	0x40014400
 8008134:	40014800 	.word	0x40014800
 8008138:	40015000 	.word	0x40015000
 800813c:	40000400 	.word	0x40000400
 8008140:	40000800 	.word	0x40000800
 8008144:	40000c00 	.word	0x40000c00
 8008148:	00010007 	.word	0x00010007

0800814c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2200      	movs	r2, #0
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	4618      	mov	r0, r3
 8008160:	f001 fc68 	bl	8009a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a40      	ldr	r2, [pc, #256]	@ (800826c <HAL_TIM_PWM_Stop+0x120>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d018      	beq.n	80081a0 <HAL_TIM_PWM_Stop+0x54>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a3f      	ldr	r2, [pc, #252]	@ (8008270 <HAL_TIM_PWM_Stop+0x124>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <HAL_TIM_PWM_Stop+0x54>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a3d      	ldr	r2, [pc, #244]	@ (8008274 <HAL_TIM_PWM_Stop+0x128>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <HAL_TIM_PWM_Stop+0x54>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a3c      	ldr	r2, [pc, #240]	@ (8008278 <HAL_TIM_PWM_Stop+0x12c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_TIM_PWM_Stop+0x54>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a3a      	ldr	r2, [pc, #232]	@ (800827c <HAL_TIM_PWM_Stop+0x130>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_TIM_PWM_Stop+0x54>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a39      	ldr	r2, [pc, #228]	@ (8008280 <HAL_TIM_PWM_Stop+0x134>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d101      	bne.n	80081a4 <HAL_TIM_PWM_Stop+0x58>
 80081a0:	2301      	movs	r3, #1
 80081a2:	e000      	b.n	80081a6 <HAL_TIM_PWM_Stop+0x5a>
 80081a4:	2300      	movs	r3, #0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d017      	beq.n	80081da <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6a1a      	ldr	r2, [r3, #32]
 80081b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80081b4:	4013      	ands	r3, r2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10f      	bne.n	80081da <HAL_TIM_PWM_Stop+0x8e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6a1a      	ldr	r2, [r3, #32]
 80081c0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80081c4:	4013      	ands	r3, r2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d107      	bne.n	80081da <HAL_TIM_PWM_Stop+0x8e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6a1a      	ldr	r2, [r3, #32]
 80081e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80081e4:	4013      	ands	r3, r2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10f      	bne.n	800820a <HAL_TIM_PWM_Stop+0xbe>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6a1a      	ldr	r2, [r3, #32]
 80081f0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80081f4:	4013      	ands	r3, r2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d107      	bne.n	800820a <HAL_TIM_PWM_Stop+0xbe>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <HAL_TIM_PWM_Stop+0xce>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008218:	e023      	b.n	8008262 <HAL_TIM_PWM_Stop+0x116>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d104      	bne.n	800822a <HAL_TIM_PWM_Stop+0xde>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008228:	e01b      	b.n	8008262 <HAL_TIM_PWM_Stop+0x116>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b08      	cmp	r3, #8
 800822e:	d104      	bne.n	800823a <HAL_TIM_PWM_Stop+0xee>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008238:	e013      	b.n	8008262 <HAL_TIM_PWM_Stop+0x116>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b0c      	cmp	r3, #12
 800823e:	d104      	bne.n	800824a <HAL_TIM_PWM_Stop+0xfe>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008248:	e00b      	b.n	8008262 <HAL_TIM_PWM_Stop+0x116>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b10      	cmp	r3, #16
 800824e:	d104      	bne.n	800825a <HAL_TIM_PWM_Stop+0x10e>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008258:	e003      	b.n	8008262 <HAL_TIM_PWM_Stop+0x116>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40013400 	.word	0x40013400
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400
 800827c:	40014800 	.word	0x40014800
 8008280:	40015000 	.word	0x40015000

08008284 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e049      	b.n	800832a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f841 	bl	8008332 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3304      	adds	r3, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f000 fe12 	bl	8008eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <HAL_TIM_IC_Start_IT+0x1e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008362:	b2db      	uxtb	r3, r3
 8008364:	e023      	b.n	80083ae <HAL_TIM_IC_Start_IT+0x66>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b04      	cmp	r3, #4
 800836a:	d104      	bne.n	8008376 <HAL_TIM_IC_Start_IT+0x2e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008372:	b2db      	uxtb	r3, r3
 8008374:	e01b      	b.n	80083ae <HAL_TIM_IC_Start_IT+0x66>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b08      	cmp	r3, #8
 800837a:	d104      	bne.n	8008386 <HAL_TIM_IC_Start_IT+0x3e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008382:	b2db      	uxtb	r3, r3
 8008384:	e013      	b.n	80083ae <HAL_TIM_IC_Start_IT+0x66>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b0c      	cmp	r3, #12
 800838a:	d104      	bne.n	8008396 <HAL_TIM_IC_Start_IT+0x4e>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008392:	b2db      	uxtb	r3, r3
 8008394:	e00b      	b.n	80083ae <HAL_TIM_IC_Start_IT+0x66>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b10      	cmp	r3, #16
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_IC_Start_IT+0x5e>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	e003      	b.n	80083ae <HAL_TIM_IC_Start_IT+0x66>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d104      	bne.n	80083c0 <HAL_TIM_IC_Start_IT+0x78>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	e013      	b.n	80083e8 <HAL_TIM_IC_Start_IT+0xa0>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d104      	bne.n	80083d0 <HAL_TIM_IC_Start_IT+0x88>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	e00b      	b.n	80083e8 <HAL_TIM_IC_Start_IT+0xa0>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d104      	bne.n	80083e0 <HAL_TIM_IC_Start_IT+0x98>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	e003      	b.n	80083e8 <HAL_TIM_IC_Start_IT+0xa0>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d102      	bne.n	80083f6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80083f0:	7b7b      	ldrb	r3, [r7, #13]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d001      	beq.n	80083fa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e0e2      	b.n	80085c0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <HAL_TIM_IC_Start_IT+0xc2>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008408:	e023      	b.n	8008452 <HAL_TIM_IC_Start_IT+0x10a>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b04      	cmp	r3, #4
 800840e:	d104      	bne.n	800841a <HAL_TIM_IC_Start_IT+0xd2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008418:	e01b      	b.n	8008452 <HAL_TIM_IC_Start_IT+0x10a>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d104      	bne.n	800842a <HAL_TIM_IC_Start_IT+0xe2>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008428:	e013      	b.n	8008452 <HAL_TIM_IC_Start_IT+0x10a>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b0c      	cmp	r3, #12
 800842e:	d104      	bne.n	800843a <HAL_TIM_IC_Start_IT+0xf2>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008438:	e00b      	b.n	8008452 <HAL_TIM_IC_Start_IT+0x10a>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b10      	cmp	r3, #16
 800843e:	d104      	bne.n	800844a <HAL_TIM_IC_Start_IT+0x102>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008448:	e003      	b.n	8008452 <HAL_TIM_IC_Start_IT+0x10a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2202      	movs	r2, #2
 800844e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d104      	bne.n	8008462 <HAL_TIM_IC_Start_IT+0x11a>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008460:	e013      	b.n	800848a <HAL_TIM_IC_Start_IT+0x142>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b04      	cmp	r3, #4
 8008466:	d104      	bne.n	8008472 <HAL_TIM_IC_Start_IT+0x12a>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008470:	e00b      	b.n	800848a <HAL_TIM_IC_Start_IT+0x142>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b08      	cmp	r3, #8
 8008476:	d104      	bne.n	8008482 <HAL_TIM_IC_Start_IT+0x13a>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008480:	e003      	b.n	800848a <HAL_TIM_IC_Start_IT+0x142>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b0c      	cmp	r3, #12
 800848e:	d841      	bhi.n	8008514 <HAL_TIM_IC_Start_IT+0x1cc>
 8008490:	a201      	add	r2, pc, #4	@ (adr r2, 8008498 <HAL_TIM_IC_Start_IT+0x150>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084cd 	.word	0x080084cd
 800849c:	08008515 	.word	0x08008515
 80084a0:	08008515 	.word	0x08008515
 80084a4:	08008515 	.word	0x08008515
 80084a8:	080084df 	.word	0x080084df
 80084ac:	08008515 	.word	0x08008515
 80084b0:	08008515 	.word	0x08008515
 80084b4:	08008515 	.word	0x08008515
 80084b8:	080084f1 	.word	0x080084f1
 80084bc:	08008515 	.word	0x08008515
 80084c0:	08008515 	.word	0x08008515
 80084c4:	08008515 	.word	0x08008515
 80084c8:	08008503 	.word	0x08008503
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0202 	orr.w	r2, r2, #2
 80084da:	60da      	str	r2, [r3, #12]
      break;
 80084dc:	e01d      	b.n	800851a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0204 	orr.w	r2, r2, #4
 80084ec:	60da      	str	r2, [r3, #12]
      break;
 80084ee:	e014      	b.n	800851a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0208 	orr.w	r2, r2, #8
 80084fe:	60da      	str	r2, [r3, #12]
      break;
 8008500:	e00b      	b.n	800851a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f042 0210 	orr.w	r2, r2, #16
 8008510:	60da      	str	r2, [r3, #12]
      break;
 8008512:	e002      	b.n	800851a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]
      break;
 8008518:	bf00      	nop
  }

  if (status == HAL_OK)
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d14e      	bne.n	80085be <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2201      	movs	r2, #1
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f001 fa83 	bl	8009a34 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a25      	ldr	r2, [pc, #148]	@ (80085c8 <HAL_TIM_IC_Start_IT+0x280>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d022      	beq.n	800857e <HAL_TIM_IC_Start_IT+0x236>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008540:	d01d      	beq.n	800857e <HAL_TIM_IC_Start_IT+0x236>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a21      	ldr	r2, [pc, #132]	@ (80085cc <HAL_TIM_IC_Start_IT+0x284>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d018      	beq.n	800857e <HAL_TIM_IC_Start_IT+0x236>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a1f      	ldr	r2, [pc, #124]	@ (80085d0 <HAL_TIM_IC_Start_IT+0x288>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d013      	beq.n	800857e <HAL_TIM_IC_Start_IT+0x236>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a1e      	ldr	r2, [pc, #120]	@ (80085d4 <HAL_TIM_IC_Start_IT+0x28c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00e      	beq.n	800857e <HAL_TIM_IC_Start_IT+0x236>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a1c      	ldr	r2, [pc, #112]	@ (80085d8 <HAL_TIM_IC_Start_IT+0x290>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d009      	beq.n	800857e <HAL_TIM_IC_Start_IT+0x236>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a1b      	ldr	r2, [pc, #108]	@ (80085dc <HAL_TIM_IC_Start_IT+0x294>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d004      	beq.n	800857e <HAL_TIM_IC_Start_IT+0x236>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a19      	ldr	r2, [pc, #100]	@ (80085e0 <HAL_TIM_IC_Start_IT+0x298>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d115      	bne.n	80085aa <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	4b17      	ldr	r3, [pc, #92]	@ (80085e4 <HAL_TIM_IC_Start_IT+0x29c>)
 8008586:	4013      	ands	r3, r2
 8008588:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b06      	cmp	r3, #6
 800858e:	d015      	beq.n	80085bc <HAL_TIM_IC_Start_IT+0x274>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008596:	d011      	beq.n	80085bc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a8:	e008      	b.n	80085bc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0201 	orr.w	r2, r2, #1
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	e000      	b.n	80085be <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085bc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	40012c00 	.word	0x40012c00
 80085cc:	40000400 	.word	0x40000400
 80085d0:	40000800 	.word	0x40000800
 80085d4:	40000c00 	.word	0x40000c00
 80085d8:	40013400 	.word	0x40013400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40015000 	.word	0x40015000
 80085e4:	00010007 	.word	0x00010007

080085e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d020      	beq.n	800864c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01b      	beq.n	800864c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f06f 0202 	mvn.w	r2, #2
 800861c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7fa f9f0 	bl	8002a18 <HAL_TIM_IC_CaptureCallback>
 8008638:	e005      	b.n	8008646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fc38 	bl	8008eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fc3f 	bl	8008ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d020      	beq.n	8008698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01b      	beq.n	8008698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0204 	mvn.w	r2, #4
 8008668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2202      	movs	r2, #2
 800866e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fa f9ca 	bl	8002a18 <HAL_TIM_IC_CaptureCallback>
 8008684:	e005      	b.n	8008692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fc12 	bl	8008eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fc19 	bl	8008ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f003 0308 	and.w	r3, r3, #8
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d020      	beq.n	80086e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f003 0308 	and.w	r3, r3, #8
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d01b      	beq.n	80086e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f06f 0208 	mvn.w	r2, #8
 80086b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2204      	movs	r2, #4
 80086ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fa f9a4 	bl	8002a18 <HAL_TIM_IC_CaptureCallback>
 80086d0:	e005      	b.n	80086de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fbec 	bl	8008eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fbf3 	bl	8008ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f003 0310 	and.w	r3, r3, #16
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d020      	beq.n	8008730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01b      	beq.n	8008730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f06f 0210 	mvn.w	r2, #16
 8008700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2208      	movs	r2, #8
 8008706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7fa f97e 	bl	8002a18 <HAL_TIM_IC_CaptureCallback>
 800871c:	e005      	b.n	800872a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fbc6 	bl	8008eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fbcd 	bl	8008ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00c      	beq.n	8008754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d007      	beq.n	8008754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0201 	mvn.w	r2, #1
 800874c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fba4 	bl	8008e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d104      	bne.n	8008768 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00c      	beq.n	8008782 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800877a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 fbd3 	bl	8009f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00c      	beq.n	80087a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008792:	2b00      	cmp	r3, #0
 8008794:	d007      	beq.n	80087a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800879e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 fbcb 	bl	8009f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00c      	beq.n	80087ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d007      	beq.n	80087ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80087c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb87 	bl	8008ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00c      	beq.n	80087ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 0320 	and.w	r3, r3, #32
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f06f 0220 	mvn.w	r2, #32
 80087e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fb93 	bl	8009f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00c      	beq.n	8008812 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d007      	beq.n	8008812 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800880a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 fb9f 	bl	8009f50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00c      	beq.n	8008836 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800882e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 fb97 	bl	8009f64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00c      	beq.n	800885a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d007      	beq.n	800885a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 fb8f 	bl	8009f78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00c      	beq.n	800887e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d007      	beq.n	800887e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 fb87 	bl	8009f8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b086      	sub	sp, #24
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80088a0:	2302      	movs	r3, #2
 80088a2:	e088      	b.n	80089b6 <HAL_TIM_IC_ConfigChannel+0x130>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d11b      	bne.n	80088ea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80088c2:	f000 fef1 	bl	80096a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	699a      	ldr	r2, [r3, #24]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 020c 	bic.w	r2, r2, #12
 80088d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6999      	ldr	r1, [r3, #24]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	619a      	str	r2, [r3, #24]
 80088e8:	e060      	b.n	80089ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d11c      	bne.n	800892a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008900:	f000 ff75 	bl	80097ee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699a      	ldr	r2, [r3, #24]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008912:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6999      	ldr	r1, [r3, #24]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	021a      	lsls	r2, r3, #8
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	619a      	str	r2, [r3, #24]
 8008928:	e040      	b.n	80089ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b08      	cmp	r3, #8
 800892e:	d11b      	bne.n	8008968 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008940:	f000 ffc2 	bl	80098c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69da      	ldr	r2, [r3, #28]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 020c 	bic.w	r2, r2, #12
 8008952:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69d9      	ldr	r1, [r3, #28]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	61da      	str	r2, [r3, #28]
 8008966:	e021      	b.n	80089ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b0c      	cmp	r3, #12
 800896c:	d11c      	bne.n	80089a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800897e:	f000 ffdf 	bl	8009940 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69da      	ldr	r2, [r3, #28]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008990:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69d9      	ldr	r1, [r3, #28]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	021a      	lsls	r2, r3, #8
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	61da      	str	r2, [r3, #28]
 80089a6:	e001      	b.n	80089ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089da:	2302      	movs	r3, #2
 80089dc:	e0ff      	b.n	8008bde <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b14      	cmp	r3, #20
 80089ea:	f200 80f0 	bhi.w	8008bce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089ee:	a201      	add	r2, pc, #4	@ (adr r2, 80089f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a49 	.word	0x08008a49
 80089f8:	08008bcf 	.word	0x08008bcf
 80089fc:	08008bcf 	.word	0x08008bcf
 8008a00:	08008bcf 	.word	0x08008bcf
 8008a04:	08008a89 	.word	0x08008a89
 8008a08:	08008bcf 	.word	0x08008bcf
 8008a0c:	08008bcf 	.word	0x08008bcf
 8008a10:	08008bcf 	.word	0x08008bcf
 8008a14:	08008acb 	.word	0x08008acb
 8008a18:	08008bcf 	.word	0x08008bcf
 8008a1c:	08008bcf 	.word	0x08008bcf
 8008a20:	08008bcf 	.word	0x08008bcf
 8008a24:	08008b0b 	.word	0x08008b0b
 8008a28:	08008bcf 	.word	0x08008bcf
 8008a2c:	08008bcf 	.word	0x08008bcf
 8008a30:	08008bcf 	.word	0x08008bcf
 8008a34:	08008b4d 	.word	0x08008b4d
 8008a38:	08008bcf 	.word	0x08008bcf
 8008a3c:	08008bcf 	.word	0x08008bcf
 8008a40:	08008bcf 	.word	0x08008bcf
 8008a44:	08008b8d 	.word	0x08008b8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fb00 	bl	8009054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	699a      	ldr	r2, [r3, #24]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0208 	orr.w	r2, r2, #8
 8008a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	699a      	ldr	r2, [r3, #24]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0204 	bic.w	r2, r2, #4
 8008a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6999      	ldr	r1, [r3, #24]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	619a      	str	r2, [r3, #24]
      break;
 8008a86:	e0a5      	b.n	8008bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fb7a 	bl	8009188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6999      	ldr	r1, [r3, #24]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	021a      	lsls	r2, r3, #8
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	619a      	str	r2, [r3, #24]
      break;
 8008ac8:	e084      	b.n	8008bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68b9      	ldr	r1, [r7, #8]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fbed 	bl	80092b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69da      	ldr	r2, [r3, #28]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0208 	orr.w	r2, r2, #8
 8008ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69da      	ldr	r2, [r3, #28]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0204 	bic.w	r2, r2, #4
 8008af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69d9      	ldr	r1, [r3, #28]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	691a      	ldr	r2, [r3, #16]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	61da      	str	r2, [r3, #28]
      break;
 8008b08:	e064      	b.n	8008bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fc5f 	bl	80093d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69da      	ldr	r2, [r3, #28]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69da      	ldr	r2, [r3, #28]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69d9      	ldr	r1, [r3, #28]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	021a      	lsls	r2, r3, #8
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	61da      	str	r2, [r3, #28]
      break;
 8008b4a:	e043      	b.n	8008bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 fcd2 	bl	80094fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0208 	orr.w	r2, r2, #8
 8008b66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0204 	bic.w	r2, r2, #4
 8008b76:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b8a:	e023      	b.n	8008bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fd1c 	bl	80095d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ba6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	021a      	lsls	r2, r3, #8
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008bcc:	e002      	b.n	8008bd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop

08008be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIM_ConfigClockSource+0x1c>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e0f6      	b.n	8008df2 <HAL_TIM_ConfigClockSource+0x20a>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008c22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a6f      	ldr	r2, [pc, #444]	@ (8008dfc <HAL_TIM_ConfigClockSource+0x214>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	f000 80c1 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c44:	4a6d      	ldr	r2, [pc, #436]	@ (8008dfc <HAL_TIM_ConfigClockSource+0x214>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	f200 80c6 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c4c:	4a6c      	ldr	r2, [pc, #432]	@ (8008e00 <HAL_TIM_ConfigClockSource+0x218>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	f000 80b9 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c54:	4a6a      	ldr	r2, [pc, #424]	@ (8008e00 <HAL_TIM_ConfigClockSource+0x218>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	f200 80be 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c5c:	4a69      	ldr	r2, [pc, #420]	@ (8008e04 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	f000 80b1 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c64:	4a67      	ldr	r2, [pc, #412]	@ (8008e04 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	f200 80b6 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c6c:	4a66      	ldr	r2, [pc, #408]	@ (8008e08 <HAL_TIM_ConfigClockSource+0x220>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f000 80a9 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c74:	4a64      	ldr	r2, [pc, #400]	@ (8008e08 <HAL_TIM_ConfigClockSource+0x220>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	f200 80ae 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c7c:	4a63      	ldr	r2, [pc, #396]	@ (8008e0c <HAL_TIM_ConfigClockSource+0x224>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	f000 80a1 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c84:	4a61      	ldr	r2, [pc, #388]	@ (8008e0c <HAL_TIM_ConfigClockSource+0x224>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	f200 80a6 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c8c:	4a60      	ldr	r2, [pc, #384]	@ (8008e10 <HAL_TIM_ConfigClockSource+0x228>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	f000 8099 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008c94:	4a5e      	ldr	r2, [pc, #376]	@ (8008e10 <HAL_TIM_ConfigClockSource+0x228>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	f200 809e 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ca0:	f000 8091 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008ca4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ca8:	f200 8096 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cb0:	f000 8089 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008cb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cb8:	f200 808e 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cc0:	d03e      	beq.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
 8008cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cc6:	f200 8087 	bhi.w	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cce:	f000 8086 	beq.w	8008dde <HAL_TIM_ConfigClockSource+0x1f6>
 8008cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cd6:	d87f      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cd8:	2b70      	cmp	r3, #112	@ 0x70
 8008cda:	d01a      	beq.n	8008d12 <HAL_TIM_ConfigClockSource+0x12a>
 8008cdc:	2b70      	cmp	r3, #112	@ 0x70
 8008cde:	d87b      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ce0:	2b60      	cmp	r3, #96	@ 0x60
 8008ce2:	d050      	beq.n	8008d86 <HAL_TIM_ConfigClockSource+0x19e>
 8008ce4:	2b60      	cmp	r3, #96	@ 0x60
 8008ce6:	d877      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ce8:	2b50      	cmp	r3, #80	@ 0x50
 8008cea:	d03c      	beq.n	8008d66 <HAL_TIM_ConfigClockSource+0x17e>
 8008cec:	2b50      	cmp	r3, #80	@ 0x50
 8008cee:	d873      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf0:	2b40      	cmp	r3, #64	@ 0x40
 8008cf2:	d058      	beq.n	8008da6 <HAL_TIM_ConfigClockSource+0x1be>
 8008cf4:	2b40      	cmp	r3, #64	@ 0x40
 8008cf6:	d86f      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf8:	2b30      	cmp	r3, #48	@ 0x30
 8008cfa:	d064      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008cfc:	2b30      	cmp	r3, #48	@ 0x30
 8008cfe:	d86b      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d060      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	d867      	bhi.n	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d05c      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008d0c:	2b10      	cmp	r3, #16
 8008d0e:	d05a      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0x1de>
 8008d10:	e062      	b.n	8008dd8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d22:	f000 fe67 	bl	80099f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	609a      	str	r2, [r3, #8]
      break;
 8008d3e:	e04f      	b.n	8008de0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d50:	f000 fe50 	bl	80099f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d62:	609a      	str	r2, [r3, #8]
      break;
 8008d64:	e03c      	b.n	8008de0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d72:	461a      	mov	r2, r3
 8008d74:	f000 fd0c 	bl	8009790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2150      	movs	r1, #80	@ 0x50
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fe1b 	bl	80099ba <TIM_ITRx_SetConfig>
      break;
 8008d84:	e02c      	b.n	8008de0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d92:	461a      	mov	r2, r3
 8008d94:	f000 fd68 	bl	8009868 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2160      	movs	r1, #96	@ 0x60
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 fe0b 	bl	80099ba <TIM_ITRx_SetConfig>
      break;
 8008da4:	e01c      	b.n	8008de0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008db2:	461a      	mov	r2, r3
 8008db4:	f000 fcec 	bl	8009790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2140      	movs	r1, #64	@ 0x40
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fdfb 	bl	80099ba <TIM_ITRx_SetConfig>
      break;
 8008dc4:	e00c      	b.n	8008de0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f000 fdf2 	bl	80099ba <TIM_ITRx_SetConfig>
      break;
 8008dd6:	e003      	b.n	8008de0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
      break;
 8008ddc:	e000      	b.n	8008de0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	00100070 	.word	0x00100070
 8008e00:	00100060 	.word	0x00100060
 8008e04:	00100050 	.word	0x00100050
 8008e08:	00100040 	.word	0x00100040
 8008e0c:	00100030 	.word	0x00100030
 8008e10:	00100020 	.word	0x00100020

08008e14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b0c      	cmp	r3, #12
 8008e26:	d831      	bhi.n	8008e8c <HAL_TIM_ReadCapturedValue+0x78>
 8008e28:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008e65 	.word	0x08008e65
 8008e34:	08008e8d 	.word	0x08008e8d
 8008e38:	08008e8d 	.word	0x08008e8d
 8008e3c:	08008e8d 	.word	0x08008e8d
 8008e40:	08008e6f 	.word	0x08008e6f
 8008e44:	08008e8d 	.word	0x08008e8d
 8008e48:	08008e8d 	.word	0x08008e8d
 8008e4c:	08008e8d 	.word	0x08008e8d
 8008e50:	08008e79 	.word	0x08008e79
 8008e54:	08008e8d 	.word	0x08008e8d
 8008e58:	08008e8d 	.word	0x08008e8d
 8008e5c:	08008e8d 	.word	0x08008e8d
 8008e60:	08008e83 	.word	0x08008e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e6a:	60fb      	str	r3, [r7, #12]

      break;
 8008e6c:	e00f      	b.n	8008e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e74:	60fb      	str	r3, [r7, #12]

      break;
 8008e76:	e00a      	b.n	8008e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7e:	60fb      	str	r3, [r7, #12]

      break;
 8008e80:	e005      	b.n	8008e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e88:	60fb      	str	r3, [r7, #12]

      break;
 8008e8a:	e000      	b.n	8008e8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008e8c:	bf00      	nop
  }

  return tmpreg;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a4c      	ldr	r2, [pc, #304]	@ (8009030 <TIM_Base_SetConfig+0x144>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d017      	beq.n	8008f34 <TIM_Base_SetConfig+0x48>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f0a:	d013      	beq.n	8008f34 <TIM_Base_SetConfig+0x48>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a49      	ldr	r2, [pc, #292]	@ (8009034 <TIM_Base_SetConfig+0x148>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00f      	beq.n	8008f34 <TIM_Base_SetConfig+0x48>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a48      	ldr	r2, [pc, #288]	@ (8009038 <TIM_Base_SetConfig+0x14c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00b      	beq.n	8008f34 <TIM_Base_SetConfig+0x48>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a47      	ldr	r2, [pc, #284]	@ (800903c <TIM_Base_SetConfig+0x150>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d007      	beq.n	8008f34 <TIM_Base_SetConfig+0x48>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a46      	ldr	r2, [pc, #280]	@ (8009040 <TIM_Base_SetConfig+0x154>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <TIM_Base_SetConfig+0x48>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a45      	ldr	r2, [pc, #276]	@ (8009044 <TIM_Base_SetConfig+0x158>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d108      	bne.n	8008f46 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a39      	ldr	r2, [pc, #228]	@ (8009030 <TIM_Base_SetConfig+0x144>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d023      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f54:	d01f      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a36      	ldr	r2, [pc, #216]	@ (8009034 <TIM_Base_SetConfig+0x148>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d01b      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a35      	ldr	r2, [pc, #212]	@ (8009038 <TIM_Base_SetConfig+0x14c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d017      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a34      	ldr	r2, [pc, #208]	@ (800903c <TIM_Base_SetConfig+0x150>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d013      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a33      	ldr	r2, [pc, #204]	@ (8009040 <TIM_Base_SetConfig+0x154>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d00f      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a33      	ldr	r2, [pc, #204]	@ (8009048 <TIM_Base_SetConfig+0x15c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d00b      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a32      	ldr	r2, [pc, #200]	@ (800904c <TIM_Base_SetConfig+0x160>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d007      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a31      	ldr	r2, [pc, #196]	@ (8009050 <TIM_Base_SetConfig+0x164>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d003      	beq.n	8008f96 <TIM_Base_SetConfig+0xaa>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a2c      	ldr	r2, [pc, #176]	@ (8009044 <TIM_Base_SetConfig+0x158>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d108      	bne.n	8008fa8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a18      	ldr	r2, [pc, #96]	@ (8009030 <TIM_Base_SetConfig+0x144>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d013      	beq.n	8008ffc <TIM_Base_SetConfig+0x110>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8009040 <TIM_Base_SetConfig+0x154>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00f      	beq.n	8008ffc <TIM_Base_SetConfig+0x110>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a1a      	ldr	r2, [pc, #104]	@ (8009048 <TIM_Base_SetConfig+0x15c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00b      	beq.n	8008ffc <TIM_Base_SetConfig+0x110>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a19      	ldr	r2, [pc, #100]	@ (800904c <TIM_Base_SetConfig+0x160>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d007      	beq.n	8008ffc <TIM_Base_SetConfig+0x110>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a18      	ldr	r2, [pc, #96]	@ (8009050 <TIM_Base_SetConfig+0x164>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d003      	beq.n	8008ffc <TIM_Base_SetConfig+0x110>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a13      	ldr	r2, [pc, #76]	@ (8009044 <TIM_Base_SetConfig+0x158>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d103      	bne.n	8009004 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b01      	cmp	r3, #1
 8009014:	d105      	bne.n	8009022 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f023 0201 	bic.w	r2, r3, #1
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	611a      	str	r2, [r3, #16]
  }
}
 8009022:	bf00      	nop
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	40012c00 	.word	0x40012c00
 8009034:	40000400 	.word	0x40000400
 8009038:	40000800 	.word	0x40000800
 800903c:	40000c00 	.word	0x40000c00
 8009040:	40013400 	.word	0x40013400
 8009044:	40015000 	.word	0x40015000
 8009048:	40014000 	.word	0x40014000
 800904c:	40014400 	.word	0x40014400
 8009050:	40014800 	.word	0x40014800

08009054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	f023 0201 	bic.w	r2, r3, #1
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 0303 	bic.w	r3, r3, #3
 800908e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f023 0302 	bic.w	r3, r3, #2
 80090a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a30      	ldr	r2, [pc, #192]	@ (8009170 <TIM_OC1_SetConfig+0x11c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d013      	beq.n	80090dc <TIM_OC1_SetConfig+0x88>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a2f      	ldr	r2, [pc, #188]	@ (8009174 <TIM_OC1_SetConfig+0x120>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00f      	beq.n	80090dc <TIM_OC1_SetConfig+0x88>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a2e      	ldr	r2, [pc, #184]	@ (8009178 <TIM_OC1_SetConfig+0x124>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d00b      	beq.n	80090dc <TIM_OC1_SetConfig+0x88>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a2d      	ldr	r2, [pc, #180]	@ (800917c <TIM_OC1_SetConfig+0x128>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d007      	beq.n	80090dc <TIM_OC1_SetConfig+0x88>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009180 <TIM_OC1_SetConfig+0x12c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d003      	beq.n	80090dc <TIM_OC1_SetConfig+0x88>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009184 <TIM_OC1_SetConfig+0x130>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d10c      	bne.n	80090f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f023 0308 	bic.w	r3, r3, #8
 80090e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f023 0304 	bic.w	r3, r3, #4
 80090f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009170 <TIM_OC1_SetConfig+0x11c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <TIM_OC1_SetConfig+0xd2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a1c      	ldr	r2, [pc, #112]	@ (8009174 <TIM_OC1_SetConfig+0x120>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d00f      	beq.n	8009126 <TIM_OC1_SetConfig+0xd2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a1b      	ldr	r2, [pc, #108]	@ (8009178 <TIM_OC1_SetConfig+0x124>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00b      	beq.n	8009126 <TIM_OC1_SetConfig+0xd2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a1a      	ldr	r2, [pc, #104]	@ (800917c <TIM_OC1_SetConfig+0x128>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d007      	beq.n	8009126 <TIM_OC1_SetConfig+0xd2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a19      	ldr	r2, [pc, #100]	@ (8009180 <TIM_OC1_SetConfig+0x12c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d003      	beq.n	8009126 <TIM_OC1_SetConfig+0xd2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a18      	ldr	r2, [pc, #96]	@ (8009184 <TIM_OC1_SetConfig+0x130>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d111      	bne.n	800914a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800912c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4313      	orrs	r3, r2
 800913e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	621a      	str	r2, [r3, #32]
}
 8009164:	bf00      	nop
 8009166:	371c      	adds	r7, #28
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	40012c00 	.word	0x40012c00
 8009174:	40013400 	.word	0x40013400
 8009178:	40014000 	.word	0x40014000
 800917c:	40014400 	.word	0x40014400
 8009180:	40014800 	.word	0x40014800
 8009184:	40015000 	.word	0x40015000

08009188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	f023 0210 	bic.w	r2, r3, #16
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f023 0320 	bic.w	r3, r3, #32
 80091d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	011b      	lsls	r3, r3, #4
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009298 <TIM_OC2_SetConfig+0x110>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d007      	beq.n	80091fc <TIM_OC2_SetConfig+0x74>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a2b      	ldr	r2, [pc, #172]	@ (800929c <TIM_OC2_SetConfig+0x114>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_OC2_SetConfig+0x74>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a2a      	ldr	r2, [pc, #168]	@ (80092a0 <TIM_OC2_SetConfig+0x118>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d10d      	bne.n	8009218 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009216:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a1f      	ldr	r2, [pc, #124]	@ (8009298 <TIM_OC2_SetConfig+0x110>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d013      	beq.n	8009248 <TIM_OC2_SetConfig+0xc0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a1e      	ldr	r2, [pc, #120]	@ (800929c <TIM_OC2_SetConfig+0x114>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d00f      	beq.n	8009248 <TIM_OC2_SetConfig+0xc0>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a1e      	ldr	r2, [pc, #120]	@ (80092a4 <TIM_OC2_SetConfig+0x11c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d00b      	beq.n	8009248 <TIM_OC2_SetConfig+0xc0>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a1d      	ldr	r2, [pc, #116]	@ (80092a8 <TIM_OC2_SetConfig+0x120>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d007      	beq.n	8009248 <TIM_OC2_SetConfig+0xc0>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a1c      	ldr	r2, [pc, #112]	@ (80092ac <TIM_OC2_SetConfig+0x124>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d003      	beq.n	8009248 <TIM_OC2_SetConfig+0xc0>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a17      	ldr	r2, [pc, #92]	@ (80092a0 <TIM_OC2_SetConfig+0x118>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d113      	bne.n	8009270 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800924e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	4313      	orrs	r3, r2
 8009262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	621a      	str	r2, [r3, #32]
}
 800928a:	bf00      	nop
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	40012c00 	.word	0x40012c00
 800929c:	40013400 	.word	0x40013400
 80092a0:	40015000 	.word	0x40015000
 80092a4:	40014000 	.word	0x40014000
 80092a8:	40014400 	.word	0x40014400
 80092ac:	40014800 	.word	0x40014800

080092b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a2b      	ldr	r2, [pc, #172]	@ (80093bc <TIM_OC3_SetConfig+0x10c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d007      	beq.n	8009322 <TIM_OC3_SetConfig+0x72>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a2a      	ldr	r2, [pc, #168]	@ (80093c0 <TIM_OC3_SetConfig+0x110>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d003      	beq.n	8009322 <TIM_OC3_SetConfig+0x72>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a29      	ldr	r2, [pc, #164]	@ (80093c4 <TIM_OC3_SetConfig+0x114>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d10d      	bne.n	800933e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800933c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a1e      	ldr	r2, [pc, #120]	@ (80093bc <TIM_OC3_SetConfig+0x10c>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d013      	beq.n	800936e <TIM_OC3_SetConfig+0xbe>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a1d      	ldr	r2, [pc, #116]	@ (80093c0 <TIM_OC3_SetConfig+0x110>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d00f      	beq.n	800936e <TIM_OC3_SetConfig+0xbe>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a1d      	ldr	r2, [pc, #116]	@ (80093c8 <TIM_OC3_SetConfig+0x118>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d00b      	beq.n	800936e <TIM_OC3_SetConfig+0xbe>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a1c      	ldr	r2, [pc, #112]	@ (80093cc <TIM_OC3_SetConfig+0x11c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d007      	beq.n	800936e <TIM_OC3_SetConfig+0xbe>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a1b      	ldr	r2, [pc, #108]	@ (80093d0 <TIM_OC3_SetConfig+0x120>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d003      	beq.n	800936e <TIM_OC3_SetConfig+0xbe>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a16      	ldr	r2, [pc, #88]	@ (80093c4 <TIM_OC3_SetConfig+0x114>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d113      	bne.n	8009396 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800937c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	011b      	lsls	r3, r3, #4
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	4313      	orrs	r3, r2
 8009388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	4313      	orrs	r3, r2
 8009394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	621a      	str	r2, [r3, #32]
}
 80093b0:	bf00      	nop
 80093b2:	371c      	adds	r7, #28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	40012c00 	.word	0x40012c00
 80093c0:	40013400 	.word	0x40013400
 80093c4:	40015000 	.word	0x40015000
 80093c8:	40014000 	.word	0x40014000
 80093cc:	40014400 	.word	0x40014400
 80093d0:	40014800 	.word	0x40014800

080093d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800940e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	4313      	orrs	r3, r2
 800941a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	031b      	lsls	r3, r3, #12
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	4313      	orrs	r3, r2
 800942e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a2c      	ldr	r2, [pc, #176]	@ (80094e4 <TIM_OC4_SetConfig+0x110>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d007      	beq.n	8009448 <TIM_OC4_SetConfig+0x74>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a2b      	ldr	r2, [pc, #172]	@ (80094e8 <TIM_OC4_SetConfig+0x114>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_OC4_SetConfig+0x74>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a2a      	ldr	r2, [pc, #168]	@ (80094ec <TIM_OC4_SetConfig+0x118>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d10d      	bne.n	8009464 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800944e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	031b      	lsls	r3, r3, #12
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	4313      	orrs	r3, r2
 800945a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009462:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a1f      	ldr	r2, [pc, #124]	@ (80094e4 <TIM_OC4_SetConfig+0x110>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d013      	beq.n	8009494 <TIM_OC4_SetConfig+0xc0>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a1e      	ldr	r2, [pc, #120]	@ (80094e8 <TIM_OC4_SetConfig+0x114>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d00f      	beq.n	8009494 <TIM_OC4_SetConfig+0xc0>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a1e      	ldr	r2, [pc, #120]	@ (80094f0 <TIM_OC4_SetConfig+0x11c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00b      	beq.n	8009494 <TIM_OC4_SetConfig+0xc0>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a1d      	ldr	r2, [pc, #116]	@ (80094f4 <TIM_OC4_SetConfig+0x120>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d007      	beq.n	8009494 <TIM_OC4_SetConfig+0xc0>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a1c      	ldr	r2, [pc, #112]	@ (80094f8 <TIM_OC4_SetConfig+0x124>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d003      	beq.n	8009494 <TIM_OC4_SetConfig+0xc0>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a17      	ldr	r2, [pc, #92]	@ (80094ec <TIM_OC4_SetConfig+0x118>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d113      	bne.n	80094bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800949a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	019b      	lsls	r3, r3, #6
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	019b      	lsls	r3, r3, #6
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	621a      	str	r2, [r3, #32]
}
 80094d6:	bf00      	nop
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	40012c00 	.word	0x40012c00
 80094e8:	40013400 	.word	0x40013400
 80094ec:	40015000 	.word	0x40015000
 80094f0:	40014000 	.word	0x40014000
 80094f4:	40014400 	.word	0x40014400
 80094f8:	40014800 	.word	0x40014800

080094fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800952a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800952e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009540:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	041b      	lsls	r3, r3, #16
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4313      	orrs	r3, r2
 800954c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a19      	ldr	r2, [pc, #100]	@ (80095b8 <TIM_OC5_SetConfig+0xbc>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d013      	beq.n	800957e <TIM_OC5_SetConfig+0x82>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a18      	ldr	r2, [pc, #96]	@ (80095bc <TIM_OC5_SetConfig+0xc0>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d00f      	beq.n	800957e <TIM_OC5_SetConfig+0x82>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a17      	ldr	r2, [pc, #92]	@ (80095c0 <TIM_OC5_SetConfig+0xc4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00b      	beq.n	800957e <TIM_OC5_SetConfig+0x82>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a16      	ldr	r2, [pc, #88]	@ (80095c4 <TIM_OC5_SetConfig+0xc8>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d007      	beq.n	800957e <TIM_OC5_SetConfig+0x82>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a15      	ldr	r2, [pc, #84]	@ (80095c8 <TIM_OC5_SetConfig+0xcc>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d003      	beq.n	800957e <TIM_OC5_SetConfig+0x82>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a14      	ldr	r2, [pc, #80]	@ (80095cc <TIM_OC5_SetConfig+0xd0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d109      	bne.n	8009592 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009584:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	621a      	str	r2, [r3, #32]
}
 80095ac:	bf00      	nop
 80095ae:	371c      	adds	r7, #28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	40012c00 	.word	0x40012c00
 80095bc:	40013400 	.word	0x40013400
 80095c0:	40014000 	.word	0x40014000
 80095c4:	40014400 	.word	0x40014400
 80095c8:	40014800 	.word	0x40014800
 80095cc:	40015000 	.word	0x40015000

080095d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	051b      	lsls	r3, r3, #20
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a1a      	ldr	r2, [pc, #104]	@ (8009690 <TIM_OC6_SetConfig+0xc0>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d013      	beq.n	8009654 <TIM_OC6_SetConfig+0x84>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a19      	ldr	r2, [pc, #100]	@ (8009694 <TIM_OC6_SetConfig+0xc4>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00f      	beq.n	8009654 <TIM_OC6_SetConfig+0x84>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a18      	ldr	r2, [pc, #96]	@ (8009698 <TIM_OC6_SetConfig+0xc8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d00b      	beq.n	8009654 <TIM_OC6_SetConfig+0x84>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a17      	ldr	r2, [pc, #92]	@ (800969c <TIM_OC6_SetConfig+0xcc>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d007      	beq.n	8009654 <TIM_OC6_SetConfig+0x84>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a16      	ldr	r2, [pc, #88]	@ (80096a0 <TIM_OC6_SetConfig+0xd0>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d003      	beq.n	8009654 <TIM_OC6_SetConfig+0x84>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a15      	ldr	r2, [pc, #84]	@ (80096a4 <TIM_OC6_SetConfig+0xd4>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d109      	bne.n	8009668 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800965a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	029b      	lsls	r3, r3, #10
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	4313      	orrs	r3, r2
 8009666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	621a      	str	r2, [r3, #32]
}
 8009682:	bf00      	nop
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40012c00 	.word	0x40012c00
 8009694:	40013400 	.word	0x40013400
 8009698:	40014000 	.word	0x40014000
 800969c:	40014400 	.word	0x40014400
 80096a0:	40014800 	.word	0x40014800
 80096a4:	40015000 	.word	0x40015000

080096a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	f023 0201 	bic.w	r2, r3, #1
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4a28      	ldr	r2, [pc, #160]	@ (8009774 <TIM_TI1_SetConfig+0xcc>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d01b      	beq.n	800970e <TIM_TI1_SetConfig+0x66>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096dc:	d017      	beq.n	800970e <TIM_TI1_SetConfig+0x66>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4a25      	ldr	r2, [pc, #148]	@ (8009778 <TIM_TI1_SetConfig+0xd0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d013      	beq.n	800970e <TIM_TI1_SetConfig+0x66>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4a24      	ldr	r2, [pc, #144]	@ (800977c <TIM_TI1_SetConfig+0xd4>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00f      	beq.n	800970e <TIM_TI1_SetConfig+0x66>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4a23      	ldr	r2, [pc, #140]	@ (8009780 <TIM_TI1_SetConfig+0xd8>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00b      	beq.n	800970e <TIM_TI1_SetConfig+0x66>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4a22      	ldr	r2, [pc, #136]	@ (8009784 <TIM_TI1_SetConfig+0xdc>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d007      	beq.n	800970e <TIM_TI1_SetConfig+0x66>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a21      	ldr	r2, [pc, #132]	@ (8009788 <TIM_TI1_SetConfig+0xe0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d003      	beq.n	800970e <TIM_TI1_SetConfig+0x66>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4a20      	ldr	r2, [pc, #128]	@ (800978c <TIM_TI1_SetConfig+0xe4>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d101      	bne.n	8009712 <TIM_TI1_SetConfig+0x6a>
 800970e:	2301      	movs	r3, #1
 8009710:	e000      	b.n	8009714 <TIM_TI1_SetConfig+0x6c>
 8009712:	2300      	movs	r3, #0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d008      	beq.n	800972a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f023 0303 	bic.w	r3, r3, #3
 800971e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4313      	orrs	r3, r2
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	e003      	b.n	8009732 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f043 0301 	orr.w	r3, r3, #1
 8009730:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	011b      	lsls	r3, r3, #4
 800973e:	b2db      	uxtb	r3, r3
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	4313      	orrs	r3, r2
 8009744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f023 030a 	bic.w	r3, r3, #10
 800974c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f003 030a 	and.w	r3, r3, #10
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	621a      	str	r2, [r3, #32]
}
 8009766:	bf00      	nop
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	40012c00 	.word	0x40012c00
 8009778:	40000400 	.word	0x40000400
 800977c:	40000800 	.word	0x40000800
 8009780:	40000c00 	.word	0x40000c00
 8009784:	40013400 	.word	0x40013400
 8009788:	40014000 	.word	0x40014000
 800978c:	40015000 	.word	0x40015000

08009790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	f023 0201 	bic.w	r2, r3, #1
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f023 030a 	bic.w	r3, r3, #10
 80097cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	621a      	str	r2, [r3, #32]
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
 80097fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f023 0210 	bic.w	r2, r3, #16
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800981a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	021b      	lsls	r3, r3, #8
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800982c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	031b      	lsls	r3, r3, #12
 8009832:	b29b      	uxth	r3, r3
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	4313      	orrs	r3, r2
 8009838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009840:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	011b      	lsls	r3, r3, #4
 8009846:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	621a      	str	r2, [r3, #32]
}
 800985c:	bf00      	nop
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	f023 0210 	bic.w	r2, r3, #16
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	031b      	lsls	r3, r3, #12
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	4313      	orrs	r3, r2
 800989c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	011b      	lsls	r3, r3, #4
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	621a      	str	r2, [r3, #32]
}
 80098bc:	bf00      	nop
 80098be:	371c      	adds	r7, #28
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f023 0303 	bic.w	r3, r3, #3
 80098f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009904:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	b2db      	uxtb	r3, r3
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	4313      	orrs	r3, r2
 8009910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009918:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	021b      	lsls	r3, r3, #8
 800991e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	4313      	orrs	r3, r2
 8009926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	621a      	str	r2, [r3, #32]
}
 8009934:	bf00      	nop
 8009936:	371c      	adds	r7, #28
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800996c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	021b      	lsls	r3, r3, #8
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800997e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	031b      	lsls	r3, r3, #12
 8009984:	b29b      	uxth	r3, r3
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	4313      	orrs	r3, r2
 800998a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009992:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	031b      	lsls	r3, r3, #12
 8009998:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	621a      	str	r2, [r3, #32]
}
 80099ae:	bf00      	nop
 80099b0:	371c      	adds	r7, #28
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b085      	sub	sp, #20
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80099d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4313      	orrs	r3, r2
 80099dc:	f043 0307 	orr.w	r3, r3, #7
 80099e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	609a      	str	r2, [r3, #8]
}
 80099e8:	bf00      	nop
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	021a      	lsls	r2, r3, #8
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	431a      	orrs	r2, r3
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	609a      	str	r2, [r3, #8]
}
 8009a28:	bf00      	nop
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f003 031f 	and.w	r3, r3, #31
 8009a46:	2201      	movs	r2, #1
 8009a48:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a1a      	ldr	r2, [r3, #32]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	43db      	mvns	r3, r3
 8009a56:	401a      	ands	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6a1a      	ldr	r2, [r3, #32]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	f003 031f 	and.w	r3, r3, #31
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	fa01 f303 	lsl.w	r3, r1, r3
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	621a      	str	r2, [r3, #32]
}
 8009a72:	bf00      	nop
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
	...

08009a80 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d109      	bne.n	8009aa4 <HAL_TIMEx_PWMN_Start+0x24>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	bf14      	ite	ne
 8009a9c:	2301      	movne	r3, #1
 8009a9e:	2300      	moveq	r3, #0
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	e022      	b.n	8009aea <HAL_TIMEx_PWMN_Start+0x6a>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d109      	bne.n	8009abe <HAL_TIMEx_PWMN_Start+0x3e>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	bf14      	ite	ne
 8009ab6:	2301      	movne	r3, #1
 8009ab8:	2300      	moveq	r3, #0
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	e015      	b.n	8009aea <HAL_TIMEx_PWMN_Start+0x6a>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b08      	cmp	r3, #8
 8009ac2:	d109      	bne.n	8009ad8 <HAL_TIMEx_PWMN_Start+0x58>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	bf14      	ite	ne
 8009ad0:	2301      	movne	r3, #1
 8009ad2:	2300      	moveq	r3, #0
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	e008      	b.n	8009aea <HAL_TIMEx_PWMN_Start+0x6a>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	bf14      	ite	ne
 8009ae4:	2301      	movne	r3, #1
 8009ae6:	2300      	moveq	r3, #0
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e073      	b.n	8009bda <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <HAL_TIMEx_PWMN_Start+0x82>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b00:	e013      	b.n	8009b2a <HAL_TIMEx_PWMN_Start+0xaa>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d104      	bne.n	8009b12 <HAL_TIMEx_PWMN_Start+0x92>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b10:	e00b      	b.n	8009b2a <HAL_TIMEx_PWMN_Start+0xaa>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d104      	bne.n	8009b22 <HAL_TIMEx_PWMN_Start+0xa2>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b20:	e003      	b.n	8009b2a <HAL_TIMEx_PWMN_Start+0xaa>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2204      	movs	r2, #4
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fa34 	bl	8009fa0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b46:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a25      	ldr	r2, [pc, #148]	@ (8009be4 <HAL_TIMEx_PWMN_Start+0x164>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d022      	beq.n	8009b98 <HAL_TIMEx_PWMN_Start+0x118>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b5a:	d01d      	beq.n	8009b98 <HAL_TIMEx_PWMN_Start+0x118>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a21      	ldr	r2, [pc, #132]	@ (8009be8 <HAL_TIMEx_PWMN_Start+0x168>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d018      	beq.n	8009b98 <HAL_TIMEx_PWMN_Start+0x118>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a20      	ldr	r2, [pc, #128]	@ (8009bec <HAL_TIMEx_PWMN_Start+0x16c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d013      	beq.n	8009b98 <HAL_TIMEx_PWMN_Start+0x118>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a1e      	ldr	r2, [pc, #120]	@ (8009bf0 <HAL_TIMEx_PWMN_Start+0x170>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d00e      	beq.n	8009b98 <HAL_TIMEx_PWMN_Start+0x118>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8009bf4 <HAL_TIMEx_PWMN_Start+0x174>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d009      	beq.n	8009b98 <HAL_TIMEx_PWMN_Start+0x118>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a1b      	ldr	r2, [pc, #108]	@ (8009bf8 <HAL_TIMEx_PWMN_Start+0x178>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d004      	beq.n	8009b98 <HAL_TIMEx_PWMN_Start+0x118>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a1a      	ldr	r2, [pc, #104]	@ (8009bfc <HAL_TIMEx_PWMN_Start+0x17c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d115      	bne.n	8009bc4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	4b18      	ldr	r3, [pc, #96]	@ (8009c00 <HAL_TIMEx_PWMN_Start+0x180>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b06      	cmp	r3, #6
 8009ba8:	d015      	beq.n	8009bd6 <HAL_TIMEx_PWMN_Start+0x156>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bb0:	d011      	beq.n	8009bd6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0201 	orr.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc2:	e008      	b.n	8009bd6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0201 	orr.w	r2, r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	e000      	b.n	8009bd8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	40012c00 	.word	0x40012c00
 8009be8:	40000400 	.word	0x40000400
 8009bec:	40000800 	.word	0x40000800
 8009bf0:	40000c00 	.word	0x40000c00
 8009bf4:	40013400 	.word	0x40013400
 8009bf8:	40014000 	.word	0x40014000
 8009bfc:	40015000 	.word	0x40015000
 8009c00:	00010007 	.word	0x00010007

08009c04 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f9c2 	bl	8009fa0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6a1a      	ldr	r2, [r3, #32]
 8009c22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009c26:	4013      	ands	r3, r2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10f      	bne.n	8009c4c <HAL_TIMEx_PWMN_Stop+0x48>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6a1a      	ldr	r2, [r3, #32]
 8009c32:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009c36:	4013      	ands	r3, r2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d107      	bne.n	8009c4c <HAL_TIMEx_PWMN_Stop+0x48>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6a1a      	ldr	r2, [r3, #32]
 8009c52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10f      	bne.n	8009c7c <HAL_TIMEx_PWMN_Stop+0x78>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6a1a      	ldr	r2, [r3, #32]
 8009c62:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009c66:	4013      	ands	r3, r2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d107      	bne.n	8009c7c <HAL_TIMEx_PWMN_Stop+0x78>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 0201 	bic.w	r2, r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d104      	bne.n	8009c8c <HAL_TIMEx_PWMN_Stop+0x88>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c8a:	e013      	b.n	8009cb4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b04      	cmp	r3, #4
 8009c90:	d104      	bne.n	8009c9c <HAL_TIMEx_PWMN_Stop+0x98>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c9a:	e00b      	b.n	8009cb4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	2b08      	cmp	r3, #8
 8009ca0:	d104      	bne.n	8009cac <HAL_TIMEx_PWMN_Stop+0xa8>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009caa:	e003      	b.n	8009cb4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d101      	bne.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	e074      	b.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a34      	ldr	r2, [pc, #208]	@ (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d009      	beq.n	8009d16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a33      	ldr	r2, [pc, #204]	@ (8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d004      	beq.n	8009d16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a31      	ldr	r2, [pc, #196]	@ (8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d108      	bne.n	8009d28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a21      	ldr	r2, [pc, #132]	@ (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d022      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d58:	d01d      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d018      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a1d      	ldr	r2, [pc, #116]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d013      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a1c      	ldr	r2, [pc, #112]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d00e      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a15      	ldr	r2, [pc, #84]	@ (8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d009      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a18      	ldr	r2, [pc, #96]	@ (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d004      	beq.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a11      	ldr	r2, [pc, #68]	@ (8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d10c      	bne.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	40012c00 	.word	0x40012c00
 8009dd4:	40013400 	.word	0x40013400
 8009dd8:	40015000 	.word	0x40015000
 8009ddc:	40000400 	.word	0x40000400
 8009de0:	40000800 	.word	0x40000800
 8009de4:	40000c00 	.word	0x40000c00
 8009de8:	40014000 	.word	0x40014000

08009dec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e078      	b.n	8009efa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	041b      	lsls	r3, r3, #16
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a1c      	ldr	r2, [pc, #112]	@ (8009f08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d009      	beq.n	8009eae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8009f0c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d004      	beq.n	8009eae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a19      	ldr	r2, [pc, #100]	@ (8009f10 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d11c      	bne.n	8009ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb8:	051b      	lsls	r3, r3, #20
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40012c00 	.word	0x40012c00
 8009f0c:	40013400 	.word	0x40013400
 8009f10:	40015000 	.word	0x40015000

08009f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f003 030f 	and.w	r3, r3, #15
 8009fb2:	2204      	movs	r2, #4
 8009fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a1a      	ldr	r2, [r3, #32]
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	43db      	mvns	r3, r3
 8009fc2:	401a      	ands	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a1a      	ldr	r2, [r3, #32]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f003 030f 	and.w	r3, r3, #15
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	621a      	str	r2, [r3, #32]
}
 8009fde:	bf00      	nop
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e042      	b.n	800a082 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7f9 fae0 	bl	80035d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2224      	movs	r2, #36	@ 0x24
 800a018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0201 	bic.w	r2, r2, #1
 800a02a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 ff1d 	bl	800ae74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fc1e 	bl	800a87c <UART_SetConfig>
 800a040:	4603      	mov	r3, r0
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e01b      	b.n	800a082 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a058:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a068:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f042 0201 	orr.w	r2, r2, #1
 800a078:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 ff9c 	bl	800afb8 <UART_CheckIdleState>
 800a080:	4603      	mov	r3, r0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b08a      	sub	sp, #40	@ 0x28
 800a08e:	af02      	add	r7, sp, #8
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	603b      	str	r3, [r7, #0]
 800a096:	4613      	mov	r3, r2
 800a098:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d17b      	bne.n	800a19c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <HAL_UART_Transmit+0x26>
 800a0aa:	88fb      	ldrh	r3, [r7, #6]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e074      	b.n	800a19e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2221      	movs	r2, #33	@ 0x21
 800a0c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0c4:	f7f9 fba4 	bl	8003810 <HAL_GetTick>
 800a0c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	88fa      	ldrh	r2, [r7, #6]
 800a0ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	88fa      	ldrh	r2, [r7, #6]
 800a0d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0e2:	d108      	bne.n	800a0f6 <HAL_UART_Transmit+0x6c>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d104      	bne.n	800a0f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	61bb      	str	r3, [r7, #24]
 800a0f4:	e003      	b.n	800a0fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a0fe:	e030      	b.n	800a162 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2200      	movs	r2, #0
 800a108:	2180      	movs	r1, #128	@ 0x80
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 fffe 	bl	800b10c <UART_WaitOnFlagUntilTimeout>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2220      	movs	r2, #32
 800a11a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e03d      	b.n	800a19e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10b      	bne.n	800a140 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	461a      	mov	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a136:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	3302      	adds	r3, #2
 800a13c:	61bb      	str	r3, [r7, #24]
 800a13e:	e007      	b.n	800a150 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	781a      	ldrb	r2, [r3, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	3301      	adds	r3, #1
 800a14e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a156:	b29b      	uxth	r3, r3
 800a158:	3b01      	subs	r3, #1
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a168:	b29b      	uxth	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1c8      	bne.n	800a100 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2200      	movs	r2, #0
 800a176:	2140      	movs	r1, #64	@ 0x40
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 ffc7 	bl	800b10c <UART_WaitOnFlagUntilTimeout>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2220      	movs	r2, #32
 800a188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e006      	b.n	800a19e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2220      	movs	r2, #32
 800a194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	e000      	b.n	800a19e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a19c:	2302      	movs	r3, #2
  }
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3720      	adds	r7, #32
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b0ba      	sub	sp, #232	@ 0xe8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a1d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a1dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d11b      	bne.n	800a21c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d015      	beq.n	800a21c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f4:	f003 0320 	and.w	r3, r3, #32
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d105      	bne.n	800a208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d009      	beq.n	800a21c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 8300 	beq.w	800a812 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	4798      	blx	r3
      }
      return;
 800a21a:	e2fa      	b.n	800a812 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a21c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 8123 	beq.w	800a46c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a22a:	4b8d      	ldr	r3, [pc, #564]	@ (800a460 <HAL_UART_IRQHandler+0x2b8>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a236:	4b8b      	ldr	r3, [pc, #556]	@ (800a464 <HAL_UART_IRQHandler+0x2bc>)
 800a238:	4013      	ands	r3, r2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f000 8116 	beq.w	800a46c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d011      	beq.n	800a270 <HAL_UART_IRQHandler+0xc8>
 800a24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00b      	beq.n	800a270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2201      	movs	r2, #1
 800a25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a266:	f043 0201 	orr.w	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a274:	f003 0302 	and.w	r3, r3, #2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d011      	beq.n	800a2a0 <HAL_UART_IRQHandler+0xf8>
 800a27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00b      	beq.n	800a2a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2202      	movs	r2, #2
 800a28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a296:	f043 0204 	orr.w	r2, r3, #4
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d011      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x128>
 800a2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2204      	movs	r2, #4
 800a2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c6:	f043 0202 	orr.w	r2, r3, #2
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d4:	f003 0308 	and.w	r3, r3, #8
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d017      	beq.n	800a30c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2e0:	f003 0320 	and.w	r3, r3, #32
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d105      	bne.n	800a2f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a2ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a460 <HAL_UART_IRQHandler+0x2b8>)
 800a2ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2208      	movs	r2, #8
 800a2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a302:	f043 0208 	orr.w	r2, r3, #8
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a314:	2b00      	cmp	r3, #0
 800a316:	d012      	beq.n	800a33e <HAL_UART_IRQHandler+0x196>
 800a318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a31c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00c      	beq.n	800a33e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a32c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a334:	f043 0220 	orr.w	r2, r3, #32
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 8266 	beq.w	800a816 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a34e:	f003 0320 	and.w	r3, r3, #32
 800a352:	2b00      	cmp	r3, #0
 800a354:	d013      	beq.n	800a37e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a35a:	f003 0320 	and.w	r3, r3, #32
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d105      	bne.n	800a36e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d007      	beq.n	800a37e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a392:	2b40      	cmp	r3, #64	@ 0x40
 800a394:	d005      	beq.n	800a3a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a39a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d054      	beq.n	800a44c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 f807 	bl	800b3b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b2:	2b40      	cmp	r3, #64	@ 0x40
 800a3b4:	d146      	bne.n	800a444 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a3cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3308      	adds	r3, #8
 800a3de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a3e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a3e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a3ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a3fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1d9      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d017      	beq.n	800a43c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a412:	4a15      	ldr	r2, [pc, #84]	@ (800a468 <HAL_UART_IRQHandler+0x2c0>)
 800a414:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fb f827 	bl	8005470 <HAL_DMA_Abort_IT>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d019      	beq.n	800a45c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a436:	4610      	mov	r0, r2
 800a438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a43a:	e00f      	b.n	800a45c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fa13 	bl	800a868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a442:	e00b      	b.n	800a45c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fa0f 	bl	800a868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a44a:	e007      	b.n	800a45c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa0b 	bl	800a868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a45a:	e1dc      	b.n	800a816 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a45c:	bf00      	nop
    return;
 800a45e:	e1da      	b.n	800a816 <HAL_UART_IRQHandler+0x66e>
 800a460:	10000001 	.word	0x10000001
 800a464:	04000120 	.word	0x04000120
 800a468:	0800b66d 	.word	0x0800b66d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a470:	2b01      	cmp	r3, #1
 800a472:	f040 8170 	bne.w	800a756 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a47a:	f003 0310 	and.w	r3, r3, #16
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 8169 	beq.w	800a756 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 8162 	beq.w	800a756 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2210      	movs	r2, #16
 800a498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4a4:	2b40      	cmp	r3, #64	@ 0x40
 800a4a6:	f040 80d8 	bne.w	800a65a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f000 80af 	beq.w	800a620 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	f080 80a7 	bcs.w	800a620 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 0320 	and.w	r3, r3, #32
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f040 8087 	bne.w	800a5fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a504:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a50c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a51a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a51e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1da      	bne.n	800a4f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3308      	adds	r3, #8
 800a540:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a54a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a54c:	f023 0301 	bic.w	r3, r3, #1
 800a550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3308      	adds	r3, #8
 800a55a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a55e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a562:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a564:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a566:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e1      	bne.n	800a53a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3308      	adds	r3, #8
 800a57c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a58c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3308      	adds	r3, #8
 800a596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a59a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a59c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a5a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a5a2:	e841 2300 	strex	r3, r2, [r1]
 800a5a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a5a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1e3      	bne.n	800a576 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5c4:	e853 3f00 	ldrex	r3, [r3]
 800a5c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5cc:	f023 0310 	bic.w	r3, r3, #16
 800a5d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a5ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e4      	bne.n	800a5bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fa fee0 	bl	80053be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2202      	movs	r2, #2
 800a602:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a610:	b29b      	uxth	r3, r3
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	b29b      	uxth	r3, r3
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7f8 fa1b 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a61e:	e0fc      	b.n	800a81a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a62a:	429a      	cmp	r2, r3
 800a62c:	f040 80f5 	bne.w	800a81a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b20      	cmp	r3, #32
 800a640:	f040 80eb 	bne.w	800a81a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2202      	movs	r2, #2
 800a648:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7f8 f9fe 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
      return;
 800a658:	e0df      	b.n	800a81a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a666:	b29b      	uxth	r3, r3
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a674:	b29b      	uxth	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	f000 80d1 	beq.w	800a81e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a67c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 80cc 	beq.w	800a81e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68e:	e853 3f00 	ldrex	r3, [r3]
 800a692:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a696:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a69a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e4      	bne.n	800a686 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c6:	e853 3f00 	ldrex	r3, [r3]
 800a6ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6d2:	f023 0301 	bic.w	r3, r3, #1
 800a6d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a6e4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e1      	bne.n	800a6bc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	60fb      	str	r3, [r7, #12]
   return(result);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f023 0310 	bic.w	r3, r3, #16
 800a720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a72e:	61fb      	str	r3, [r7, #28]
 800a730:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	69b9      	ldr	r1, [r7, #24]
 800a734:	69fa      	ldr	r2, [r7, #28]
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	617b      	str	r3, [r7, #20]
   return(result);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e4      	bne.n	800a70c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2202      	movs	r2, #2
 800a746:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7f8 f980 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a754:	e063      	b.n	800a81e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a75a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00e      	beq.n	800a780 <HAL_UART_IRQHandler+0x5d8>
 800a762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a776:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 ffb4 	bl	800b6e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a77e:	e051      	b.n	800a824 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d014      	beq.n	800a7b6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a794:	2b00      	cmp	r3, #0
 800a796:	d105      	bne.n	800a7a4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a79c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d008      	beq.n	800a7b6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d03a      	beq.n	800a822 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	4798      	blx	r3
    }
    return;
 800a7b4:	e035      	b.n	800a822 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d009      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x62e>
 800a7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 ff5e 	bl	800b690 <UART_EndTransmit_IT>
    return;
 800a7d4:	e026      	b.n	800a824 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d009      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x64e>
 800a7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 ff8d 	bl	800b70e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7f4:	e016      	b.n	800a824 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d010      	beq.n	800a824 <HAL_UART_IRQHandler+0x67c>
 800a802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a806:	2b00      	cmp	r3, #0
 800a808:	da0c      	bge.n	800a824 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 ff75 	bl	800b6fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a810:	e008      	b.n	800a824 <HAL_UART_IRQHandler+0x67c>
      return;
 800a812:	bf00      	nop
 800a814:	e006      	b.n	800a824 <HAL_UART_IRQHandler+0x67c>
    return;
 800a816:	bf00      	nop
 800a818:	e004      	b.n	800a824 <HAL_UART_IRQHandler+0x67c>
      return;
 800a81a:	bf00      	nop
 800a81c:	e002      	b.n	800a824 <HAL_UART_IRQHandler+0x67c>
      return;
 800a81e:	bf00      	nop
 800a820:	e000      	b.n	800a824 <HAL_UART_IRQHandler+0x67c>
    return;
 800a822:	bf00      	nop
  }
}
 800a824:	37e8      	adds	r7, #232	@ 0xe8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop

0800a82c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a87c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a880:	b08c      	sub	sp, #48	@ 0x30
 800a882:	af00      	add	r7, sp, #0
 800a884:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	431a      	orrs	r2, r3
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	431a      	orrs	r2, r3
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4baa      	ldr	r3, [pc, #680]	@ (800ab54 <UART_SetConfig+0x2d8>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	68da      	ldr	r2, [r3, #12]
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a9f      	ldr	r2, [pc, #636]	@ (800ab58 <UART_SetConfig+0x2dc>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d004      	beq.n	800a8e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a8f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	6812      	ldr	r2, [r2, #0]
 800a8fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a906:	f023 010f 	bic.w	r1, r3, #15
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a90      	ldr	r2, [pc, #576]	@ (800ab5c <UART_SetConfig+0x2e0>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d125      	bne.n	800a96c <UART_SetConfig+0xf0>
 800a920:	4b8f      	ldr	r3, [pc, #572]	@ (800ab60 <UART_SetConfig+0x2e4>)
 800a922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d81a      	bhi.n	800a964 <UART_SetConfig+0xe8>
 800a92e:	a201      	add	r2, pc, #4	@ (adr r2, 800a934 <UART_SetConfig+0xb8>)
 800a930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a955 	.word	0x0800a955
 800a93c:	0800a94d 	.word	0x0800a94d
 800a940:	0800a95d 	.word	0x0800a95d
 800a944:	2301      	movs	r3, #1
 800a946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a94a:	e116      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a94c:	2302      	movs	r3, #2
 800a94e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a952:	e112      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a954:	2304      	movs	r3, #4
 800a956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a95a:	e10e      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a95c:	2308      	movs	r3, #8
 800a95e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a962:	e10a      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a964:	2310      	movs	r3, #16
 800a966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a96a:	e106      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a7c      	ldr	r2, [pc, #496]	@ (800ab64 <UART_SetConfig+0x2e8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d138      	bne.n	800a9e8 <UART_SetConfig+0x16c>
 800a976:	4b7a      	ldr	r3, [pc, #488]	@ (800ab60 <UART_SetConfig+0x2e4>)
 800a978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a97c:	f003 030c 	and.w	r3, r3, #12
 800a980:	2b0c      	cmp	r3, #12
 800a982:	d82d      	bhi.n	800a9e0 <UART_SetConfig+0x164>
 800a984:	a201      	add	r2, pc, #4	@ (adr r2, 800a98c <UART_SetConfig+0x110>)
 800a986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800a9c1 	.word	0x0800a9c1
 800a990:	0800a9e1 	.word	0x0800a9e1
 800a994:	0800a9e1 	.word	0x0800a9e1
 800a998:	0800a9e1 	.word	0x0800a9e1
 800a99c:	0800a9d1 	.word	0x0800a9d1
 800a9a0:	0800a9e1 	.word	0x0800a9e1
 800a9a4:	0800a9e1 	.word	0x0800a9e1
 800a9a8:	0800a9e1 	.word	0x0800a9e1
 800a9ac:	0800a9c9 	.word	0x0800a9c9
 800a9b0:	0800a9e1 	.word	0x0800a9e1
 800a9b4:	0800a9e1 	.word	0x0800a9e1
 800a9b8:	0800a9e1 	.word	0x0800a9e1
 800a9bc:	0800a9d9 	.word	0x0800a9d9
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9c6:	e0d8      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ce:	e0d4      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9d0:	2304      	movs	r3, #4
 800a9d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9d6:	e0d0      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9d8:	2308      	movs	r3, #8
 800a9da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9de:	e0cc      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9e0:	2310      	movs	r3, #16
 800a9e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9e6:	e0c8      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a5e      	ldr	r2, [pc, #376]	@ (800ab68 <UART_SetConfig+0x2ec>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d125      	bne.n	800aa3e <UART_SetConfig+0x1c2>
 800a9f2:	4b5b      	ldr	r3, [pc, #364]	@ (800ab60 <UART_SetConfig+0x2e4>)
 800a9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a9fc:	2b30      	cmp	r3, #48	@ 0x30
 800a9fe:	d016      	beq.n	800aa2e <UART_SetConfig+0x1b2>
 800aa00:	2b30      	cmp	r3, #48	@ 0x30
 800aa02:	d818      	bhi.n	800aa36 <UART_SetConfig+0x1ba>
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d00a      	beq.n	800aa1e <UART_SetConfig+0x1a2>
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	d814      	bhi.n	800aa36 <UART_SetConfig+0x1ba>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <UART_SetConfig+0x19a>
 800aa10:	2b10      	cmp	r3, #16
 800aa12:	d008      	beq.n	800aa26 <UART_SetConfig+0x1aa>
 800aa14:	e00f      	b.n	800aa36 <UART_SetConfig+0x1ba>
 800aa16:	2300      	movs	r3, #0
 800aa18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa1c:	e0ad      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa24:	e0a9      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa26:	2304      	movs	r3, #4
 800aa28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa2c:	e0a5      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa2e:	2308      	movs	r3, #8
 800aa30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa34:	e0a1      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa36:	2310      	movs	r3, #16
 800aa38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa3c:	e09d      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a4a      	ldr	r2, [pc, #296]	@ (800ab6c <UART_SetConfig+0x2f0>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d125      	bne.n	800aa94 <UART_SetConfig+0x218>
 800aa48:	4b45      	ldr	r3, [pc, #276]	@ (800ab60 <UART_SetConfig+0x2e4>)
 800aa4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aa52:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa54:	d016      	beq.n	800aa84 <UART_SetConfig+0x208>
 800aa56:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa58:	d818      	bhi.n	800aa8c <UART_SetConfig+0x210>
 800aa5a:	2b80      	cmp	r3, #128	@ 0x80
 800aa5c:	d00a      	beq.n	800aa74 <UART_SetConfig+0x1f8>
 800aa5e:	2b80      	cmp	r3, #128	@ 0x80
 800aa60:	d814      	bhi.n	800aa8c <UART_SetConfig+0x210>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <UART_SetConfig+0x1f0>
 800aa66:	2b40      	cmp	r3, #64	@ 0x40
 800aa68:	d008      	beq.n	800aa7c <UART_SetConfig+0x200>
 800aa6a:	e00f      	b.n	800aa8c <UART_SetConfig+0x210>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa72:	e082      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa74:	2302      	movs	r3, #2
 800aa76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa7a:	e07e      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa82:	e07a      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa84:	2308      	movs	r3, #8
 800aa86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa8a:	e076      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa92:	e072      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a35      	ldr	r2, [pc, #212]	@ (800ab70 <UART_SetConfig+0x2f4>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d12a      	bne.n	800aaf4 <UART_SetConfig+0x278>
 800aa9e:	4b30      	ldr	r3, [pc, #192]	@ (800ab60 <UART_SetConfig+0x2e4>)
 800aaa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aaa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaac:	d01a      	beq.n	800aae4 <UART_SetConfig+0x268>
 800aaae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aab2:	d81b      	bhi.n	800aaec <UART_SetConfig+0x270>
 800aab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aab8:	d00c      	beq.n	800aad4 <UART_SetConfig+0x258>
 800aaba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aabe:	d815      	bhi.n	800aaec <UART_SetConfig+0x270>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <UART_SetConfig+0x250>
 800aac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aac8:	d008      	beq.n	800aadc <UART_SetConfig+0x260>
 800aaca:	e00f      	b.n	800aaec <UART_SetConfig+0x270>
 800aacc:	2300      	movs	r3, #0
 800aace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aad2:	e052      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aad4:	2302      	movs	r3, #2
 800aad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aada:	e04e      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aadc:	2304      	movs	r3, #4
 800aade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aae2:	e04a      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aae4:	2308      	movs	r3, #8
 800aae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaea:	e046      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aaec:	2310      	movs	r3, #16
 800aaee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaf2:	e042      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a17      	ldr	r2, [pc, #92]	@ (800ab58 <UART_SetConfig+0x2dc>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d13a      	bne.n	800ab74 <UART_SetConfig+0x2f8>
 800aafe:	4b18      	ldr	r3, [pc, #96]	@ (800ab60 <UART_SetConfig+0x2e4>)
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab0c:	d01a      	beq.n	800ab44 <UART_SetConfig+0x2c8>
 800ab0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab12:	d81b      	bhi.n	800ab4c <UART_SetConfig+0x2d0>
 800ab14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab18:	d00c      	beq.n	800ab34 <UART_SetConfig+0x2b8>
 800ab1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab1e:	d815      	bhi.n	800ab4c <UART_SetConfig+0x2d0>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <UART_SetConfig+0x2b0>
 800ab24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab28:	d008      	beq.n	800ab3c <UART_SetConfig+0x2c0>
 800ab2a:	e00f      	b.n	800ab4c <UART_SetConfig+0x2d0>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab32:	e022      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab34:	2302      	movs	r3, #2
 800ab36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab3a:	e01e      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab3c:	2304      	movs	r3, #4
 800ab3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab42:	e01a      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab44:	2308      	movs	r3, #8
 800ab46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab4a:	e016      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab4c:	2310      	movs	r3, #16
 800ab4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab52:	e012      	b.n	800ab7a <UART_SetConfig+0x2fe>
 800ab54:	cfff69f3 	.word	0xcfff69f3
 800ab58:	40008000 	.word	0x40008000
 800ab5c:	40013800 	.word	0x40013800
 800ab60:	40021000 	.word	0x40021000
 800ab64:	40004400 	.word	0x40004400
 800ab68:	40004800 	.word	0x40004800
 800ab6c:	40004c00 	.word	0x40004c00
 800ab70:	40005000 	.word	0x40005000
 800ab74:	2310      	movs	r3, #16
 800ab76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4aae      	ldr	r2, [pc, #696]	@ (800ae38 <UART_SetConfig+0x5bc>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	f040 8097 	bne.w	800acb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab8a:	2b08      	cmp	r3, #8
 800ab8c:	d823      	bhi.n	800abd6 <UART_SetConfig+0x35a>
 800ab8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab94 <UART_SetConfig+0x318>)
 800ab90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab94:	0800abb9 	.word	0x0800abb9
 800ab98:	0800abd7 	.word	0x0800abd7
 800ab9c:	0800abc1 	.word	0x0800abc1
 800aba0:	0800abd7 	.word	0x0800abd7
 800aba4:	0800abc7 	.word	0x0800abc7
 800aba8:	0800abd7 	.word	0x0800abd7
 800abac:	0800abd7 	.word	0x0800abd7
 800abb0:	0800abd7 	.word	0x0800abd7
 800abb4:	0800abcf 	.word	0x0800abcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abb8:	f7fc f89c 	bl	8006cf4 <HAL_RCC_GetPCLK1Freq>
 800abbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abbe:	e010      	b.n	800abe2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abc0:	4b9e      	ldr	r3, [pc, #632]	@ (800ae3c <UART_SetConfig+0x5c0>)
 800abc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abc4:	e00d      	b.n	800abe2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abc6:	f7fc f829 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 800abca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800abcc:	e009      	b.n	800abe2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800abd4:	e005      	b.n	800abe2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800abe0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 8130 	beq.w	800ae4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abee:	4a94      	ldr	r2, [pc, #592]	@ (800ae40 <UART_SetConfig+0x5c4>)
 800abf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abf4:	461a      	mov	r2, r3
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	4413      	add	r3, r2
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d305      	bcc.n	800ac1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d903      	bls.n	800ac22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ac20:	e113      	b.n	800ae4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac24:	2200      	movs	r2, #0
 800ac26:	60bb      	str	r3, [r7, #8]
 800ac28:	60fa      	str	r2, [r7, #12]
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2e:	4a84      	ldr	r2, [pc, #528]	@ (800ae40 <UART_SetConfig+0x5c4>)
 800ac30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	2200      	movs	r2, #0
 800ac38:	603b      	str	r3, [r7, #0]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac44:	f7f5 fb38 	bl	80002b8 <__aeabi_uldivmod>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	020b      	lsls	r3, r1, #8
 800ac5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac5e:	0202      	lsls	r2, r0, #8
 800ac60:	6979      	ldr	r1, [r7, #20]
 800ac62:	6849      	ldr	r1, [r1, #4]
 800ac64:	0849      	lsrs	r1, r1, #1
 800ac66:	2000      	movs	r0, #0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	eb12 0804 	adds.w	r8, r2, r4
 800ac70:	eb43 0905 	adc.w	r9, r3, r5
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	469a      	mov	sl, r3
 800ac7c:	4693      	mov	fp, r2
 800ac7e:	4652      	mov	r2, sl
 800ac80:	465b      	mov	r3, fp
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 fb17 	bl	80002b8 <__aeabi_uldivmod>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4613      	mov	r3, r2
 800ac90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac98:	d308      	bcc.n	800acac <UART_SetConfig+0x430>
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aca0:	d204      	bcs.n	800acac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6a3a      	ldr	r2, [r7, #32]
 800aca8:	60da      	str	r2, [r3, #12]
 800acaa:	e0ce      	b.n	800ae4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800acb2:	e0ca      	b.n	800ae4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acbc:	d166      	bne.n	800ad8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800acbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acc2:	2b08      	cmp	r3, #8
 800acc4:	d827      	bhi.n	800ad16 <UART_SetConfig+0x49a>
 800acc6:	a201      	add	r2, pc, #4	@ (adr r2, 800accc <UART_SetConfig+0x450>)
 800acc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800accc:	0800acf1 	.word	0x0800acf1
 800acd0:	0800acf9 	.word	0x0800acf9
 800acd4:	0800ad01 	.word	0x0800ad01
 800acd8:	0800ad17 	.word	0x0800ad17
 800acdc:	0800ad07 	.word	0x0800ad07
 800ace0:	0800ad17 	.word	0x0800ad17
 800ace4:	0800ad17 	.word	0x0800ad17
 800ace8:	0800ad17 	.word	0x0800ad17
 800acec:	0800ad0f 	.word	0x0800ad0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acf0:	f7fc f800 	bl	8006cf4 <HAL_RCC_GetPCLK1Freq>
 800acf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acf6:	e014      	b.n	800ad22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acf8:	f7fc f812 	bl	8006d20 <HAL_RCC_GetPCLK2Freq>
 800acfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acfe:	e010      	b.n	800ad22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad00:	4b4e      	ldr	r3, [pc, #312]	@ (800ae3c <UART_SetConfig+0x5c0>)
 800ad02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad04:	e00d      	b.n	800ad22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad06:	f7fb ff89 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 800ad0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad0c:	e009      	b.n	800ad22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad14:	e005      	b.n	800ad22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 8090 	beq.w	800ae4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad2e:	4a44      	ldr	r2, [pc, #272]	@ (800ae40 <UART_SetConfig+0x5c4>)
 800ad30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad34:	461a      	mov	r2, r3
 800ad36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad3c:	005a      	lsls	r2, r3, #1
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	085b      	lsrs	r3, r3, #1
 800ad44:	441a      	add	r2, r3
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	2b0f      	cmp	r3, #15
 800ad54:	d916      	bls.n	800ad84 <UART_SetConfig+0x508>
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad5c:	d212      	bcs.n	800ad84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	f023 030f 	bic.w	r3, r3, #15
 800ad66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	085b      	lsrs	r3, r3, #1
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	f003 0307 	and.w	r3, r3, #7
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	8bfb      	ldrh	r3, [r7, #30]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	8bfa      	ldrh	r2, [r7, #30]
 800ad80:	60da      	str	r2, [r3, #12]
 800ad82:	e062      	b.n	800ae4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad8a:	e05e      	b.n	800ae4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad90:	2b08      	cmp	r3, #8
 800ad92:	d828      	bhi.n	800ade6 <UART_SetConfig+0x56a>
 800ad94:	a201      	add	r2, pc, #4	@ (adr r2, 800ad9c <UART_SetConfig+0x520>)
 800ad96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9a:	bf00      	nop
 800ad9c:	0800adc1 	.word	0x0800adc1
 800ada0:	0800adc9 	.word	0x0800adc9
 800ada4:	0800add1 	.word	0x0800add1
 800ada8:	0800ade7 	.word	0x0800ade7
 800adac:	0800add7 	.word	0x0800add7
 800adb0:	0800ade7 	.word	0x0800ade7
 800adb4:	0800ade7 	.word	0x0800ade7
 800adb8:	0800ade7 	.word	0x0800ade7
 800adbc:	0800addf 	.word	0x0800addf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adc0:	f7fb ff98 	bl	8006cf4 <HAL_RCC_GetPCLK1Freq>
 800adc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adc6:	e014      	b.n	800adf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adc8:	f7fb ffaa 	bl	8006d20 <HAL_RCC_GetPCLK2Freq>
 800adcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adce:	e010      	b.n	800adf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800add0:	4b1a      	ldr	r3, [pc, #104]	@ (800ae3c <UART_SetConfig+0x5c0>)
 800add2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800add4:	e00d      	b.n	800adf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800add6:	f7fb ff21 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 800adda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800addc:	e009      	b.n	800adf2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ade2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ade4:	e005      	b.n	800adf2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adf0:	bf00      	nop
    }

    if (pclk != 0U)
 800adf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d028      	beq.n	800ae4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adfc:	4a10      	ldr	r2, [pc, #64]	@ (800ae40 <UART_SetConfig+0x5c4>)
 800adfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae02:	461a      	mov	r2, r3
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	085b      	lsrs	r3, r3, #1
 800ae10:	441a      	add	r2, r3
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	2b0f      	cmp	r3, #15
 800ae20:	d910      	bls.n	800ae44 <UART_SetConfig+0x5c8>
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae28:	d20c      	bcs.n	800ae44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	60da      	str	r2, [r3, #12]
 800ae34:	e009      	b.n	800ae4a <UART_SetConfig+0x5ce>
 800ae36:	bf00      	nop
 800ae38:	40008000 	.word	0x40008000
 800ae3c:	00f42400 	.word	0x00f42400
 800ae40:	0800ba74 	.word	0x0800ba74
      }
      else
      {
        ret = HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2200      	movs	r2, #0
 800ae64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ae66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3730      	adds	r7, #48	@ 0x30
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ae74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00a      	beq.n	800ae9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea2:	f003 0301 	and.w	r3, r3, #1
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec4:	f003 0302 	and.w	r3, r3, #2
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee6:	f003 0304 	and.w	r3, r3, #4
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	430a      	orrs	r2, r1
 800af02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	430a      	orrs	r2, r1
 800af24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00a      	beq.n	800af48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01a      	beq.n	800af8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	430a      	orrs	r2, r1
 800af68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af72:	d10a      	bne.n	800af8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	605a      	str	r2, [r3, #4]
  }
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b098      	sub	sp, #96	@ 0x60
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afc8:	f7f8 fc22 	bl	8003810 <HAL_GetTick>
 800afcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d12f      	bne.n	800b03c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afe4:	2200      	movs	r2, #0
 800afe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f88e 	bl	800b10c <UART_WaitOnFlagUntilTimeout>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d022      	beq.n	800b03c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affe:	e853 3f00 	ldrex	r3, [r3]
 800b002:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b00a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b014:	647b      	str	r3, [r7, #68]	@ 0x44
 800b016:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b018:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b01a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b01c:	e841 2300 	strex	r3, r2, [r1]
 800b020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1e6      	bne.n	800aff6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2220      	movs	r2, #32
 800b02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b038:	2303      	movs	r3, #3
 800b03a:	e063      	b.n	800b104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0304 	and.w	r3, r3, #4
 800b046:	2b04      	cmp	r3, #4
 800b048:	d149      	bne.n	800b0de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b04a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b052:	2200      	movs	r2, #0
 800b054:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f857 	bl	800b10c <UART_WaitOnFlagUntilTimeout>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d03c      	beq.n	800b0de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	623b      	str	r3, [r7, #32]
   return(result);
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b082:	633b      	str	r3, [r7, #48]	@ 0x30
 800b084:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e6      	bne.n	800b064 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3308      	adds	r3, #8
 800b09c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f023 0301 	bic.w	r3, r3, #1
 800b0ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0b6:	61fa      	str	r2, [r7, #28]
 800b0b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ba:	69b9      	ldr	r1, [r7, #24]
 800b0bc:	69fa      	ldr	r2, [r7, #28]
 800b0be:	e841 2300 	strex	r3, r2, [r1]
 800b0c2:	617b      	str	r3, [r7, #20]
   return(result);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1e5      	bne.n	800b096 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e012      	b.n	800b104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3758      	adds	r7, #88	@ 0x58
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	603b      	str	r3, [r7, #0]
 800b118:	4613      	mov	r3, r2
 800b11a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b11c:	e04f      	b.n	800b1be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b124:	d04b      	beq.n	800b1be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b126:	f7f8 fb73 	bl	8003810 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	429a      	cmp	r2, r3
 800b134:	d302      	bcc.n	800b13c <UART_WaitOnFlagUntilTimeout+0x30>
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e04e      	b.n	800b1de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0304 	and.w	r3, r3, #4
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d037      	beq.n	800b1be <UART_WaitOnFlagUntilTimeout+0xb2>
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b80      	cmp	r3, #128	@ 0x80
 800b152:	d034      	beq.n	800b1be <UART_WaitOnFlagUntilTimeout+0xb2>
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b40      	cmp	r3, #64	@ 0x40
 800b158:	d031      	beq.n	800b1be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	f003 0308 	and.w	r3, r3, #8
 800b164:	2b08      	cmp	r3, #8
 800b166:	d110      	bne.n	800b18a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2208      	movs	r2, #8
 800b16e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f000 f920 	bl	800b3b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2208      	movs	r2, #8
 800b17a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e029      	b.n	800b1de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b198:	d111      	bne.n	800b1be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f000 f906 	bl	800b3b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e00f      	b.n	800b1de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	69da      	ldr	r2, [r3, #28]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	bf0c      	ite	eq
 800b1ce:	2301      	moveq	r3, #1
 800b1d0:	2300      	movne	r3, #0
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d0a0      	beq.n	800b11e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b096      	sub	sp, #88	@ 0x58
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	88fa      	ldrh	r2, [r7, #6]
 800b200:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2222      	movs	r2, #34	@ 0x22
 800b210:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d02d      	beq.n	800b27a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b224:	4a40      	ldr	r2, [pc, #256]	@ (800b328 <UART_Start_Receive_DMA+0x140>)
 800b226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b22e:	4a3f      	ldr	r2, [pc, #252]	@ (800b32c <UART_Start_Receive_DMA+0x144>)
 800b230:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b238:	4a3d      	ldr	r2, [pc, #244]	@ (800b330 <UART_Start_Receive_DMA+0x148>)
 800b23a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b242:	2200      	movs	r2, #0
 800b244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3324      	adds	r3, #36	@ 0x24
 800b252:	4619      	mov	r1, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b258:	461a      	mov	r2, r3
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	f7fa f834 	bl	80052c8 <HAL_DMA_Start_IT>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d009      	beq.n	800b27a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2210      	movs	r2, #16
 800b26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2220      	movs	r2, #32
 800b272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e051      	b.n	800b31e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d018      	beq.n	800b2b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b28a:	e853 3f00 	ldrex	r3, [r3]
 800b28e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b296:	657b      	str	r3, [r7, #84]	@ 0x54
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	461a      	mov	r2, r3
 800b29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b2a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e6      	bne.n	800b282 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2be:	e853 3f00 	ldrex	r3, [r3]
 800b2c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c6:	f043 0301 	orr.w	r3, r3, #1
 800b2ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2d4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b2d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2dc:	e841 2300 	strex	r3, r2, [r1]
 800b2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1e5      	bne.n	800b2b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3308      	adds	r3, #8
 800b2ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	e853 3f00 	ldrex	r3, [r3]
 800b2f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3308      	adds	r3, #8
 800b306:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b308:	623a      	str	r2, [r7, #32]
 800b30a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30c:	69f9      	ldr	r1, [r7, #28]
 800b30e:	6a3a      	ldr	r2, [r7, #32]
 800b310:	e841 2300 	strex	r3, r2, [r1]
 800b314:	61bb      	str	r3, [r7, #24]
   return(result);
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1e5      	bne.n	800b2e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3758      	adds	r7, #88	@ 0x58
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	0800b483 	.word	0x0800b483
 800b32c:	0800b5af 	.word	0x0800b5af
 800b330:	0800b5ed 	.word	0x0800b5ed

0800b334 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b334:	b480      	push	{r7}
 800b336:	b08f      	sub	sp, #60	@ 0x3c
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	61fb      	str	r3, [r7, #28]
   return(result);
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b350:	637b      	str	r3, [r7, #52]	@ 0x34
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b35c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b362:	e841 2300 	strex	r3, r2, [r1]
 800b366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1e6      	bne.n	800b33c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	3308      	adds	r3, #8
 800b374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b384:	633b      	str	r3, [r7, #48]	@ 0x30
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3308      	adds	r3, #8
 800b38c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b38e:	61ba      	str	r2, [r7, #24]
 800b390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b392:	6979      	ldr	r1, [r7, #20]
 800b394:	69ba      	ldr	r2, [r7, #24]
 800b396:	e841 2300 	strex	r3, r2, [r1]
 800b39a:	613b      	str	r3, [r7, #16]
   return(result);
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1e5      	bne.n	800b36e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2220      	movs	r2, #32
 800b3a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b3aa:	bf00      	nop
 800b3ac:	373c      	adds	r7, #60	@ 0x3c
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b095      	sub	sp, #84	@ 0x54
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3e4:	e841 2300 	strex	r3, r2, [r1]
 800b3e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e6      	bne.n	800b3be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	e853 3f00 	ldrex	r3, [r3]
 800b3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b406:	f023 0301 	bic.w	r3, r3, #1
 800b40a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3308      	adds	r3, #8
 800b412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b41a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e3      	bne.n	800b3f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d118      	bne.n	800b462 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	e853 3f00 	ldrex	r3, [r3]
 800b43c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	f023 0310 	bic.w	r3, r3, #16
 800b444:	647b      	str	r3, [r7, #68]	@ 0x44
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b44e:	61bb      	str	r3, [r7, #24]
 800b450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b452:	6979      	ldr	r1, [r7, #20]
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	e841 2300 	strex	r3, r2, [r1]
 800b45a:	613b      	str	r3, [r7, #16]
   return(result);
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1e6      	bne.n	800b430 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2220      	movs	r2, #32
 800b466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b476:	bf00      	nop
 800b478:	3754      	adds	r7, #84	@ 0x54
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b09c      	sub	sp, #112	@ 0x70
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b48e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0320 	and.w	r3, r3, #32
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d171      	bne.n	800b582 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b49e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b4b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b4d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e6      	bne.n	800b4a6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3308      	adds	r3, #8
 800b4de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e2:	e853 3f00 	ldrex	r3, [r3]
 800b4e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ea:	f023 0301 	bic.w	r3, r3, #1
 800b4ee:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b4f8:	647a      	str	r2, [r7, #68]	@ 0x44
 800b4fa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b500:	e841 2300 	strex	r3, r2, [r1]
 800b504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e5      	bne.n	800b4d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b50c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	3308      	adds	r3, #8
 800b512:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b516:	e853 3f00 	ldrex	r3, [r3]
 800b51a:	623b      	str	r3, [r7, #32]
   return(result);
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b522:	663b      	str	r3, [r7, #96]	@ 0x60
 800b524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3308      	adds	r3, #8
 800b52a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b52c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b52e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b530:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b534:	e841 2300 	strex	r3, r2, [r1]
 800b538:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1e5      	bne.n	800b50c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b542:	2220      	movs	r2, #32
 800b544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b54a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d118      	bne.n	800b582 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	e853 3f00 	ldrex	r3, [r3]
 800b55c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f023 0310 	bic.w	r3, r3, #16
 800b564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	461a      	mov	r2, r3
 800b56c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b56e:	61fb      	str	r3, [r7, #28]
 800b570:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b572:	69b9      	ldr	r1, [r7, #24]
 800b574:	69fa      	ldr	r2, [r7, #28]
 800b576:	e841 2300 	strex	r3, r2, [r1]
 800b57a:	617b      	str	r3, [r7, #20]
   return(result);
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1e6      	bne.n	800b550 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b584:	2200      	movs	r2, #0
 800b586:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b58a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d107      	bne.n	800b5a0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b592:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b596:	4619      	mov	r1, r3
 800b598:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b59a:	f7f7 fa5b 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b59e:	e002      	b.n	800b5a6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b5a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5a2:	f7ff f94d 	bl	800a840 <HAL_UART_RxCpltCallback>
}
 800b5a6:	bf00      	nop
 800b5a8:	3770      	adds	r7, #112	@ 0x70
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d109      	bne.n	800b5de <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5d0:	085b      	lsrs	r3, r3, #1
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7f7 fa3c 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5dc:	e002      	b.n	800b5e4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f7ff f938 	bl	800a854 <HAL_UART_RxHalfCpltCallback>
}
 800b5e4:	bf00      	nop
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b600:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b608:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b614:	2b80      	cmp	r3, #128	@ 0x80
 800b616:	d109      	bne.n	800b62c <UART_DMAError+0x40>
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	2b21      	cmp	r3, #33	@ 0x21
 800b61c:	d106      	bne.n	800b62c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2200      	movs	r2, #0
 800b622:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b626:	6978      	ldr	r0, [r7, #20]
 800b628:	f7ff fe84 	bl	800b334 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b636:	2b40      	cmp	r3, #64	@ 0x40
 800b638:	d109      	bne.n	800b64e <UART_DMAError+0x62>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b22      	cmp	r3, #34	@ 0x22
 800b63e:	d106      	bne.n	800b64e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2200      	movs	r2, #0
 800b644:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b648:	6978      	ldr	r0, [r7, #20]
 800b64a:	f7ff feb4 	bl	800b3b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b654:	f043 0210 	orr.w	r2, r3, #16
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b65e:	6978      	ldr	r0, [r7, #20]
 800b660:	f7ff f902 	bl	800a868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b664:	bf00      	nop
 800b666:	3718      	adds	r7, #24
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b678:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f7ff f8f0 	bl	800a868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b688:	bf00      	nop
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b088      	sub	sp, #32
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	e853 3f00 	ldrex	r3, [r3]
 800b6a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	61bb      	str	r3, [r7, #24]
 800b6b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ba:	6979      	ldr	r1, [r7, #20]
 800b6bc:	69ba      	ldr	r2, [r7, #24]
 800b6be:	e841 2300 	strex	r3, r2, [r1]
 800b6c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1e6      	bne.n	800b698 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7ff f8a7 	bl	800a82c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6de:	bf00      	nop
 800b6e0:	3720      	adds	r7, #32
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b6ee:	bf00      	nop
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b083      	sub	sp, #12
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b702:	bf00      	nop
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b716:	bf00      	nop
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b722:	b480      	push	{r7}
 800b724:	b085      	sub	sp, #20
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b730:	2b01      	cmp	r3, #1
 800b732:	d101      	bne.n	800b738 <HAL_UARTEx_DisableFifoMode+0x16>
 800b734:	2302      	movs	r3, #2
 800b736:	e027      	b.n	800b788 <HAL_UARTEx_DisableFifoMode+0x66>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2224      	movs	r2, #36	@ 0x24
 800b744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f022 0201 	bic.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b766:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2220      	movs	r2, #32
 800b77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d101      	bne.n	800b7ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e02d      	b.n	800b808 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2224      	movs	r2, #36	@ 0x24
 800b7b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f022 0201 	bic.w	r2, r2, #1
 800b7d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	430a      	orrs	r2, r1
 800b7e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f8a3 	bl	800b934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2220      	movs	r2, #32
 800b7fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b820:	2b01      	cmp	r3, #1
 800b822:	d101      	bne.n	800b828 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b824:	2302      	movs	r3, #2
 800b826:	e02d      	b.n	800b884 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2224      	movs	r2, #36	@ 0x24
 800b834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f022 0201 	bic.w	r2, r2, #1
 800b84e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f865 	bl	800b934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2220      	movs	r2, #32
 800b876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08c      	sub	sp, #48	@ 0x30
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	4613      	mov	r3, r2
 800b898:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8a0:	2b20      	cmp	r3, #32
 800b8a2:	d142      	bne.n	800b92a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b8aa:	88fb      	ldrh	r3, [r7, #6]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e03b      	b.n	800b92c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b8c0:	88fb      	ldrh	r3, [r7, #6]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	68b9      	ldr	r1, [r7, #8]
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f7ff fc8e 	bl	800b1e8 <UART_Start_Receive_DMA>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d124      	bne.n	800b924 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d11d      	bne.n	800b91e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2210      	movs	r2, #16
 800b8e8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	617b      	str	r3, [r7, #20]
   return(result);
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f043 0310 	orr.w	r3, r3, #16
 800b8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b908:	627b      	str	r3, [r7, #36]	@ 0x24
 800b90a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90c:	6a39      	ldr	r1, [r7, #32]
 800b90e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b910:	e841 2300 	strex	r3, r2, [r1]
 800b914:	61fb      	str	r3, [r7, #28]
   return(result);
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1e6      	bne.n	800b8ea <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b91c:	e002      	b.n	800b924 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b924:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b928:	e000      	b.n	800b92c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b92a:	2302      	movs	r3, #2
  }
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3730      	adds	r7, #48	@ 0x30
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b940:	2b00      	cmp	r3, #0
 800b942:	d108      	bne.n	800b956 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b954:	e031      	b.n	800b9ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b956:	2308      	movs	r3, #8
 800b958:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b95a:	2308      	movs	r3, #8
 800b95c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	0e5b      	lsrs	r3, r3, #25
 800b966:	b2db      	uxtb	r3, r3
 800b968:	f003 0307 	and.w	r3, r3, #7
 800b96c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	0f5b      	lsrs	r3, r3, #29
 800b976:	b2db      	uxtb	r3, r3
 800b978:	f003 0307 	and.w	r3, r3, #7
 800b97c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b97e:	7bbb      	ldrb	r3, [r7, #14]
 800b980:	7b3a      	ldrb	r2, [r7, #12]
 800b982:	4911      	ldr	r1, [pc, #68]	@ (800b9c8 <UARTEx_SetNbDataToProcess+0x94>)
 800b984:	5c8a      	ldrb	r2, [r1, r2]
 800b986:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b98a:	7b3a      	ldrb	r2, [r7, #12]
 800b98c:	490f      	ldr	r1, [pc, #60]	@ (800b9cc <UARTEx_SetNbDataToProcess+0x98>)
 800b98e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b990:	fb93 f3f2 	sdiv	r3, r3, r2
 800b994:	b29a      	uxth	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	7b7a      	ldrb	r2, [r7, #13]
 800b9a0:	4909      	ldr	r1, [pc, #36]	@ (800b9c8 <UARTEx_SetNbDataToProcess+0x94>)
 800b9a2:	5c8a      	ldrb	r2, [r1, r2]
 800b9a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9a8:	7b7a      	ldrb	r2, [r7, #13]
 800b9aa:	4908      	ldr	r1, [pc, #32]	@ (800b9cc <UARTEx_SetNbDataToProcess+0x98>)
 800b9ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b9ba:	bf00      	nop
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	0800ba8c 	.word	0x0800ba8c
 800b9cc:	0800ba94 	.word	0x0800ba94

0800b9d0 <memset>:
 800b9d0:	4402      	add	r2, r0
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d100      	bne.n	800b9da <memset+0xa>
 800b9d8:	4770      	bx	lr
 800b9da:	f803 1b01 	strb.w	r1, [r3], #1
 800b9de:	e7f9      	b.n	800b9d4 <memset+0x4>

0800b9e0 <__libc_init_array>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	4d0d      	ldr	r5, [pc, #52]	@ (800ba18 <__libc_init_array+0x38>)
 800b9e4:	4c0d      	ldr	r4, [pc, #52]	@ (800ba1c <__libc_init_array+0x3c>)
 800b9e6:	1b64      	subs	r4, r4, r5
 800b9e8:	10a4      	asrs	r4, r4, #2
 800b9ea:	2600      	movs	r6, #0
 800b9ec:	42a6      	cmp	r6, r4
 800b9ee:	d109      	bne.n	800ba04 <__libc_init_array+0x24>
 800b9f0:	4d0b      	ldr	r5, [pc, #44]	@ (800ba20 <__libc_init_array+0x40>)
 800b9f2:	4c0c      	ldr	r4, [pc, #48]	@ (800ba24 <__libc_init_array+0x44>)
 800b9f4:	f000 f826 	bl	800ba44 <_init>
 800b9f8:	1b64      	subs	r4, r4, r5
 800b9fa:	10a4      	asrs	r4, r4, #2
 800b9fc:	2600      	movs	r6, #0
 800b9fe:	42a6      	cmp	r6, r4
 800ba00:	d105      	bne.n	800ba0e <__libc_init_array+0x2e>
 800ba02:	bd70      	pop	{r4, r5, r6, pc}
 800ba04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba08:	4798      	blx	r3
 800ba0a:	3601      	adds	r6, #1
 800ba0c:	e7ee      	b.n	800b9ec <__libc_init_array+0xc>
 800ba0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba12:	4798      	blx	r3
 800ba14:	3601      	adds	r6, #1
 800ba16:	e7f2      	b.n	800b9fe <__libc_init_array+0x1e>
 800ba18:	0800baa4 	.word	0x0800baa4
 800ba1c:	0800baa4 	.word	0x0800baa4
 800ba20:	0800baa4 	.word	0x0800baa4
 800ba24:	0800baa8 	.word	0x0800baa8

0800ba28 <memcpy>:
 800ba28:	440a      	add	r2, r1
 800ba2a:	4291      	cmp	r1, r2
 800ba2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba30:	d100      	bne.n	800ba34 <memcpy+0xc>
 800ba32:	4770      	bx	lr
 800ba34:	b510      	push	{r4, lr}
 800ba36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba3e:	4291      	cmp	r1, r2
 800ba40:	d1f9      	bne.n	800ba36 <memcpy+0xe>
 800ba42:	bd10      	pop	{r4, pc}

0800ba44 <_init>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	bf00      	nop
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr

0800ba50 <_fini>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	bf00      	nop
 800ba54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba56:	bc08      	pop	{r3}
 800ba58:	469e      	mov	lr, r3
 800ba5a:	4770      	bx	lr
